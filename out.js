var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/uuid/dist/esm-node/rng.js
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-node/rng.js"() {
    import_crypto = __toESM(require("crypto"));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

// node_modules/uuid/dist/esm-node/stringify.js
function stringify(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

// node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/uuid/dist/esm-node/md5.js
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto2.default.createHash("md5").update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  "node_modules/uuid/dist/esm-node/md5.js"() {
    import_crypto2 = __toESM(require("crypto"));
    md5_default = md5;
  }
});

// node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-node/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/uuid/dist/esm-node/sha1.js
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto3.default.createHash("sha1").update(bytes).digest();
}
var import_crypto3, sha1_default;
var init_sha1 = __esm({
  "node_modules/uuid/dist/esm-node/sha1.js"() {
    import_crypto3 = __toESM(require("crypto"));
    sha1_default = sha1;
  }
});

// node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

// node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/statsig-node/package.json
var require_package = __commonJS({
  "node_modules/statsig-node/package.json"(exports, module2) {
    module2.exports = {
      name: "statsig-node",
      version: "5.4.0-beta.8",
      description: "Statsig Node.js SDK for usage in multi-user server environments.",
      main: "dist/index.js",
      scripts: {
        prepare: "rm -rf dist/ && tsc",
        test: "npm run prepare && jest",
        docs: "jsdoc2md src/index.js src/typedefs.js src/DynamicConfig.js > docs/generated.md"
      },
      keywords: [
        "feature gate",
        "feature flag",
        "continuous deployment",
        "ci",
        "ab test"
      ],
      repository: {
        type: "git",
        url: "git+https://github.com/statsig-io/node-js-server-sdk.git"
      },
      author: "Statsig, Inc.",
      license: "ISC",
      bugs: {
        url: "https://github.com/statsig-io/node-js-server-sdk/issues"
      },
      homepage: "https://www.statsig.com",
      dependencies: {
        "@types/node-fetch": "^2.6.2",
        ip3country: "^5.0.0",
        "node-fetch": "^2.6.7",
        "node-forge": "^1.3.1",
        "ua-parser-js": "^1.0.2",
        uuid: "^8.3.2",
        "whatwg-fetch": "^3.6.2"
      },
      devDependencies: {
        "@babel/core": "^7.18.13",
        "@babel/preset-env": "^7.18.10",
        "@babel/preset-typescript": "^7.18.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^14.18.26",
        "@types/node-forge": "^1.3.1",
        "@types/ua-parser-js": "^0.7.36",
        "@types/useragent": "^2.3.1",
        "@types/uuid": "^8.3.4",
        "@types/whatwg-fetch": "^0.0.33",
        "babel-jest": "^26.6.3",
        jest: "^26.6.3",
        "jsdoc-to-markdown": "^7.1.1",
        typescript: "^4.7.4"
      },
      importSort: {
        ".js, .jsx, .ts, .tsx": {
          style: "module",
          parser: "typescript"
        }
      }
    };
  }
});

// node_modules/statsig-node/dist/utils/core.js
var require_core = __commonJS({
  "node_modules/statsig-node/dist/utils/core.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    exports.__esModule = true;
    exports.getTypeOf = exports.poll = exports.notEmpty = exports.isUserIdentifiable = exports.getStatsigMetadata = exports.getSDKType = exports.getSDKVersion = exports.getNumericValue = exports.getBoolValue = exports.generateID = exports.clone = void 0;
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    function getSDKVersion() {
      var _a, _b;
      try {
        return (_b = (_a = require_package()) === null || _a === void 0 ? void 0 : _a.version) !== null && _b !== void 0 ? _b : "";
      } catch (err) {
        return "";
      }
    }
    exports.getSDKVersion = getSDKVersion;
    function getSDKType() {
      var _a, _b;
      try {
        return (_b = (_a = require_package()) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : "statsig-node";
      } catch (err) {
        return "statsig-node";
      }
    }
    exports.getSDKType = getSDKType;
    function notEmpty(value) {
      return value !== null && value !== void 0;
    }
    exports.notEmpty = notEmpty;
    function generateID() {
      return (0, uuid_1.v4)();
    }
    exports.generateID = generateID;
    function clone2(obj) {
      if (obj == null) {
        return null;
      }
      return JSON.parse(JSON.stringify(obj));
    }
    exports.clone = clone2;
    function getNumericValue(num) {
      if (num == null) {
        return null;
      }
      var n = Number(num);
      if (typeof n === "number" && !isNaN(n) && isFinite(n) && num != null) {
        return n;
      }
      return null;
    }
    exports.getNumericValue = getNumericValue;
    function getBoolValue(val) {
      if (val == null) {
        return null;
      } else if (String(val).toLowerCase() === "true") {
        return true;
      } else if (String(val).toLowerCase() === "false") {
        return false;
      }
      return null;
    }
    exports.getBoolValue = getBoolValue;
    function getStatsigMetadata(extra) {
      if (extra === void 0) {
        extra = {};
      }
      return __assign({ sdkType: getSDKType(), sdkVersion: getSDKVersion(), languageVersion: typeof process !== "undefined" && process && process.version && process.version.length > 1 && process.version.substring(1) || "" }, extra);
    }
    exports.getStatsigMetadata = getStatsigMetadata;
    function isUserIdentifiable(user) {
      if (user == null)
        return false;
      if (typeof user !== "object")
        return false;
      var userID = user.userID;
      var customIDs = user.customIDs;
      return typeof userID === "number" || typeof userID === "string" || customIDs != null && typeof customIDs === "object" && Object.keys(customIDs).length !== 0;
    }
    exports.isUserIdentifiable = isUserIdentifiable;
    function poll(fn, interval) {
      var timer = setInterval(fn, interval);
      if (timer.unref) {
        timer.unref();
      }
      return timer;
    }
    exports.poll = poll;
    function getTypeOf(value) {
      return Array.isArray(value) ? "array" : typeof value;
    }
    exports.getTypeOf = getTypeOf;
  }
});

// node_modules/statsig-node/dist/DynamicConfig.js
var require_DynamicConfig = __commonJS({
  "node_modules/statsig-node/dist/DynamicConfig.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var core_1 = require_core();
    var DynamicConfig = (
      /** @class */
      function() {
        function DynamicConfig2(configName, value, ruleID, groupName, secondaryExposures, onDefaultValueFallback) {
          if (value === void 0) {
            value = {};
          }
          if (ruleID === void 0) {
            ruleID = "";
          }
          if (groupName === void 0) {
            groupName = "";
          }
          if (secondaryExposures === void 0) {
            secondaryExposures = [];
          }
          if (onDefaultValueFallback === void 0) {
            onDefaultValueFallback = null;
          }
          var _a;
          this._onDefaultValueFallback = null;
          if (typeof configName !== "string" || configName.length === 0) {
            configName = "";
          }
          if (value == null || typeof value !== "object") {
            value = {};
          }
          this.name = configName;
          this.value = (_a = (0, core_1.clone)(value)) !== null && _a !== void 0 ? _a : {};
          this._ruleID = ruleID;
          this._groupName = groupName;
          this._secondaryExposures = Array.isArray(secondaryExposures) ? secondaryExposures : [];
          this._onDefaultValueFallback = onDefaultValueFallback;
        }
        DynamicConfig2.prototype.get = function(key, defaultValue, typeGuard) {
          var _a, _b;
          if (typeGuard === void 0) {
            typeGuard = null;
          }
          defaultValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;
          var val = this.getValue(key, defaultValue);
          if (val == null) {
            return defaultValue;
          }
          var expectedType = (0, core_1.getTypeOf)(defaultValue);
          var actualType = (0, core_1.getTypeOf)(val);
          if (typeGuard != null) {
            if (typeGuard(val)) {
              return val;
            }
            (_a = this._onDefaultValueFallback) === null || _a === void 0 ? void 0 : _a.call(this, this, key, expectedType, actualType);
            return defaultValue;
          }
          if (defaultValue == null || expectedType === actualType) {
            return val;
          }
          (_b = this._onDefaultValueFallback) === null || _b === void 0 ? void 0 : _b.call(this, this, key, expectedType, actualType);
          return defaultValue;
        };
        DynamicConfig2.prototype.getValue = function(key, defaultValue) {
          var _a;
          if (key == null) {
            return this.value;
          }
          if (defaultValue === void 0) {
            defaultValue = null;
          }
          return (_a = this.value[key]) !== null && _a !== void 0 ? _a : defaultValue;
        };
        DynamicConfig2.prototype.getRuleID = function() {
          return this._ruleID;
        };
        DynamicConfig2.prototype.getGroupName = function() {
          return this._groupName;
        };
        DynamicConfig2.prototype._getSecondaryExposures = function() {
          return this._secondaryExposures;
        };
        return DynamicConfig2;
      }()
    );
    exports["default"] = DynamicConfig;
  }
});

// node_modules/statsig-node/dist/Errors.js
var require_Errors = __commonJS({
  "node_modules/statsig-node/dist/Errors.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    exports.__esModule = true;
    exports.StatsigLocalModeNetworkError = exports.StatsigTooManyRequestsError = exports.StatsigInvalidArgumentError = exports.StatsigUninitializedError = void 0;
    var StatsigUninitializedError = (
      /** @class */
      function(_super) {
        __extends(StatsigUninitializedError2, _super);
        function StatsigUninitializedError2() {
          var _this = _super.call(this, "Call and wait for initialize() to finish first.") || this;
          Object.setPrototypeOf(_this, StatsigUninitializedError2.prototype);
          return _this;
        }
        return StatsigUninitializedError2;
      }(Error)
    );
    exports.StatsigUninitializedError = StatsigUninitializedError;
    var StatsigInvalidArgumentError = (
      /** @class */
      function(_super) {
        __extends(StatsigInvalidArgumentError2, _super);
        function StatsigInvalidArgumentError2(message) {
          var _this = _super.call(this, message) || this;
          Object.setPrototypeOf(_this, StatsigInvalidArgumentError2.prototype);
          return _this;
        }
        return StatsigInvalidArgumentError2;
      }(Error)
    );
    exports.StatsigInvalidArgumentError = StatsigInvalidArgumentError;
    var StatsigTooManyRequestsError = (
      /** @class */
      function(_super) {
        __extends(StatsigTooManyRequestsError2, _super);
        function StatsigTooManyRequestsError2(message) {
          var _this = _super.call(this, message) || this;
          Object.setPrototypeOf(_this, StatsigTooManyRequestsError2.prototype);
          return _this;
        }
        return StatsigTooManyRequestsError2;
      }(Error)
    );
    exports.StatsigTooManyRequestsError = StatsigTooManyRequestsError;
    var StatsigLocalModeNetworkError = (
      /** @class */
      function(_super) {
        __extends(StatsigLocalModeNetworkError2, _super);
        function StatsigLocalModeNetworkError2() {
          var _this = _super.call(this, "No network requests in localMode") || this;
          Object.setPrototypeOf(_this, StatsigLocalModeNetworkError2.prototype);
          return _this;
        }
        return StatsigLocalModeNetworkError2;
      }(Error)
    );
    exports.StatsigLocalModeNetworkError = StatsigLocalModeNetworkError;
  }
});

// node_modules/statsig-node/dist/Layer.js
var require_Layer = __commonJS({
  "node_modules/statsig-node/dist/Layer.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var core_1 = require_core();
    var Layer = (
      /** @class */
      function() {
        function Layer2(layerName, value, ruleID, logExposure) {
          if (value === void 0) {
            value = {};
          }
          if (ruleID === void 0) {
            ruleID = "";
          }
          if (logExposure === void 0) {
            logExposure = null;
          }
          var _a;
          if (typeof layerName !== "string" || layerName.length === 0) {
            layerName = "";
          }
          if (value == null || typeof value !== "object") {
            value = {};
          }
          this.name = layerName;
          this._value = (_a = (0, core_1.clone)(value)) !== null && _a !== void 0 ? _a : {};
          this._ruleID = ruleID;
          this._logExposure = logExposure;
        }
        Layer2.prototype.get = function(key, defaultValue, typeGuard) {
          var _this = this;
          if (typeGuard === void 0) {
            typeGuard = null;
          }
          defaultValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;
          var val = this._value[key];
          if (val == null) {
            return defaultValue;
          }
          var logAndReturn = function() {
            var _a;
            (_a = _this._logExposure) === null || _a === void 0 ? void 0 : _a.call(_this, _this, key);
            return val;
          };
          if (typeGuard) {
            return typeGuard(val) ? logAndReturn() : defaultValue;
          }
          if (defaultValue == null) {
            return logAndReturn();
          }
          if (typeof val === typeof defaultValue && Array.isArray(defaultValue) === Array.isArray(val)) {
            return logAndReturn();
          }
          return defaultValue;
        };
        Layer2.prototype.getValue = function(key, defaultValue) {
          var _a, _b;
          if (defaultValue === void 0) {
            defaultValue = null;
          }
          if (key == null) {
            return defaultValue;
          }
          if (this._value[key] != null) {
            (_a = this._logExposure) === null || _a === void 0 ? void 0 : _a.call(this, this, key);
          }
          return (_b = this._value[key]) !== null && _b !== void 0 ? _b : defaultValue;
        };
        Layer2.prototype.getRuleID = function() {
          return this._ruleID;
        };
        return Layer2;
      }()
    );
    exports["default"] = Layer;
  }
});

// node_modules/statsig-node/dist/StatsigInstanceUtils.js
var require_StatsigInstanceUtils = __commonJS({
  "node_modules/statsig-node/dist/StatsigInstanceUtils.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var _instance = null;
    var StatsigInstanceUtils = (
      /** @class */
      function() {
        function StatsigInstanceUtils2() {
        }
        StatsigInstanceUtils2.getInstance = function() {
          return _instance;
        };
        StatsigInstanceUtils2.setInstance = function(instance) {
          _instance = instance;
        };
        return StatsigInstanceUtils2;
      }()
    );
    exports["default"] = StatsigInstanceUtils;
  }
});

// node_modules/whatwg-fetch/fetch.js
var fetch_exports = {};
__export(fetch_exports, {
  DOMException: () => DOMException,
  Headers: () => Headers,
  Request: () => Request,
  Response: () => Response,
  fetch: () => fetch2
});
function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj);
}
function normalizeName(name) {
  if (typeof name !== "string") {
    name = String(name);
  }
  if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
    throw new TypeError('Invalid character in header field name: "' + name + '"');
  }
  return name.toLowerCase();
}
function normalizeValue(value) {
  if (typeof value !== "string") {
    value = String(value);
  }
  return value;
}
function iteratorFor(items) {
  var iterator = {
    next: function() {
      var value = items.shift();
      return { done: value === void 0, value };
    }
  };
  if (support.iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator;
    };
  }
  return iterator;
}
function Headers(headers) {
  this.map = {};
  if (headers instanceof Headers) {
    headers.forEach(function(value, name) {
      this.append(name, value);
    }, this);
  } else if (Array.isArray(headers)) {
    headers.forEach(function(header) {
      this.append(header[0], header[1]);
    }, this);
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function(name) {
      this.append(name, headers[name]);
    }, this);
  }
}
function consumed(body) {
  if (body.bodyUsed) {
    return Promise.reject(new TypeError("Already read"));
  }
  body.bodyUsed = true;
}
function fileReaderReady(reader) {
  return new Promise(function(resolve, reject) {
    reader.onload = function() {
      resolve(reader.result);
    };
    reader.onerror = function() {
      reject(reader.error);
    };
  });
}
function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  reader.readAsArrayBuffer(blob);
  return promise;
}
function readBlobAsText(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  reader.readAsText(blob);
  return promise;
}
function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf);
  var chars = new Array(view.length);
  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i]);
  }
  return chars.join("");
}
function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0);
  } else {
    var view = new Uint8Array(buf.byteLength);
    view.set(new Uint8Array(buf));
    return view.buffer;
  }
}
function Body() {
  this.bodyUsed = false;
  this._initBody = function(body) {
    this.bodyUsed = this.bodyUsed;
    this._bodyInit = body;
    if (!body) {
      this._bodyText = "";
    } else if (typeof body === "string") {
      this._bodyText = body;
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body;
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body;
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString();
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer);
      this._bodyInit = new Blob([this._bodyArrayBuffer]);
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body);
    } else {
      this._bodyText = body = Object.prototype.toString.call(body);
    }
    if (!this.headers.get("content-type")) {
      if (typeof body === "string") {
        this.headers.set("content-type", "text/plain;charset=UTF-8");
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set("content-type", this._bodyBlob.type);
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
      }
    }
  };
  if (support.blob) {
    this.blob = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected;
      }
      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]));
      } else if (this._bodyFormData) {
        throw new Error("could not read FormData body as blob");
      } else {
        return Promise.resolve(new Blob([this._bodyText]));
      }
    };
    this.arrayBuffer = function() {
      if (this._bodyArrayBuffer) {
        var isConsumed = consumed(this);
        if (isConsumed) {
          return isConsumed;
        }
        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
          return Promise.resolve(
            this._bodyArrayBuffer.buffer.slice(
              this._bodyArrayBuffer.byteOffset,
              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
            )
          );
        } else {
          return Promise.resolve(this._bodyArrayBuffer);
        }
      } else {
        return this.blob().then(readBlobAsArrayBuffer);
      }
    };
  }
  this.text = function() {
    var rejected = consumed(this);
    if (rejected) {
      return rejected;
    }
    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob);
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
    } else if (this._bodyFormData) {
      throw new Error("could not read FormData body as text");
    } else {
      return Promise.resolve(this._bodyText);
    }
  };
  if (support.formData) {
    this.formData = function() {
      return this.text().then(decode);
    };
  }
  this.json = function() {
    return this.text().then(JSON.parse);
  };
  return this;
}
function normalizeMethod(method) {
  var upcased = method.toUpperCase();
  return methods.indexOf(upcased) > -1 ? upcased : method;
}
function Request(input, options) {
  if (!(this instanceof Request)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
  }
  options = options || {};
  var body = options.body;
  if (input instanceof Request) {
    if (input.bodyUsed) {
      throw new TypeError("Already read");
    }
    this.url = input.url;
    this.credentials = input.credentials;
    if (!options.headers) {
      this.headers = new Headers(input.headers);
    }
    this.method = input.method;
    this.mode = input.mode;
    this.signal = input.signal;
    if (!body && input._bodyInit != null) {
      body = input._bodyInit;
      input.bodyUsed = true;
    }
  } else {
    this.url = String(input);
  }
  this.credentials = options.credentials || this.credentials || "same-origin";
  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers);
  }
  this.method = normalizeMethod(options.method || this.method || "GET");
  this.mode = options.mode || this.mode || null;
  this.signal = options.signal || this.signal;
  this.referrer = null;
  if ((this.method === "GET" || this.method === "HEAD") && body) {
    throw new TypeError("Body not allowed for GET or HEAD requests");
  }
  this._initBody(body);
  if (this.method === "GET" || this.method === "HEAD") {
    if (options.cache === "no-store" || options.cache === "no-cache") {
      var reParamSearch = /([?&])_=[^&]*/;
      if (reParamSearch.test(this.url)) {
        this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
      } else {
        var reQueryString = /\?/;
        this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
      }
    }
  }
}
function decode(body) {
  var form = new FormData();
  body.trim().split("&").forEach(function(bytes) {
    if (bytes) {
      var split = bytes.split("=");
      var name = split.shift().replace(/\+/g, " ");
      var value = split.join("=").replace(/\+/g, " ");
      form.append(decodeURIComponent(name), decodeURIComponent(value));
    }
  });
  return form;
}
function parseHeaders(rawHeaders) {
  var headers = new Headers();
  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
  preProcessedHeaders.split("\r").map(function(header) {
    return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
  }).forEach(function(line) {
    var parts = line.split(":");
    var key = parts.shift().trim();
    if (key) {
      var value = parts.join(":").trim();
      headers.append(key, value);
    }
  });
  return headers;
}
function Response(bodyInit, options) {
  if (!(this instanceof Response)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
  }
  if (!options) {
    options = {};
  }
  this.type = "default";
  this.status = options.status === void 0 ? 200 : options.status;
  this.ok = this.status >= 200 && this.status < 300;
  this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
  this.headers = new Headers(options.headers);
  this.url = options.url || "";
  this._initBody(bodyInit);
}
function fetch2(input, init) {
  return new Promise(function(resolve, reject) {
    var request = new Request(input, init);
    if (request.signal && request.signal.aborted) {
      return reject(new DOMException("Aborted", "AbortError"));
    }
    var xhr = new XMLHttpRequest();
    function abortXhr() {
      xhr.abort();
    }
    xhr.onload = function() {
      var options = {
        status: xhr.status,
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || "")
      };
      options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
      var body = "response" in xhr ? xhr.response : xhr.responseText;
      setTimeout(function() {
        resolve(new Response(body, options));
      }, 0);
    };
    xhr.onerror = function() {
      setTimeout(function() {
        reject(new TypeError("Network request failed"));
      }, 0);
    };
    xhr.ontimeout = function() {
      setTimeout(function() {
        reject(new TypeError("Network request failed"));
      }, 0);
    };
    xhr.onabort = function() {
      setTimeout(function() {
        reject(new DOMException("Aborted", "AbortError"));
      }, 0);
    };
    function fixUrl(url) {
      try {
        return url === "" && global2.location.href ? global2.location.href : url;
      } catch (e) {
        return url;
      }
    }
    xhr.open(request.method, fixUrl(request.url), true);
    if (request.credentials === "include") {
      xhr.withCredentials = true;
    } else if (request.credentials === "omit") {
      xhr.withCredentials = false;
    }
    if ("responseType" in xhr) {
      if (support.blob) {
        xhr.responseType = "blob";
      } else if (support.arrayBuffer && request.headers.get("Content-Type") && request.headers.get("Content-Type").indexOf("application/octet-stream") !== -1) {
        xhr.responseType = "arraybuffer";
      }
    }
    if (init && typeof init.headers === "object" && !(init.headers instanceof Headers)) {
      Object.getOwnPropertyNames(init.headers).forEach(function(name) {
        xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
      });
    } else {
      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });
    }
    if (request.signal) {
      request.signal.addEventListener("abort", abortXhr);
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          request.signal.removeEventListener("abort", abortXhr);
        }
      };
    }
    xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
  });
}
var global2, support, viewClasses, isArrayBufferView, methods, redirectStatuses, DOMException;
var init_fetch = __esm({
  "node_modules/whatwg-fetch/fetch.js"() {
    global2 = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global2 !== "undefined" && global2;
    support = {
      searchParams: "URLSearchParams" in global2,
      iterable: "Symbol" in global2 && "iterator" in Symbol,
      blob: "FileReader" in global2 && "Blob" in global2 && function() {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: "FormData" in global2,
      arrayBuffer: "ArrayBuffer" in global2
    };
    if (support.arrayBuffer) {
      viewClasses = [
        "[object Int8Array]",
        "[object Uint8Array]",
        "[object Uint8ClampedArray]",
        "[object Int16Array]",
        "[object Uint16Array]",
        "[object Int32Array]",
        "[object Uint32Array]",
        "[object Float32Array]",
        "[object Float64Array]"
      ];
      isArrayBufferView = ArrayBuffer.isView || function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }
    Headers.prototype.append = function(name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ", " + value : value;
    };
    Headers.prototype["delete"] = function(name) {
      delete this.map[normalizeName(name)];
    };
    Headers.prototype.get = function(name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null;
    };
    Headers.prototype.has = function(name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };
    Headers.prototype.set = function(name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };
    Headers.prototype.forEach = function(callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };
    Headers.prototype.keys = function() {
      var items = [];
      this.forEach(function(value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };
    Headers.prototype.values = function() {
      var items = [];
      this.forEach(function(value) {
        items.push(value);
      });
      return iteratorFor(items);
    };
    Headers.prototype.entries = function() {
      var items = [];
      this.forEach(function(value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };
    if (support.iterable) {
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }
    methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
    Request.prototype.clone = function() {
      return new Request(this, { body: this._bodyInit });
    };
    Body.call(Request.prototype);
    Body.call(Response.prototype);
    Response.prototype.clone = function() {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };
    Response.error = function() {
      var response = new Response(null, { status: 0, statusText: "" });
      response.type = "error";
      return response;
    };
    redirectStatuses = [301, 302, 303, 307, 308];
    Response.redirect = function(url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError("Invalid status code");
      }
      return new Response(null, { status, headers: { location: url } });
    };
    DOMException = global2.DOMException;
    try {
      new DOMException();
    } catch (err) {
      DOMException = function(message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
      };
      DOMException.prototype = Object.create(Error.prototype);
      DOMException.prototype.constructor = DOMException;
    }
    fetch2.polyfill = true;
    if (!global2.fetch) {
      global2.fetch = fetch2;
      global2.Headers = Headers;
      global2.Request = Request;
      global2.Response = Response;
    }
  }
});

// node_modules/webidl-conversions/lib/index.js
var require_lib = __commonJS({
  "node_modules/webidl-conversions/lib/index.js"(exports, module2) {
    "use strict";
    var conversions = {};
    module2.exports = conversions;
    function sign(x) {
      return x < 0 ? -1 : 1;
    }
    function evenRound(x) {
      if (x % 1 === 0.5 && (x & 1) === 0) {
        return Math.floor(x);
      } else {
        return Math.round(x);
      }
    }
    function createNumberConversion(bitLength, typeOpts) {
      if (!typeOpts.unsigned) {
        --bitLength;
      }
      const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
      const upperBound = Math.pow(2, bitLength) - 1;
      const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
      const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
      return function(V, opts) {
        if (!opts)
          opts = {};
        let x = +V;
        if (opts.enforceRange) {
          if (!Number.isFinite(x)) {
            throw new TypeError("Argument is not a finite number");
          }
          x = sign(x) * Math.floor(Math.abs(x));
          if (x < lowerBound || x > upperBound) {
            throw new TypeError("Argument is not in byte range");
          }
          return x;
        }
        if (!isNaN(x) && opts.clamp) {
          x = evenRound(x);
          if (x < lowerBound)
            x = lowerBound;
          if (x > upperBound)
            x = upperBound;
          return x;
        }
        if (!Number.isFinite(x) || x === 0) {
          return 0;
        }
        x = sign(x) * Math.floor(Math.abs(x));
        x = x % moduloVal;
        if (!typeOpts.unsigned && x >= moduloBound) {
          return x - moduloVal;
        } else if (typeOpts.unsigned) {
          if (x < 0) {
            x += moduloVal;
          } else if (x === -0) {
            return 0;
          }
        }
        return x;
      };
    }
    conversions["void"] = function() {
      return void 0;
    };
    conversions["boolean"] = function(val) {
      return !!val;
    };
    conversions["byte"] = createNumberConversion(8, { unsigned: false });
    conversions["octet"] = createNumberConversion(8, { unsigned: true });
    conversions["short"] = createNumberConversion(16, { unsigned: false });
    conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
    conversions["long"] = createNumberConversion(32, { unsigned: false });
    conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
    conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
    conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
    conversions["double"] = function(V) {
      const x = +V;
      if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite floating-point value");
      }
      return x;
    };
    conversions["unrestricted double"] = function(V) {
      const x = +V;
      if (isNaN(x)) {
        throw new TypeError("Argument is NaN");
      }
      return x;
    };
    conversions["float"] = conversions["double"];
    conversions["unrestricted float"] = conversions["unrestricted double"];
    conversions["DOMString"] = function(V, opts) {
      if (!opts)
        opts = {};
      if (opts.treatNullAsEmptyString && V === null) {
        return "";
      }
      return String(V);
    };
    conversions["ByteString"] = function(V, opts) {
      const x = String(V);
      let c = void 0;
      for (let i = 0; (c = x.codePointAt(i)) !== void 0; ++i) {
        if (c > 255) {
          throw new TypeError("Argument is not a valid bytestring");
        }
      }
      return x;
    };
    conversions["USVString"] = function(V) {
      const S = String(V);
      const n = S.length;
      const U = [];
      for (let i = 0; i < n; ++i) {
        const c = S.charCodeAt(i);
        if (c < 55296 || c > 57343) {
          U.push(String.fromCodePoint(c));
        } else if (56320 <= c && c <= 57343) {
          U.push(String.fromCodePoint(65533));
        } else {
          if (i === n - 1) {
            U.push(String.fromCodePoint(65533));
          } else {
            const d = S.charCodeAt(i + 1);
            if (56320 <= d && d <= 57343) {
              const a = c & 1023;
              const b = d & 1023;
              U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
              ++i;
            } else {
              U.push(String.fromCodePoint(65533));
            }
          }
        }
      }
      return U.join("");
    };
    conversions["Date"] = function(V, opts) {
      if (!(V instanceof Date)) {
        throw new TypeError("Argument is not a Date object");
      }
      if (isNaN(V)) {
        return void 0;
      }
      return V;
    };
    conversions["RegExp"] = function(V, opts) {
      if (!(V instanceof RegExp)) {
        V = new RegExp(V);
      }
      return V;
    };
  }
});

// node_modules/whatwg-url/lib/utils.js
var require_utils = __commonJS({
  "node_modules/whatwg-url/lib/utils.js"(exports, module2) {
    "use strict";
    module2.exports.mixin = function mixin(target, source) {
      const keys = Object.getOwnPropertyNames(source);
      for (let i = 0; i < keys.length; ++i) {
        Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
      }
    };
    module2.exports.wrapperSymbol = Symbol("wrapper");
    module2.exports.implSymbol = Symbol("impl");
    module2.exports.wrapperForImpl = function(impl) {
      return impl[module2.exports.wrapperSymbol];
    };
    module2.exports.implForWrapper = function(wrapper) {
      return wrapper[module2.exports.implSymbol];
    };
  }
});

// node_modules/tr46/lib/mappingTable.json
var require_mappingTable = __commonJS({
  "node_modules/tr46/lib/mappingTable.json"(exports, module2) {
    module2.exports = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1e3, 1e3], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6e3], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8e3, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8e3]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9e3], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [3e4]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13e3, 13e3], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43e3, 43e3], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64e3, 64e3], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66e3, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[12e4, 12e4], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128e3, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23e3]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149e3]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32e3]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195e3, 195e3], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [4e4]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918e3, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]];
  }
});

// node_modules/tr46/index.js
var require_tr46 = __commonJS({
  "node_modules/tr46/index.js"(exports, module2) {
    "use strict";
    var punycode = require("punycode");
    var mappingTable = require_mappingTable();
    var PROCESSING_OPTIONS = {
      TRANSITIONAL: 0,
      NONTRANSITIONAL: 1
    };
    function normalize(str) {
      return str.split("\0").map(function(s) {
        return s.normalize("NFC");
      }).join("\0");
    }
    function findStatus(val) {
      var start = 0;
      var end = mappingTable.length - 1;
      while (start <= end) {
        var mid = Math.floor((start + end) / 2);
        var target = mappingTable[mid];
        if (target[0][0] <= val && target[0][1] >= val) {
          return target;
        } else if (target[0][0] > val) {
          end = mid - 1;
        } else {
          start = mid + 1;
        }
      }
      return null;
    }
    var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    function countSymbols(string) {
      return string.replace(regexAstralSymbols, "_").length;
    }
    function mapChars(domain_name, useSTD3, processing_option) {
      var hasError = false;
      var processed = "";
      var len = countSymbols(domain_name);
      for (var i = 0; i < len; ++i) {
        var codePoint = domain_name.codePointAt(i);
        var status = findStatus(codePoint);
        switch (status[1]) {
          case "disallowed":
            hasError = true;
            processed += String.fromCodePoint(codePoint);
            break;
          case "ignored":
            break;
          case "mapped":
            processed += String.fromCodePoint.apply(String, status[2]);
            break;
          case "deviation":
            if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
              processed += String.fromCodePoint.apply(String, status[2]);
            } else {
              processed += String.fromCodePoint(codePoint);
            }
            break;
          case "valid":
            processed += String.fromCodePoint(codePoint);
            break;
          case "disallowed_STD3_mapped":
            if (useSTD3) {
              hasError = true;
              processed += String.fromCodePoint(codePoint);
            } else {
              processed += String.fromCodePoint.apply(String, status[2]);
            }
            break;
          case "disallowed_STD3_valid":
            if (useSTD3) {
              hasError = true;
            }
            processed += String.fromCodePoint(codePoint);
            break;
        }
      }
      return {
        string: processed,
        error: hasError
      };
    }
    var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
    function validateLabel(label, processing_option) {
      if (label.substr(0, 4) === "xn--") {
        label = punycode.toUnicode(label);
        processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
      }
      var error = false;
      if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
        error = true;
      }
      var len = countSymbols(label);
      for (var i = 0; i < len; ++i) {
        var status = findStatus(label.codePointAt(i));
        if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
          error = true;
          break;
        }
      }
      return {
        label,
        error
      };
    }
    function processing(domain_name, useSTD3, processing_option) {
      var result = mapChars(domain_name, useSTD3, processing_option);
      result.string = normalize(result.string);
      var labels = result.string.split(".");
      for (var i = 0; i < labels.length; ++i) {
        try {
          var validation = validateLabel(labels[i]);
          labels[i] = validation.label;
          result.error = result.error || validation.error;
        } catch (e) {
          result.error = true;
        }
      }
      return {
        string: labels.join("."),
        error: result.error
      };
    }
    module2.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
      var result = processing(domain_name, useSTD3, processing_option);
      var labels = result.string.split(".");
      labels = labels.map(function(l) {
        try {
          return punycode.toASCII(l);
        } catch (e) {
          result.error = true;
          return l;
        }
      });
      if (verifyDnsLength) {
        var total = labels.slice(0, labels.length - 1).join(".").length;
        if (total.length > 253 || total.length === 0) {
          result.error = true;
        }
        for (var i = 0; i < labels.length; ++i) {
          if (labels.length > 63 || labels.length === 0) {
            result.error = true;
            break;
          }
        }
      }
      if (result.error)
        return null;
      return labels.join(".");
    };
    module2.exports.toUnicode = function(domain_name, useSTD3) {
      var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
      return {
        domain: result.string,
        error: result.error
      };
    };
    module2.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
  }
});

// node_modules/whatwg-url/lib/url-state-machine.js
var require_url_state_machine = __commonJS({
  "node_modules/whatwg-url/lib/url-state-machine.js"(exports, module2) {
    "use strict";
    var punycode = require("punycode");
    var tr46 = require_tr46();
    var specialSchemes = {
      ftp: 21,
      file: null,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var failure = Symbol("failure");
    function countSymbols(str) {
      return punycode.ucs2.decode(str).length;
    }
    function at(input, idx) {
      const c = input[idx];
      return isNaN(c) ? void 0 : String.fromCodePoint(c);
    }
    function isASCIIDigit(c) {
      return c >= 48 && c <= 57;
    }
    function isASCIIAlpha(c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 122;
    }
    function isASCIIAlphanumeric(c) {
      return isASCIIAlpha(c) || isASCIIDigit(c);
    }
    function isASCIIHex(c) {
      return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
    }
    function isSingleDot(buffer) {
      return buffer === "." || buffer.toLowerCase() === "%2e";
    }
    function isDoubleDot(buffer) {
      buffer = buffer.toLowerCase();
      return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
    }
    function isWindowsDriveLetterCodePoints(cp1, cp2) {
      return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
    }
    function isWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
    }
    function isNormalizedWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
    }
    function containsForbiddenHostCodePoint(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function containsForbiddenHostCodePointExcludingPercent(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function isSpecialScheme(scheme) {
      return specialSchemes[scheme] !== void 0;
    }
    function isSpecial(url) {
      return isSpecialScheme(url.scheme);
    }
    function defaultPort(scheme) {
      return specialSchemes[scheme];
    }
    function percentEncode(c) {
      let hex = c.toString(16).toUpperCase();
      if (hex.length === 1) {
        hex = "0" + hex;
      }
      return "%" + hex;
    }
    function utf8PercentEncode(c) {
      const buf = new Buffer(c);
      let str = "";
      for (let i = 0; i < buf.length; ++i) {
        str += percentEncode(buf[i]);
      }
      return str;
    }
    function utf8PercentDecode(str) {
      const input = new Buffer(str);
      const output = [];
      for (let i = 0; i < input.length; ++i) {
        if (input[i] !== 37) {
          output.push(input[i]);
        } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
          output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
          i += 2;
        } else {
          output.push(input[i]);
        }
      }
      return new Buffer(output).toString();
    }
    function isC0ControlPercentEncode(c) {
      return c <= 31 || c > 126;
    }
    var extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
    function isPathPercentEncode(c) {
      return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
    }
    var extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
    function isUserinfoPercentEncode(c) {
      return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
    }
    function percentEncodeChar(c, encodeSetPredicate) {
      const cStr = String.fromCodePoint(c);
      if (encodeSetPredicate(c)) {
        return utf8PercentEncode(cStr);
      }
      return cStr;
    }
    function parseIPv4Number(input) {
      let R = 10;
      if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
        input = input.substring(2);
        R = 16;
      } else if (input.length >= 2 && input.charAt(0) === "0") {
        input = input.substring(1);
        R = 8;
      }
      if (input === "") {
        return 0;
      }
      const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
      if (regex.test(input)) {
        return failure;
      }
      return parseInt(input, R);
    }
    function parseIPv4(input) {
      const parts = input.split(".");
      if (parts[parts.length - 1] === "") {
        if (parts.length > 1) {
          parts.pop();
        }
      }
      if (parts.length > 4) {
        return input;
      }
      const numbers = [];
      for (const part of parts) {
        if (part === "") {
          return input;
        }
        const n = parseIPv4Number(part);
        if (n === failure) {
          return input;
        }
        numbers.push(n);
      }
      for (let i = 0; i < numbers.length - 1; ++i) {
        if (numbers[i] > 255) {
          return failure;
        }
      }
      if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
        return failure;
      }
      let ipv4 = numbers.pop();
      let counter = 0;
      for (const n of numbers) {
        ipv4 += n * Math.pow(256, 3 - counter);
        ++counter;
      }
      return ipv4;
    }
    function serializeIPv4(address) {
      let output = "";
      let n = address;
      for (let i = 1; i <= 4; ++i) {
        output = String(n % 256) + output;
        if (i !== 4) {
          output = "." + output;
        }
        n = Math.floor(n / 256);
      }
      return output;
    }
    function parseIPv6(input) {
      const address = [0, 0, 0, 0, 0, 0, 0, 0];
      let pieceIndex = 0;
      let compress = null;
      let pointer = 0;
      input = punycode.ucs2.decode(input);
      if (input[pointer] === 58) {
        if (input[pointer + 1] !== 58) {
          return failure;
        }
        pointer += 2;
        ++pieceIndex;
        compress = pieceIndex;
      }
      while (pointer < input.length) {
        if (pieceIndex === 8) {
          return failure;
        }
        if (input[pointer] === 58) {
          if (compress !== null) {
            return failure;
          }
          ++pointer;
          ++pieceIndex;
          compress = pieceIndex;
          continue;
        }
        let value = 0;
        let length = 0;
        while (length < 4 && isASCIIHex(input[pointer])) {
          value = value * 16 + parseInt(at(input, pointer), 16);
          ++pointer;
          ++length;
        }
        if (input[pointer] === 46) {
          if (length === 0) {
            return failure;
          }
          pointer -= length;
          if (pieceIndex > 6) {
            return failure;
          }
          let numbersSeen = 0;
          while (input[pointer] !== void 0) {
            let ipv4Piece = null;
            if (numbersSeen > 0) {
              if (input[pointer] === 46 && numbersSeen < 4) {
                ++pointer;
              } else {
                return failure;
              }
            }
            if (!isASCIIDigit(input[pointer])) {
              return failure;
            }
            while (isASCIIDigit(input[pointer])) {
              const number = parseInt(at(input, pointer));
              if (ipv4Piece === null) {
                ipv4Piece = number;
              } else if (ipv4Piece === 0) {
                return failure;
              } else {
                ipv4Piece = ipv4Piece * 10 + number;
              }
              if (ipv4Piece > 255) {
                return failure;
              }
              ++pointer;
            }
            address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
            ++numbersSeen;
            if (numbersSeen === 2 || numbersSeen === 4) {
              ++pieceIndex;
            }
          }
          if (numbersSeen !== 4) {
            return failure;
          }
          break;
        } else if (input[pointer] === 58) {
          ++pointer;
          if (input[pointer] === void 0) {
            return failure;
          }
        } else if (input[pointer] !== void 0) {
          return failure;
        }
        address[pieceIndex] = value;
        ++pieceIndex;
      }
      if (compress !== null) {
        let swaps = pieceIndex - compress;
        pieceIndex = 7;
        while (pieceIndex !== 0 && swaps > 0) {
          const temp = address[compress + swaps - 1];
          address[compress + swaps - 1] = address[pieceIndex];
          address[pieceIndex] = temp;
          --pieceIndex;
          --swaps;
        }
      } else if (compress === null && pieceIndex !== 8) {
        return failure;
      }
      return address;
    }
    function serializeIPv6(address) {
      let output = "";
      const seqResult = findLongestZeroSequence(address);
      const compress = seqResult.idx;
      let ignore0 = false;
      for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
        if (ignore0 && address[pieceIndex] === 0) {
          continue;
        } else if (ignore0) {
          ignore0 = false;
        }
        if (compress === pieceIndex) {
          const separator = pieceIndex === 0 ? "::" : ":";
          output += separator;
          ignore0 = true;
          continue;
        }
        output += address[pieceIndex].toString(16);
        if (pieceIndex !== 7) {
          output += ":";
        }
      }
      return output;
    }
    function parseHost(input, isSpecialArg) {
      if (input[0] === "[") {
        if (input[input.length - 1] !== "]") {
          return failure;
        }
        return parseIPv6(input.substring(1, input.length - 1));
      }
      if (!isSpecialArg) {
        return parseOpaqueHost(input);
      }
      const domain = utf8PercentDecode(input);
      const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
      if (asciiDomain === null) {
        return failure;
      }
      if (containsForbiddenHostCodePoint(asciiDomain)) {
        return failure;
      }
      const ipv4Host = parseIPv4(asciiDomain);
      if (typeof ipv4Host === "number" || ipv4Host === failure) {
        return ipv4Host;
      }
      return asciiDomain;
    }
    function parseOpaqueHost(input) {
      if (containsForbiddenHostCodePointExcludingPercent(input)) {
        return failure;
      }
      let output = "";
      const decoded = punycode.ucs2.decode(input);
      for (let i = 0; i < decoded.length; ++i) {
        output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
      }
      return output;
    }
    function findLongestZeroSequence(arr) {
      let maxIdx = null;
      let maxLen = 1;
      let currStart = null;
      let currLen = 0;
      for (let i = 0; i < arr.length; ++i) {
        if (arr[i] !== 0) {
          if (currLen > maxLen) {
            maxIdx = currStart;
            maxLen = currLen;
          }
          currStart = null;
          currLen = 0;
        } else {
          if (currStart === null) {
            currStart = i;
          }
          ++currLen;
        }
      }
      if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
      }
      return {
        idx: maxIdx,
        len: maxLen
      };
    }
    function serializeHost(host) {
      if (typeof host === "number") {
        return serializeIPv4(host);
      }
      if (host instanceof Array) {
        return "[" + serializeIPv6(host) + "]";
      }
      return host;
    }
    function trimControlChars(url) {
      return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
    }
    function trimTabAndNewline(url) {
      return url.replace(/\u0009|\u000A|\u000D/g, "");
    }
    function shortenPath(url) {
      const path = url.path;
      if (path.length === 0) {
        return;
      }
      if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
        return;
      }
      path.pop();
    }
    function includesCredentials(url) {
      return url.username !== "" || url.password !== "";
    }
    function cannotHaveAUsernamePasswordPort(url) {
      return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
    }
    function isNormalizedWindowsDriveLetter(string) {
      return /^[A-Za-z]:$/.test(string);
    }
    function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
      this.pointer = 0;
      this.input = input;
      this.base = base || null;
      this.encodingOverride = encodingOverride || "utf-8";
      this.stateOverride = stateOverride;
      this.url = url;
      this.failure = false;
      this.parseError = false;
      if (!this.url) {
        this.url = {
          scheme: "",
          username: "",
          password: "",
          host: null,
          port: null,
          path: [],
          query: null,
          fragment: null,
          cannotBeABaseURL: false
        };
        const res2 = trimControlChars(this.input);
        if (res2 !== this.input) {
          this.parseError = true;
        }
        this.input = res2;
      }
      const res = trimTabAndNewline(this.input);
      if (res !== this.input) {
        this.parseError = true;
      }
      this.input = res;
      this.state = stateOverride || "scheme start";
      this.buffer = "";
      this.atFlag = false;
      this.arrFlag = false;
      this.passwordTokenSeenFlag = false;
      this.input = punycode.ucs2.decode(this.input);
      for (; this.pointer <= this.input.length; ++this.pointer) {
        const c = this.input[this.pointer];
        const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
        const ret = this["parse " + this.state](c, cStr);
        if (!ret) {
          break;
        } else if (ret === failure) {
          this.failure = true;
          break;
        }
      }
    }
    URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
      if (isASCIIAlpha(c)) {
        this.buffer += cStr.toLowerCase();
        this.state = "scheme";
      } else if (!this.stateOverride) {
        this.state = "no scheme";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
      if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
        this.buffer += cStr.toLowerCase();
      } else if (c === 58) {
        if (this.stateOverride) {
          if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
            return false;
          }
          if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
            return false;
          }
          if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
            return false;
          }
          if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
            return false;
          }
        }
        this.url.scheme = this.buffer;
        this.buffer = "";
        if (this.stateOverride) {
          return false;
        }
        if (this.url.scheme === "file") {
          if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
            this.parseError = true;
          }
          this.state = "file";
        } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
          this.state = "special relative or authority";
        } else if (isSpecial(this.url)) {
          this.state = "special authority slashes";
        } else if (this.input[this.pointer + 1] === 47) {
          this.state = "path or authority";
          ++this.pointer;
        } else {
          this.url.cannotBeABaseURL = true;
          this.url.path.push("");
          this.state = "cannot-be-a-base-URL path";
        }
      } else if (!this.stateOverride) {
        this.buffer = "";
        this.state = "no scheme";
        this.pointer = -1;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
      if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
        return failure;
      } else if (this.base.cannotBeABaseURL && c === 35) {
        this.url.scheme = this.base.scheme;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.url.cannotBeABaseURL = true;
        this.state = "fragment";
      } else if (this.base.scheme === "file") {
        this.state = "file";
        --this.pointer;
      } else {
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
      if (c === 47) {
        this.state = "authority";
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
      this.url.scheme = this.base.scheme;
      if (isNaN(c)) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 47) {
        this.state = "relative slash";
      } else if (c === 63) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
        this.state = "relative slash";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice(0, this.base.path.length - 1);
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
      if (isSpecial(this.url) && (c === 47 || c === 92)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "special authority ignore slashes";
      } else if (c === 47) {
        this.state = "authority";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "special authority ignore slashes";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
      if (c !== 47 && c !== 92) {
        this.state = "authority";
        --this.pointer;
      } else {
        this.parseError = true;
      }
      return true;
    };
    URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
      if (c === 64) {
        this.parseError = true;
        if (this.atFlag) {
          this.buffer = "%40" + this.buffer;
        }
        this.atFlag = true;
        const len = countSymbols(this.buffer);
        for (let pointer = 0; pointer < len; ++pointer) {
          const codePoint = this.buffer.codePointAt(pointer);
          if (codePoint === 58 && !this.passwordTokenSeenFlag) {
            this.passwordTokenSeenFlag = true;
            continue;
          }
          const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
          if (this.passwordTokenSeenFlag) {
            this.url.password += encodedCodePoints;
          } else {
            this.url.username += encodedCodePoints;
          }
        }
        this.buffer = "";
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        if (this.atFlag && this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        this.pointer -= countSymbols(this.buffer) + 1;
        this.buffer = "";
        this.state = "host";
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
      if (this.stateOverride && this.url.scheme === "file") {
        --this.pointer;
        this.state = "file host";
      } else if (c === 58 && !this.arrFlag) {
        if (this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "port";
        if (this.stateOverride === "hostname") {
          return false;
        }
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        --this.pointer;
        if (isSpecial(this.url) && this.buffer === "") {
          this.parseError = true;
          return failure;
        } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
          this.parseError = true;
          return false;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "path start";
        if (this.stateOverride) {
          return false;
        }
      } else {
        if (c === 91) {
          this.arrFlag = true;
        } else if (c === 93) {
          this.arrFlag = false;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
      if (isASCIIDigit(c)) {
        this.buffer += cStr;
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
        if (this.buffer !== "") {
          const port = parseInt(this.buffer);
          if (port > Math.pow(2, 16) - 1) {
            this.parseError = true;
            return failure;
          }
          this.url.port = port === defaultPort(this.url.scheme) ? null : port;
          this.buffer = "";
        }
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    var fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
    URLStateMachine.prototype["parse file"] = function parseFile(c) {
      this.url.scheme = "file";
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file slash";
      } else if (this.base !== null && this.base.scheme === "file") {
        if (isNaN(c)) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
        } else if (c === 63) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = "";
          this.state = "query";
        } else if (c === 35) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          this.url.fragment = "";
          this.state = "fragment";
        } else {
          if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
          !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
          !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            shortenPath(this.url);
          } else {
            this.parseError = true;
          }
          this.state = "path";
          --this.pointer;
        }
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file host";
      } else {
        if (this.base !== null && this.base.scheme === "file") {
          if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
            this.url.path.push(this.base.path[0]);
          } else {
            this.url.host = this.base.host;
          }
        }
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
      if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
        --this.pointer;
        if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
          this.parseError = true;
          this.state = "path";
        } else if (this.buffer === "") {
          this.url.host = "";
          if (this.stateOverride) {
            return false;
          }
          this.state = "path start";
        } else {
          let host = parseHost(this.buffer, isSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          if (host === "localhost") {
            host = "";
          }
          this.url.host = host;
          if (this.stateOverride) {
            return false;
          }
          this.buffer = "";
          this.state = "path start";
        }
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
      if (isSpecial(this.url)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "path";
        if (c !== 47 && c !== 92) {
          --this.pointer;
        }
      } else if (!this.stateOverride && c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (!this.stateOverride && c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (c !== void 0) {
        this.state = "path";
        if (c !== 47) {
          --this.pointer;
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse path"] = function parsePath(c) {
      if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
        if (isSpecial(this.url) && c === 92) {
          this.parseError = true;
        }
        if (isDoubleDot(this.buffer)) {
          shortenPath(this.url);
          if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
            this.url.path.push("");
          }
        } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        } else if (!isSingleDot(this.buffer)) {
          if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
            if (this.url.host !== "" && this.url.host !== null) {
              this.parseError = true;
              this.url.host = "";
            }
            this.buffer = this.buffer[0] + ":";
          }
          this.url.path.push(this.buffer);
        }
        this.buffer = "";
        if (this.url.scheme === "file" && (c === void 0 || c === 63 || c === 35)) {
          while (this.url.path.length > 1 && this.url.path[0] === "") {
            this.parseError = true;
            this.url.path.shift();
          }
        }
        if (c === 63) {
          this.url.query = "";
          this.state = "query";
        }
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += percentEncodeChar(c, isPathPercentEncode);
      }
      return true;
    };
    URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (!isNaN(c) && c !== 37) {
          this.parseError = true;
        }
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        if (!isNaN(c)) {
          this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
      if (isNaN(c) || !this.stateOverride && c === 35) {
        if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
          this.encodingOverride = "utf-8";
        }
        const buffer = new Buffer(this.buffer);
        for (let i = 0; i < buffer.length; ++i) {
          if (buffer[i] < 33 || buffer[i] > 126 || buffer[i] === 34 || buffer[i] === 35 || buffer[i] === 60 || buffer[i] === 62) {
            this.url.query += percentEncode(buffer[i]);
          } else {
            this.url.query += String.fromCodePoint(buffer[i]);
          }
        }
        this.buffer = "";
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
      if (isNaN(c)) {
      } else if (c === 0) {
        this.parseError = true;
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
      }
      return true;
    };
    function serializeURL(url, excludeFragment) {
      let output = url.scheme + ":";
      if (url.host !== null) {
        output += "//";
        if (url.username !== "" || url.password !== "") {
          output += url.username;
          if (url.password !== "") {
            output += ":" + url.password;
          }
          output += "@";
        }
        output += serializeHost(url.host);
        if (url.port !== null) {
          output += ":" + url.port;
        }
      } else if (url.host === null && url.scheme === "file") {
        output += "//";
      }
      if (url.cannotBeABaseURL) {
        output += url.path[0];
      } else {
        for (const string of url.path) {
          output += "/" + string;
        }
      }
      if (url.query !== null) {
        output += "?" + url.query;
      }
      if (!excludeFragment && url.fragment !== null) {
        output += "#" + url.fragment;
      }
      return output;
    }
    function serializeOrigin(tuple) {
      let result = tuple.scheme + "://";
      result += serializeHost(tuple.host);
      if (tuple.port !== null) {
        result += ":" + tuple.port;
      }
      return result;
    }
    module2.exports.serializeURL = serializeURL;
    module2.exports.serializeURLOrigin = function(url) {
      switch (url.scheme) {
        case "blob":
          try {
            return module2.exports.serializeURLOrigin(module2.exports.parseURL(url.path[0]));
          } catch (e) {
            return "null";
          }
        case "ftp":
        case "gopher":
        case "http":
        case "https":
        case "ws":
        case "wss":
          return serializeOrigin({
            scheme: url.scheme,
            host: url.host,
            port: url.port
          });
        case "file":
          return "file://";
        default:
          return "null";
      }
    };
    module2.exports.basicURLParse = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
      if (usm.failure) {
        return "failure";
      }
      return usm.url;
    };
    module2.exports.setTheUsername = function(url, username) {
      url.username = "";
      const decoded = punycode.ucs2.decode(username);
      for (let i = 0; i < decoded.length; ++i) {
        url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.setThePassword = function(url, password) {
      url.password = "";
      const decoded = punycode.ucs2.decode(password);
      for (let i = 0; i < decoded.length; ++i) {
        url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.serializeHost = serializeHost;
    module2.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
    module2.exports.serializeInteger = function(integer) {
      return String(integer);
    };
    module2.exports.parseURL = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      return module2.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
    };
  }
});

// node_modules/whatwg-url/lib/URL-impl.js
var require_URL_impl = __commonJS({
  "node_modules/whatwg-url/lib/URL-impl.js"(exports) {
    "use strict";
    var usm = require_url_state_machine();
    exports.implementation = class URLImpl {
      constructor(constructorArgs) {
        const url = constructorArgs[0];
        const base = constructorArgs[1];
        let parsedBase = null;
        if (base !== void 0) {
          parsedBase = usm.basicURLParse(base);
          if (parsedBase === "failure") {
            throw new TypeError("Invalid base URL");
          }
        }
        const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get href() {
        return usm.serializeURL(this._url);
      }
      set href(v) {
        const parsedURL = usm.basicURLParse(v);
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get origin() {
        return usm.serializeURLOrigin(this._url);
      }
      get protocol() {
        return this._url.scheme + ":";
      }
      set protocol(v) {
        usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
      }
      get username() {
        return this._url.username;
      }
      set username(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setTheUsername(this._url, v);
      }
      get password() {
        return this._url.password;
      }
      set password(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setThePassword(this._url, v);
      }
      get host() {
        const url = this._url;
        if (url.host === null) {
          return "";
        }
        if (url.port === null) {
          return usm.serializeHost(url.host);
        }
        return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
      }
      set host(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
      }
      get hostname() {
        if (this._url.host === null) {
          return "";
        }
        return usm.serializeHost(this._url.host);
      }
      set hostname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
      }
      get port() {
        if (this._url.port === null) {
          return "";
        }
        return usm.serializeInteger(this._url.port);
      }
      set port(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        if (v === "") {
          this._url.port = null;
        } else {
          usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
        }
      }
      get pathname() {
        if (this._url.cannotBeABaseURL) {
          return this._url.path[0];
        }
        if (this._url.path.length === 0) {
          return "";
        }
        return "/" + this._url.path.join("/");
      }
      set pathname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        this._url.path = [];
        usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
      }
      get search() {
        if (this._url.query === null || this._url.query === "") {
          return "";
        }
        return "?" + this._url.query;
      }
      set search(v) {
        const url = this._url;
        if (v === "") {
          url.query = null;
          return;
        }
        const input = v[0] === "?" ? v.substring(1) : v;
        url.query = "";
        usm.basicURLParse(input, { url, stateOverride: "query" });
      }
      get hash() {
        if (this._url.fragment === null || this._url.fragment === "") {
          return "";
        }
        return "#" + this._url.fragment;
      }
      set hash(v) {
        if (v === "") {
          this._url.fragment = null;
          return;
        }
        const input = v[0] === "#" ? v.substring(1) : v;
        this._url.fragment = "";
        usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
      }
      toJSON() {
        return this.href;
      }
    };
  }
});

// node_modules/whatwg-url/lib/URL.js
var require_URL = __commonJS({
  "node_modules/whatwg-url/lib/URL.js"(exports, module2) {
    "use strict";
    var conversions = require_lib();
    var utils = require_utils();
    var Impl = require_URL_impl();
    var impl = utils.implSymbol;
    function URL4(url) {
      if (!this || this[impl] || !(this instanceof URL4)) {
        throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
      }
      if (arguments.length < 1) {
        throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 2; ++i) {
        args[i] = arguments[i];
      }
      args[0] = conversions["USVString"](args[0]);
      if (args[1] !== void 0) {
        args[1] = conversions["USVString"](args[1]);
      }
      module2.exports.setup(this, args);
    }
    URL4.prototype.toJSON = function toJSON() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 0; ++i) {
        args[i] = arguments[i];
      }
      return this[impl].toJSON.apply(this[impl], args);
    };
    Object.defineProperty(URL4.prototype, "href", {
      get() {
        return this[impl].href;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].href = V;
      },
      enumerable: true,
      configurable: true
    });
    URL4.prototype.toString = function() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      return this.href;
    };
    Object.defineProperty(URL4.prototype, "origin", {
      get() {
        return this[impl].origin;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL4.prototype, "protocol", {
      get() {
        return this[impl].protocol;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].protocol = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL4.prototype, "username", {
      get() {
        return this[impl].username;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].username = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL4.prototype, "password", {
      get() {
        return this[impl].password;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].password = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL4.prototype, "host", {
      get() {
        return this[impl].host;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].host = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL4.prototype, "hostname", {
      get() {
        return this[impl].hostname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hostname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL4.prototype, "port", {
      get() {
        return this[impl].port;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].port = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL4.prototype, "pathname", {
      get() {
        return this[impl].pathname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].pathname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL4.prototype, "search", {
      get() {
        return this[impl].search;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].search = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL4.prototype, "hash", {
      get() {
        return this[impl].hash;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hash = V;
      },
      enumerable: true,
      configurable: true
    });
    module2.exports = {
      is(obj) {
        return !!obj && obj[impl] instanceof Impl.implementation;
      },
      create(constructorArgs, privateData) {
        let obj = Object.create(URL4.prototype);
        this.setup(obj, constructorArgs, privateData);
        return obj;
      },
      setup(obj, constructorArgs, privateData) {
        if (!privateData)
          privateData = {};
        privateData.wrapper = obj;
        obj[impl] = new Impl.implementation(constructorArgs, privateData);
        obj[impl][utils.wrapperSymbol] = obj;
      },
      interface: URL4,
      expose: {
        Window: { URL: URL4 },
        Worker: { URL: URL4 }
      }
    };
  }
});

// node_modules/whatwg-url/lib/public-api.js
var require_public_api = __commonJS({
  "node_modules/whatwg-url/lib/public-api.js"(exports) {
    "use strict";
    exports.URL = require_URL().interface;
    exports.serializeURL = require_url_state_machine().serializeURL;
    exports.serializeURLOrigin = require_url_state_machine().serializeURLOrigin;
    exports.basicURLParse = require_url_state_machine().basicURLParse;
    exports.setTheUsername = require_url_state_machine().setTheUsername;
    exports.setThePassword = require_url_state_machine().setThePassword;
    exports.serializeHost = require_url_state_machine().serializeHost;
    exports.serializeInteger = require_url_state_machine().serializeInteger;
    exports.parseURL = require_url_state_machine().parseURL;
  }
});

// node_modules/node-fetch/lib/index.mjs
var lib_exports = {};
__export(lib_exports, {
  FetchError: () => FetchError,
  Headers: () => Headers2,
  Request: () => Request2,
  Response: () => Response2,
  default: () => lib_default
});
function FetchError(message, type, systemError) {
  Error.call(this, message);
  this.message = message;
  this.type = type;
  if (systemError) {
    this.code = this.errno = systemError.code;
  }
  Error.captureStackTrace(this, this.constructor);
}
function Body2(body) {
  var _this = this;
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
  let size = _ref$size === void 0 ? 0 : _ref$size;
  var _ref$timeout = _ref.timeout;
  let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
  if (body == null) {
    body = null;
  } else if (isURLSearchParams(body)) {
    body = Buffer.from(body.toString());
  } else if (isBlob(body))
    ;
  else if (Buffer.isBuffer(body))
    ;
  else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
    body = Buffer.from(body);
  } else if (ArrayBuffer.isView(body)) {
    body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
  } else if (body instanceof import_stream.default)
    ;
  else {
    body = Buffer.from(String(body));
  }
  this[INTERNALS] = {
    body,
    disturbed: false,
    error: null
  };
  this.size = size;
  this.timeout = timeout;
  if (body instanceof import_stream.default) {
    body.on("error", function(err) {
      const error = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
      _this[INTERNALS].error = error;
    });
  }
}
function consumeBody() {
  var _this4 = this;
  if (this[INTERNALS].disturbed) {
    return Body2.Promise.reject(new TypeError(`body used already for: ${this.url}`));
  }
  this[INTERNALS].disturbed = true;
  if (this[INTERNALS].error) {
    return Body2.Promise.reject(this[INTERNALS].error);
  }
  let body = this.body;
  if (body === null) {
    return Body2.Promise.resolve(Buffer.alloc(0));
  }
  if (isBlob(body)) {
    body = body.stream();
  }
  if (Buffer.isBuffer(body)) {
    return Body2.Promise.resolve(body);
  }
  if (!(body instanceof import_stream.default)) {
    return Body2.Promise.resolve(Buffer.alloc(0));
  }
  let accum = [];
  let accumBytes = 0;
  let abort = false;
  return new Body2.Promise(function(resolve, reject) {
    let resTimeout;
    if (_this4.timeout) {
      resTimeout = setTimeout(function() {
        abort = true;
        reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
      }, _this4.timeout);
    }
    body.on("error", function(err) {
      if (err.name === "AbortError") {
        abort = true;
        reject(err);
      } else {
        reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
      }
    });
    body.on("data", function(chunk) {
      if (abort || chunk === null) {
        return;
      }
      if (_this4.size && accumBytes + chunk.length > _this4.size) {
        abort = true;
        reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
        return;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    });
    body.on("end", function() {
      if (abort) {
        return;
      }
      clearTimeout(resTimeout);
      try {
        resolve(Buffer.concat(accum, accumBytes));
      } catch (err) {
        reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
      }
    });
  });
}
function convertBody(buffer, headers) {
  if (typeof convert !== "function") {
    throw new Error("The package `encoding` must be installed to use the textConverted() function");
  }
  const ct = headers.get("content-type");
  let charset = "utf-8";
  let res, str;
  if (ct) {
    res = /charset=([^;]*)/i.exec(ct);
  }
  str = buffer.slice(0, 1024).toString();
  if (!res && str) {
    res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
  }
  if (!res && str) {
    res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
    if (!res) {
      res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
      if (res) {
        res.pop();
      }
    }
    if (res) {
      res = /charset=(.*)/i.exec(res.pop());
    }
  }
  if (!res && str) {
    res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
  }
  if (res) {
    charset = res.pop();
    if (charset === "gb2312" || charset === "gbk") {
      charset = "gb18030";
    }
  }
  return convert(buffer, "UTF-8", charset).toString();
}
function isURLSearchParams(obj) {
  if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
    return false;
  }
  return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
}
function isBlob(obj) {
  return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}
function clone(instance) {
  let p1, p2;
  let body = instance.body;
  if (instance.bodyUsed) {
    throw new Error("cannot clone body after it is used");
  }
  if (body instanceof import_stream.default && typeof body.getBoundary !== "function") {
    p1 = new PassThrough();
    p2 = new PassThrough();
    body.pipe(p1);
    body.pipe(p2);
    instance[INTERNALS].body = p1;
    body = p2;
  }
  return body;
}
function extractContentType(body) {
  if (body === null) {
    return null;
  } else if (typeof body === "string") {
    return "text/plain;charset=UTF-8";
  } else if (isURLSearchParams(body)) {
    return "application/x-www-form-urlencoded;charset=UTF-8";
  } else if (isBlob(body)) {
    return body.type || null;
  } else if (Buffer.isBuffer(body)) {
    return null;
  } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
    return null;
  } else if (ArrayBuffer.isView(body)) {
    return null;
  } else if (typeof body.getBoundary === "function") {
    return `multipart/form-data;boundary=${body.getBoundary()}`;
  } else if (body instanceof import_stream.default) {
    return null;
  } else {
    return "text/plain;charset=UTF-8";
  }
}
function getTotalBytes(instance) {
  const body = instance.body;
  if (body === null) {
    return 0;
  } else if (isBlob(body)) {
    return body.size;
  } else if (Buffer.isBuffer(body)) {
    return body.length;
  } else if (body && typeof body.getLengthSync === "function") {
    if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
    body.hasKnownLength && body.hasKnownLength()) {
      return body.getLengthSync();
    }
    return null;
  } else {
    return null;
  }
}
function writeToStream(dest, instance) {
  const body = instance.body;
  if (body === null) {
    dest.end();
  } else if (isBlob(body)) {
    body.stream().pipe(dest);
  } else if (Buffer.isBuffer(body)) {
    dest.write(body);
    dest.end();
  } else {
    body.pipe(dest);
  }
}
function validateName(name) {
  name = `${name}`;
  if (invalidTokenRegex.test(name) || name === "") {
    throw new TypeError(`${name} is not a legal HTTP header name`);
  }
}
function validateValue(value) {
  value = `${value}`;
  if (invalidHeaderCharRegex.test(value)) {
    throw new TypeError(`${value} is not a legal HTTP header value`);
  }
}
function find(map, name) {
  name = name.toLowerCase();
  for (const key in map) {
    if (key.toLowerCase() === name) {
      return key;
    }
  }
  return void 0;
}
function getHeaders(headers) {
  let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
  const keys = Object.keys(headers[MAP]).sort();
  return keys.map(kind === "key" ? function(k) {
    return k.toLowerCase();
  } : kind === "value" ? function(k) {
    return headers[MAP][k].join(", ");
  } : function(k) {
    return [k.toLowerCase(), headers[MAP][k].join(", ")];
  });
}
function createHeadersIterator(target, kind) {
  const iterator = Object.create(HeadersIteratorPrototype);
  iterator[INTERNAL] = {
    target,
    kind,
    index: 0
  };
  return iterator;
}
function exportNodeCompatibleHeaders(headers) {
  const obj = Object.assign({ __proto__: null }, headers[MAP]);
  const hostHeaderKey = find(headers[MAP], "Host");
  if (hostHeaderKey !== void 0) {
    obj[hostHeaderKey] = obj[hostHeaderKey][0];
  }
  return obj;
}
function createHeadersLenient(obj) {
  const headers = new Headers2();
  for (const name of Object.keys(obj)) {
    if (invalidTokenRegex.test(name)) {
      continue;
    }
    if (Array.isArray(obj[name])) {
      for (const val of obj[name]) {
        if (invalidHeaderCharRegex.test(val)) {
          continue;
        }
        if (headers[MAP][name] === void 0) {
          headers[MAP][name] = [val];
        } else {
          headers[MAP][name].push(val);
        }
      }
    } else if (!invalidHeaderCharRegex.test(obj[name])) {
      headers[MAP][name] = [obj[name]];
    }
  }
  return headers;
}
function parseURL(urlStr) {
  if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
    urlStr = new URL3(urlStr).toString();
  }
  return parse_url(urlStr);
}
function isRequest(input) {
  return typeof input === "object" && typeof input[INTERNALS$2] === "object";
}
function isAbortSignal(signal) {
  const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
  return !!(proto && proto.constructor.name === "AbortSignal");
}
function getNodeRequestOptions(request) {
  const parsedURL = request[INTERNALS$2].parsedURL;
  const headers = new Headers2(request[INTERNALS$2].headers);
  if (!headers.has("Accept")) {
    headers.set("Accept", "*/*");
  }
  if (!parsedURL.protocol || !parsedURL.hostname) {
    throw new TypeError("Only absolute URLs are supported");
  }
  if (!/^https?:$/.test(parsedURL.protocol)) {
    throw new TypeError("Only HTTP(S) protocols are supported");
  }
  if (request.signal && request.body instanceof import_stream.default.Readable && !streamDestructionSupported) {
    throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
  }
  let contentLengthValue = null;
  if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
    contentLengthValue = "0";
  }
  if (request.body != null) {
    const totalBytes = getTotalBytes(request);
    if (typeof totalBytes === "number") {
      contentLengthValue = String(totalBytes);
    }
  }
  if (contentLengthValue) {
    headers.set("Content-Length", contentLengthValue);
  }
  if (!headers.has("User-Agent")) {
    headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
  }
  if (request.compress && !headers.has("Accept-Encoding")) {
    headers.set("Accept-Encoding", "gzip,deflate");
  }
  let agent = request.agent;
  if (typeof agent === "function") {
    agent = agent(parsedURL);
  }
  if (!headers.has("Connection") && !agent) {
    headers.set("Connection", "close");
  }
  return Object.assign({}, parsedURL, {
    method: request.method,
    headers: exportNodeCompatibleHeaders(headers),
    agent
  });
}
function AbortError(message) {
  Error.call(this, message);
  this.type = "aborted";
  this.message = message;
  Error.captureStackTrace(this, this.constructor);
}
function fetch3(url, opts) {
  if (!fetch3.Promise) {
    throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
  }
  Body2.Promise = fetch3.Promise;
  return new fetch3.Promise(function(resolve, reject) {
    const request = new Request2(url, opts);
    const options = getNodeRequestOptions(request);
    const send = (options.protocol === "https:" ? import_https.default : import_http.default).request;
    const signal = request.signal;
    let response = null;
    const abort = function abort2() {
      let error = new AbortError("The user aborted a request.");
      reject(error);
      if (request.body && request.body instanceof import_stream.default.Readable) {
        destroyStream(request.body, error);
      }
      if (!response || !response.body)
        return;
      response.body.emit("error", error);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = function abortAndFinalize2() {
      abort();
      finalize();
    };
    const req = send(options);
    let reqTimeout;
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    function finalize() {
      req.abort();
      if (signal)
        signal.removeEventListener("abort", abortAndFinalize);
      clearTimeout(reqTimeout);
    }
    if (request.timeout) {
      req.once("socket", function(socket) {
        reqTimeout = setTimeout(function() {
          reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
          finalize();
        }, request.timeout);
      });
    }
    req.on("error", function(err) {
      reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
      if (response && response.body) {
        destroyStream(response.body, err);
      }
      finalize();
    });
    fixResponseChunkedTransferBadEnding(req, function(err) {
      if (signal && signal.aborted) {
        return;
      }
      if (response && response.body) {
        destroyStream(response.body, err);
      }
    });
    if (parseInt(process.version.substring(1)) < 14) {
      req.on("socket", function(s) {
        s.addListener("close", function(hadError) {
          const hasDataListener = s.listenerCount("data") > 0;
          if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
            const err = new Error("Premature close");
            err.code = "ERR_STREAM_PREMATURE_CLOSE";
            response.body.emit("error", err);
          }
        });
      });
    }
    req.on("response", function(res) {
      clearTimeout(reqTimeout);
      const headers = createHeadersLenient(res.headers);
      if (fetch3.isRedirect(res.statusCode)) {
        const location = headers.get("Location");
        let locationURL = null;
        try {
          locationURL = location === null ? null : new URL$1(location, request.url).toString();
        } catch (err) {
          if (request.redirect !== "manual") {
            reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
            finalize();
            return;
          }
        }
        switch (request.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            if (locationURL !== null) {
              try {
                headers.set("Location", locationURL);
              } catch (err) {
                reject(err);
              }
            }
            break;
          case "follow":
            if (locationURL === null) {
              break;
            }
            if (request.counter >= request.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOpts = {
              headers: new Headers2(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: request.body,
              signal: request.signal,
              timeout: request.timeout,
              size: request.size
            };
            if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
              for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                requestOpts.headers.delete(name);
              }
            }
            if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
              requestOpts.method = "GET";
              requestOpts.body = void 0;
              requestOpts.headers.delete("content-length");
            }
            resolve(fetch3(new Request2(locationURL, requestOpts)));
            finalize();
            return;
        }
      }
      res.once("end", function() {
        if (signal)
          signal.removeEventListener("abort", abortAndFinalize);
      });
      let body = res.pipe(new PassThrough$1());
      const response_options = {
        url: request.url,
        status: res.statusCode,
        statusText: res.statusMessage,
        headers,
        size: request.size,
        timeout: request.timeout,
        counter: request.counter
      };
      const codings = headers.get("Content-Encoding");
      if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
        response = new Response2(body, response_options);
        resolve(response);
        return;
      }
      const zlibOptions = {
        flush: import_zlib.default.Z_SYNC_FLUSH,
        finishFlush: import_zlib.default.Z_SYNC_FLUSH
      };
      if (codings == "gzip" || codings == "x-gzip") {
        body = body.pipe(import_zlib.default.createGunzip(zlibOptions));
        response = new Response2(body, response_options);
        resolve(response);
        return;
      }
      if (codings == "deflate" || codings == "x-deflate") {
        const raw = res.pipe(new PassThrough$1());
        raw.once("data", function(chunk) {
          if ((chunk[0] & 15) === 8) {
            body = body.pipe(import_zlib.default.createInflate());
          } else {
            body = body.pipe(import_zlib.default.createInflateRaw());
          }
          response = new Response2(body, response_options);
          resolve(response);
        });
        raw.on("end", function() {
          if (!response) {
            response = new Response2(body, response_options);
            resolve(response);
          }
        });
        return;
      }
      if (codings == "br" && typeof import_zlib.default.createBrotliDecompress === "function") {
        body = body.pipe(import_zlib.default.createBrotliDecompress());
        response = new Response2(body, response_options);
        resolve(response);
        return;
      }
      response = new Response2(body, response_options);
      resolve(response);
    });
    writeToStream(req, request);
  });
}
function fixResponseChunkedTransferBadEnding(request, errorCallback) {
  let socket;
  request.on("socket", function(s) {
    socket = s;
  });
  request.on("response", function(response) {
    const headers = response.headers;
    if (headers["transfer-encoding"] === "chunked" && !headers["content-length"]) {
      response.once("close", function(hadError) {
        const hasDataListener = socket.listenerCount("data") > 0;
        if (hasDataListener && !hadError) {
          const err = new Error("Premature close");
          err.code = "ERR_STREAM_PREMATURE_CLOSE";
          errorCallback(err);
        }
      });
    }
  });
}
function destroyStream(stream, err) {
  if (stream.destroy) {
    stream.destroy(err);
  } else {
    stream.emit("error", err);
    stream.end();
  }
}
var import_stream, import_http, import_url, import_whatwg_url, import_https, import_zlib, Readable, BUFFER, TYPE, Blob2, convert, INTERNALS, PassThrough, invalidTokenRegex, invalidHeaderCharRegex, MAP, Headers2, INTERNAL, HeadersIteratorPrototype, INTERNALS$1, STATUS_CODES, Response2, INTERNALS$2, URL3, parse_url, format_url, streamDestructionSupported, Request2, URL$1, PassThrough$1, isDomainOrSubdomain, isSameProtocol, lib_default;
var init_lib = __esm({
  "node_modules/node-fetch/lib/index.mjs"() {
    import_stream = __toESM(require("stream"), 1);
    import_http = __toESM(require("http"), 1);
    import_url = __toESM(require("url"), 1);
    import_whatwg_url = __toESM(require_public_api(), 1);
    import_https = __toESM(require("https"), 1);
    import_zlib = __toESM(require("zlib"), 1);
    Readable = import_stream.default.Readable;
    BUFFER = Symbol("buffer");
    TYPE = Symbol("type");
    Blob2 = class {
      constructor() {
        this[TYPE] = "";
        const blobParts = arguments[0];
        const options = arguments[1];
        const buffers = [];
        let size = 0;
        if (blobParts) {
          const a = blobParts;
          const length = Number(a.length);
          for (let i = 0; i < length; i++) {
            const element = a[i];
            let buffer;
            if (element instanceof Buffer) {
              buffer = element;
            } else if (ArrayBuffer.isView(element)) {
              buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
            } else if (element instanceof ArrayBuffer) {
              buffer = Buffer.from(element);
            } else if (element instanceof Blob2) {
              buffer = element[BUFFER];
            } else {
              buffer = Buffer.from(typeof element === "string" ? element : String(element));
            }
            size += buffer.length;
            buffers.push(buffer);
          }
        }
        this[BUFFER] = Buffer.concat(buffers);
        let type = options && options.type !== void 0 && String(options.type).toLowerCase();
        if (type && !/[^\u0020-\u007E]/.test(type)) {
          this[TYPE] = type;
        }
      }
      get size() {
        return this[BUFFER].length;
      }
      get type() {
        return this[TYPE];
      }
      text() {
        return Promise.resolve(this[BUFFER].toString());
      }
      arrayBuffer() {
        const buf = this[BUFFER];
        const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        return Promise.resolve(ab);
      }
      stream() {
        const readable = new Readable();
        readable._read = function() {
        };
        readable.push(this[BUFFER]);
        readable.push(null);
        return readable;
      }
      toString() {
        return "[object Blob]";
      }
      slice() {
        const size = this.size;
        const start = arguments[0];
        const end = arguments[1];
        let relativeStart, relativeEnd;
        if (start === void 0) {
          relativeStart = 0;
        } else if (start < 0) {
          relativeStart = Math.max(size + start, 0);
        } else {
          relativeStart = Math.min(start, size);
        }
        if (end === void 0) {
          relativeEnd = size;
        } else if (end < 0) {
          relativeEnd = Math.max(size + end, 0);
        } else {
          relativeEnd = Math.min(end, size);
        }
        const span = Math.max(relativeEnd - relativeStart, 0);
        const buffer = this[BUFFER];
        const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
        const blob = new Blob2([], { type: arguments[2] });
        blob[BUFFER] = slicedBuffer;
        return blob;
      }
    };
    Object.defineProperties(Blob2.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    Object.defineProperty(Blob2.prototype, Symbol.toStringTag, {
      value: "Blob",
      writable: false,
      enumerable: false,
      configurable: true
    });
    FetchError.prototype = Object.create(Error.prototype);
    FetchError.prototype.constructor = FetchError;
    FetchError.prototype.name = "FetchError";
    try {
      convert = require("encoding").convert;
    } catch (e) {
    }
    INTERNALS = Symbol("Body internals");
    PassThrough = import_stream.default.PassThrough;
    Body2.prototype = {
      get body() {
        return this[INTERNALS].body;
      },
      get bodyUsed() {
        return this[INTERNALS].disturbed;
      },
      /**
       * Decode response as ArrayBuffer
       *
       * @return  Promise
       */
      arrayBuffer() {
        return consumeBody.call(this).then(function(buf) {
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        });
      },
      /**
       * Return raw response as Blob
       *
       * @return Promise
       */
      blob() {
        let ct = this.headers && this.headers.get("content-type") || "";
        return consumeBody.call(this).then(function(buf) {
          return Object.assign(
            // Prevent copying
            new Blob2([], {
              type: ct.toLowerCase()
            }),
            {
              [BUFFER]: buf
            }
          );
        });
      },
      /**
       * Decode response as json
       *
       * @return  Promise
       */
      json() {
        var _this2 = this;
        return consumeBody.call(this).then(function(buffer) {
          try {
            return JSON.parse(buffer.toString());
          } catch (err) {
            return Body2.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
          }
        });
      },
      /**
       * Decode response as text
       *
       * @return  Promise
       */
      text() {
        return consumeBody.call(this).then(function(buffer) {
          return buffer.toString();
        });
      },
      /**
       * Decode response as buffer (non-spec api)
       *
       * @return  Promise
       */
      buffer() {
        return consumeBody.call(this);
      },
      /**
       * Decode response as text, while automatically detecting the encoding and
       * trying to decode to UTF-8 (non-spec api)
       *
       * @return  Promise
       */
      textConverted() {
        var _this3 = this;
        return consumeBody.call(this).then(function(buffer) {
          return convertBody(buffer, _this3.headers);
        });
      }
    };
    Object.defineProperties(Body2.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true }
    });
    Body2.mixIn = function(proto) {
      for (const name of Object.getOwnPropertyNames(Body2.prototype)) {
        if (!(name in proto)) {
          const desc = Object.getOwnPropertyDescriptor(Body2.prototype, name);
          Object.defineProperty(proto, name, desc);
        }
      }
    };
    Body2.Promise = global.Promise;
    invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
    invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    MAP = Symbol("map");
    Headers2 = class {
      /**
       * Headers class
       *
       * @param   Object  headers  Response headers
       * @return  Void
       */
      constructor() {
        let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
        this[MAP] = /* @__PURE__ */ Object.create(null);
        if (init instanceof Headers2) {
          const rawHeaders = init.raw();
          const headerNames = Object.keys(rawHeaders);
          for (const headerName of headerNames) {
            for (const value of rawHeaders[headerName]) {
              this.append(headerName, value);
            }
          }
          return;
        }
        if (init == null)
          ;
        else if (typeof init === "object") {
          const method = init[Symbol.iterator];
          if (method != null) {
            if (typeof method !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            const pairs = [];
            for (const pair of init) {
              if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                throw new TypeError("Each header pair must be iterable");
              }
              pairs.push(Array.from(pair));
            }
            for (const pair of pairs) {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              this.append(pair[0], pair[1]);
            }
          } else {
            for (const key of Object.keys(init)) {
              const value = init[key];
              this.append(key, value);
            }
          }
        } else {
          throw new TypeError("Provided initializer must be an object");
        }
      }
      /**
       * Return combined header value given name
       *
       * @param   String  name  Header name
       * @return  Mixed
       */
      get(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key === void 0) {
          return null;
        }
        return this[MAP][key].join(", ");
      }
      /**
       * Iterate over all headers
       *
       * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
       * @param   Boolean   thisArg   `this` context for callback function
       * @return  Void
       */
      forEach(callback) {
        let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
        let pairs = getHeaders(this);
        let i = 0;
        while (i < pairs.length) {
          var _pairs$i = pairs[i];
          const name = _pairs$i[0], value = _pairs$i[1];
          callback.call(thisArg, value, name, this);
          pairs = getHeaders(this);
          i++;
        }
      }
      /**
       * Overwrite header values given name
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */
      set(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        this[MAP][key !== void 0 ? key : name] = [value];
      }
      /**
       * Append a value onto existing header
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */
      append(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          this[MAP][key].push(value);
        } else {
          this[MAP][name] = [value];
        }
      }
      /**
       * Check for header name existence
       *
       * @param   String   name  Header name
       * @return  Boolean
       */
      has(name) {
        name = `${name}`;
        validateName(name);
        return find(this[MAP], name) !== void 0;
      }
      /**
       * Delete all header values given name
       *
       * @param   String  name  Header name
       * @return  Void
       */
      delete(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          delete this[MAP][key];
        }
      }
      /**
       * Return raw headers (non-spec api)
       *
       * @return  Object
       */
      raw() {
        return this[MAP];
      }
      /**
       * Get an iterator on keys.
       *
       * @return  Iterator
       */
      keys() {
        return createHeadersIterator(this, "key");
      }
      /**
       * Get an iterator on values.
       *
       * @return  Iterator
       */
      values() {
        return createHeadersIterator(this, "value");
      }
      /**
       * Get an iterator on entries.
       *
       * This is the default iterator of the Headers object.
       *
       * @return  Iterator
       */
      [Symbol.iterator]() {
        return createHeadersIterator(this, "key+value");
      }
    };
    Headers2.prototype.entries = Headers2.prototype[Symbol.iterator];
    Object.defineProperty(Headers2.prototype, Symbol.toStringTag, {
      value: "Headers",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Headers2.prototype, {
      get: { enumerable: true },
      forEach: { enumerable: true },
      set: { enumerable: true },
      append: { enumerable: true },
      has: { enumerable: true },
      delete: { enumerable: true },
      keys: { enumerable: true },
      values: { enumerable: true },
      entries: { enumerable: true }
    });
    INTERNAL = Symbol("internal");
    HeadersIteratorPrototype = Object.setPrototypeOf({
      next() {
        if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
          throw new TypeError("Value of `this` is not a HeadersIterator");
        }
        var _INTERNAL = this[INTERNAL];
        const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
        const values = getHeaders(target, kind);
        const len = values.length;
        if (index >= len) {
          return {
            value: void 0,
            done: true
          };
        }
        this[INTERNAL].index = index + 1;
        return {
          value: values[index],
          done: false
        };
      }
    }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
    Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
      value: "HeadersIterator",
      writable: false,
      enumerable: false,
      configurable: true
    });
    INTERNALS$1 = Symbol("Response internals");
    STATUS_CODES = import_http.default.STATUS_CODES;
    Response2 = class {
      constructor() {
        let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Body2.call(this, body, opts);
        const status = opts.status || 200;
        const headers = new Headers2(opts.headers);
        if (body != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(body);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS$1] = {
          url: opts.url,
          status,
          statusText: opts.statusText || STATUS_CODES[status],
          headers,
          counter: opts.counter
        };
      }
      get url() {
        return this[INTERNALS$1].url || "";
      }
      get status() {
        return this[INTERNALS$1].status;
      }
      /**
       * Convenience property representing if the request ended normally
       */
      get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
      get redirected() {
        return this[INTERNALS$1].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$1].statusText;
      }
      get headers() {
        return this[INTERNALS$1].headers;
      }
      /**
       * Clone this response
       *
       * @return  Response
       */
      clone() {
        return new Response2(clone(this), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected
        });
      }
    };
    Body2.mixIn(Response2.prototype);
    Object.defineProperties(Response2.prototype, {
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    });
    Object.defineProperty(Response2.prototype, Symbol.toStringTag, {
      value: "Response",
      writable: false,
      enumerable: false,
      configurable: true
    });
    INTERNALS$2 = Symbol("Request internals");
    URL3 = import_url.default.URL || import_whatwg_url.default.URL;
    parse_url = import_url.default.parse;
    format_url = import_url.default.format;
    streamDestructionSupported = "destroy" in import_stream.default.Readable.prototype;
    Request2 = class {
      constructor(input) {
        let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        let parsedURL;
        if (!isRequest(input)) {
          if (input && input.href) {
            parsedURL = parseURL(input.href);
          } else {
            parsedURL = parseURL(`${input}`);
          }
          input = {};
        } else {
          parsedURL = parseURL(input.url);
        }
        let method = init.method || input.method || "GET";
        method = method.toUpperCase();
        if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
        Body2.call(this, inputBody, {
          timeout: init.timeout || input.timeout || 0,
          size: init.size || input.size || 0
        });
        const headers = new Headers2(init.headers || input.headers || {});
        if (inputBody != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(inputBody);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ("signal" in init)
          signal = init.signal;
        if (signal != null && !isAbortSignal(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal");
        }
        this[INTERNALS$2] = {
          method,
          redirect: init.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal
        };
        this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
        this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
        this.counter = init.counter || input.counter || 0;
        this.agent = init.agent || input.agent;
      }
      get method() {
        return this[INTERNALS$2].method;
      }
      get url() {
        return format_url(this[INTERNALS$2].parsedURL);
      }
      get headers() {
        return this[INTERNALS$2].headers;
      }
      get redirect() {
        return this[INTERNALS$2].redirect;
      }
      get signal() {
        return this[INTERNALS$2].signal;
      }
      /**
       * Clone this request
       *
       * @return  Request
       */
      clone() {
        return new Request2(this);
      }
    };
    Body2.mixIn(Request2.prototype);
    Object.defineProperty(Request2.prototype, Symbol.toStringTag, {
      value: "Request",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Request2.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true }
    });
    AbortError.prototype = Object.create(Error.prototype);
    AbortError.prototype.constructor = AbortError;
    AbortError.prototype.name = "AbortError";
    URL$1 = import_url.default.URL || import_whatwg_url.default.URL;
    PassThrough$1 = import_stream.default.PassThrough;
    isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
      const orig = new URL$1(original).hostname;
      const dest = new URL$1(destination).hostname;
      return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
    };
    isSameProtocol = function isSameProtocol2(destination, original) {
      const orig = new URL$1(original).protocol;
      const dest = new URL$1(destination).protocol;
      return orig === dest;
    };
    fetch3.isRedirect = function(code) {
      return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
    };
    fetch3.Promise = global.Promise;
    lib_default = fetch3;
  }
});

// node_modules/statsig-node/dist/utils/safeFetch.js
var require_safeFetch = __commonJS({
  "node_modules/statsig-node/dist/utils/safeFetch.js"(exports) {
    "use strict";
    exports.__esModule = true;
    init_fetch();
    var safeFetch;
    try {
      safeFetch = (init_lib(), __toCommonJS(lib_exports));
    } catch (err) {
      safeFetch = fetch;
    }
    exports["default"] = safeFetch;
  }
});

// node_modules/statsig-node/dist/ErrorBoundary.js
var require_ErrorBoundary = __commonJS({
  "node_modules/statsig-node/dist/ErrorBoundary.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    exports.__esModule = true;
    exports.ExceptionEndpoint = void 0;
    var Errors_1 = require_Errors();
    var core_1 = require_core();
    var safeFetch_1 = __importDefault(require_safeFetch());
    exports.ExceptionEndpoint = "https://statsigapi.net/v1/sdk_exception";
    var ErrorBoundary = (
      /** @class */
      function() {
        function ErrorBoundary2(sdkKey) {
          this.statsigMetadata = (0, core_1.getStatsigMetadata)();
          this.seen = /* @__PURE__ */ new Set();
          this.sdkKey = sdkKey;
        }
        ErrorBoundary2.prototype.swallow = function(task) {
          this.capture(task, function() {
            return void 0;
          });
        };
        ErrorBoundary2.prototype.capture = function(task, recover) {
          var _this = this;
          try {
            var result = task();
            if (result instanceof Promise) {
              return result["catch"](function(e) {
                return _this.onCaught(e, recover);
              });
            }
            return result;
          } catch (error) {
            return this.onCaught(error, recover);
          }
        };
        ErrorBoundary2.prototype.setup = function(sdkKey) {
          this.sdkKey = sdkKey;
        };
        ErrorBoundary2.prototype.onCaught = function(error, recover) {
          if (error instanceof Errors_1.StatsigUninitializedError || error instanceof Errors_1.StatsigInvalidArgumentError || error instanceof Errors_1.StatsigTooManyRequestsError) {
            throw error;
          }
          console.error("[Statsig] An unexpected exception occurred.", error);
          this.logError(error);
          return recover();
        };
        ErrorBoundary2.prototype.logError = function(error, key) {
          var _a;
          try {
            if (!this.sdkKey) {
              return;
            }
            var unwrapped = error !== null && error !== void 0 ? error : Error("[Statsig] Error was empty");
            var isError = unwrapped instanceof Error;
            var name = isError && unwrapped.name ? unwrapped.name : "No Name";
            if (this.seen.has(name) || key != null && this.seen.has(key)) {
              return;
            }
            this.seen.add(name);
            var info = isError ? unwrapped.stack : this.getDescription(unwrapped);
            var body = JSON.stringify({
              exception: name,
              info,
              statsigMetadata: (_a = this.statsigMetadata) !== null && _a !== void 0 ? _a : {}
            });
            (0, safeFetch_1["default"])(exports.ExceptionEndpoint, {
              method: "POST",
              headers: {
                "STATSIG-API-KEY": this.sdkKey,
                "STATSIG-SDK-TYPE": (0, core_1.getSDKType)(),
                "STATSIG-SDK-VERSION": (0, core_1.getSDKVersion)(),
                "Content-Type": "application/json",
                "Content-Length": "".concat(body.length)
              },
              body
            })["catch"](function() {
            });
          } catch (_error) {
          }
        };
        ErrorBoundary2.prototype.getDescription = function(obj) {
          try {
            return JSON.stringify(obj);
          } catch (_a) {
            return "[Statsig] Failed to get string for error.";
          }
        };
        return ErrorBoundary2;
      }()
    );
    exports["default"] = ErrorBoundary;
  }
});

// node_modules/node-forge/lib/forge.js
var require_forge = __commonJS({
  "node_modules/node-forge/lib/forge.js"(exports, module2) {
    module2.exports = {
      // default options
      options: {
        usePureJavaScript: false
      }
    };
  }
});

// node_modules/node-forge/lib/baseN.js
var require_baseN = __commonJS({
  "node_modules/node-forge/lib/baseN.js"(exports, module2) {
    var api = {};
    module2.exports = api;
    var _reverseAlphabets = {};
    api.encode = function(input, alphabet, maxline) {
      if (typeof alphabet !== "string") {
        throw new TypeError('"alphabet" must be a string.');
      }
      if (maxline !== void 0 && typeof maxline !== "number") {
        throw new TypeError('"maxline" must be a number.');
      }
      var output = "";
      if (!(input instanceof Uint8Array)) {
        output = _encodeWithByteBuffer(input, alphabet);
      } else {
        var i = 0;
        var base = alphabet.length;
        var first = alphabet.charAt(0);
        var digits = [0];
        for (i = 0; i < input.length; ++i) {
          for (var j = 0, carry = input[i]; j < digits.length; ++j) {
            carry += digits[j] << 8;
            digits[j] = carry % base;
            carry = carry / base | 0;
          }
          while (carry > 0) {
            digits.push(carry % base);
            carry = carry / base | 0;
          }
        }
        for (i = 0; input[i] === 0 && i < input.length - 1; ++i) {
          output += first;
        }
        for (i = digits.length - 1; i >= 0; --i) {
          output += alphabet[digits[i]];
        }
      }
      if (maxline) {
        var regex = new RegExp(".{1," + maxline + "}", "g");
        output = output.match(regex).join("\r\n");
      }
      return output;
    };
    api.decode = function(input, alphabet) {
      if (typeof input !== "string") {
        throw new TypeError('"input" must be a string.');
      }
      if (typeof alphabet !== "string") {
        throw new TypeError('"alphabet" must be a string.');
      }
      var table = _reverseAlphabets[alphabet];
      if (!table) {
        table = _reverseAlphabets[alphabet] = [];
        for (var i = 0; i < alphabet.length; ++i) {
          table[alphabet.charCodeAt(i)] = i;
        }
      }
      input = input.replace(/\s/g, "");
      var base = alphabet.length;
      var first = alphabet.charAt(0);
      var bytes = [0];
      for (var i = 0; i < input.length; i++) {
        var value = table[input.charCodeAt(i)];
        if (value === void 0) {
          return;
        }
        for (var j = 0, carry = value; j < bytes.length; ++j) {
          carry += bytes[j] * base;
          bytes[j] = carry & 255;
          carry >>= 8;
        }
        while (carry > 0) {
          bytes.push(carry & 255);
          carry >>= 8;
        }
      }
      for (var k = 0; input[k] === first && k < input.length - 1; ++k) {
        bytes.push(0);
      }
      if (typeof Buffer !== "undefined") {
        return Buffer.from(bytes.reverse());
      }
      return new Uint8Array(bytes.reverse());
    };
    function _encodeWithByteBuffer(input, alphabet) {
      var i = 0;
      var base = alphabet.length;
      var first = alphabet.charAt(0);
      var digits = [0];
      for (i = 0; i < input.length(); ++i) {
        for (var j = 0, carry = input.at(i); j < digits.length; ++j) {
          carry += digits[j] << 8;
          digits[j] = carry % base;
          carry = carry / base | 0;
        }
        while (carry > 0) {
          digits.push(carry % base);
          carry = carry / base | 0;
        }
      }
      var output = "";
      for (i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {
        output += first;
      }
      for (i = digits.length - 1; i >= 0; --i) {
        output += alphabet[digits[i]];
      }
      return output;
    }
  }
});

// node_modules/node-forge/lib/util.js
var require_util = __commonJS({
  "node_modules/node-forge/lib/util.js"(exports, module2) {
    var forge = require_forge();
    var baseN = require_baseN();
    var util = module2.exports = forge.util = forge.util || {};
    (function() {
      if (typeof process !== "undefined" && process.nextTick && !process.browser) {
        util.nextTick = process.nextTick;
        if (typeof setImmediate === "function") {
          util.setImmediate = setImmediate;
        } else {
          util.setImmediate = util.nextTick;
        }
        return;
      }
      if (typeof setImmediate === "function") {
        util.setImmediate = function() {
          return setImmediate.apply(void 0, arguments);
        };
        util.nextTick = function(callback) {
          return setImmediate(callback);
        };
        return;
      }
      util.setImmediate = function(callback) {
        setTimeout(callback, 0);
      };
      if (typeof window !== "undefined" && typeof window.postMessage === "function") {
        let handler2 = function(event) {
          if (event.source === window && event.data === msg) {
            event.stopPropagation();
            var copy = callbacks.slice();
            callbacks.length = 0;
            copy.forEach(function(callback) {
              callback();
            });
          }
        };
        var handler = handler2;
        var msg = "forge.setImmediate";
        var callbacks = [];
        util.setImmediate = function(callback) {
          callbacks.push(callback);
          if (callbacks.length === 1) {
            window.postMessage(msg, "*");
          }
        };
        window.addEventListener("message", handler2, true);
      }
      if (typeof MutationObserver !== "undefined") {
        var now = Date.now();
        var attr = true;
        var div = document.createElement("div");
        var callbacks = [];
        new MutationObserver(function() {
          var copy = callbacks.slice();
          callbacks.length = 0;
          copy.forEach(function(callback) {
            callback();
          });
        }).observe(div, { attributes: true });
        var oldSetImmediate = util.setImmediate;
        util.setImmediate = function(callback) {
          if (Date.now() - now > 15) {
            now = Date.now();
            oldSetImmediate(callback);
          } else {
            callbacks.push(callback);
            if (callbacks.length === 1) {
              div.setAttribute("a", attr = !attr);
            }
          }
        };
      }
      util.nextTick = util.setImmediate;
    })();
    util.isNodejs = typeof process !== "undefined" && process.versions && process.versions.node;
    util.globalScope = function() {
      if (util.isNodejs) {
        return global;
      }
      return typeof self === "undefined" ? window : self;
    }();
    util.isArray = Array.isArray || function(x) {
      return Object.prototype.toString.call(x) === "[object Array]";
    };
    util.isArrayBuffer = function(x) {
      return typeof ArrayBuffer !== "undefined" && x instanceof ArrayBuffer;
    };
    util.isArrayBufferView = function(x) {
      return x && util.isArrayBuffer(x.buffer) && x.byteLength !== void 0;
    };
    function _checkBitsParam(n) {
      if (!(n === 8 || n === 16 || n === 24 || n === 32)) {
        throw new Error("Only 8, 16, 24, or 32 bits supported: " + n);
      }
    }
    util.ByteBuffer = ByteStringBuffer;
    function ByteStringBuffer(b) {
      this.data = "";
      this.read = 0;
      if (typeof b === "string") {
        this.data = b;
      } else if (util.isArrayBuffer(b) || util.isArrayBufferView(b)) {
        if (typeof Buffer !== "undefined" && b instanceof Buffer) {
          this.data = b.toString("binary");
        } else {
          var arr = new Uint8Array(b);
          try {
            this.data = String.fromCharCode.apply(null, arr);
          } catch (e) {
            for (var i = 0; i < arr.length; ++i) {
              this.putByte(arr[i]);
            }
          }
        }
      } else if (b instanceof ByteStringBuffer || typeof b === "object" && typeof b.data === "string" && typeof b.read === "number") {
        this.data = b.data;
        this.read = b.read;
      }
      this._constructedStringLength = 0;
    }
    util.ByteStringBuffer = ByteStringBuffer;
    var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;
    util.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {
      this._constructedStringLength += x;
      if (this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {
        this.data.substr(0, 1);
        this._constructedStringLength = 0;
      }
    };
    util.ByteStringBuffer.prototype.length = function() {
      return this.data.length - this.read;
    };
    util.ByteStringBuffer.prototype.isEmpty = function() {
      return this.length() <= 0;
    };
    util.ByteStringBuffer.prototype.putByte = function(b) {
      return this.putBytes(String.fromCharCode(b));
    };
    util.ByteStringBuffer.prototype.fillWithByte = function(b, n) {
      b = String.fromCharCode(b);
      var d = this.data;
      while (n > 0) {
        if (n & 1) {
          d += b;
        }
        n >>>= 1;
        if (n > 0) {
          b += b;
        }
      }
      this.data = d;
      this._optimizeConstructedString(n);
      return this;
    };
    util.ByteStringBuffer.prototype.putBytes = function(bytes) {
      this.data += bytes;
      this._optimizeConstructedString(bytes.length);
      return this;
    };
    util.ByteStringBuffer.prototype.putString = function(str) {
      return this.putBytes(util.encodeUtf8(str));
    };
    util.ByteStringBuffer.prototype.putInt16 = function(i) {
      return this.putBytes(
        String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i & 255)
      );
    };
    util.ByteStringBuffer.prototype.putInt24 = function(i) {
      return this.putBytes(
        String.fromCharCode(i >> 16 & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i & 255)
      );
    };
    util.ByteStringBuffer.prototype.putInt32 = function(i) {
      return this.putBytes(
        String.fromCharCode(i >> 24 & 255) + String.fromCharCode(i >> 16 & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i & 255)
      );
    };
    util.ByteStringBuffer.prototype.putInt16Le = function(i) {
      return this.putBytes(
        String.fromCharCode(i & 255) + String.fromCharCode(i >> 8 & 255)
      );
    };
    util.ByteStringBuffer.prototype.putInt24Le = function(i) {
      return this.putBytes(
        String.fromCharCode(i & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i >> 16 & 255)
      );
    };
    util.ByteStringBuffer.prototype.putInt32Le = function(i) {
      return this.putBytes(
        String.fromCharCode(i & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i >> 16 & 255) + String.fromCharCode(i >> 24 & 255)
      );
    };
    util.ByteStringBuffer.prototype.putInt = function(i, n) {
      _checkBitsParam(n);
      var bytes = "";
      do {
        n -= 8;
        bytes += String.fromCharCode(i >> n & 255);
      } while (n > 0);
      return this.putBytes(bytes);
    };
    util.ByteStringBuffer.prototype.putSignedInt = function(i, n) {
      if (i < 0) {
        i += 2 << n - 1;
      }
      return this.putInt(i, n);
    };
    util.ByteStringBuffer.prototype.putBuffer = function(buffer) {
      return this.putBytes(buffer.getBytes());
    };
    util.ByteStringBuffer.prototype.getByte = function() {
      return this.data.charCodeAt(this.read++);
    };
    util.ByteStringBuffer.prototype.getInt16 = function() {
      var rval = this.data.charCodeAt(this.read) << 8 ^ this.data.charCodeAt(this.read + 1);
      this.read += 2;
      return rval;
    };
    util.ByteStringBuffer.prototype.getInt24 = function() {
      var rval = this.data.charCodeAt(this.read) << 16 ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2);
      this.read += 3;
      return rval;
    };
    util.ByteStringBuffer.prototype.getInt32 = function() {
      var rval = this.data.charCodeAt(this.read) << 24 ^ this.data.charCodeAt(this.read + 1) << 16 ^ this.data.charCodeAt(this.read + 2) << 8 ^ this.data.charCodeAt(this.read + 3);
      this.read += 4;
      return rval;
    };
    util.ByteStringBuffer.prototype.getInt16Le = function() {
      var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8;
      this.read += 2;
      return rval;
    };
    util.ByteStringBuffer.prototype.getInt24Le = function() {
      var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16;
      this.read += 3;
      return rval;
    };
    util.ByteStringBuffer.prototype.getInt32Le = function() {
      var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16 ^ this.data.charCodeAt(this.read + 3) << 24;
      this.read += 4;
      return rval;
    };
    util.ByteStringBuffer.prototype.getInt = function(n) {
      _checkBitsParam(n);
      var rval = 0;
      do {
        rval = (rval << 8) + this.data.charCodeAt(this.read++);
        n -= 8;
      } while (n > 0);
      return rval;
    };
    util.ByteStringBuffer.prototype.getSignedInt = function(n) {
      var x = this.getInt(n);
      var max = 2 << n - 2;
      if (x >= max) {
        x -= max << 1;
      }
      return x;
    };
    util.ByteStringBuffer.prototype.getBytes = function(count) {
      var rval;
      if (count) {
        count = Math.min(this.length(), count);
        rval = this.data.slice(this.read, this.read + count);
        this.read += count;
      } else if (count === 0) {
        rval = "";
      } else {
        rval = this.read === 0 ? this.data : this.data.slice(this.read);
        this.clear();
      }
      return rval;
    };
    util.ByteStringBuffer.prototype.bytes = function(count) {
      return typeof count === "undefined" ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);
    };
    util.ByteStringBuffer.prototype.at = function(i) {
      return this.data.charCodeAt(this.read + i);
    };
    util.ByteStringBuffer.prototype.setAt = function(i, b) {
      this.data = this.data.substr(0, this.read + i) + String.fromCharCode(b) + this.data.substr(this.read + i + 1);
      return this;
    };
    util.ByteStringBuffer.prototype.last = function() {
      return this.data.charCodeAt(this.data.length - 1);
    };
    util.ByteStringBuffer.prototype.copy = function() {
      var c = util.createBuffer(this.data);
      c.read = this.read;
      return c;
    };
    util.ByteStringBuffer.prototype.compact = function() {
      if (this.read > 0) {
        this.data = this.data.slice(this.read);
        this.read = 0;
      }
      return this;
    };
    util.ByteStringBuffer.prototype.clear = function() {
      this.data = "";
      this.read = 0;
      return this;
    };
    util.ByteStringBuffer.prototype.truncate = function(count) {
      var len = Math.max(0, this.length() - count);
      this.data = this.data.substr(this.read, len);
      this.read = 0;
      return this;
    };
    util.ByteStringBuffer.prototype.toHex = function() {
      var rval = "";
      for (var i = this.read; i < this.data.length; ++i) {
        var b = this.data.charCodeAt(i);
        if (b < 16) {
          rval += "0";
        }
        rval += b.toString(16);
      }
      return rval;
    };
    util.ByteStringBuffer.prototype.toString = function() {
      return util.decodeUtf8(this.bytes());
    };
    function DataBuffer(b, options) {
      options = options || {};
      this.read = options.readOffset || 0;
      this.growSize = options.growSize || 1024;
      var isArrayBuffer = util.isArrayBuffer(b);
      var isArrayBufferView = util.isArrayBufferView(b);
      if (isArrayBuffer || isArrayBufferView) {
        if (isArrayBuffer) {
          this.data = new DataView(b);
        } else {
          this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);
        }
        this.write = "writeOffset" in options ? options.writeOffset : this.data.byteLength;
        return;
      }
      this.data = new DataView(new ArrayBuffer(0));
      this.write = 0;
      if (b !== null && b !== void 0) {
        this.putBytes(b);
      }
      if ("writeOffset" in options) {
        this.write = options.writeOffset;
      }
    }
    util.DataBuffer = DataBuffer;
    util.DataBuffer.prototype.length = function() {
      return this.write - this.read;
    };
    util.DataBuffer.prototype.isEmpty = function() {
      return this.length() <= 0;
    };
    util.DataBuffer.prototype.accommodate = function(amount, growSize) {
      if (this.length() >= amount) {
        return this;
      }
      growSize = Math.max(growSize || this.growSize, amount);
      var src = new Uint8Array(
        this.data.buffer,
        this.data.byteOffset,
        this.data.byteLength
      );
      var dst = new Uint8Array(this.length() + growSize);
      dst.set(src);
      this.data = new DataView(dst.buffer);
      return this;
    };
    util.DataBuffer.prototype.putByte = function(b) {
      this.accommodate(1);
      this.data.setUint8(this.write++, b);
      return this;
    };
    util.DataBuffer.prototype.fillWithByte = function(b, n) {
      this.accommodate(n);
      for (var i = 0; i < n; ++i) {
        this.data.setUint8(b);
      }
      return this;
    };
    util.DataBuffer.prototype.putBytes = function(bytes, encoding) {
      if (util.isArrayBufferView(bytes)) {
        var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
        var len = src.byteLength - src.byteOffset;
        this.accommodate(len);
        var dst = new Uint8Array(this.data.buffer, this.write);
        dst.set(src);
        this.write += len;
        return this;
      }
      if (util.isArrayBuffer(bytes)) {
        var src = new Uint8Array(bytes);
        this.accommodate(src.byteLength);
        var dst = new Uint8Array(this.data.buffer);
        dst.set(src, this.write);
        this.write += src.byteLength;
        return this;
      }
      if (bytes instanceof util.DataBuffer || typeof bytes === "object" && typeof bytes.read === "number" && typeof bytes.write === "number" && util.isArrayBufferView(bytes.data)) {
        var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());
        this.accommodate(src.byteLength);
        var dst = new Uint8Array(bytes.data.byteLength, this.write);
        dst.set(src);
        this.write += src.byteLength;
        return this;
      }
      if (bytes instanceof util.ByteStringBuffer) {
        bytes = bytes.data;
        encoding = "binary";
      }
      encoding = encoding || "binary";
      if (typeof bytes === "string") {
        var view;
        if (encoding === "hex") {
          this.accommodate(Math.ceil(bytes.length / 2));
          view = new Uint8Array(this.data.buffer, this.write);
          this.write += util.binary.hex.decode(bytes, view, this.write);
          return this;
        }
        if (encoding === "base64") {
          this.accommodate(Math.ceil(bytes.length / 4) * 3);
          view = new Uint8Array(this.data.buffer, this.write);
          this.write += util.binary.base64.decode(bytes, view, this.write);
          return this;
        }
        if (encoding === "utf8") {
          bytes = util.encodeUtf8(bytes);
          encoding = "binary";
        }
        if (encoding === "binary" || encoding === "raw") {
          this.accommodate(bytes.length);
          view = new Uint8Array(this.data.buffer, this.write);
          this.write += util.binary.raw.decode(view);
          return this;
        }
        if (encoding === "utf16") {
          this.accommodate(bytes.length * 2);
          view = new Uint16Array(this.data.buffer, this.write);
          this.write += util.text.utf16.encode(view);
          return this;
        }
        throw new Error("Invalid encoding: " + encoding);
      }
      throw Error("Invalid parameter: " + bytes);
    };
    util.DataBuffer.prototype.putBuffer = function(buffer) {
      this.putBytes(buffer);
      buffer.clear();
      return this;
    };
    util.DataBuffer.prototype.putString = function(str) {
      return this.putBytes(str, "utf16");
    };
    util.DataBuffer.prototype.putInt16 = function(i) {
      this.accommodate(2);
      this.data.setInt16(this.write, i);
      this.write += 2;
      return this;
    };
    util.DataBuffer.prototype.putInt24 = function(i) {
      this.accommodate(3);
      this.data.setInt16(this.write, i >> 8 & 65535);
      this.data.setInt8(this.write, i >> 16 & 255);
      this.write += 3;
      return this;
    };
    util.DataBuffer.prototype.putInt32 = function(i) {
      this.accommodate(4);
      this.data.setInt32(this.write, i);
      this.write += 4;
      return this;
    };
    util.DataBuffer.prototype.putInt16Le = function(i) {
      this.accommodate(2);
      this.data.setInt16(this.write, i, true);
      this.write += 2;
      return this;
    };
    util.DataBuffer.prototype.putInt24Le = function(i) {
      this.accommodate(3);
      this.data.setInt8(this.write, i >> 16 & 255);
      this.data.setInt16(this.write, i >> 8 & 65535, true);
      this.write += 3;
      return this;
    };
    util.DataBuffer.prototype.putInt32Le = function(i) {
      this.accommodate(4);
      this.data.setInt32(this.write, i, true);
      this.write += 4;
      return this;
    };
    util.DataBuffer.prototype.putInt = function(i, n) {
      _checkBitsParam(n);
      this.accommodate(n / 8);
      do {
        n -= 8;
        this.data.setInt8(this.write++, i >> n & 255);
      } while (n > 0);
      return this;
    };
    util.DataBuffer.prototype.putSignedInt = function(i, n) {
      _checkBitsParam(n);
      this.accommodate(n / 8);
      if (i < 0) {
        i += 2 << n - 1;
      }
      return this.putInt(i, n);
    };
    util.DataBuffer.prototype.getByte = function() {
      return this.data.getInt8(this.read++);
    };
    util.DataBuffer.prototype.getInt16 = function() {
      var rval = this.data.getInt16(this.read);
      this.read += 2;
      return rval;
    };
    util.DataBuffer.prototype.getInt24 = function() {
      var rval = this.data.getInt16(this.read) << 8 ^ this.data.getInt8(this.read + 2);
      this.read += 3;
      return rval;
    };
    util.DataBuffer.prototype.getInt32 = function() {
      var rval = this.data.getInt32(this.read);
      this.read += 4;
      return rval;
    };
    util.DataBuffer.prototype.getInt16Le = function() {
      var rval = this.data.getInt16(this.read, true);
      this.read += 2;
      return rval;
    };
    util.DataBuffer.prototype.getInt24Le = function() {
      var rval = this.data.getInt8(this.read) ^ this.data.getInt16(this.read + 1, true) << 8;
      this.read += 3;
      return rval;
    };
    util.DataBuffer.prototype.getInt32Le = function() {
      var rval = this.data.getInt32(this.read, true);
      this.read += 4;
      return rval;
    };
    util.DataBuffer.prototype.getInt = function(n) {
      _checkBitsParam(n);
      var rval = 0;
      do {
        rval = (rval << 8) + this.data.getInt8(this.read++);
        n -= 8;
      } while (n > 0);
      return rval;
    };
    util.DataBuffer.prototype.getSignedInt = function(n) {
      var x = this.getInt(n);
      var max = 2 << n - 2;
      if (x >= max) {
        x -= max << 1;
      }
      return x;
    };
    util.DataBuffer.prototype.getBytes = function(count) {
      var rval;
      if (count) {
        count = Math.min(this.length(), count);
        rval = this.data.slice(this.read, this.read + count);
        this.read += count;
      } else if (count === 0) {
        rval = "";
      } else {
        rval = this.read === 0 ? this.data : this.data.slice(this.read);
        this.clear();
      }
      return rval;
    };
    util.DataBuffer.prototype.bytes = function(count) {
      return typeof count === "undefined" ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);
    };
    util.DataBuffer.prototype.at = function(i) {
      return this.data.getUint8(this.read + i);
    };
    util.DataBuffer.prototype.setAt = function(i, b) {
      this.data.setUint8(i, b);
      return this;
    };
    util.DataBuffer.prototype.last = function() {
      return this.data.getUint8(this.write - 1);
    };
    util.DataBuffer.prototype.copy = function() {
      return new util.DataBuffer(this);
    };
    util.DataBuffer.prototype.compact = function() {
      if (this.read > 0) {
        var src = new Uint8Array(this.data.buffer, this.read);
        var dst = new Uint8Array(src.byteLength);
        dst.set(src);
        this.data = new DataView(dst);
        this.write -= this.read;
        this.read = 0;
      }
      return this;
    };
    util.DataBuffer.prototype.clear = function() {
      this.data = new DataView(new ArrayBuffer(0));
      this.read = this.write = 0;
      return this;
    };
    util.DataBuffer.prototype.truncate = function(count) {
      this.write = Math.max(0, this.length() - count);
      this.read = Math.min(this.read, this.write);
      return this;
    };
    util.DataBuffer.prototype.toHex = function() {
      var rval = "";
      for (var i = this.read; i < this.data.byteLength; ++i) {
        var b = this.data.getUint8(i);
        if (b < 16) {
          rval += "0";
        }
        rval += b.toString(16);
      }
      return rval;
    };
    util.DataBuffer.prototype.toString = function(encoding) {
      var view = new Uint8Array(this.data, this.read, this.length());
      encoding = encoding || "utf8";
      if (encoding === "binary" || encoding === "raw") {
        return util.binary.raw.encode(view);
      }
      if (encoding === "hex") {
        return util.binary.hex.encode(view);
      }
      if (encoding === "base64") {
        return util.binary.base64.encode(view);
      }
      if (encoding === "utf8") {
        return util.text.utf8.decode(view);
      }
      if (encoding === "utf16") {
        return util.text.utf16.decode(view);
      }
      throw new Error("Invalid encoding: " + encoding);
    };
    util.createBuffer = function(input, encoding) {
      encoding = encoding || "raw";
      if (input !== void 0 && encoding === "utf8") {
        input = util.encodeUtf8(input);
      }
      return new util.ByteBuffer(input);
    };
    util.fillString = function(c, n) {
      var s = "";
      while (n > 0) {
        if (n & 1) {
          s += c;
        }
        n >>>= 1;
        if (n > 0) {
          c += c;
        }
      }
      return s;
    };
    util.xorBytes = function(s1, s2, n) {
      var s3 = "";
      var b = "";
      var t = "";
      var i = 0;
      var c = 0;
      for (; n > 0; --n, ++i) {
        b = s1.charCodeAt(i) ^ s2.charCodeAt(i);
        if (c >= 10) {
          s3 += t;
          t = "";
          c = 0;
        }
        t += String.fromCharCode(b);
        ++c;
      }
      s3 += t;
      return s3;
    };
    util.hexToBytes = function(hex) {
      var rval = "";
      var i = 0;
      if (hex.length & true) {
        i = 1;
        rval += String.fromCharCode(parseInt(hex[0], 16));
      }
      for (; i < hex.length; i += 2) {
        rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
      }
      return rval;
    };
    util.bytesToHex = function(bytes) {
      return util.createBuffer(bytes).toHex();
    };
    util.int32ToBytes = function(i) {
      return String.fromCharCode(i >> 24 & 255) + String.fromCharCode(i >> 16 & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i & 255);
    };
    var _base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var _base64Idx = [
      /*43 -43 = 0*/
      /*'+',  1,  2,  3,'/' */
      62,
      -1,
      -1,
      -1,
      63,
      /*'0','1','2','3','4','5','6','7','8','9' */
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      /*15, 16, 17,'=', 19, 20, 21 */
      -1,
      -1,
      -1,
      64,
      -1,
      -1,
      -1,
      /*65 - 43 = 22*/
      /*'A','B','C','D','E','F','G','H','I','J','K','L','M', */
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      /*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      /*91 - 43 = 48 */
      /*48, 49, 50, 51, 52, 53 */
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      /*97 - 43 = 54*/
      /*'a','b','c','d','e','f','g','h','i','j','k','l','m' */
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      /*'n','o','p','q','r','s','t','u','v','w','x','y','z' */
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51
    ];
    var _base58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    util.encode64 = function(input, maxline) {
      var line = "";
      var output = "";
      var chr1, chr2, chr3;
      var i = 0;
      while (i < input.length) {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);
        line += _base64.charAt(chr1 >> 2);
        line += _base64.charAt((chr1 & 3) << 4 | chr2 >> 4);
        if (isNaN(chr2)) {
          line += "==";
        } else {
          line += _base64.charAt((chr2 & 15) << 2 | chr3 >> 6);
          line += isNaN(chr3) ? "=" : _base64.charAt(chr3 & 63);
        }
        if (maxline && line.length > maxline) {
          output += line.substr(0, maxline) + "\r\n";
          line = line.substr(maxline);
        }
      }
      output += line;
      return output;
    };
    util.decode64 = function(input) {
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      var output = "";
      var enc1, enc2, enc3, enc4;
      var i = 0;
      while (i < input.length) {
        enc1 = _base64Idx[input.charCodeAt(i++) - 43];
        enc2 = _base64Idx[input.charCodeAt(i++) - 43];
        enc3 = _base64Idx[input.charCodeAt(i++) - 43];
        enc4 = _base64Idx[input.charCodeAt(i++) - 43];
        output += String.fromCharCode(enc1 << 2 | enc2 >> 4);
        if (enc3 !== 64) {
          output += String.fromCharCode((enc2 & 15) << 4 | enc3 >> 2);
          if (enc4 !== 64) {
            output += String.fromCharCode((enc3 & 3) << 6 | enc4);
          }
        }
      }
      return output;
    };
    util.encodeUtf8 = function(str) {
      return unescape(encodeURIComponent(str));
    };
    util.decodeUtf8 = function(str) {
      return decodeURIComponent(escape(str));
    };
    util.binary = {
      raw: {},
      hex: {},
      base64: {},
      base58: {},
      baseN: {
        encode: baseN.encode,
        decode: baseN.decode
      }
    };
    util.binary.raw.encode = function(bytes) {
      return String.fromCharCode.apply(null, bytes);
    };
    util.binary.raw.decode = function(str, output, offset) {
      var out = output;
      if (!out) {
        out = new Uint8Array(str.length);
      }
      offset = offset || 0;
      var j = offset;
      for (var i = 0; i < str.length; ++i) {
        out[j++] = str.charCodeAt(i);
      }
      return output ? j - offset : out;
    };
    util.binary.hex.encode = util.bytesToHex;
    util.binary.hex.decode = function(hex, output, offset) {
      var out = output;
      if (!out) {
        out = new Uint8Array(Math.ceil(hex.length / 2));
      }
      offset = offset || 0;
      var i = 0, j = offset;
      if (hex.length & 1) {
        i = 1;
        out[j++] = parseInt(hex[0], 16);
      }
      for (; i < hex.length; i += 2) {
        out[j++] = parseInt(hex.substr(i, 2), 16);
      }
      return output ? j - offset : out;
    };
    util.binary.base64.encode = function(input, maxline) {
      var line = "";
      var output = "";
      var chr1, chr2, chr3;
      var i = 0;
      while (i < input.byteLength) {
        chr1 = input[i++];
        chr2 = input[i++];
        chr3 = input[i++];
        line += _base64.charAt(chr1 >> 2);
        line += _base64.charAt((chr1 & 3) << 4 | chr2 >> 4);
        if (isNaN(chr2)) {
          line += "==";
        } else {
          line += _base64.charAt((chr2 & 15) << 2 | chr3 >> 6);
          line += isNaN(chr3) ? "=" : _base64.charAt(chr3 & 63);
        }
        if (maxline && line.length > maxline) {
          output += line.substr(0, maxline) + "\r\n";
          line = line.substr(maxline);
        }
      }
      output += line;
      return output;
    };
    util.binary.base64.decode = function(input, output, offset) {
      var out = output;
      if (!out) {
        out = new Uint8Array(Math.ceil(input.length / 4) * 3);
      }
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      offset = offset || 0;
      var enc1, enc2, enc3, enc4;
      var i = 0, j = offset;
      while (i < input.length) {
        enc1 = _base64Idx[input.charCodeAt(i++) - 43];
        enc2 = _base64Idx[input.charCodeAt(i++) - 43];
        enc3 = _base64Idx[input.charCodeAt(i++) - 43];
        enc4 = _base64Idx[input.charCodeAt(i++) - 43];
        out[j++] = enc1 << 2 | enc2 >> 4;
        if (enc3 !== 64) {
          out[j++] = (enc2 & 15) << 4 | enc3 >> 2;
          if (enc4 !== 64) {
            out[j++] = (enc3 & 3) << 6 | enc4;
          }
        }
      }
      return output ? j - offset : out.subarray(0, j);
    };
    util.binary.base58.encode = function(input, maxline) {
      return util.binary.baseN.encode(input, _base58, maxline);
    };
    util.binary.base58.decode = function(input, maxline) {
      return util.binary.baseN.decode(input, _base58, maxline);
    };
    util.text = {
      utf8: {},
      utf16: {}
    };
    util.text.utf8.encode = function(str, output, offset) {
      str = util.encodeUtf8(str);
      var out = output;
      if (!out) {
        out = new Uint8Array(str.length);
      }
      offset = offset || 0;
      var j = offset;
      for (var i = 0; i < str.length; ++i) {
        out[j++] = str.charCodeAt(i);
      }
      return output ? j - offset : out;
    };
    util.text.utf8.decode = function(bytes) {
      return util.decodeUtf8(String.fromCharCode.apply(null, bytes));
    };
    util.text.utf16.encode = function(str, output, offset) {
      var out = output;
      if (!out) {
        out = new Uint8Array(str.length * 2);
      }
      var view = new Uint16Array(out.buffer);
      offset = offset || 0;
      var j = offset;
      var k = offset;
      for (var i = 0; i < str.length; ++i) {
        view[k++] = str.charCodeAt(i);
        j += 2;
      }
      return output ? j - offset : out;
    };
    util.text.utf16.decode = function(bytes) {
      return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));
    };
    util.deflate = function(api, bytes, raw) {
      bytes = util.decode64(api.deflate(util.encode64(bytes)).rval);
      if (raw) {
        var start = 2;
        var flg = bytes.charCodeAt(1);
        if (flg & 32) {
          start = 6;
        }
        bytes = bytes.substring(start, bytes.length - 4);
      }
      return bytes;
    };
    util.inflate = function(api, bytes, raw) {
      var rval = api.inflate(util.encode64(bytes)).rval;
      return rval === null ? null : util.decode64(rval);
    };
    var _setStorageObject = function(api, id, obj) {
      if (!api) {
        throw new Error("WebStorage not available.");
      }
      var rval;
      if (obj === null) {
        rval = api.removeItem(id);
      } else {
        obj = util.encode64(JSON.stringify(obj));
        rval = api.setItem(id, obj);
      }
      if (typeof rval !== "undefined" && rval.rval !== true) {
        var error = new Error(rval.error.message);
        error.id = rval.error.id;
        error.name = rval.error.name;
        throw error;
      }
    };
    var _getStorageObject = function(api, id) {
      if (!api) {
        throw new Error("WebStorage not available.");
      }
      var rval = api.getItem(id);
      if (api.init) {
        if (rval.rval === null) {
          if (rval.error) {
            var error = new Error(rval.error.message);
            error.id = rval.error.id;
            error.name = rval.error.name;
            throw error;
          }
          rval = null;
        } else {
          rval = rval.rval;
        }
      }
      if (rval !== null) {
        rval = JSON.parse(util.decode64(rval));
      }
      return rval;
    };
    var _setItem = function(api, id, key, data) {
      var obj = _getStorageObject(api, id);
      if (obj === null) {
        obj = {};
      }
      obj[key] = data;
      _setStorageObject(api, id, obj);
    };
    var _getItem = function(api, id, key) {
      var rval = _getStorageObject(api, id);
      if (rval !== null) {
        rval = key in rval ? rval[key] : null;
      }
      return rval;
    };
    var _removeItem = function(api, id, key) {
      var obj = _getStorageObject(api, id);
      if (obj !== null && key in obj) {
        delete obj[key];
        var empty = true;
        for (var prop in obj) {
          empty = false;
          break;
        }
        if (empty) {
          obj = null;
        }
        _setStorageObject(api, id, obj);
      }
    };
    var _clearItems = function(api, id) {
      _setStorageObject(api, id, null);
    };
    var _callStorageFunction = function(func, args, location) {
      var rval = null;
      if (typeof location === "undefined") {
        location = ["web", "flash"];
      }
      var type;
      var done = false;
      var exception = null;
      for (var idx in location) {
        type = location[idx];
        try {
          if (type === "flash" || type === "both") {
            if (args[0] === null) {
              throw new Error("Flash local storage not available.");
            }
            rval = func.apply(this, args);
            done = type === "flash";
          }
          if (type === "web" || type === "both") {
            args[0] = localStorage;
            rval = func.apply(this, args);
            done = true;
          }
        } catch (ex) {
          exception = ex;
        }
        if (done) {
          break;
        }
      }
      if (!done) {
        throw exception;
      }
      return rval;
    };
    util.setItem = function(api, id, key, data, location) {
      _callStorageFunction(_setItem, arguments, location);
    };
    util.getItem = function(api, id, key, location) {
      return _callStorageFunction(_getItem, arguments, location);
    };
    util.removeItem = function(api, id, key, location) {
      _callStorageFunction(_removeItem, arguments, location);
    };
    util.clearItems = function(api, id, location) {
      _callStorageFunction(_clearItems, arguments, location);
    };
    util.isEmpty = function(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
          return false;
        }
      }
      return true;
    };
    util.format = function(format) {
      var re = /%./g;
      var match;
      var part;
      var argi = 0;
      var parts = [];
      var last = 0;
      while (match = re.exec(format)) {
        part = format.substring(last, re.lastIndex - 2);
        if (part.length > 0) {
          parts.push(part);
        }
        last = re.lastIndex;
        var code = match[0][1];
        switch (code) {
          case "s":
          case "o":
            if (argi < arguments.length) {
              parts.push(arguments[argi++ + 1]);
            } else {
              parts.push("<?>");
            }
            break;
          case "%":
            parts.push("%");
            break;
          default:
            parts.push("<%" + code + "?>");
        }
      }
      parts.push(format.substring(last));
      return parts.join("");
    };
    util.formatNumber = function(number, decimals, dec_point, thousands_sep) {
      var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;
      var d = dec_point === void 0 ? "," : dec_point;
      var t = thousands_sep === void 0 ? "." : thousands_sep, s = n < 0 ? "-" : "";
      var i = parseInt(n = Math.abs(+n || 0).toFixed(c), 10) + "";
      var j = i.length > 3 ? i.length % 3 : 0;
      return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
    };
    util.formatSize = function(size) {
      if (size >= 1073741824) {
        size = util.formatNumber(size / 1073741824, 2, ".", "") + " GiB";
      } else if (size >= 1048576) {
        size = util.formatNumber(size / 1048576, 2, ".", "") + " MiB";
      } else if (size >= 1024) {
        size = util.formatNumber(size / 1024, 0) + " KiB";
      } else {
        size = util.formatNumber(size, 0) + " bytes";
      }
      return size;
    };
    util.bytesFromIP = function(ip) {
      if (ip.indexOf(".") !== -1) {
        return util.bytesFromIPv4(ip);
      }
      if (ip.indexOf(":") !== -1) {
        return util.bytesFromIPv6(ip);
      }
      return null;
    };
    util.bytesFromIPv4 = function(ip) {
      ip = ip.split(".");
      if (ip.length !== 4) {
        return null;
      }
      var b = util.createBuffer();
      for (var i = 0; i < ip.length; ++i) {
        var num = parseInt(ip[i], 10);
        if (isNaN(num)) {
          return null;
        }
        b.putByte(num);
      }
      return b.getBytes();
    };
    util.bytesFromIPv6 = function(ip) {
      var blanks = 0;
      ip = ip.split(":").filter(function(e) {
        if (e.length === 0)
          ++blanks;
        return true;
      });
      var zeros = (8 - ip.length + blanks) * 2;
      var b = util.createBuffer();
      for (var i = 0; i < 8; ++i) {
        if (!ip[i] || ip[i].length === 0) {
          b.fillWithByte(0, zeros);
          zeros = 0;
          continue;
        }
        var bytes = util.hexToBytes(ip[i]);
        if (bytes.length < 2) {
          b.putByte(0);
        }
        b.putBytes(bytes);
      }
      return b.getBytes();
    };
    util.bytesToIP = function(bytes) {
      if (bytes.length === 4) {
        return util.bytesToIPv4(bytes);
      }
      if (bytes.length === 16) {
        return util.bytesToIPv6(bytes);
      }
      return null;
    };
    util.bytesToIPv4 = function(bytes) {
      if (bytes.length !== 4) {
        return null;
      }
      var ip = [];
      for (var i = 0; i < bytes.length; ++i) {
        ip.push(bytes.charCodeAt(i));
      }
      return ip.join(".");
    };
    util.bytesToIPv6 = function(bytes) {
      if (bytes.length !== 16) {
        return null;
      }
      var ip = [];
      var zeroGroups = [];
      var zeroMaxGroup = 0;
      for (var i = 0; i < bytes.length; i += 2) {
        var hex = util.bytesToHex(bytes[i] + bytes[i + 1]);
        while (hex[0] === "0" && hex !== "0") {
          hex = hex.substr(1);
        }
        if (hex === "0") {
          var last = zeroGroups[zeroGroups.length - 1];
          var idx = ip.length;
          if (!last || idx !== last.end + 1) {
            zeroGroups.push({ start: idx, end: idx });
          } else {
            last.end = idx;
            if (last.end - last.start > zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start) {
              zeroMaxGroup = zeroGroups.length - 1;
            }
          }
        }
        ip.push(hex);
      }
      if (zeroGroups.length > 0) {
        var group = zeroGroups[zeroMaxGroup];
        if (group.end - group.start > 0) {
          ip.splice(group.start, group.end - group.start + 1, "");
          if (group.start === 0) {
            ip.unshift("");
          }
          if (group.end === 7) {
            ip.push("");
          }
        }
      }
      return ip.join(":");
    };
    util.estimateCores = function(options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      options = options || {};
      if ("cores" in util && !options.update) {
        return callback(null, util.cores);
      }
      if (typeof navigator !== "undefined" && "hardwareConcurrency" in navigator && navigator.hardwareConcurrency > 0) {
        util.cores = navigator.hardwareConcurrency;
        return callback(null, util.cores);
      }
      if (typeof Worker === "undefined") {
        util.cores = 1;
        return callback(null, util.cores);
      }
      if (typeof Blob === "undefined") {
        util.cores = 2;
        return callback(null, util.cores);
      }
      var blobUrl = URL.createObjectURL(new Blob([
        "(",
        function() {
          self.addEventListener("message", function(e) {
            var st = Date.now();
            var et = st + 4;
            while (Date.now() < et)
              ;
            self.postMessage({ st, et });
          });
        }.toString(),
        ")()"
      ], { type: "application/javascript" }));
      sample([], 5, 16);
      function sample(max, samples, numWorkers) {
        if (samples === 0) {
          var avg = Math.floor(max.reduce(function(avg2, x) {
            return avg2 + x;
          }, 0) / max.length);
          util.cores = Math.max(1, avg);
          URL.revokeObjectURL(blobUrl);
          return callback(null, util.cores);
        }
        map(numWorkers, function(err, results) {
          max.push(reduce(numWorkers, results));
          sample(max, samples - 1, numWorkers);
        });
      }
      function map(numWorkers, callback2) {
        var workers = [];
        var results = [];
        for (var i = 0; i < numWorkers; ++i) {
          var worker = new Worker(blobUrl);
          worker.addEventListener("message", function(e) {
            results.push(e.data);
            if (results.length === numWorkers) {
              for (var i2 = 0; i2 < numWorkers; ++i2) {
                workers[i2].terminate();
              }
              callback2(null, results);
            }
          });
          workers.push(worker);
        }
        for (var i = 0; i < numWorkers; ++i) {
          workers[i].postMessage(i);
        }
      }
      function reduce(numWorkers, results) {
        var overlaps = [];
        for (var n = 0; n < numWorkers; ++n) {
          var r1 = results[n];
          var overlap = overlaps[n] = [];
          for (var i = 0; i < numWorkers; ++i) {
            if (n === i) {
              continue;
            }
            var r2 = results[i];
            if (r1.st > r2.st && r1.st < r2.et || r2.st > r1.st && r2.st < r1.et) {
              overlap.push(i);
            }
          }
        }
        return overlaps.reduce(function(max, overlap2) {
          return Math.max(max, overlap2.length);
        }, 0);
      }
    };
  }
});

// node_modules/node-forge/lib/cipher.js
var require_cipher = __commonJS({
  "node_modules/node-forge/lib/cipher.js"(exports, module2) {
    var forge = require_forge();
    require_util();
    module2.exports = forge.cipher = forge.cipher || {};
    forge.cipher.algorithms = forge.cipher.algorithms || {};
    forge.cipher.createCipher = function(algorithm, key) {
      var api = algorithm;
      if (typeof api === "string") {
        api = forge.cipher.getAlgorithm(api);
        if (api) {
          api = api();
        }
      }
      if (!api) {
        throw new Error("Unsupported algorithm: " + algorithm);
      }
      return new forge.cipher.BlockCipher({
        algorithm: api,
        key,
        decrypt: false
      });
    };
    forge.cipher.createDecipher = function(algorithm, key) {
      var api = algorithm;
      if (typeof api === "string") {
        api = forge.cipher.getAlgorithm(api);
        if (api) {
          api = api();
        }
      }
      if (!api) {
        throw new Error("Unsupported algorithm: " + algorithm);
      }
      return new forge.cipher.BlockCipher({
        algorithm: api,
        key,
        decrypt: true
      });
    };
    forge.cipher.registerAlgorithm = function(name, algorithm) {
      name = name.toUpperCase();
      forge.cipher.algorithms[name] = algorithm;
    };
    forge.cipher.getAlgorithm = function(name) {
      name = name.toUpperCase();
      if (name in forge.cipher.algorithms) {
        return forge.cipher.algorithms[name];
      }
      return null;
    };
    var BlockCipher = forge.cipher.BlockCipher = function(options) {
      this.algorithm = options.algorithm;
      this.mode = this.algorithm.mode;
      this.blockSize = this.mode.blockSize;
      this._finish = false;
      this._input = null;
      this.output = null;
      this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;
      this._decrypt = options.decrypt;
      this.algorithm.initialize(options);
    };
    BlockCipher.prototype.start = function(options) {
      options = options || {};
      var opts = {};
      for (var key in options) {
        opts[key] = options[key];
      }
      opts.decrypt = this._decrypt;
      this._finish = false;
      this._input = forge.util.createBuffer();
      this.output = options.output || forge.util.createBuffer();
      this.mode.start(opts);
    };
    BlockCipher.prototype.update = function(input) {
      if (input) {
        this._input.putBuffer(input);
      }
      while (!this._op.call(this.mode, this._input, this.output, this._finish) && !this._finish) {
      }
      this._input.compact();
    };
    BlockCipher.prototype.finish = function(pad) {
      if (pad && (this.mode.name === "ECB" || this.mode.name === "CBC")) {
        this.mode.pad = function(input) {
          return pad(this.blockSize, input, false);
        };
        this.mode.unpad = function(output) {
          return pad(this.blockSize, output, true);
        };
      }
      var options = {};
      options.decrypt = this._decrypt;
      options.overflow = this._input.length() % this.blockSize;
      if (!this._decrypt && this.mode.pad) {
        if (!this.mode.pad(this._input, options)) {
          return false;
        }
      }
      this._finish = true;
      this.update();
      if (this._decrypt && this.mode.unpad) {
        if (!this.mode.unpad(this.output, options)) {
          return false;
        }
      }
      if (this.mode.afterFinish) {
        if (!this.mode.afterFinish(this.output, options)) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/node-forge/lib/cipherModes.js
var require_cipherModes = __commonJS({
  "node_modules/node-forge/lib/cipherModes.js"(exports, module2) {
    var forge = require_forge();
    require_util();
    forge.cipher = forge.cipher || {};
    var modes = module2.exports = forge.cipher.modes = forge.cipher.modes || {};
    modes.ecb = function(options) {
      options = options || {};
      this.name = "ECB";
      this.cipher = options.cipher;
      this.blockSize = options.blockSize || 16;
      this._ints = this.blockSize / 4;
      this._inBlock = new Array(this._ints);
      this._outBlock = new Array(this._ints);
    };
    modes.ecb.prototype.start = function(options) {
    };
    modes.ecb.prototype.encrypt = function(input, output, finish) {
      if (input.length() < this.blockSize && !(finish && input.length() > 0)) {
        return true;
      }
      for (var i = 0; i < this._ints; ++i) {
        this._inBlock[i] = input.getInt32();
      }
      this.cipher.encrypt(this._inBlock, this._outBlock);
      for (var i = 0; i < this._ints; ++i) {
        output.putInt32(this._outBlock[i]);
      }
    };
    modes.ecb.prototype.decrypt = function(input, output, finish) {
      if (input.length() < this.blockSize && !(finish && input.length() > 0)) {
        return true;
      }
      for (var i = 0; i < this._ints; ++i) {
        this._inBlock[i] = input.getInt32();
      }
      this.cipher.decrypt(this._inBlock, this._outBlock);
      for (var i = 0; i < this._ints; ++i) {
        output.putInt32(this._outBlock[i]);
      }
    };
    modes.ecb.prototype.pad = function(input, options) {
      var padding = input.length() === this.blockSize ? this.blockSize : this.blockSize - input.length();
      input.fillWithByte(padding, padding);
      return true;
    };
    modes.ecb.prototype.unpad = function(output, options) {
      if (options.overflow > 0) {
        return false;
      }
      var len = output.length();
      var count = output.at(len - 1);
      if (count > this.blockSize << 2) {
        return false;
      }
      output.truncate(count);
      return true;
    };
    modes.cbc = function(options) {
      options = options || {};
      this.name = "CBC";
      this.cipher = options.cipher;
      this.blockSize = options.blockSize || 16;
      this._ints = this.blockSize / 4;
      this._inBlock = new Array(this._ints);
      this._outBlock = new Array(this._ints);
    };
    modes.cbc.prototype.start = function(options) {
      if (options.iv === null) {
        if (!this._prev) {
          throw new Error("Invalid IV parameter.");
        }
        this._iv = this._prev.slice(0);
      } else if (!("iv" in options)) {
        throw new Error("Invalid IV parameter.");
      } else {
        this._iv = transformIV(options.iv, this.blockSize);
        this._prev = this._iv.slice(0);
      }
    };
    modes.cbc.prototype.encrypt = function(input, output, finish) {
      if (input.length() < this.blockSize && !(finish && input.length() > 0)) {
        return true;
      }
      for (var i = 0; i < this._ints; ++i) {
        this._inBlock[i] = this._prev[i] ^ input.getInt32();
      }
      this.cipher.encrypt(this._inBlock, this._outBlock);
      for (var i = 0; i < this._ints; ++i) {
        output.putInt32(this._outBlock[i]);
      }
      this._prev = this._outBlock;
    };
    modes.cbc.prototype.decrypt = function(input, output, finish) {
      if (input.length() < this.blockSize && !(finish && input.length() > 0)) {
        return true;
      }
      for (var i = 0; i < this._ints; ++i) {
        this._inBlock[i] = input.getInt32();
      }
      this.cipher.decrypt(this._inBlock, this._outBlock);
      for (var i = 0; i < this._ints; ++i) {
        output.putInt32(this._prev[i] ^ this._outBlock[i]);
      }
      this._prev = this._inBlock.slice(0);
    };
    modes.cbc.prototype.pad = function(input, options) {
      var padding = input.length() === this.blockSize ? this.blockSize : this.blockSize - input.length();
      input.fillWithByte(padding, padding);
      return true;
    };
    modes.cbc.prototype.unpad = function(output, options) {
      if (options.overflow > 0) {
        return false;
      }
      var len = output.length();
      var count = output.at(len - 1);
      if (count > this.blockSize << 2) {
        return false;
      }
      output.truncate(count);
      return true;
    };
    modes.cfb = function(options) {
      options = options || {};
      this.name = "CFB";
      this.cipher = options.cipher;
      this.blockSize = options.blockSize || 16;
      this._ints = this.blockSize / 4;
      this._inBlock = null;
      this._outBlock = new Array(this._ints);
      this._partialBlock = new Array(this._ints);
      this._partialOutput = forge.util.createBuffer();
      this._partialBytes = 0;
    };
    modes.cfb.prototype.start = function(options) {
      if (!("iv" in options)) {
        throw new Error("Invalid IV parameter.");
      }
      this._iv = transformIV(options.iv, this.blockSize);
      this._inBlock = this._iv.slice(0);
      this._partialBytes = 0;
    };
    modes.cfb.prototype.encrypt = function(input, output, finish) {
      var inputLength = input.length();
      if (inputLength === 0) {
        return true;
      }
      this.cipher.encrypt(this._inBlock, this._outBlock);
      if (this._partialBytes === 0 && inputLength >= this.blockSize) {
        for (var i = 0; i < this._ints; ++i) {
          this._inBlock[i] = input.getInt32() ^ this._outBlock[i];
          output.putInt32(this._inBlock[i]);
        }
        return;
      }
      var partialBytes = (this.blockSize - inputLength) % this.blockSize;
      if (partialBytes > 0) {
        partialBytes = this.blockSize - partialBytes;
      }
      this._partialOutput.clear();
      for (var i = 0; i < this._ints; ++i) {
        this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];
        this._partialOutput.putInt32(this._partialBlock[i]);
      }
      if (partialBytes > 0) {
        input.read -= this.blockSize;
      } else {
        for (var i = 0; i < this._ints; ++i) {
          this._inBlock[i] = this._partialBlock[i];
        }
      }
      if (this._partialBytes > 0) {
        this._partialOutput.getBytes(this._partialBytes);
      }
      if (partialBytes > 0 && !finish) {
        output.putBytes(this._partialOutput.getBytes(
          partialBytes - this._partialBytes
        ));
        this._partialBytes = partialBytes;
        return true;
      }
      output.putBytes(this._partialOutput.getBytes(
        inputLength - this._partialBytes
      ));
      this._partialBytes = 0;
    };
    modes.cfb.prototype.decrypt = function(input, output, finish) {
      var inputLength = input.length();
      if (inputLength === 0) {
        return true;
      }
      this.cipher.encrypt(this._inBlock, this._outBlock);
      if (this._partialBytes === 0 && inputLength >= this.blockSize) {
        for (var i = 0; i < this._ints; ++i) {
          this._inBlock[i] = input.getInt32();
          output.putInt32(this._inBlock[i] ^ this._outBlock[i]);
        }
        return;
      }
      var partialBytes = (this.blockSize - inputLength) % this.blockSize;
      if (partialBytes > 0) {
        partialBytes = this.blockSize - partialBytes;
      }
      this._partialOutput.clear();
      for (var i = 0; i < this._ints; ++i) {
        this._partialBlock[i] = input.getInt32();
        this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);
      }
      if (partialBytes > 0) {
        input.read -= this.blockSize;
      } else {
        for (var i = 0; i < this._ints; ++i) {
          this._inBlock[i] = this._partialBlock[i];
        }
      }
      if (this._partialBytes > 0) {
        this._partialOutput.getBytes(this._partialBytes);
      }
      if (partialBytes > 0 && !finish) {
        output.putBytes(this._partialOutput.getBytes(
          partialBytes - this._partialBytes
        ));
        this._partialBytes = partialBytes;
        return true;
      }
      output.putBytes(this._partialOutput.getBytes(
        inputLength - this._partialBytes
      ));
      this._partialBytes = 0;
    };
    modes.ofb = function(options) {
      options = options || {};
      this.name = "OFB";
      this.cipher = options.cipher;
      this.blockSize = options.blockSize || 16;
      this._ints = this.blockSize / 4;
      this._inBlock = null;
      this._outBlock = new Array(this._ints);
      this._partialOutput = forge.util.createBuffer();
      this._partialBytes = 0;
    };
    modes.ofb.prototype.start = function(options) {
      if (!("iv" in options)) {
        throw new Error("Invalid IV parameter.");
      }
      this._iv = transformIV(options.iv, this.blockSize);
      this._inBlock = this._iv.slice(0);
      this._partialBytes = 0;
    };
    modes.ofb.prototype.encrypt = function(input, output, finish) {
      var inputLength = input.length();
      if (input.length() === 0) {
        return true;
      }
      this.cipher.encrypt(this._inBlock, this._outBlock);
      if (this._partialBytes === 0 && inputLength >= this.blockSize) {
        for (var i = 0; i < this._ints; ++i) {
          output.putInt32(input.getInt32() ^ this._outBlock[i]);
          this._inBlock[i] = this._outBlock[i];
        }
        return;
      }
      var partialBytes = (this.blockSize - inputLength) % this.blockSize;
      if (partialBytes > 0) {
        partialBytes = this.blockSize - partialBytes;
      }
      this._partialOutput.clear();
      for (var i = 0; i < this._ints; ++i) {
        this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
      }
      if (partialBytes > 0) {
        input.read -= this.blockSize;
      } else {
        for (var i = 0; i < this._ints; ++i) {
          this._inBlock[i] = this._outBlock[i];
        }
      }
      if (this._partialBytes > 0) {
        this._partialOutput.getBytes(this._partialBytes);
      }
      if (partialBytes > 0 && !finish) {
        output.putBytes(this._partialOutput.getBytes(
          partialBytes - this._partialBytes
        ));
        this._partialBytes = partialBytes;
        return true;
      }
      output.putBytes(this._partialOutput.getBytes(
        inputLength - this._partialBytes
      ));
      this._partialBytes = 0;
    };
    modes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;
    modes.ctr = function(options) {
      options = options || {};
      this.name = "CTR";
      this.cipher = options.cipher;
      this.blockSize = options.blockSize || 16;
      this._ints = this.blockSize / 4;
      this._inBlock = null;
      this._outBlock = new Array(this._ints);
      this._partialOutput = forge.util.createBuffer();
      this._partialBytes = 0;
    };
    modes.ctr.prototype.start = function(options) {
      if (!("iv" in options)) {
        throw new Error("Invalid IV parameter.");
      }
      this._iv = transformIV(options.iv, this.blockSize);
      this._inBlock = this._iv.slice(0);
      this._partialBytes = 0;
    };
    modes.ctr.prototype.encrypt = function(input, output, finish) {
      var inputLength = input.length();
      if (inputLength === 0) {
        return true;
      }
      this.cipher.encrypt(this._inBlock, this._outBlock);
      if (this._partialBytes === 0 && inputLength >= this.blockSize) {
        for (var i = 0; i < this._ints; ++i) {
          output.putInt32(input.getInt32() ^ this._outBlock[i]);
        }
      } else {
        var partialBytes = (this.blockSize - inputLength) % this.blockSize;
        if (partialBytes > 0) {
          partialBytes = this.blockSize - partialBytes;
        }
        this._partialOutput.clear();
        for (var i = 0; i < this._ints; ++i) {
          this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
        }
        if (partialBytes > 0) {
          input.read -= this.blockSize;
        }
        if (this._partialBytes > 0) {
          this._partialOutput.getBytes(this._partialBytes);
        }
        if (partialBytes > 0 && !finish) {
          output.putBytes(this._partialOutput.getBytes(
            partialBytes - this._partialBytes
          ));
          this._partialBytes = partialBytes;
          return true;
        }
        output.putBytes(this._partialOutput.getBytes(
          inputLength - this._partialBytes
        ));
        this._partialBytes = 0;
      }
      inc32(this._inBlock);
    };
    modes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;
    modes.gcm = function(options) {
      options = options || {};
      this.name = "GCM";
      this.cipher = options.cipher;
      this.blockSize = options.blockSize || 16;
      this._ints = this.blockSize / 4;
      this._inBlock = new Array(this._ints);
      this._outBlock = new Array(this._ints);
      this._partialOutput = forge.util.createBuffer();
      this._partialBytes = 0;
      this._R = 3774873600;
    };
    modes.gcm.prototype.start = function(options) {
      if (!("iv" in options)) {
        throw new Error("Invalid IV parameter.");
      }
      var iv = forge.util.createBuffer(options.iv);
      this._cipherLength = 0;
      var additionalData;
      if ("additionalData" in options) {
        additionalData = forge.util.createBuffer(options.additionalData);
      } else {
        additionalData = forge.util.createBuffer();
      }
      if ("tagLength" in options) {
        this._tagLength = options.tagLength;
      } else {
        this._tagLength = 128;
      }
      this._tag = null;
      if (options.decrypt) {
        this._tag = forge.util.createBuffer(options.tag).getBytes();
        if (this._tag.length !== this._tagLength / 8) {
          throw new Error("Authentication tag does not match tag length.");
        }
      }
      this._hashBlock = new Array(this._ints);
      this.tag = null;
      this._hashSubkey = new Array(this._ints);
      this.cipher.encrypt([0, 0, 0, 0], this._hashSubkey);
      this.componentBits = 4;
      this._m = this.generateHashTable(this._hashSubkey, this.componentBits);
      var ivLength = iv.length();
      if (ivLength === 12) {
        this._j0 = [iv.getInt32(), iv.getInt32(), iv.getInt32(), 1];
      } else {
        this._j0 = [0, 0, 0, 0];
        while (iv.length() > 0) {
          this._j0 = this.ghash(
            this._hashSubkey,
            this._j0,
            [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()]
          );
        }
        this._j0 = this.ghash(
          this._hashSubkey,
          this._j0,
          [0, 0].concat(from64To32(ivLength * 8))
        );
      }
      this._inBlock = this._j0.slice(0);
      inc32(this._inBlock);
      this._partialBytes = 0;
      additionalData = forge.util.createBuffer(additionalData);
      this._aDataLength = from64To32(additionalData.length() * 8);
      var overflow = additionalData.length() % this.blockSize;
      if (overflow) {
        additionalData.fillWithByte(0, this.blockSize - overflow);
      }
      this._s = [0, 0, 0, 0];
      while (additionalData.length() > 0) {
        this._s = this.ghash(this._hashSubkey, this._s, [
          additionalData.getInt32(),
          additionalData.getInt32(),
          additionalData.getInt32(),
          additionalData.getInt32()
        ]);
      }
    };
    modes.gcm.prototype.encrypt = function(input, output, finish) {
      var inputLength = input.length();
      if (inputLength === 0) {
        return true;
      }
      this.cipher.encrypt(this._inBlock, this._outBlock);
      if (this._partialBytes === 0 && inputLength >= this.blockSize) {
        for (var i = 0; i < this._ints; ++i) {
          output.putInt32(this._outBlock[i] ^= input.getInt32());
        }
        this._cipherLength += this.blockSize;
      } else {
        var partialBytes = (this.blockSize - inputLength) % this.blockSize;
        if (partialBytes > 0) {
          partialBytes = this.blockSize - partialBytes;
        }
        this._partialOutput.clear();
        for (var i = 0; i < this._ints; ++i) {
          this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
        }
        if (partialBytes <= 0 || finish) {
          if (finish) {
            var overflow = inputLength % this.blockSize;
            this._cipherLength += overflow;
            this._partialOutput.truncate(this.blockSize - overflow);
          } else {
            this._cipherLength += this.blockSize;
          }
          for (var i = 0; i < this._ints; ++i) {
            this._outBlock[i] = this._partialOutput.getInt32();
          }
          this._partialOutput.read -= this.blockSize;
        }
        if (this._partialBytes > 0) {
          this._partialOutput.getBytes(this._partialBytes);
        }
        if (partialBytes > 0 && !finish) {
          input.read -= this.blockSize;
          output.putBytes(this._partialOutput.getBytes(
            partialBytes - this._partialBytes
          ));
          this._partialBytes = partialBytes;
          return true;
        }
        output.putBytes(this._partialOutput.getBytes(
          inputLength - this._partialBytes
        ));
        this._partialBytes = 0;
      }
      this._s = this.ghash(this._hashSubkey, this._s, this._outBlock);
      inc32(this._inBlock);
    };
    modes.gcm.prototype.decrypt = function(input, output, finish) {
      var inputLength = input.length();
      if (inputLength < this.blockSize && !(finish && inputLength > 0)) {
        return true;
      }
      this.cipher.encrypt(this._inBlock, this._outBlock);
      inc32(this._inBlock);
      this._hashBlock[0] = input.getInt32();
      this._hashBlock[1] = input.getInt32();
      this._hashBlock[2] = input.getInt32();
      this._hashBlock[3] = input.getInt32();
      this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock);
      for (var i = 0; i < this._ints; ++i) {
        output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);
      }
      if (inputLength < this.blockSize) {
        this._cipherLength += inputLength % this.blockSize;
      } else {
        this._cipherLength += this.blockSize;
      }
    };
    modes.gcm.prototype.afterFinish = function(output, options) {
      var rval = true;
      if (options.decrypt && options.overflow) {
        output.truncate(this.blockSize - options.overflow);
      }
      this.tag = forge.util.createBuffer();
      var lengths = this._aDataLength.concat(from64To32(this._cipherLength * 8));
      this._s = this.ghash(this._hashSubkey, this._s, lengths);
      var tag = [];
      this.cipher.encrypt(this._j0, tag);
      for (var i = 0; i < this._ints; ++i) {
        this.tag.putInt32(this._s[i] ^ tag[i]);
      }
      this.tag.truncate(this.tag.length() % (this._tagLength / 8));
      if (options.decrypt && this.tag.bytes() !== this._tag) {
        rval = false;
      }
      return rval;
    };
    modes.gcm.prototype.multiply = function(x, y) {
      var z_i = [0, 0, 0, 0];
      var v_i = y.slice(0);
      for (var i = 0; i < 128; ++i) {
        var x_i = x[i / 32 | 0] & 1 << 31 - i % 32;
        if (x_i) {
          z_i[0] ^= v_i[0];
          z_i[1] ^= v_i[1];
          z_i[2] ^= v_i[2];
          z_i[3] ^= v_i[3];
        }
        this.pow(v_i, v_i);
      }
      return z_i;
    };
    modes.gcm.prototype.pow = function(x, out) {
      var lsb = x[3] & 1;
      for (var i = 3; i > 0; --i) {
        out[i] = x[i] >>> 1 | (x[i - 1] & 1) << 31;
      }
      out[0] = x[0] >>> 1;
      if (lsb) {
        out[0] ^= this._R;
      }
    };
    modes.gcm.prototype.tableMultiply = function(x) {
      var z = [0, 0, 0, 0];
      for (var i = 0; i < 32; ++i) {
        var idx = i / 8 | 0;
        var x_i = x[idx] >>> (7 - i % 8) * 4 & 15;
        var ah = this._m[i][x_i];
        z[0] ^= ah[0];
        z[1] ^= ah[1];
        z[2] ^= ah[2];
        z[3] ^= ah[3];
      }
      return z;
    };
    modes.gcm.prototype.ghash = function(h, y, x) {
      y[0] ^= x[0];
      y[1] ^= x[1];
      y[2] ^= x[2];
      y[3] ^= x[3];
      return this.tableMultiply(y);
    };
    modes.gcm.prototype.generateHashTable = function(h, bits) {
      var multiplier = 8 / bits;
      var perInt = 4 * multiplier;
      var size = 16 * multiplier;
      var m = new Array(size);
      for (var i = 0; i < size; ++i) {
        var tmp = [0, 0, 0, 0];
        var idx = i / perInt | 0;
        var shft = (perInt - 1 - i % perInt) * bits;
        tmp[idx] = 1 << bits - 1 << shft;
        m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);
      }
      return m;
    };
    modes.gcm.prototype.generateSubHashTable = function(mid, bits) {
      var size = 1 << bits;
      var half = size >>> 1;
      var m = new Array(size);
      m[half] = mid.slice(0);
      var i = half >>> 1;
      while (i > 0) {
        this.pow(m[2 * i], m[i] = []);
        i >>= 1;
      }
      i = 2;
      while (i < half) {
        for (var j = 1; j < i; ++j) {
          var m_i = m[i];
          var m_j = m[j];
          m[i + j] = [
            m_i[0] ^ m_j[0],
            m_i[1] ^ m_j[1],
            m_i[2] ^ m_j[2],
            m_i[3] ^ m_j[3]
          ];
        }
        i *= 2;
      }
      m[0] = [0, 0, 0, 0];
      for (i = half + 1; i < size; ++i) {
        var c = m[i ^ half];
        m[i] = [mid[0] ^ c[0], mid[1] ^ c[1], mid[2] ^ c[2], mid[3] ^ c[3]];
      }
      return m;
    };
    function transformIV(iv, blockSize) {
      if (typeof iv === "string") {
        iv = forge.util.createBuffer(iv);
      }
      if (forge.util.isArray(iv) && iv.length > 4) {
        var tmp = iv;
        iv = forge.util.createBuffer();
        for (var i = 0; i < tmp.length; ++i) {
          iv.putByte(tmp[i]);
        }
      }
      if (iv.length() < blockSize) {
        throw new Error(
          "Invalid IV length; got " + iv.length() + " bytes and expected " + blockSize + " bytes."
        );
      }
      if (!forge.util.isArray(iv)) {
        var ints = [];
        var blocks = blockSize / 4;
        for (var i = 0; i < blocks; ++i) {
          ints.push(iv.getInt32());
        }
        iv = ints;
      }
      return iv;
    }
    function inc32(block) {
      block[block.length - 1] = block[block.length - 1] + 1 & 4294967295;
    }
    function from64To32(num) {
      return [num / 4294967296 | 0, num & 4294967295];
    }
  }
});

// node_modules/node-forge/lib/aes.js
var require_aes = __commonJS({
  "node_modules/node-forge/lib/aes.js"(exports, module2) {
    var forge = require_forge();
    require_cipher();
    require_cipherModes();
    require_util();
    module2.exports = forge.aes = forge.aes || {};
    forge.aes.startEncrypting = function(key, iv, output, mode) {
      var cipher = _createCipher({
        key,
        output,
        decrypt: false,
        mode
      });
      cipher.start(iv);
      return cipher;
    };
    forge.aes.createEncryptionCipher = function(key, mode) {
      return _createCipher({
        key,
        output: null,
        decrypt: false,
        mode
      });
    };
    forge.aes.startDecrypting = function(key, iv, output, mode) {
      var cipher = _createCipher({
        key,
        output,
        decrypt: true,
        mode
      });
      cipher.start(iv);
      return cipher;
    };
    forge.aes.createDecryptionCipher = function(key, mode) {
      return _createCipher({
        key,
        output: null,
        decrypt: true,
        mode
      });
    };
    forge.aes.Algorithm = function(name, mode) {
      if (!init) {
        initialize();
      }
      var self2 = this;
      self2.name = name;
      self2.mode = new mode({
        blockSize: 16,
        cipher: {
          encrypt: function(inBlock, outBlock) {
            return _updateBlock(self2._w, inBlock, outBlock, false);
          },
          decrypt: function(inBlock, outBlock) {
            return _updateBlock(self2._w, inBlock, outBlock, true);
          }
        }
      });
      self2._init = false;
    };
    forge.aes.Algorithm.prototype.initialize = function(options) {
      if (this._init) {
        return;
      }
      var key = options.key;
      var tmp;
      if (typeof key === "string" && (key.length === 16 || key.length === 24 || key.length === 32)) {
        key = forge.util.createBuffer(key);
      } else if (forge.util.isArray(key) && (key.length === 16 || key.length === 24 || key.length === 32)) {
        tmp = key;
        key = forge.util.createBuffer();
        for (var i = 0; i < tmp.length; ++i) {
          key.putByte(tmp[i]);
        }
      }
      if (!forge.util.isArray(key)) {
        tmp = key;
        key = [];
        var len = tmp.length();
        if (len === 16 || len === 24 || len === 32) {
          len = len >>> 2;
          for (var i = 0; i < len; ++i) {
            key.push(tmp.getInt32());
          }
        }
      }
      if (!forge.util.isArray(key) || !(key.length === 4 || key.length === 6 || key.length === 8)) {
        throw new Error("Invalid key parameter.");
      }
      var mode = this.mode.name;
      var encryptOp = ["CFB", "OFB", "CTR", "GCM"].indexOf(mode) !== -1;
      this._w = _expandKey(key, options.decrypt && !encryptOp);
      this._init = true;
    };
    forge.aes._expandKey = function(key, decrypt) {
      if (!init) {
        initialize();
      }
      return _expandKey(key, decrypt);
    };
    forge.aes._updateBlock = _updateBlock;
    registerAlgorithm("AES-ECB", forge.cipher.modes.ecb);
    registerAlgorithm("AES-CBC", forge.cipher.modes.cbc);
    registerAlgorithm("AES-CFB", forge.cipher.modes.cfb);
    registerAlgorithm("AES-OFB", forge.cipher.modes.ofb);
    registerAlgorithm("AES-CTR", forge.cipher.modes.ctr);
    registerAlgorithm("AES-GCM", forge.cipher.modes.gcm);
    function registerAlgorithm(name, mode) {
      var factory = function() {
        return new forge.aes.Algorithm(name, mode);
      };
      forge.cipher.registerAlgorithm(name, factory);
    }
    var init = false;
    var Nb = 4;
    var sbox;
    var isbox;
    var rcon;
    var mix;
    var imix;
    function initialize() {
      init = true;
      rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
      var xtime = new Array(256);
      for (var i = 0; i < 128; ++i) {
        xtime[i] = i << 1;
        xtime[i + 128] = i + 128 << 1 ^ 283;
      }
      sbox = new Array(256);
      isbox = new Array(256);
      mix = new Array(4);
      imix = new Array(4);
      for (var i = 0; i < 4; ++i) {
        mix[i] = new Array(256);
        imix[i] = new Array(256);
      }
      var e = 0, ei = 0, e2, e4, e8, sx, sx2, me, ime;
      for (var i = 0; i < 256; ++i) {
        sx = ei ^ ei << 1 ^ ei << 2 ^ ei << 3 ^ ei << 4;
        sx = sx >> 8 ^ sx & 255 ^ 99;
        sbox[e] = sx;
        isbox[sx] = e;
        sx2 = xtime[sx];
        e2 = xtime[e];
        e4 = xtime[e2];
        e8 = xtime[e4];
        me = sx2 << 24 ^ // 2
        sx << 16 ^ // 1
        sx << 8 ^ // 1
        (sx ^ sx2);
        ime = (e2 ^ e4 ^ e8) << 24 ^ // E (14)
        (e ^ e8) << 16 ^ // 9
        (e ^ e4 ^ e8) << 8 ^ // D (13)
        (e ^ e2 ^ e8);
        for (var n = 0; n < 4; ++n) {
          mix[n][e] = me;
          imix[n][sx] = ime;
          me = me << 24 | me >>> 8;
          ime = ime << 24 | ime >>> 8;
        }
        if (e === 0) {
          e = ei = 1;
        } else {
          e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];
          ei ^= xtime[xtime[ei]];
        }
      }
    }
    function _expandKey(key, decrypt) {
      var w = key.slice(0);
      var temp, iNk = 1;
      var Nk = w.length;
      var Nr1 = Nk + 6 + 1;
      var end = Nb * Nr1;
      for (var i = Nk; i < end; ++i) {
        temp = w[i - 1];
        if (i % Nk === 0) {
          temp = sbox[temp >>> 16 & 255] << 24 ^ sbox[temp >>> 8 & 255] << 16 ^ sbox[temp & 255] << 8 ^ sbox[temp >>> 24] ^ rcon[iNk] << 24;
          iNk++;
        } else if (Nk > 6 && i % Nk === 4) {
          temp = sbox[temp >>> 24] << 24 ^ sbox[temp >>> 16 & 255] << 16 ^ sbox[temp >>> 8 & 255] << 8 ^ sbox[temp & 255];
        }
        w[i] = w[i - Nk] ^ temp;
      }
      if (decrypt) {
        var tmp;
        var m0 = imix[0];
        var m1 = imix[1];
        var m2 = imix[2];
        var m3 = imix[3];
        var wnew = w.slice(0);
        end = w.length;
        for (var i = 0, wi = end - Nb; i < end; i += Nb, wi -= Nb) {
          if (i === 0 || i === end - Nb) {
            wnew[i] = w[wi];
            wnew[i + 1] = w[wi + 3];
            wnew[i + 2] = w[wi + 2];
            wnew[i + 3] = w[wi + 1];
          } else {
            for (var n = 0; n < Nb; ++n) {
              tmp = w[wi + n];
              wnew[i + (3 & -n)] = m0[sbox[tmp >>> 24]] ^ m1[sbox[tmp >>> 16 & 255]] ^ m2[sbox[tmp >>> 8 & 255]] ^ m3[sbox[tmp & 255]];
            }
          }
        }
        w = wnew;
      }
      return w;
    }
    function _updateBlock(w, input, output, decrypt) {
      var Nr = w.length / 4 - 1;
      var m0, m1, m2, m3, sub;
      if (decrypt) {
        m0 = imix[0];
        m1 = imix[1];
        m2 = imix[2];
        m3 = imix[3];
        sub = isbox;
      } else {
        m0 = mix[0];
        m1 = mix[1];
        m2 = mix[2];
        m3 = mix[3];
        sub = sbox;
      }
      var a, b, c, d, a2, b2, c2;
      a = input[0] ^ w[0];
      b = input[decrypt ? 3 : 1] ^ w[1];
      c = input[2] ^ w[2];
      d = input[decrypt ? 1 : 3] ^ w[3];
      var i = 3;
      for (var round = 1; round < Nr; ++round) {
        a2 = m0[a >>> 24] ^ m1[b >>> 16 & 255] ^ m2[c >>> 8 & 255] ^ m3[d & 255] ^ w[++i];
        b2 = m0[b >>> 24] ^ m1[c >>> 16 & 255] ^ m2[d >>> 8 & 255] ^ m3[a & 255] ^ w[++i];
        c2 = m0[c >>> 24] ^ m1[d >>> 16 & 255] ^ m2[a >>> 8 & 255] ^ m3[b & 255] ^ w[++i];
        d = m0[d >>> 24] ^ m1[a >>> 16 & 255] ^ m2[b >>> 8 & 255] ^ m3[c & 255] ^ w[++i];
        a = a2;
        b = b2;
        c = c2;
      }
      output[0] = sub[a >>> 24] << 24 ^ sub[b >>> 16 & 255] << 16 ^ sub[c >>> 8 & 255] << 8 ^ sub[d & 255] ^ w[++i];
      output[decrypt ? 3 : 1] = sub[b >>> 24] << 24 ^ sub[c >>> 16 & 255] << 16 ^ sub[d >>> 8 & 255] << 8 ^ sub[a & 255] ^ w[++i];
      output[2] = sub[c >>> 24] << 24 ^ sub[d >>> 16 & 255] << 16 ^ sub[a >>> 8 & 255] << 8 ^ sub[b & 255] ^ w[++i];
      output[decrypt ? 1 : 3] = sub[d >>> 24] << 24 ^ sub[a >>> 16 & 255] << 16 ^ sub[b >>> 8 & 255] << 8 ^ sub[c & 255] ^ w[++i];
    }
    function _createCipher(options) {
      options = options || {};
      var mode = (options.mode || "CBC").toUpperCase();
      var algorithm = "AES-" + mode;
      var cipher;
      if (options.decrypt) {
        cipher = forge.cipher.createDecipher(algorithm, options.key);
      } else {
        cipher = forge.cipher.createCipher(algorithm, options.key);
      }
      var start = cipher.start;
      cipher.start = function(iv, options2) {
        var output = null;
        if (options2 instanceof forge.util.ByteBuffer) {
          output = options2;
          options2 = {};
        }
        options2 = options2 || {};
        options2.output = output;
        options2.iv = iv;
        start.call(cipher, options2);
      };
      return cipher;
    }
  }
});

// node_modules/node-forge/lib/oids.js
var require_oids = __commonJS({
  "node_modules/node-forge/lib/oids.js"(exports, module2) {
    var forge = require_forge();
    forge.pki = forge.pki || {};
    var oids = module2.exports = forge.pki.oids = forge.oids = forge.oids || {};
    function _IN(id, name) {
      oids[id] = name;
      oids[name] = id;
    }
    function _I_(id, name) {
      oids[id] = name;
    }
    _IN("1.2.840.113549.1.1.1", "rsaEncryption");
    _IN("1.2.840.113549.1.1.4", "md5WithRSAEncryption");
    _IN("1.2.840.113549.1.1.5", "sha1WithRSAEncryption");
    _IN("1.2.840.113549.1.1.7", "RSAES-OAEP");
    _IN("1.2.840.113549.1.1.8", "mgf1");
    _IN("1.2.840.113549.1.1.9", "pSpecified");
    _IN("1.2.840.113549.1.1.10", "RSASSA-PSS");
    _IN("1.2.840.113549.1.1.11", "sha256WithRSAEncryption");
    _IN("1.2.840.113549.1.1.12", "sha384WithRSAEncryption");
    _IN("1.2.840.113549.1.1.13", "sha512WithRSAEncryption");
    _IN("1.3.101.112", "EdDSA25519");
    _IN("1.2.840.10040.4.3", "dsa-with-sha1");
    _IN("1.3.14.3.2.7", "desCBC");
    _IN("1.3.14.3.2.26", "sha1");
    _IN("1.3.14.3.2.29", "sha1WithRSASignature");
    _IN("2.16.840.1.101.3.4.2.1", "sha256");
    _IN("2.16.840.1.101.3.4.2.2", "sha384");
    _IN("2.16.840.1.101.3.4.2.3", "sha512");
    _IN("2.16.840.1.101.3.4.2.4", "sha224");
    _IN("2.16.840.1.101.3.4.2.5", "sha512-224");
    _IN("2.16.840.1.101.3.4.2.6", "sha512-256");
    _IN("1.2.840.113549.2.2", "md2");
    _IN("1.2.840.113549.2.5", "md5");
    _IN("1.2.840.113549.1.7.1", "data");
    _IN("1.2.840.113549.1.7.2", "signedData");
    _IN("1.2.840.113549.1.7.3", "envelopedData");
    _IN("1.2.840.113549.1.7.4", "signedAndEnvelopedData");
    _IN("1.2.840.113549.1.7.5", "digestedData");
    _IN("1.2.840.113549.1.7.6", "encryptedData");
    _IN("1.2.840.113549.1.9.1", "emailAddress");
    _IN("1.2.840.113549.1.9.2", "unstructuredName");
    _IN("1.2.840.113549.1.9.3", "contentType");
    _IN("1.2.840.113549.1.9.4", "messageDigest");
    _IN("1.2.840.113549.1.9.5", "signingTime");
    _IN("1.2.840.113549.1.9.6", "counterSignature");
    _IN("1.2.840.113549.1.9.7", "challengePassword");
    _IN("1.2.840.113549.1.9.8", "unstructuredAddress");
    _IN("1.2.840.113549.1.9.14", "extensionRequest");
    _IN("1.2.840.113549.1.9.20", "friendlyName");
    _IN("1.2.840.113549.1.9.21", "localKeyId");
    _IN("1.2.840.113549.1.9.22.1", "x509Certificate");
    _IN("1.2.840.113549.1.12.10.1.1", "keyBag");
    _IN("1.2.840.113549.1.12.10.1.2", "pkcs8ShroudedKeyBag");
    _IN("1.2.840.113549.1.12.10.1.3", "certBag");
    _IN("1.2.840.113549.1.12.10.1.4", "crlBag");
    _IN("1.2.840.113549.1.12.10.1.5", "secretBag");
    _IN("1.2.840.113549.1.12.10.1.6", "safeContentsBag");
    _IN("1.2.840.113549.1.5.13", "pkcs5PBES2");
    _IN("1.2.840.113549.1.5.12", "pkcs5PBKDF2");
    _IN("1.2.840.113549.1.12.1.1", "pbeWithSHAAnd128BitRC4");
    _IN("1.2.840.113549.1.12.1.2", "pbeWithSHAAnd40BitRC4");
    _IN("1.2.840.113549.1.12.1.3", "pbeWithSHAAnd3-KeyTripleDES-CBC");
    _IN("1.2.840.113549.1.12.1.4", "pbeWithSHAAnd2-KeyTripleDES-CBC");
    _IN("1.2.840.113549.1.12.1.5", "pbeWithSHAAnd128BitRC2-CBC");
    _IN("1.2.840.113549.1.12.1.6", "pbewithSHAAnd40BitRC2-CBC");
    _IN("1.2.840.113549.2.7", "hmacWithSHA1");
    _IN("1.2.840.113549.2.8", "hmacWithSHA224");
    _IN("1.2.840.113549.2.9", "hmacWithSHA256");
    _IN("1.2.840.113549.2.10", "hmacWithSHA384");
    _IN("1.2.840.113549.2.11", "hmacWithSHA512");
    _IN("1.2.840.113549.3.7", "des-EDE3-CBC");
    _IN("2.16.840.1.101.3.4.1.2", "aes128-CBC");
    _IN("2.16.840.1.101.3.4.1.22", "aes192-CBC");
    _IN("2.16.840.1.101.3.4.1.42", "aes256-CBC");
    _IN("2.5.4.3", "commonName");
    _IN("2.5.4.4", "surname");
    _IN("2.5.4.5", "serialNumber");
    _IN("2.5.4.6", "countryName");
    _IN("2.5.4.7", "localityName");
    _IN("2.5.4.8", "stateOrProvinceName");
    _IN("2.5.4.9", "streetAddress");
    _IN("2.5.4.10", "organizationName");
    _IN("2.5.4.11", "organizationalUnitName");
    _IN("2.5.4.12", "title");
    _IN("2.5.4.13", "description");
    _IN("2.5.4.15", "businessCategory");
    _IN("2.5.4.17", "postalCode");
    _IN("2.5.4.42", "givenName");
    _IN("1.3.6.1.4.1.311.60.2.1.2", "jurisdictionOfIncorporationStateOrProvinceName");
    _IN("1.3.6.1.4.1.311.60.2.1.3", "jurisdictionOfIncorporationCountryName");
    _IN("2.16.840.1.113730.1.1", "nsCertType");
    _IN("2.16.840.1.113730.1.13", "nsComment");
    _I_("2.5.29.1", "authorityKeyIdentifier");
    _I_("2.5.29.2", "keyAttributes");
    _I_("2.5.29.3", "certificatePolicies");
    _I_("2.5.29.4", "keyUsageRestriction");
    _I_("2.5.29.5", "policyMapping");
    _I_("2.5.29.6", "subtreesConstraint");
    _I_("2.5.29.7", "subjectAltName");
    _I_("2.5.29.8", "issuerAltName");
    _I_("2.5.29.9", "subjectDirectoryAttributes");
    _I_("2.5.29.10", "basicConstraints");
    _I_("2.5.29.11", "nameConstraints");
    _I_("2.5.29.12", "policyConstraints");
    _I_("2.5.29.13", "basicConstraints");
    _IN("2.5.29.14", "subjectKeyIdentifier");
    _IN("2.5.29.15", "keyUsage");
    _I_("2.5.29.16", "privateKeyUsagePeriod");
    _IN("2.5.29.17", "subjectAltName");
    _IN("2.5.29.18", "issuerAltName");
    _IN("2.5.29.19", "basicConstraints");
    _I_("2.5.29.20", "cRLNumber");
    _I_("2.5.29.21", "cRLReason");
    _I_("2.5.29.22", "expirationDate");
    _I_("2.5.29.23", "instructionCode");
    _I_("2.5.29.24", "invalidityDate");
    _I_("2.5.29.25", "cRLDistributionPoints");
    _I_("2.5.29.26", "issuingDistributionPoint");
    _I_("2.5.29.27", "deltaCRLIndicator");
    _I_("2.5.29.28", "issuingDistributionPoint");
    _I_("2.5.29.29", "certificateIssuer");
    _I_("2.5.29.30", "nameConstraints");
    _IN("2.5.29.31", "cRLDistributionPoints");
    _IN("2.5.29.32", "certificatePolicies");
    _I_("2.5.29.33", "policyMappings");
    _I_("2.5.29.34", "policyConstraints");
    _IN("2.5.29.35", "authorityKeyIdentifier");
    _I_("2.5.29.36", "policyConstraints");
    _IN("2.5.29.37", "extKeyUsage");
    _I_("2.5.29.46", "freshestCRL");
    _I_("2.5.29.54", "inhibitAnyPolicy");
    _IN("1.3.6.1.4.1.11129.2.4.2", "timestampList");
    _IN("1.3.6.1.5.5.7.1.1", "authorityInfoAccess");
    _IN("1.3.6.1.5.5.7.3.1", "serverAuth");
    _IN("1.3.6.1.5.5.7.3.2", "clientAuth");
    _IN("1.3.6.1.5.5.7.3.3", "codeSigning");
    _IN("1.3.6.1.5.5.7.3.4", "emailProtection");
    _IN("1.3.6.1.5.5.7.3.8", "timeStamping");
  }
});

// node_modules/node-forge/lib/asn1.js
var require_asn1 = __commonJS({
  "node_modules/node-forge/lib/asn1.js"(exports, module2) {
    var forge = require_forge();
    require_util();
    require_oids();
    var asn1 = module2.exports = forge.asn1 = forge.asn1 || {};
    asn1.Class = {
      UNIVERSAL: 0,
      APPLICATION: 64,
      CONTEXT_SPECIFIC: 128,
      PRIVATE: 192
    };
    asn1.Type = {
      NONE: 0,
      BOOLEAN: 1,
      INTEGER: 2,
      BITSTRING: 3,
      OCTETSTRING: 4,
      NULL: 5,
      OID: 6,
      ODESC: 7,
      EXTERNAL: 8,
      REAL: 9,
      ENUMERATED: 10,
      EMBEDDED: 11,
      UTF8: 12,
      ROID: 13,
      SEQUENCE: 16,
      SET: 17,
      PRINTABLESTRING: 19,
      IA5STRING: 22,
      UTCTIME: 23,
      GENERALIZEDTIME: 24,
      BMPSTRING: 30
    };
    asn1.create = function(tagClass, type, constructed, value, options) {
      if (forge.util.isArray(value)) {
        var tmp = [];
        for (var i = 0; i < value.length; ++i) {
          if (value[i] !== void 0) {
            tmp.push(value[i]);
          }
        }
        value = tmp;
      }
      var obj = {
        tagClass,
        type,
        constructed,
        composed: constructed || forge.util.isArray(value),
        value
      };
      if (options && "bitStringContents" in options) {
        obj.bitStringContents = options.bitStringContents;
        obj.original = asn1.copy(obj);
      }
      return obj;
    };
    asn1.copy = function(obj, options) {
      var copy;
      if (forge.util.isArray(obj)) {
        copy = [];
        for (var i = 0; i < obj.length; ++i) {
          copy.push(asn1.copy(obj[i], options));
        }
        return copy;
      }
      if (typeof obj === "string") {
        return obj;
      }
      copy = {
        tagClass: obj.tagClass,
        type: obj.type,
        constructed: obj.constructed,
        composed: obj.composed,
        value: asn1.copy(obj.value, options)
      };
      if (options && !options.excludeBitStringContents) {
        copy.bitStringContents = obj.bitStringContents;
      }
      return copy;
    };
    asn1.equals = function(obj1, obj2, options) {
      if (forge.util.isArray(obj1)) {
        if (!forge.util.isArray(obj2)) {
          return false;
        }
        if (obj1.length !== obj2.length) {
          return false;
        }
        for (var i = 0; i < obj1.length; ++i) {
          if (!asn1.equals(obj1[i], obj2[i])) {
            return false;
          }
        }
        return true;
      }
      if (typeof obj1 !== typeof obj2) {
        return false;
      }
      if (typeof obj1 === "string") {
        return obj1 === obj2;
      }
      var equal = obj1.tagClass === obj2.tagClass && obj1.type === obj2.type && obj1.constructed === obj2.constructed && obj1.composed === obj2.composed && asn1.equals(obj1.value, obj2.value);
      if (options && options.includeBitStringContents) {
        equal = equal && obj1.bitStringContents === obj2.bitStringContents;
      }
      return equal;
    };
    asn1.getBerValueLength = function(b) {
      var b2 = b.getByte();
      if (b2 === 128) {
        return void 0;
      }
      var length;
      var longForm = b2 & 128;
      if (!longForm) {
        length = b2;
      } else {
        length = b.getInt((b2 & 127) << 3);
      }
      return length;
    };
    function _checkBufferLength(bytes, remaining, n) {
      if (n > remaining) {
        var error = new Error("Too few bytes to parse DER.");
        error.available = bytes.length();
        error.remaining = remaining;
        error.requested = n;
        throw error;
      }
    }
    var _getValueLength = function(bytes, remaining) {
      var b2 = bytes.getByte();
      remaining--;
      if (b2 === 128) {
        return void 0;
      }
      var length;
      var longForm = b2 & 128;
      if (!longForm) {
        length = b2;
      } else {
        var longFormBytes = b2 & 127;
        _checkBufferLength(bytes, remaining, longFormBytes);
        length = bytes.getInt(longFormBytes << 3);
      }
      if (length < 0) {
        throw new Error("Negative length: " + length);
      }
      return length;
    };
    asn1.fromDer = function(bytes, options) {
      if (options === void 0) {
        options = {
          strict: true,
          parseAllBytes: true,
          decodeBitStrings: true
        };
      }
      if (typeof options === "boolean") {
        options = {
          strict: options,
          parseAllBytes: true,
          decodeBitStrings: true
        };
      }
      if (!("strict" in options)) {
        options.strict = true;
      }
      if (!("parseAllBytes" in options)) {
        options.parseAllBytes = true;
      }
      if (!("decodeBitStrings" in options)) {
        options.decodeBitStrings = true;
      }
      if (typeof bytes === "string") {
        bytes = forge.util.createBuffer(bytes);
      }
      var byteCount = bytes.length();
      var value = _fromDer(bytes, bytes.length(), 0, options);
      if (options.parseAllBytes && bytes.length() !== 0) {
        var error = new Error("Unparsed DER bytes remain after ASN.1 parsing.");
        error.byteCount = byteCount;
        error.remaining = bytes.length();
        throw error;
      }
      return value;
    };
    function _fromDer(bytes, remaining, depth, options) {
      var start;
      _checkBufferLength(bytes, remaining, 2);
      var b1 = bytes.getByte();
      remaining--;
      var tagClass = b1 & 192;
      var type = b1 & 31;
      start = bytes.length();
      var length = _getValueLength(bytes, remaining);
      remaining -= start - bytes.length();
      if (length !== void 0 && length > remaining) {
        if (options.strict) {
          var error = new Error("Too few bytes to read ASN.1 value.");
          error.available = bytes.length();
          error.remaining = remaining;
          error.requested = length;
          throw error;
        }
        length = remaining;
      }
      var value;
      var bitStringContents;
      var constructed = (b1 & 32) === 32;
      if (constructed) {
        value = [];
        if (length === void 0) {
          for (; ; ) {
            _checkBufferLength(bytes, remaining, 2);
            if (bytes.bytes(2) === String.fromCharCode(0, 0)) {
              bytes.getBytes(2);
              remaining -= 2;
              break;
            }
            start = bytes.length();
            value.push(_fromDer(bytes, remaining, depth + 1, options));
            remaining -= start - bytes.length();
          }
        } else {
          while (length > 0) {
            start = bytes.length();
            value.push(_fromDer(bytes, length, depth + 1, options));
            remaining -= start - bytes.length();
            length -= start - bytes.length();
          }
        }
      }
      if (value === void 0 && tagClass === asn1.Class.UNIVERSAL && type === asn1.Type.BITSTRING) {
        bitStringContents = bytes.bytes(length);
      }
      if (value === void 0 && options.decodeBitStrings && tagClass === asn1.Class.UNIVERSAL && // FIXME: OCTET STRINGs not yet supported here
      // .. other parts of forge expect to decode OCTET STRINGs manually
      type === asn1.Type.BITSTRING && length > 1) {
        var savedRead = bytes.read;
        var savedRemaining = remaining;
        var unused = 0;
        if (type === asn1.Type.BITSTRING) {
          _checkBufferLength(bytes, remaining, 1);
          unused = bytes.getByte();
          remaining--;
        }
        if (unused === 0) {
          try {
            start = bytes.length();
            var subOptions = {
              // enforce strict mode to avoid parsing ASN.1 from plain data
              strict: true,
              decodeBitStrings: true
            };
            var composed = _fromDer(bytes, remaining, depth + 1, subOptions);
            var used = start - bytes.length();
            remaining -= used;
            if (type == asn1.Type.BITSTRING) {
              used++;
            }
            var tc = composed.tagClass;
            if (used === length && (tc === asn1.Class.UNIVERSAL || tc === asn1.Class.CONTEXT_SPECIFIC)) {
              value = [composed];
            }
          } catch (ex) {
          }
        }
        if (value === void 0) {
          bytes.read = savedRead;
          remaining = savedRemaining;
        }
      }
      if (value === void 0) {
        if (length === void 0) {
          if (options.strict) {
            throw new Error("Non-constructed ASN.1 object of indefinite length.");
          }
          length = remaining;
        }
        if (type === asn1.Type.BMPSTRING) {
          value = "";
          for (; length > 0; length -= 2) {
            _checkBufferLength(bytes, remaining, 2);
            value += String.fromCharCode(bytes.getInt16());
            remaining -= 2;
          }
        } else {
          value = bytes.getBytes(length);
          remaining -= length;
        }
      }
      var asn1Options = bitStringContents === void 0 ? null : {
        bitStringContents
      };
      return asn1.create(tagClass, type, constructed, value, asn1Options);
    }
    asn1.toDer = function(obj) {
      var bytes = forge.util.createBuffer();
      var b1 = obj.tagClass | obj.type;
      var value = forge.util.createBuffer();
      var useBitStringContents = false;
      if ("bitStringContents" in obj) {
        useBitStringContents = true;
        if (obj.original) {
          useBitStringContents = asn1.equals(obj, obj.original);
        }
      }
      if (useBitStringContents) {
        value.putBytes(obj.bitStringContents);
      } else if (obj.composed) {
        if (obj.constructed) {
          b1 |= 32;
        } else {
          value.putByte(0);
        }
        for (var i = 0; i < obj.value.length; ++i) {
          if (obj.value[i] !== void 0) {
            value.putBuffer(asn1.toDer(obj.value[i]));
          }
        }
      } else {
        if (obj.type === asn1.Type.BMPSTRING) {
          for (var i = 0; i < obj.value.length; ++i) {
            value.putInt16(obj.value.charCodeAt(i));
          }
        } else {
          if (obj.type === asn1.Type.INTEGER && obj.value.length > 1 && // leading 0x00 for positive integer
          (obj.value.charCodeAt(0) === 0 && (obj.value.charCodeAt(1) & 128) === 0 || // leading 0xFF for negative integer
          obj.value.charCodeAt(0) === 255 && (obj.value.charCodeAt(1) & 128) === 128)) {
            value.putBytes(obj.value.substr(1));
          } else {
            value.putBytes(obj.value);
          }
        }
      }
      bytes.putByte(b1);
      if (value.length() <= 127) {
        bytes.putByte(value.length() & 127);
      } else {
        var len = value.length();
        var lenBytes = "";
        do {
          lenBytes += String.fromCharCode(len & 255);
          len = len >>> 8;
        } while (len > 0);
        bytes.putByte(lenBytes.length | 128);
        for (var i = lenBytes.length - 1; i >= 0; --i) {
          bytes.putByte(lenBytes.charCodeAt(i));
        }
      }
      bytes.putBuffer(value);
      return bytes;
    };
    asn1.oidToDer = function(oid) {
      var values = oid.split(".");
      var bytes = forge.util.createBuffer();
      bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10));
      var last, valueBytes, value, b;
      for (var i = 2; i < values.length; ++i) {
        last = true;
        valueBytes = [];
        value = parseInt(values[i], 10);
        do {
          b = value & 127;
          value = value >>> 7;
          if (!last) {
            b |= 128;
          }
          valueBytes.push(b);
          last = false;
        } while (value > 0);
        for (var n = valueBytes.length - 1; n >= 0; --n) {
          bytes.putByte(valueBytes[n]);
        }
      }
      return bytes;
    };
    asn1.derToOid = function(bytes) {
      var oid;
      if (typeof bytes === "string") {
        bytes = forge.util.createBuffer(bytes);
      }
      var b = bytes.getByte();
      oid = Math.floor(b / 40) + "." + b % 40;
      var value = 0;
      while (bytes.length() > 0) {
        b = bytes.getByte();
        value = value << 7;
        if (b & 128) {
          value += b & 127;
        } else {
          oid += "." + (value + b);
          value = 0;
        }
      }
      return oid;
    };
    asn1.utcTimeToDate = function(utc) {
      var date = /* @__PURE__ */ new Date();
      var year = parseInt(utc.substr(0, 2), 10);
      year = year >= 50 ? 1900 + year : 2e3 + year;
      var MM = parseInt(utc.substr(2, 2), 10) - 1;
      var DD = parseInt(utc.substr(4, 2), 10);
      var hh = parseInt(utc.substr(6, 2), 10);
      var mm = parseInt(utc.substr(8, 2), 10);
      var ss = 0;
      if (utc.length > 11) {
        var c = utc.charAt(10);
        var end = 10;
        if (c !== "+" && c !== "-") {
          ss = parseInt(utc.substr(10, 2), 10);
          end += 2;
        }
      }
      date.setUTCFullYear(year, MM, DD);
      date.setUTCHours(hh, mm, ss, 0);
      if (end) {
        c = utc.charAt(end);
        if (c === "+" || c === "-") {
          var hhoffset = parseInt(utc.substr(end + 1, 2), 10);
          var mmoffset = parseInt(utc.substr(end + 4, 2), 10);
          var offset = hhoffset * 60 + mmoffset;
          offset *= 6e4;
          if (c === "+") {
            date.setTime(+date - offset);
          } else {
            date.setTime(+date + offset);
          }
        }
      }
      return date;
    };
    asn1.generalizedTimeToDate = function(gentime) {
      var date = /* @__PURE__ */ new Date();
      var YYYY = parseInt(gentime.substr(0, 4), 10);
      var MM = parseInt(gentime.substr(4, 2), 10) - 1;
      var DD = parseInt(gentime.substr(6, 2), 10);
      var hh = parseInt(gentime.substr(8, 2), 10);
      var mm = parseInt(gentime.substr(10, 2), 10);
      var ss = parseInt(gentime.substr(12, 2), 10);
      var fff = 0;
      var offset = 0;
      var isUTC = false;
      if (gentime.charAt(gentime.length - 1) === "Z") {
        isUTC = true;
      }
      var end = gentime.length - 5, c = gentime.charAt(end);
      if (c === "+" || c === "-") {
        var hhoffset = parseInt(gentime.substr(end + 1, 2), 10);
        var mmoffset = parseInt(gentime.substr(end + 4, 2), 10);
        offset = hhoffset * 60 + mmoffset;
        offset *= 6e4;
        if (c === "+") {
          offset *= -1;
        }
        isUTC = true;
      }
      if (gentime.charAt(14) === ".") {
        fff = parseFloat(gentime.substr(14), 10) * 1e3;
      }
      if (isUTC) {
        date.setUTCFullYear(YYYY, MM, DD);
        date.setUTCHours(hh, mm, ss, fff);
        date.setTime(+date + offset);
      } else {
        date.setFullYear(YYYY, MM, DD);
        date.setHours(hh, mm, ss, fff);
      }
      return date;
    };
    asn1.dateToUtcTime = function(date) {
      if (typeof date === "string") {
        return date;
      }
      var rval = "";
      var format = [];
      format.push(("" + date.getUTCFullYear()).substr(2));
      format.push("" + (date.getUTCMonth() + 1));
      format.push("" + date.getUTCDate());
      format.push("" + date.getUTCHours());
      format.push("" + date.getUTCMinutes());
      format.push("" + date.getUTCSeconds());
      for (var i = 0; i < format.length; ++i) {
        if (format[i].length < 2) {
          rval += "0";
        }
        rval += format[i];
      }
      rval += "Z";
      return rval;
    };
    asn1.dateToGeneralizedTime = function(date) {
      if (typeof date === "string") {
        return date;
      }
      var rval = "";
      var format = [];
      format.push("" + date.getUTCFullYear());
      format.push("" + (date.getUTCMonth() + 1));
      format.push("" + date.getUTCDate());
      format.push("" + date.getUTCHours());
      format.push("" + date.getUTCMinutes());
      format.push("" + date.getUTCSeconds());
      for (var i = 0; i < format.length; ++i) {
        if (format[i].length < 2) {
          rval += "0";
        }
        rval += format[i];
      }
      rval += "Z";
      return rval;
    };
    asn1.integerToDer = function(x) {
      var rval = forge.util.createBuffer();
      if (x >= -128 && x < 128) {
        return rval.putSignedInt(x, 8);
      }
      if (x >= -32768 && x < 32768) {
        return rval.putSignedInt(x, 16);
      }
      if (x >= -8388608 && x < 8388608) {
        return rval.putSignedInt(x, 24);
      }
      if (x >= -2147483648 && x < 2147483648) {
        return rval.putSignedInt(x, 32);
      }
      var error = new Error("Integer too large; max is 32-bits.");
      error.integer = x;
      throw error;
    };
    asn1.derToInteger = function(bytes) {
      if (typeof bytes === "string") {
        bytes = forge.util.createBuffer(bytes);
      }
      var n = bytes.length() * 8;
      if (n > 32) {
        throw new Error("Integer too large; max is 32-bits.");
      }
      return bytes.getSignedInt(n);
    };
    asn1.validate = function(obj, v, capture, errors) {
      var rval = false;
      if ((obj.tagClass === v.tagClass || typeof v.tagClass === "undefined") && (obj.type === v.type || typeof v.type === "undefined")) {
        if (obj.constructed === v.constructed || typeof v.constructed === "undefined") {
          rval = true;
          if (v.value && forge.util.isArray(v.value)) {
            var j = 0;
            for (var i = 0; rval && i < v.value.length; ++i) {
              rval = v.value[i].optional || false;
              if (obj.value[j]) {
                rval = asn1.validate(obj.value[j], v.value[i], capture, errors);
                if (rval) {
                  ++j;
                } else if (v.value[i].optional) {
                  rval = true;
                }
              }
              if (!rval && errors) {
                errors.push(
                  "[" + v.name + '] Tag class "' + v.tagClass + '", type "' + v.type + '" expected value length "' + v.value.length + '", got "' + obj.value.length + '"'
                );
              }
            }
          }
          if (rval && capture) {
            if (v.capture) {
              capture[v.capture] = obj.value;
            }
            if (v.captureAsn1) {
              capture[v.captureAsn1] = obj;
            }
            if (v.captureBitStringContents && "bitStringContents" in obj) {
              capture[v.captureBitStringContents] = obj.bitStringContents;
            }
            if (v.captureBitStringValue && "bitStringContents" in obj) {
              var value;
              if (obj.bitStringContents.length < 2) {
                capture[v.captureBitStringValue] = "";
              } else {
                var unused = obj.bitStringContents.charCodeAt(0);
                if (unused !== 0) {
                  throw new Error(
                    "captureBitStringValue only supported for zero unused bits"
                  );
                }
                capture[v.captureBitStringValue] = obj.bitStringContents.slice(1);
              }
            }
          }
        } else if (errors) {
          errors.push(
            "[" + v.name + '] Expected constructed "' + v.constructed + '", got "' + obj.constructed + '"'
          );
        }
      } else if (errors) {
        if (obj.tagClass !== v.tagClass) {
          errors.push(
            "[" + v.name + '] Expected tag class "' + v.tagClass + '", got "' + obj.tagClass + '"'
          );
        }
        if (obj.type !== v.type) {
          errors.push(
            "[" + v.name + '] Expected type "' + v.type + '", got "' + obj.type + '"'
          );
        }
      }
      return rval;
    };
    var _nonLatinRegex = /[^\\u0000-\\u00ff]/;
    asn1.prettyPrint = function(obj, level, indentation) {
      var rval = "";
      level = level || 0;
      indentation = indentation || 2;
      if (level > 0) {
        rval += "\n";
      }
      var indent = "";
      for (var i = 0; i < level * indentation; ++i) {
        indent += " ";
      }
      rval += indent + "Tag: ";
      switch (obj.tagClass) {
        case asn1.Class.UNIVERSAL:
          rval += "Universal:";
          break;
        case asn1.Class.APPLICATION:
          rval += "Application:";
          break;
        case asn1.Class.CONTEXT_SPECIFIC:
          rval += "Context-Specific:";
          break;
        case asn1.Class.PRIVATE:
          rval += "Private:";
          break;
      }
      if (obj.tagClass === asn1.Class.UNIVERSAL) {
        rval += obj.type;
        switch (obj.type) {
          case asn1.Type.NONE:
            rval += " (None)";
            break;
          case asn1.Type.BOOLEAN:
            rval += " (Boolean)";
            break;
          case asn1.Type.INTEGER:
            rval += " (Integer)";
            break;
          case asn1.Type.BITSTRING:
            rval += " (Bit string)";
            break;
          case asn1.Type.OCTETSTRING:
            rval += " (Octet string)";
            break;
          case asn1.Type.NULL:
            rval += " (Null)";
            break;
          case asn1.Type.OID:
            rval += " (Object Identifier)";
            break;
          case asn1.Type.ODESC:
            rval += " (Object Descriptor)";
            break;
          case asn1.Type.EXTERNAL:
            rval += " (External or Instance of)";
            break;
          case asn1.Type.REAL:
            rval += " (Real)";
            break;
          case asn1.Type.ENUMERATED:
            rval += " (Enumerated)";
            break;
          case asn1.Type.EMBEDDED:
            rval += " (Embedded PDV)";
            break;
          case asn1.Type.UTF8:
            rval += " (UTF8)";
            break;
          case asn1.Type.ROID:
            rval += " (Relative Object Identifier)";
            break;
          case asn1.Type.SEQUENCE:
            rval += " (Sequence)";
            break;
          case asn1.Type.SET:
            rval += " (Set)";
            break;
          case asn1.Type.PRINTABLESTRING:
            rval += " (Printable String)";
            break;
          case asn1.Type.IA5String:
            rval += " (IA5String (ASCII))";
            break;
          case asn1.Type.UTCTIME:
            rval += " (UTC time)";
            break;
          case asn1.Type.GENERALIZEDTIME:
            rval += " (Generalized time)";
            break;
          case asn1.Type.BMPSTRING:
            rval += " (BMP String)";
            break;
        }
      } else {
        rval += obj.type;
      }
      rval += "\n";
      rval += indent + "Constructed: " + obj.constructed + "\n";
      if (obj.composed) {
        var subvalues = 0;
        var sub = "";
        for (var i = 0; i < obj.value.length; ++i) {
          if (obj.value[i] !== void 0) {
            subvalues += 1;
            sub += asn1.prettyPrint(obj.value[i], level + 1, indentation);
            if (i + 1 < obj.value.length) {
              sub += ",";
            }
          }
        }
        rval += indent + "Sub values: " + subvalues + sub;
      } else {
        rval += indent + "Value: ";
        if (obj.type === asn1.Type.OID) {
          var oid = asn1.derToOid(obj.value);
          rval += oid;
          if (forge.pki && forge.pki.oids) {
            if (oid in forge.pki.oids) {
              rval += " (" + forge.pki.oids[oid] + ") ";
            }
          }
        }
        if (obj.type === asn1.Type.INTEGER) {
          try {
            rval += asn1.derToInteger(obj.value);
          } catch (ex) {
            rval += "0x" + forge.util.bytesToHex(obj.value);
          }
        } else if (obj.type === asn1.Type.BITSTRING) {
          if (obj.value.length > 1) {
            rval += "0x" + forge.util.bytesToHex(obj.value.slice(1));
          } else {
            rval += "(none)";
          }
          if (obj.value.length > 0) {
            var unused = obj.value.charCodeAt(0);
            if (unused == 1) {
              rval += " (1 unused bit shown)";
            } else if (unused > 1) {
              rval += " (" + unused + " unused bits shown)";
            }
          }
        } else if (obj.type === asn1.Type.OCTETSTRING) {
          if (!_nonLatinRegex.test(obj.value)) {
            rval += "(" + obj.value + ") ";
          }
          rval += "0x" + forge.util.bytesToHex(obj.value);
        } else if (obj.type === asn1.Type.UTF8) {
          try {
            rval += forge.util.decodeUtf8(obj.value);
          } catch (e) {
            if (e.message === "URI malformed") {
              rval += "0x" + forge.util.bytesToHex(obj.value) + " (malformed UTF8)";
            } else {
              throw e;
            }
          }
        } else if (obj.type === asn1.Type.PRINTABLESTRING || obj.type === asn1.Type.IA5String) {
          rval += obj.value;
        } else if (_nonLatinRegex.test(obj.value)) {
          rval += "0x" + forge.util.bytesToHex(obj.value);
        } else if (obj.value.length === 0) {
          rval += "[null]";
        } else {
          rval += obj.value;
        }
      }
      return rval;
    };
  }
});

// node_modules/node-forge/lib/md.js
var require_md = __commonJS({
  "node_modules/node-forge/lib/md.js"(exports, module2) {
    var forge = require_forge();
    module2.exports = forge.md = forge.md || {};
    forge.md.algorithms = forge.md.algorithms || {};
  }
});

// node_modules/node-forge/lib/hmac.js
var require_hmac = __commonJS({
  "node_modules/node-forge/lib/hmac.js"(exports, module2) {
    var forge = require_forge();
    require_md();
    require_util();
    var hmac = module2.exports = forge.hmac = forge.hmac || {};
    hmac.create = function() {
      var _key = null;
      var _md = null;
      var _ipadding = null;
      var _opadding = null;
      var ctx = {};
      ctx.start = function(md, key) {
        if (md !== null) {
          if (typeof md === "string") {
            md = md.toLowerCase();
            if (md in forge.md.algorithms) {
              _md = forge.md.algorithms[md].create();
            } else {
              throw new Error('Unknown hash algorithm "' + md + '"');
            }
          } else {
            _md = md;
          }
        }
        if (key === null) {
          key = _key;
        } else {
          if (typeof key === "string") {
            key = forge.util.createBuffer(key);
          } else if (forge.util.isArray(key)) {
            var tmp = key;
            key = forge.util.createBuffer();
            for (var i = 0; i < tmp.length; ++i) {
              key.putByte(tmp[i]);
            }
          }
          var keylen = key.length();
          if (keylen > _md.blockLength) {
            _md.start();
            _md.update(key.bytes());
            key = _md.digest();
          }
          _ipadding = forge.util.createBuffer();
          _opadding = forge.util.createBuffer();
          keylen = key.length();
          for (var i = 0; i < keylen; ++i) {
            var tmp = key.at(i);
            _ipadding.putByte(54 ^ tmp);
            _opadding.putByte(92 ^ tmp);
          }
          if (keylen < _md.blockLength) {
            var tmp = _md.blockLength - keylen;
            for (var i = 0; i < tmp; ++i) {
              _ipadding.putByte(54);
              _opadding.putByte(92);
            }
          }
          _key = key;
          _ipadding = _ipadding.bytes();
          _opadding = _opadding.bytes();
        }
        _md.start();
        _md.update(_ipadding);
      };
      ctx.update = function(bytes) {
        _md.update(bytes);
      };
      ctx.getMac = function() {
        var inner = _md.digest().bytes();
        _md.start();
        _md.update(_opadding);
        _md.update(inner);
        return _md.digest();
      };
      ctx.digest = ctx.getMac;
      return ctx;
    };
  }
});

// node_modules/node-forge/lib/md5.js
var require_md5 = __commonJS({
  "node_modules/node-forge/lib/md5.js"(exports, module2) {
    var forge = require_forge();
    require_md();
    require_util();
    var md52 = module2.exports = forge.md5 = forge.md5 || {};
    forge.md.md5 = forge.md.algorithms.md5 = md52;
    md52.create = function() {
      if (!_initialized) {
        _init();
      }
      var _state = null;
      var _input = forge.util.createBuffer();
      var _w = new Array(16);
      var md = {
        algorithm: "md5",
        blockLength: 64,
        digestLength: 16,
        // 56-bit length of message so far (does not including padding)
        messageLength: 0,
        // true message length
        fullMessageLength: null,
        // size of message length in bytes
        messageLengthSize: 8
      };
      md.start = function() {
        md.messageLength = 0;
        md.fullMessageLength = md.messageLength64 = [];
        var int32s = md.messageLengthSize / 4;
        for (var i = 0; i < int32s; ++i) {
          md.fullMessageLength.push(0);
        }
        _input = forge.util.createBuffer();
        _state = {
          h0: 1732584193,
          h1: 4023233417,
          h2: 2562383102,
          h3: 271733878
        };
        return md;
      };
      md.start();
      md.update = function(msg, encoding) {
        if (encoding === "utf8") {
          msg = forge.util.encodeUtf8(msg);
        }
        var len = msg.length;
        md.messageLength += len;
        len = [len / 4294967296 >>> 0, len >>> 0];
        for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
          md.fullMessageLength[i] += len[1];
          len[1] = len[0] + (md.fullMessageLength[i] / 4294967296 >>> 0);
          md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
          len[0] = len[1] / 4294967296 >>> 0;
        }
        _input.putBytes(msg);
        _update(_state, _w, _input);
        if (_input.read > 2048 || _input.length() === 0) {
          _input.compact();
        }
        return md;
      };
      md.digest = function() {
        var finalBlock = forge.util.createBuffer();
        finalBlock.putBytes(_input.bytes());
        var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize;
        var overflow = remaining & md.blockLength - 1;
        finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));
        var bits, carry = 0;
        for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
          bits = md.fullMessageLength[i] * 8 + carry;
          carry = bits / 4294967296 >>> 0;
          finalBlock.putInt32Le(bits >>> 0);
        }
        var s2 = {
          h0: _state.h0,
          h1: _state.h1,
          h2: _state.h2,
          h3: _state.h3
        };
        _update(s2, _w, finalBlock);
        var rval = forge.util.createBuffer();
        rval.putInt32Le(s2.h0);
        rval.putInt32Le(s2.h1);
        rval.putInt32Le(s2.h2);
        rval.putInt32Le(s2.h3);
        return rval;
      };
      return md;
    };
    var _padding = null;
    var _g = null;
    var _r = null;
    var _k = null;
    var _initialized = false;
    function _init() {
      _padding = String.fromCharCode(128);
      _padding += forge.util.fillString(String.fromCharCode(0), 64);
      _g = [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        1,
        6,
        11,
        0,
        5,
        10,
        15,
        4,
        9,
        14,
        3,
        8,
        13,
        2,
        7,
        12,
        5,
        8,
        11,
        14,
        1,
        4,
        7,
        10,
        13,
        0,
        3,
        6,
        9,
        12,
        15,
        2,
        0,
        7,
        14,
        5,
        12,
        3,
        10,
        1,
        8,
        15,
        6,
        13,
        4,
        11,
        2,
        9
      ];
      _r = [
        7,
        12,
        17,
        22,
        7,
        12,
        17,
        22,
        7,
        12,
        17,
        22,
        7,
        12,
        17,
        22,
        5,
        9,
        14,
        20,
        5,
        9,
        14,
        20,
        5,
        9,
        14,
        20,
        5,
        9,
        14,
        20,
        4,
        11,
        16,
        23,
        4,
        11,
        16,
        23,
        4,
        11,
        16,
        23,
        4,
        11,
        16,
        23,
        6,
        10,
        15,
        21,
        6,
        10,
        15,
        21,
        6,
        10,
        15,
        21,
        6,
        10,
        15,
        21
      ];
      _k = new Array(64);
      for (var i = 0; i < 64; ++i) {
        _k[i] = Math.floor(Math.abs(Math.sin(i + 1)) * 4294967296);
      }
      _initialized = true;
    }
    function _update(s, w, bytes) {
      var t, a, b, c, d, f, r, i;
      var len = bytes.length();
      while (len >= 64) {
        a = s.h0;
        b = s.h1;
        c = s.h2;
        d = s.h3;
        for (i = 0; i < 16; ++i) {
          w[i] = bytes.getInt32Le();
          f = d ^ b & (c ^ d);
          t = a + f + _k[i] + w[i];
          r = _r[i];
          a = d;
          d = c;
          c = b;
          b += t << r | t >>> 32 - r;
        }
        for (; i < 32; ++i) {
          f = c ^ d & (b ^ c);
          t = a + f + _k[i] + w[_g[i]];
          r = _r[i];
          a = d;
          d = c;
          c = b;
          b += t << r | t >>> 32 - r;
        }
        for (; i < 48; ++i) {
          f = b ^ c ^ d;
          t = a + f + _k[i] + w[_g[i]];
          r = _r[i];
          a = d;
          d = c;
          c = b;
          b += t << r | t >>> 32 - r;
        }
        for (; i < 64; ++i) {
          f = c ^ (b | ~d);
          t = a + f + _k[i] + w[_g[i]];
          r = _r[i];
          a = d;
          d = c;
          c = b;
          b += t << r | t >>> 32 - r;
        }
        s.h0 = s.h0 + a | 0;
        s.h1 = s.h1 + b | 0;
        s.h2 = s.h2 + c | 0;
        s.h3 = s.h3 + d | 0;
        len -= 64;
      }
    }
  }
});

// node_modules/node-forge/lib/pem.js
var require_pem = __commonJS({
  "node_modules/node-forge/lib/pem.js"(exports, module2) {
    var forge = require_forge();
    require_util();
    var pem = module2.exports = forge.pem = forge.pem || {};
    pem.encode = function(msg, options) {
      options = options || {};
      var rval = "-----BEGIN " + msg.type + "-----\r\n";
      var header;
      if (msg.procType) {
        header = {
          name: "Proc-Type",
          values: [String(msg.procType.version), msg.procType.type]
        };
        rval += foldHeader(header);
      }
      if (msg.contentDomain) {
        header = { name: "Content-Domain", values: [msg.contentDomain] };
        rval += foldHeader(header);
      }
      if (msg.dekInfo) {
        header = { name: "DEK-Info", values: [msg.dekInfo.algorithm] };
        if (msg.dekInfo.parameters) {
          header.values.push(msg.dekInfo.parameters);
        }
        rval += foldHeader(header);
      }
      if (msg.headers) {
        for (var i = 0; i < msg.headers.length; ++i) {
          rval += foldHeader(msg.headers[i]);
        }
      }
      if (msg.procType) {
        rval += "\r\n";
      }
      rval += forge.util.encode64(msg.body, options.maxline || 64) + "\r\n";
      rval += "-----END " + msg.type + "-----\r\n";
      return rval;
    };
    pem.decode = function(str) {
      var rval = [];
      var rMessage = /\s*-----BEGIN ([A-Z0-9- ]+)-----\r?\n?([\x21-\x7e\s]+?(?:\r?\n\r?\n))?([:A-Za-z0-9+\/=\s]+?)-----END \1-----/g;
      var rHeader = /([\x21-\x7e]+):\s*([\x21-\x7e\s^:]+)/;
      var rCRLF = /\r?\n/;
      var match;
      while (true) {
        match = rMessage.exec(str);
        if (!match) {
          break;
        }
        var type = match[1];
        if (type === "NEW CERTIFICATE REQUEST") {
          type = "CERTIFICATE REQUEST";
        }
        var msg = {
          type,
          procType: null,
          contentDomain: null,
          dekInfo: null,
          headers: [],
          body: forge.util.decode64(match[3])
        };
        rval.push(msg);
        if (!match[2]) {
          continue;
        }
        var lines = match[2].split(rCRLF);
        var li = 0;
        while (match && li < lines.length) {
          var line = lines[li].replace(/\s+$/, "");
          for (var nl = li + 1; nl < lines.length; ++nl) {
            var next = lines[nl];
            if (!/\s/.test(next[0])) {
              break;
            }
            line += next;
            li = nl;
          }
          match = line.match(rHeader);
          if (match) {
            var header = { name: match[1], values: [] };
            var values = match[2].split(",");
            for (var vi = 0; vi < values.length; ++vi) {
              header.values.push(ltrim(values[vi]));
            }
            if (!msg.procType) {
              if (header.name !== "Proc-Type") {
                throw new Error('Invalid PEM formatted message. The first encapsulated header must be "Proc-Type".');
              } else if (header.values.length !== 2) {
                throw new Error('Invalid PEM formatted message. The "Proc-Type" header must have two subfields.');
              }
              msg.procType = { version: values[0], type: values[1] };
            } else if (!msg.contentDomain && header.name === "Content-Domain") {
              msg.contentDomain = values[0] || "";
            } else if (!msg.dekInfo && header.name === "DEK-Info") {
              if (header.values.length === 0) {
                throw new Error('Invalid PEM formatted message. The "DEK-Info" header must have at least one subfield.');
              }
              msg.dekInfo = { algorithm: values[0], parameters: values[1] || null };
            } else {
              msg.headers.push(header);
            }
          }
          ++li;
        }
        if (msg.procType === "ENCRYPTED" && !msg.dekInfo) {
          throw new Error('Invalid PEM formatted message. The "DEK-Info" header must be present if "Proc-Type" is "ENCRYPTED".');
        }
      }
      if (rval.length === 0) {
        throw new Error("Invalid PEM formatted message.");
      }
      return rval;
    };
    function foldHeader(header) {
      var rval = header.name + ": ";
      var values = [];
      var insertSpace = function(match, $1) {
        return " " + $1;
      };
      for (var i = 0; i < header.values.length; ++i) {
        values.push(header.values[i].replace(/^(\S+\r\n)/, insertSpace));
      }
      rval += values.join(",") + "\r\n";
      var length = 0;
      var candidate = -1;
      for (var i = 0; i < rval.length; ++i, ++length) {
        if (length > 65 && candidate !== -1) {
          var insert = rval[candidate];
          if (insert === ",") {
            ++candidate;
            rval = rval.substr(0, candidate) + "\r\n " + rval.substr(candidate);
          } else {
            rval = rval.substr(0, candidate) + "\r\n" + insert + rval.substr(candidate + 1);
          }
          length = i - candidate - 1;
          candidate = -1;
          ++i;
        } else if (rval[i] === " " || rval[i] === "	" || rval[i] === ",") {
          candidate = i;
        }
      }
      return rval;
    }
    function ltrim(str) {
      return str.replace(/^\s+/, "");
    }
  }
});

// node_modules/node-forge/lib/des.js
var require_des = __commonJS({
  "node_modules/node-forge/lib/des.js"(exports, module2) {
    var forge = require_forge();
    require_cipher();
    require_cipherModes();
    require_util();
    module2.exports = forge.des = forge.des || {};
    forge.des.startEncrypting = function(key, iv, output, mode) {
      var cipher = _createCipher({
        key,
        output,
        decrypt: false,
        mode: mode || (iv === null ? "ECB" : "CBC")
      });
      cipher.start(iv);
      return cipher;
    };
    forge.des.createEncryptionCipher = function(key, mode) {
      return _createCipher({
        key,
        output: null,
        decrypt: false,
        mode
      });
    };
    forge.des.startDecrypting = function(key, iv, output, mode) {
      var cipher = _createCipher({
        key,
        output,
        decrypt: true,
        mode: mode || (iv === null ? "ECB" : "CBC")
      });
      cipher.start(iv);
      return cipher;
    };
    forge.des.createDecryptionCipher = function(key, mode) {
      return _createCipher({
        key,
        output: null,
        decrypt: true,
        mode
      });
    };
    forge.des.Algorithm = function(name, mode) {
      var self2 = this;
      self2.name = name;
      self2.mode = new mode({
        blockSize: 8,
        cipher: {
          encrypt: function(inBlock, outBlock) {
            return _updateBlock(self2._keys, inBlock, outBlock, false);
          },
          decrypt: function(inBlock, outBlock) {
            return _updateBlock(self2._keys, inBlock, outBlock, true);
          }
        }
      });
      self2._init = false;
    };
    forge.des.Algorithm.prototype.initialize = function(options) {
      if (this._init) {
        return;
      }
      var key = forge.util.createBuffer(options.key);
      if (this.name.indexOf("3DES") === 0) {
        if (key.length() !== 24) {
          throw new Error("Invalid Triple-DES key size: " + key.length() * 8);
        }
      }
      this._keys = _createKeys(key);
      this._init = true;
    };
    registerAlgorithm("DES-ECB", forge.cipher.modes.ecb);
    registerAlgorithm("DES-CBC", forge.cipher.modes.cbc);
    registerAlgorithm("DES-CFB", forge.cipher.modes.cfb);
    registerAlgorithm("DES-OFB", forge.cipher.modes.ofb);
    registerAlgorithm("DES-CTR", forge.cipher.modes.ctr);
    registerAlgorithm("3DES-ECB", forge.cipher.modes.ecb);
    registerAlgorithm("3DES-CBC", forge.cipher.modes.cbc);
    registerAlgorithm("3DES-CFB", forge.cipher.modes.cfb);
    registerAlgorithm("3DES-OFB", forge.cipher.modes.ofb);
    registerAlgorithm("3DES-CTR", forge.cipher.modes.ctr);
    function registerAlgorithm(name, mode) {
      var factory = function() {
        return new forge.des.Algorithm(name, mode);
      };
      forge.cipher.registerAlgorithm(name, factory);
    }
    var spfunction1 = [16843776, 0, 65536, 16843780, 16842756, 66564, 4, 65536, 1024, 16843776, 16843780, 1024, 16778244, 16842756, 16777216, 4, 1028, 16778240, 16778240, 66560, 66560, 16842752, 16842752, 16778244, 65540, 16777220, 16777220, 65540, 0, 1028, 66564, 16777216, 65536, 16843780, 4, 16842752, 16843776, 16777216, 16777216, 1024, 16842756, 65536, 66560, 16777220, 1024, 4, 16778244, 66564, 16843780, 65540, 16842752, 16778244, 16777220, 1028, 66564, 16843776, 1028, 16778240, 16778240, 0, 65540, 66560, 0, 16842756];
    var spfunction2 = [-2146402272, -2147450880, 32768, 1081376, 1048576, 32, -2146435040, -2147450848, -2147483616, -2146402272, -2146402304, -2147483648, -2147450880, 1048576, 32, -2146435040, 1081344, 1048608, -2147450848, 0, -2147483648, 32768, 1081376, -2146435072, 1048608, -2147483616, 0, 1081344, 32800, -2146402304, -2146435072, 32800, 0, 1081376, -2146435040, 1048576, -2147450848, -2146435072, -2146402304, 32768, -2146435072, -2147450880, 32, -2146402272, 1081376, 32, 32768, -2147483648, 32800, -2146402304, 1048576, -2147483616, 1048608, -2147450848, -2147483616, 1048608, 1081344, 0, -2147450880, 32800, -2147483648, -2146435040, -2146402272, 1081344];
    var spfunction3 = [520, 134349312, 0, 134348808, 134218240, 0, 131592, 134218240, 131080, 134217736, 134217736, 131072, 134349320, 131080, 134348800, 520, 134217728, 8, 134349312, 512, 131584, 134348800, 134348808, 131592, 134218248, 131584, 131072, 134218248, 8, 134349320, 512, 134217728, 134349312, 134217728, 131080, 520, 131072, 134349312, 134218240, 0, 512, 131080, 134349320, 134218240, 134217736, 512, 0, 134348808, 134218248, 131072, 134217728, 134349320, 8, 131592, 131584, 134217736, 134348800, 134218248, 520, 134348800, 131592, 8, 134348808, 131584];
    var spfunction4 = [8396801, 8321, 8321, 128, 8396928, 8388737, 8388609, 8193, 0, 8396800, 8396800, 8396929, 129, 0, 8388736, 8388609, 1, 8192, 8388608, 8396801, 128, 8388608, 8193, 8320, 8388737, 1, 8320, 8388736, 8192, 8396928, 8396929, 129, 8388736, 8388609, 8396800, 8396929, 129, 0, 0, 8396800, 8320, 8388736, 8388737, 1, 8396801, 8321, 8321, 128, 8396929, 129, 1, 8192, 8388609, 8193, 8396928, 8388737, 8193, 8320, 8388608, 8396801, 128, 8388608, 8192, 8396928];
    var spfunction5 = [256, 34078976, 34078720, 1107296512, 524288, 256, 1073741824, 34078720, 1074266368, 524288, 33554688, 1074266368, 1107296512, 1107820544, 524544, 1073741824, 33554432, 1074266112, 1074266112, 0, 1073742080, 1107820800, 1107820800, 33554688, 1107820544, 1073742080, 0, 1107296256, 34078976, 33554432, 1107296256, 524544, 524288, 1107296512, 256, 33554432, 1073741824, 34078720, 1107296512, 1074266368, 33554688, 1073741824, 1107820544, 34078976, 1074266368, 256, 33554432, 1107820544, 1107820800, 524544, 1107296256, 1107820800, 34078720, 0, 1074266112, 1107296256, 524544, 33554688, 1073742080, 524288, 0, 1074266112, 34078976, 1073742080];
    var spfunction6 = [536870928, 541065216, 16384, 541081616, 541065216, 16, 541081616, 4194304, 536887296, 4210704, 4194304, 536870928, 4194320, 536887296, 536870912, 16400, 0, 4194320, 536887312, 16384, 4210688, 536887312, 16, 541065232, 541065232, 0, 4210704, 541081600, 16400, 4210688, 541081600, 536870912, 536887296, 16, 541065232, 4210688, 541081616, 4194304, 16400, 536870928, 4194304, 536887296, 536870912, 16400, 536870928, 541081616, 4210688, 541065216, 4210704, 541081600, 0, 541065232, 16, 16384, 541065216, 4210704, 16384, 4194320, 536887312, 0, 541081600, 536870912, 4194320, 536887312];
    var spfunction7 = [2097152, 69206018, 67110914, 0, 2048, 67110914, 2099202, 69208064, 69208066, 2097152, 0, 67108866, 2, 67108864, 69206018, 2050, 67110912, 2099202, 2097154, 67110912, 67108866, 69206016, 69208064, 2097154, 69206016, 2048, 2050, 69208066, 2099200, 2, 67108864, 2099200, 67108864, 2099200, 2097152, 67110914, 67110914, 69206018, 69206018, 2, 2097154, 67108864, 67110912, 2097152, 69208064, 2050, 2099202, 69208064, 2050, 67108866, 69208066, 69206016, 2099200, 0, 2, 69208066, 0, 2099202, 69206016, 2048, 67108866, 67110912, 2048, 2097154];
    var spfunction8 = [268439616, 4096, 262144, 268701760, 268435456, 268439616, 64, 268435456, 262208, 268697600, 268701760, 266240, 268701696, 266304, 4096, 64, 268697600, 268435520, 268439552, 4160, 266240, 262208, 268697664, 268701696, 4160, 0, 0, 268697664, 268435520, 268439552, 266304, 262144, 266304, 262144, 268701696, 4096, 64, 268697664, 4096, 266304, 268439552, 64, 268435520, 268697600, 268697664, 268435456, 262144, 268439616, 0, 268701760, 262208, 268435520, 268697600, 268439552, 268439616, 0, 268701760, 266240, 266240, 4160, 4160, 262208, 268435456, 268701696];
    function _createKeys(key) {
      var pc2bytes0 = [0, 4, 536870912, 536870916, 65536, 65540, 536936448, 536936452, 512, 516, 536871424, 536871428, 66048, 66052, 536936960, 536936964], pc2bytes1 = [0, 1, 1048576, 1048577, 67108864, 67108865, 68157440, 68157441, 256, 257, 1048832, 1048833, 67109120, 67109121, 68157696, 68157697], pc2bytes2 = [0, 8, 2048, 2056, 16777216, 16777224, 16779264, 16779272, 0, 8, 2048, 2056, 16777216, 16777224, 16779264, 16779272], pc2bytes3 = [0, 2097152, 134217728, 136314880, 8192, 2105344, 134225920, 136323072, 131072, 2228224, 134348800, 136445952, 139264, 2236416, 134356992, 136454144], pc2bytes4 = [0, 262144, 16, 262160, 0, 262144, 16, 262160, 4096, 266240, 4112, 266256, 4096, 266240, 4112, 266256], pc2bytes5 = [0, 1024, 32, 1056, 0, 1024, 32, 1056, 33554432, 33555456, 33554464, 33555488, 33554432, 33555456, 33554464, 33555488], pc2bytes6 = [0, 268435456, 524288, 268959744, 2, 268435458, 524290, 268959746, 0, 268435456, 524288, 268959744, 2, 268435458, 524290, 268959746], pc2bytes7 = [0, 65536, 2048, 67584, 536870912, 536936448, 536872960, 536938496, 131072, 196608, 133120, 198656, 537001984, 537067520, 537004032, 537069568], pc2bytes8 = [0, 262144, 0, 262144, 2, 262146, 2, 262146, 33554432, 33816576, 33554432, 33816576, 33554434, 33816578, 33554434, 33816578], pc2bytes9 = [0, 268435456, 8, 268435464, 0, 268435456, 8, 268435464, 1024, 268436480, 1032, 268436488, 1024, 268436480, 1032, 268436488], pc2bytes10 = [0, 32, 0, 32, 1048576, 1048608, 1048576, 1048608, 8192, 8224, 8192, 8224, 1056768, 1056800, 1056768, 1056800], pc2bytes11 = [0, 16777216, 512, 16777728, 2097152, 18874368, 2097664, 18874880, 67108864, 83886080, 67109376, 83886592, 69206016, 85983232, 69206528, 85983744], pc2bytes12 = [0, 4096, 134217728, 134221824, 524288, 528384, 134742016, 134746112, 16, 4112, 134217744, 134221840, 524304, 528400, 134742032, 134746128], pc2bytes13 = [0, 4, 256, 260, 0, 4, 256, 260, 1, 5, 257, 261, 1, 5, 257, 261];
      var iterations = key.length() > 8 ? 3 : 1;
      var keys = [];
      var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];
      var n = 0, tmp;
      for (var j = 0; j < iterations; j++) {
        var left = key.getInt32();
        var right = key.getInt32();
        tmp = (left >>> 4 ^ right) & 252645135;
        right ^= tmp;
        left ^= tmp << 4;
        tmp = (right >>> -16 ^ left) & 65535;
        left ^= tmp;
        right ^= tmp << -16;
        tmp = (left >>> 2 ^ right) & 858993459;
        right ^= tmp;
        left ^= tmp << 2;
        tmp = (right >>> -16 ^ left) & 65535;
        left ^= tmp;
        right ^= tmp << -16;
        tmp = (left >>> 1 ^ right) & 1431655765;
        right ^= tmp;
        left ^= tmp << 1;
        tmp = (right >>> 8 ^ left) & 16711935;
        left ^= tmp;
        right ^= tmp << 8;
        tmp = (left >>> 1 ^ right) & 1431655765;
        right ^= tmp;
        left ^= tmp << 1;
        tmp = left << 8 | right >>> 20 & 240;
        left = right << 24 | right << 8 & 16711680 | right >>> 8 & 65280 | right >>> 24 & 240;
        right = tmp;
        for (var i = 0; i < shifts.length; ++i) {
          if (shifts[i]) {
            left = left << 2 | left >>> 26;
            right = right << 2 | right >>> 26;
          } else {
            left = left << 1 | left >>> 27;
            right = right << 1 | right >>> 27;
          }
          left &= -15;
          right &= -15;
          var lefttmp = pc2bytes0[left >>> 28] | pc2bytes1[left >>> 24 & 15] | pc2bytes2[left >>> 20 & 15] | pc2bytes3[left >>> 16 & 15] | pc2bytes4[left >>> 12 & 15] | pc2bytes5[left >>> 8 & 15] | pc2bytes6[left >>> 4 & 15];
          var righttmp = pc2bytes7[right >>> 28] | pc2bytes8[right >>> 24 & 15] | pc2bytes9[right >>> 20 & 15] | pc2bytes10[right >>> 16 & 15] | pc2bytes11[right >>> 12 & 15] | pc2bytes12[right >>> 8 & 15] | pc2bytes13[right >>> 4 & 15];
          tmp = (righttmp >>> 16 ^ lefttmp) & 65535;
          keys[n++] = lefttmp ^ tmp;
          keys[n++] = righttmp ^ tmp << 16;
        }
      }
      return keys;
    }
    function _updateBlock(keys, input, output, decrypt) {
      var iterations = keys.length === 32 ? 3 : 9;
      var looping;
      if (iterations === 3) {
        looping = decrypt ? [30, -2, -2] : [0, 32, 2];
      } else {
        looping = decrypt ? [94, 62, -2, 32, 64, 2, 30, -2, -2] : [0, 32, 2, 62, 30, -2, 64, 96, 2];
      }
      var tmp;
      var left = input[0];
      var right = input[1];
      tmp = (left >>> 4 ^ right) & 252645135;
      right ^= tmp;
      left ^= tmp << 4;
      tmp = (left >>> 16 ^ right) & 65535;
      right ^= tmp;
      left ^= tmp << 16;
      tmp = (right >>> 2 ^ left) & 858993459;
      left ^= tmp;
      right ^= tmp << 2;
      tmp = (right >>> 8 ^ left) & 16711935;
      left ^= tmp;
      right ^= tmp << 8;
      tmp = (left >>> 1 ^ right) & 1431655765;
      right ^= tmp;
      left ^= tmp << 1;
      left = left << 1 | left >>> 31;
      right = right << 1 | right >>> 31;
      for (var j = 0; j < iterations; j += 3) {
        var endloop = looping[j + 1];
        var loopinc = looping[j + 2];
        for (var i = looping[j]; i != endloop; i += loopinc) {
          var right1 = right ^ keys[i];
          var right2 = (right >>> 4 | right << 28) ^ keys[i + 1];
          tmp = left;
          left = right;
          right = tmp ^ (spfunction2[right1 >>> 24 & 63] | spfunction4[right1 >>> 16 & 63] | spfunction6[right1 >>> 8 & 63] | spfunction8[right1 & 63] | spfunction1[right2 >>> 24 & 63] | spfunction3[right2 >>> 16 & 63] | spfunction5[right2 >>> 8 & 63] | spfunction7[right2 & 63]);
        }
        tmp = left;
        left = right;
        right = tmp;
      }
      left = left >>> 1 | left << 31;
      right = right >>> 1 | right << 31;
      tmp = (left >>> 1 ^ right) & 1431655765;
      right ^= tmp;
      left ^= tmp << 1;
      tmp = (right >>> 8 ^ left) & 16711935;
      left ^= tmp;
      right ^= tmp << 8;
      tmp = (right >>> 2 ^ left) & 858993459;
      left ^= tmp;
      right ^= tmp << 2;
      tmp = (left >>> 16 ^ right) & 65535;
      right ^= tmp;
      left ^= tmp << 16;
      tmp = (left >>> 4 ^ right) & 252645135;
      right ^= tmp;
      left ^= tmp << 4;
      output[0] = left;
      output[1] = right;
    }
    function _createCipher(options) {
      options = options || {};
      var mode = (options.mode || "CBC").toUpperCase();
      var algorithm = "DES-" + mode;
      var cipher;
      if (options.decrypt) {
        cipher = forge.cipher.createDecipher(algorithm, options.key);
      } else {
        cipher = forge.cipher.createCipher(algorithm, options.key);
      }
      var start = cipher.start;
      cipher.start = function(iv, options2) {
        var output = null;
        if (options2 instanceof forge.util.ByteBuffer) {
          output = options2;
          options2 = {};
        }
        options2 = options2 || {};
        options2.output = output;
        options2.iv = iv;
        start.call(cipher, options2);
      };
      return cipher;
    }
  }
});

// node_modules/node-forge/lib/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/node-forge/lib/pbkdf2.js"(exports, module2) {
    var forge = require_forge();
    require_hmac();
    require_md();
    require_util();
    var pkcs5 = forge.pkcs5 = forge.pkcs5 || {};
    var crypto4;
    if (forge.util.isNodejs && !forge.options.usePureJavaScript) {
      crypto4 = require("crypto");
    }
    module2.exports = forge.pbkdf2 = pkcs5.pbkdf2 = function(p, s, c, dkLen, md, callback) {
      if (typeof md === "function") {
        callback = md;
        md = null;
      }
      if (forge.util.isNodejs && !forge.options.usePureJavaScript && crypto4.pbkdf2 && (md === null || typeof md !== "object") && (crypto4.pbkdf2Sync.length > 4 || (!md || md === "sha1"))) {
        if (typeof md !== "string") {
          md = "sha1";
        }
        p = Buffer.from(p, "binary");
        s = Buffer.from(s, "binary");
        if (!callback) {
          if (crypto4.pbkdf2Sync.length === 4) {
            return crypto4.pbkdf2Sync(p, s, c, dkLen).toString("binary");
          }
          return crypto4.pbkdf2Sync(p, s, c, dkLen, md).toString("binary");
        }
        if (crypto4.pbkdf2Sync.length === 4) {
          return crypto4.pbkdf2(p, s, c, dkLen, function(err2, key) {
            if (err2) {
              return callback(err2);
            }
            callback(null, key.toString("binary"));
          });
        }
        return crypto4.pbkdf2(p, s, c, dkLen, md, function(err2, key) {
          if (err2) {
            return callback(err2);
          }
          callback(null, key.toString("binary"));
        });
      }
      if (typeof md === "undefined" || md === null) {
        md = "sha1";
      }
      if (typeof md === "string") {
        if (!(md in forge.md.algorithms)) {
          throw new Error("Unknown hash algorithm: " + md);
        }
        md = forge.md[md].create();
      }
      var hLen = md.digestLength;
      if (dkLen > 4294967295 * hLen) {
        var err = new Error("Derived key is too long.");
        if (callback) {
          return callback(err);
        }
        throw err;
      }
      var len = Math.ceil(dkLen / hLen);
      var r = dkLen - (len - 1) * hLen;
      var prf = forge.hmac.create();
      prf.start(md, p);
      var dk = "";
      var xor, u_c, u_c1;
      if (!callback) {
        for (var i = 1; i <= len; ++i) {
          prf.start(null, null);
          prf.update(s);
          prf.update(forge.util.int32ToBytes(i));
          xor = u_c1 = prf.digest().getBytes();
          for (var j = 2; j <= c; ++j) {
            prf.start(null, null);
            prf.update(u_c1);
            u_c = prf.digest().getBytes();
            xor = forge.util.xorBytes(xor, u_c, hLen);
            u_c1 = u_c;
          }
          dk += i < len ? xor : xor.substr(0, r);
        }
        return dk;
      }
      var i = 1, j;
      function outer() {
        if (i > len) {
          return callback(null, dk);
        }
        prf.start(null, null);
        prf.update(s);
        prf.update(forge.util.int32ToBytes(i));
        xor = u_c1 = prf.digest().getBytes();
        j = 2;
        inner();
      }
      function inner() {
        if (j <= c) {
          prf.start(null, null);
          prf.update(u_c1);
          u_c = prf.digest().getBytes();
          xor = forge.util.xorBytes(xor, u_c, hLen);
          u_c1 = u_c;
          ++j;
          return forge.util.setImmediate(inner);
        }
        dk += i < len ? xor : xor.substr(0, r);
        ++i;
        outer();
      }
      outer();
    };
  }
});

// node_modules/node-forge/lib/sha256.js
var require_sha256 = __commonJS({
  "node_modules/node-forge/lib/sha256.js"(exports, module2) {
    var forge = require_forge();
    require_md();
    require_util();
    var sha256 = module2.exports = forge.sha256 = forge.sha256 || {};
    forge.md.sha256 = forge.md.algorithms.sha256 = sha256;
    sha256.create = function() {
      if (!_initialized) {
        _init();
      }
      var _state = null;
      var _input = forge.util.createBuffer();
      var _w = new Array(64);
      var md = {
        algorithm: "sha256",
        blockLength: 64,
        digestLength: 32,
        // 56-bit length of message so far (does not including padding)
        messageLength: 0,
        // true message length
        fullMessageLength: null,
        // size of message length in bytes
        messageLengthSize: 8
      };
      md.start = function() {
        md.messageLength = 0;
        md.fullMessageLength = md.messageLength64 = [];
        var int32s = md.messageLengthSize / 4;
        for (var i = 0; i < int32s; ++i) {
          md.fullMessageLength.push(0);
        }
        _input = forge.util.createBuffer();
        _state = {
          h0: 1779033703,
          h1: 3144134277,
          h2: 1013904242,
          h3: 2773480762,
          h4: 1359893119,
          h5: 2600822924,
          h6: 528734635,
          h7: 1541459225
        };
        return md;
      };
      md.start();
      md.update = function(msg, encoding) {
        if (encoding === "utf8") {
          msg = forge.util.encodeUtf8(msg);
        }
        var len = msg.length;
        md.messageLength += len;
        len = [len / 4294967296 >>> 0, len >>> 0];
        for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
          md.fullMessageLength[i] += len[1];
          len[1] = len[0] + (md.fullMessageLength[i] / 4294967296 >>> 0);
          md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
          len[0] = len[1] / 4294967296 >>> 0;
        }
        _input.putBytes(msg);
        _update(_state, _w, _input);
        if (_input.read > 2048 || _input.length() === 0) {
          _input.compact();
        }
        return md;
      };
      md.digest = function() {
        var finalBlock = forge.util.createBuffer();
        finalBlock.putBytes(_input.bytes());
        var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize;
        var overflow = remaining & md.blockLength - 1;
        finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));
        var next, carry;
        var bits = md.fullMessageLength[0] * 8;
        for (var i = 0; i < md.fullMessageLength.length - 1; ++i) {
          next = md.fullMessageLength[i + 1] * 8;
          carry = next / 4294967296 >>> 0;
          bits += carry;
          finalBlock.putInt32(bits >>> 0);
          bits = next >>> 0;
        }
        finalBlock.putInt32(bits);
        var s2 = {
          h0: _state.h0,
          h1: _state.h1,
          h2: _state.h2,
          h3: _state.h3,
          h4: _state.h4,
          h5: _state.h5,
          h6: _state.h6,
          h7: _state.h7
        };
        _update(s2, _w, finalBlock);
        var rval = forge.util.createBuffer();
        rval.putInt32(s2.h0);
        rval.putInt32(s2.h1);
        rval.putInt32(s2.h2);
        rval.putInt32(s2.h3);
        rval.putInt32(s2.h4);
        rval.putInt32(s2.h5);
        rval.putInt32(s2.h6);
        rval.putInt32(s2.h7);
        return rval;
      };
      return md;
    };
    var _padding = null;
    var _initialized = false;
    var _k = null;
    function _init() {
      _padding = String.fromCharCode(128);
      _padding += forge.util.fillString(String.fromCharCode(0), 64);
      _k = [
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
      ];
      _initialized = true;
    }
    function _update(s, w, bytes) {
      var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;
      var len = bytes.length();
      while (len >= 64) {
        for (i = 0; i < 16; ++i) {
          w[i] = bytes.getInt32();
        }
        for (; i < 64; ++i) {
          t1 = w[i - 2];
          t1 = (t1 >>> 17 | t1 << 15) ^ (t1 >>> 19 | t1 << 13) ^ t1 >>> 10;
          t2 = w[i - 15];
          t2 = (t2 >>> 7 | t2 << 25) ^ (t2 >>> 18 | t2 << 14) ^ t2 >>> 3;
          w[i] = t1 + w[i - 7] + t2 + w[i - 16] | 0;
        }
        a = s.h0;
        b = s.h1;
        c = s.h2;
        d = s.h3;
        e = s.h4;
        f = s.h5;
        g = s.h6;
        h = s.h7;
        for (i = 0; i < 64; ++i) {
          s1 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);
          ch = g ^ e & (f ^ g);
          s0 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10);
          maj = a & b | c & (a ^ b);
          t1 = h + s1 + ch + _k[i] + w[i];
          t2 = s0 + maj;
          h = g;
          g = f;
          f = e;
          e = d + t1 >>> 0;
          d = c;
          c = b;
          b = a;
          a = t1 + t2 >>> 0;
        }
        s.h0 = s.h0 + a | 0;
        s.h1 = s.h1 + b | 0;
        s.h2 = s.h2 + c | 0;
        s.h3 = s.h3 + d | 0;
        s.h4 = s.h4 + e | 0;
        s.h5 = s.h5 + f | 0;
        s.h6 = s.h6 + g | 0;
        s.h7 = s.h7 + h | 0;
        len -= 64;
      }
    }
  }
});

// node_modules/node-forge/lib/prng.js
var require_prng = __commonJS({
  "node_modules/node-forge/lib/prng.js"(exports, module2) {
    var forge = require_forge();
    require_util();
    var _crypto = null;
    if (forge.util.isNodejs && !forge.options.usePureJavaScript && !process.versions["node-webkit"]) {
      _crypto = require("crypto");
    }
    var prng = module2.exports = forge.prng = forge.prng || {};
    prng.create = function(plugin) {
      var ctx = {
        plugin,
        key: null,
        seed: null,
        time: null,
        // number of reseeds so far
        reseeds: 0,
        // amount of data generated so far
        generated: 0,
        // no initial key bytes
        keyBytes: ""
      };
      var md = plugin.md;
      var pools = new Array(32);
      for (var i = 0; i < 32; ++i) {
        pools[i] = md.create();
      }
      ctx.pools = pools;
      ctx.pool = 0;
      ctx.generate = function(count, callback) {
        if (!callback) {
          return ctx.generateSync(count);
        }
        var cipher = ctx.plugin.cipher;
        var increment = ctx.plugin.increment;
        var formatKey = ctx.plugin.formatKey;
        var formatSeed = ctx.plugin.formatSeed;
        var b = forge.util.createBuffer();
        ctx.key = null;
        generate();
        function generate(err) {
          if (err) {
            return callback(err);
          }
          if (b.length() >= count) {
            return callback(null, b.getBytes(count));
          }
          if (ctx.generated > 1048575) {
            ctx.key = null;
          }
          if (ctx.key === null) {
            return forge.util.nextTick(function() {
              _reseed(generate);
            });
          }
          var bytes = cipher(ctx.key, ctx.seed);
          ctx.generated += bytes.length;
          b.putBytes(bytes);
          ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
          ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));
          forge.util.setImmediate(generate);
        }
      };
      ctx.generateSync = function(count) {
        var cipher = ctx.plugin.cipher;
        var increment = ctx.plugin.increment;
        var formatKey = ctx.plugin.formatKey;
        var formatSeed = ctx.plugin.formatSeed;
        ctx.key = null;
        var b = forge.util.createBuffer();
        while (b.length() < count) {
          if (ctx.generated > 1048575) {
            ctx.key = null;
          }
          if (ctx.key === null) {
            _reseedSync();
          }
          var bytes = cipher(ctx.key, ctx.seed);
          ctx.generated += bytes.length;
          b.putBytes(bytes);
          ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
          ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));
        }
        return b.getBytes(count);
      };
      function _reseed(callback) {
        if (ctx.pools[0].messageLength >= 32) {
          _seed();
          return callback();
        }
        var needed = 32 - ctx.pools[0].messageLength << 5;
        ctx.seedFile(needed, function(err, bytes) {
          if (err) {
            return callback(err);
          }
          ctx.collect(bytes);
          _seed();
          callback();
        });
      }
      function _reseedSync() {
        if (ctx.pools[0].messageLength >= 32) {
          return _seed();
        }
        var needed = 32 - ctx.pools[0].messageLength << 5;
        ctx.collect(ctx.seedFileSync(needed));
        _seed();
      }
      function _seed() {
        ctx.reseeds = ctx.reseeds === 4294967295 ? 0 : ctx.reseeds + 1;
        var md2 = ctx.plugin.md.create();
        md2.update(ctx.keyBytes);
        var _2powK = 1;
        for (var k = 0; k < 32; ++k) {
          if (ctx.reseeds % _2powK === 0) {
            md2.update(ctx.pools[k].digest().getBytes());
            ctx.pools[k].start();
          }
          _2powK = _2powK << 1;
        }
        ctx.keyBytes = md2.digest().getBytes();
        md2.start();
        md2.update(ctx.keyBytes);
        var seedBytes = md2.digest().getBytes();
        ctx.key = ctx.plugin.formatKey(ctx.keyBytes);
        ctx.seed = ctx.plugin.formatSeed(seedBytes);
        ctx.generated = 0;
      }
      function defaultSeedFile(needed) {
        var getRandomValues = null;
        var globalScope = forge.util.globalScope;
        var _crypto2 = globalScope.crypto || globalScope.msCrypto;
        if (_crypto2 && _crypto2.getRandomValues) {
          getRandomValues = function(arr) {
            return _crypto2.getRandomValues(arr);
          };
        }
        var b = forge.util.createBuffer();
        if (getRandomValues) {
          while (b.length() < needed) {
            var count = Math.max(1, Math.min(needed - b.length(), 65536) / 4);
            var entropy = new Uint32Array(Math.floor(count));
            try {
              getRandomValues(entropy);
              for (var i2 = 0; i2 < entropy.length; ++i2) {
                b.putInt32(entropy[i2]);
              }
            } catch (e) {
              if (!(typeof QuotaExceededError !== "undefined" && e instanceof QuotaExceededError)) {
                throw e;
              }
            }
          }
        }
        if (b.length() < needed) {
          var hi, lo, next;
          var seed = Math.floor(Math.random() * 65536);
          while (b.length() < needed) {
            lo = 16807 * (seed & 65535);
            hi = 16807 * (seed >> 16);
            lo += (hi & 32767) << 16;
            lo += hi >> 15;
            lo = (lo & 2147483647) + (lo >> 31);
            seed = lo & 4294967295;
            for (var i2 = 0; i2 < 3; ++i2) {
              next = seed >>> (i2 << 3);
              next ^= Math.floor(Math.random() * 256);
              b.putByte(next & 255);
            }
          }
        }
        return b.getBytes(needed);
      }
      if (_crypto) {
        ctx.seedFile = function(needed, callback) {
          _crypto.randomBytes(needed, function(err, bytes) {
            if (err) {
              return callback(err);
            }
            callback(null, bytes.toString());
          });
        };
        ctx.seedFileSync = function(needed) {
          return _crypto.randomBytes(needed).toString();
        };
      } else {
        ctx.seedFile = function(needed, callback) {
          try {
            callback(null, defaultSeedFile(needed));
          } catch (e) {
            callback(e);
          }
        };
        ctx.seedFileSync = defaultSeedFile;
      }
      ctx.collect = function(bytes) {
        var count = bytes.length;
        for (var i2 = 0; i2 < count; ++i2) {
          ctx.pools[ctx.pool].update(bytes.substr(i2, 1));
          ctx.pool = ctx.pool === 31 ? 0 : ctx.pool + 1;
        }
      };
      ctx.collectInt = function(i2, n) {
        var bytes = "";
        for (var x = 0; x < n; x += 8) {
          bytes += String.fromCharCode(i2 >> x & 255);
        }
        ctx.collect(bytes);
      };
      ctx.registerWorker = function(worker) {
        if (worker === self) {
          ctx.seedFile = function(needed, callback) {
            function listener2(e) {
              var data = e.data;
              if (data.forge && data.forge.prng) {
                self.removeEventListener("message", listener2);
                callback(data.forge.prng.err, data.forge.prng.bytes);
              }
            }
            self.addEventListener("message", listener2);
            self.postMessage({ forge: { prng: { needed } } });
          };
        } else {
          var listener = function(e) {
            var data = e.data;
            if (data.forge && data.forge.prng) {
              ctx.seedFile(data.forge.prng.needed, function(err, bytes) {
                worker.postMessage({ forge: { prng: { err, bytes } } });
              });
            }
          };
          worker.addEventListener("message", listener);
        }
      };
      return ctx;
    };
  }
});

// node_modules/node-forge/lib/random.js
var require_random = __commonJS({
  "node_modules/node-forge/lib/random.js"(exports, module2) {
    var forge = require_forge();
    require_aes();
    require_sha256();
    require_prng();
    require_util();
    (function() {
      if (forge.random && forge.random.getBytes) {
        module2.exports = forge.random;
        return;
      }
      (function(jQuery2) {
        var prng_aes = {};
        var _prng_aes_output = new Array(4);
        var _prng_aes_buffer = forge.util.createBuffer();
        prng_aes.formatKey = function(key2) {
          var tmp = forge.util.createBuffer(key2);
          key2 = new Array(4);
          key2[0] = tmp.getInt32();
          key2[1] = tmp.getInt32();
          key2[2] = tmp.getInt32();
          key2[3] = tmp.getInt32();
          return forge.aes._expandKey(key2, false);
        };
        prng_aes.formatSeed = function(seed) {
          var tmp = forge.util.createBuffer(seed);
          seed = new Array(4);
          seed[0] = tmp.getInt32();
          seed[1] = tmp.getInt32();
          seed[2] = tmp.getInt32();
          seed[3] = tmp.getInt32();
          return seed;
        };
        prng_aes.cipher = function(key2, seed) {
          forge.aes._updateBlock(key2, seed, _prng_aes_output, false);
          _prng_aes_buffer.putInt32(_prng_aes_output[0]);
          _prng_aes_buffer.putInt32(_prng_aes_output[1]);
          _prng_aes_buffer.putInt32(_prng_aes_output[2]);
          _prng_aes_buffer.putInt32(_prng_aes_output[3]);
          return _prng_aes_buffer.getBytes();
        };
        prng_aes.increment = function(seed) {
          ++seed[3];
          return seed;
        };
        prng_aes.md = forge.md.sha256;
        function spawnPrng() {
          var ctx = forge.prng.create(prng_aes);
          ctx.getBytes = function(count, callback) {
            return ctx.generate(count, callback);
          };
          ctx.getBytesSync = function(count) {
            return ctx.generate(count);
          };
          return ctx;
        }
        var _ctx = spawnPrng();
        var getRandomValues = null;
        var globalScope = forge.util.globalScope;
        var _crypto = globalScope.crypto || globalScope.msCrypto;
        if (_crypto && _crypto.getRandomValues) {
          getRandomValues = function(arr) {
            return _crypto.getRandomValues(arr);
          };
        }
        if (forge.options.usePureJavaScript || !forge.util.isNodejs && !getRandomValues) {
          if (typeof window === "undefined" || window.document === void 0) {
          }
          _ctx.collectInt(+/* @__PURE__ */ new Date(), 32);
          if (typeof navigator !== "undefined") {
            var _navBytes = "";
            for (var key in navigator) {
              try {
                if (typeof navigator[key] == "string") {
                  _navBytes += navigator[key];
                }
              } catch (e) {
              }
            }
            _ctx.collect(_navBytes);
            _navBytes = null;
          }
          if (jQuery2) {
            jQuery2().mousemove(function(e) {
              _ctx.collectInt(e.clientX, 16);
              _ctx.collectInt(e.clientY, 16);
            });
            jQuery2().keypress(function(e) {
              _ctx.collectInt(e.charCode, 8);
            });
          }
        }
        if (!forge.random) {
          forge.random = _ctx;
        } else {
          for (var key in _ctx) {
            forge.random[key] = _ctx[key];
          }
        }
        forge.random.createInstance = spawnPrng;
        module2.exports = forge.random;
      })(typeof jQuery !== "undefined" ? jQuery : null);
    })();
  }
});

// node_modules/node-forge/lib/rc2.js
var require_rc2 = __commonJS({
  "node_modules/node-forge/lib/rc2.js"(exports, module2) {
    var forge = require_forge();
    require_util();
    var piTable = [
      217,
      120,
      249,
      196,
      25,
      221,
      181,
      237,
      40,
      233,
      253,
      121,
      74,
      160,
      216,
      157,
      198,
      126,
      55,
      131,
      43,
      118,
      83,
      142,
      98,
      76,
      100,
      136,
      68,
      139,
      251,
      162,
      23,
      154,
      89,
      245,
      135,
      179,
      79,
      19,
      97,
      69,
      109,
      141,
      9,
      129,
      125,
      50,
      189,
      143,
      64,
      235,
      134,
      183,
      123,
      11,
      240,
      149,
      33,
      34,
      92,
      107,
      78,
      130,
      84,
      214,
      101,
      147,
      206,
      96,
      178,
      28,
      115,
      86,
      192,
      20,
      167,
      140,
      241,
      220,
      18,
      117,
      202,
      31,
      59,
      190,
      228,
      209,
      66,
      61,
      212,
      48,
      163,
      60,
      182,
      38,
      111,
      191,
      14,
      218,
      70,
      105,
      7,
      87,
      39,
      242,
      29,
      155,
      188,
      148,
      67,
      3,
      248,
      17,
      199,
      246,
      144,
      239,
      62,
      231,
      6,
      195,
      213,
      47,
      200,
      102,
      30,
      215,
      8,
      232,
      234,
      222,
      128,
      82,
      238,
      247,
      132,
      170,
      114,
      172,
      53,
      77,
      106,
      42,
      150,
      26,
      210,
      113,
      90,
      21,
      73,
      116,
      75,
      159,
      208,
      94,
      4,
      24,
      164,
      236,
      194,
      224,
      65,
      110,
      15,
      81,
      203,
      204,
      36,
      145,
      175,
      80,
      161,
      244,
      112,
      57,
      153,
      124,
      58,
      133,
      35,
      184,
      180,
      122,
      252,
      2,
      54,
      91,
      37,
      85,
      151,
      49,
      45,
      93,
      250,
      152,
      227,
      138,
      146,
      174,
      5,
      223,
      41,
      16,
      103,
      108,
      186,
      201,
      211,
      0,
      230,
      207,
      225,
      158,
      168,
      44,
      99,
      22,
      1,
      63,
      88,
      226,
      137,
      169,
      13,
      56,
      52,
      27,
      171,
      51,
      255,
      176,
      187,
      72,
      12,
      95,
      185,
      177,
      205,
      46,
      197,
      243,
      219,
      71,
      229,
      165,
      156,
      119,
      10,
      166,
      32,
      104,
      254,
      127,
      193,
      173
    ];
    var s = [1, 2, 3, 5];
    var rol = function(word, bits) {
      return word << bits & 65535 | (word & 65535) >> 16 - bits;
    };
    var ror = function(word, bits) {
      return (word & 65535) >> bits | word << 16 - bits & 65535;
    };
    module2.exports = forge.rc2 = forge.rc2 || {};
    forge.rc2.expandKey = function(key, effKeyBits) {
      if (typeof key === "string") {
        key = forge.util.createBuffer(key);
      }
      effKeyBits = effKeyBits || 128;
      var L = key;
      var T = key.length();
      var T1 = effKeyBits;
      var T8 = Math.ceil(T1 / 8);
      var TM = 255 >> (T1 & 7);
      var i;
      for (i = T; i < 128; i++) {
        L.putByte(piTable[L.at(i - 1) + L.at(i - T) & 255]);
      }
      L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);
      for (i = 127 - T8; i >= 0; i--) {
        L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);
      }
      return L;
    };
    var createCipher = function(key, bits, encrypt) {
      var _finish = false, _input = null, _output = null, _iv = null;
      var mixRound, mashRound;
      var i, j, K = [];
      key = forge.rc2.expandKey(key, bits);
      for (i = 0; i < 64; i++) {
        K.push(key.getInt16Le());
      }
      if (encrypt) {
        mixRound = function(R) {
          for (i = 0; i < 4; i++) {
            R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);
            R[i] = rol(R[i], s[i]);
            j++;
          }
        };
        mashRound = function(R) {
          for (i = 0; i < 4; i++) {
            R[i] += K[R[(i + 3) % 4] & 63];
          }
        };
      } else {
        mixRound = function(R) {
          for (i = 3; i >= 0; i--) {
            R[i] = ror(R[i], s[i]);
            R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);
            j--;
          }
        };
        mashRound = function(R) {
          for (i = 3; i >= 0; i--) {
            R[i] -= K[R[(i + 3) % 4] & 63];
          }
        };
      }
      var runPlan = function(plan) {
        var R = [];
        for (i = 0; i < 4; i++) {
          var val = _input.getInt16Le();
          if (_iv !== null) {
            if (encrypt) {
              val ^= _iv.getInt16Le();
            } else {
              _iv.putInt16Le(val);
            }
          }
          R.push(val & 65535);
        }
        j = encrypt ? 0 : 63;
        for (var ptr = 0; ptr < plan.length; ptr++) {
          for (var ctr = 0; ctr < plan[ptr][0]; ctr++) {
            plan[ptr][1](R);
          }
        }
        for (i = 0; i < 4; i++) {
          if (_iv !== null) {
            if (encrypt) {
              _iv.putInt16Le(R[i]);
            } else {
              R[i] ^= _iv.getInt16Le();
            }
          }
          _output.putInt16Le(R[i]);
        }
      };
      var cipher = null;
      cipher = {
        /**
         * Starts or restarts the encryption or decryption process, whichever
         * was previously configured.
         *
         * To use the cipher in CBC mode, iv may be given either as a string
         * of bytes, or as a byte buffer.  For ECB mode, give null as iv.
         *
         * @param iv the initialization vector to use, null for ECB mode.
         * @param output the output the buffer to write to, null to create one.
         */
        start: function(iv, output) {
          if (iv) {
            if (typeof iv === "string") {
              iv = forge.util.createBuffer(iv);
            }
          }
          _finish = false;
          _input = forge.util.createBuffer();
          _output = output || new forge.util.createBuffer();
          _iv = iv;
          cipher.output = _output;
        },
        /**
         * Updates the next block.
         *
         * @param input the buffer to read from.
         */
        update: function(input) {
          if (!_finish) {
            _input.putBuffer(input);
          }
          while (_input.length() >= 8) {
            runPlan([
              [5, mixRound],
              [1, mashRound],
              [6, mixRound],
              [1, mashRound],
              [5, mixRound]
            ]);
          }
        },
        /**
         * Finishes encrypting or decrypting.
         *
         * @param pad a padding function to use, null for PKCS#7 padding,
         *           signature(blockSize, buffer, decrypt).
         *
         * @return true if successful, false on error.
         */
        finish: function(pad) {
          var rval = true;
          if (encrypt) {
            if (pad) {
              rval = pad(8, _input, !encrypt);
            } else {
              var padding = _input.length() === 8 ? 8 : 8 - _input.length();
              _input.fillWithByte(padding, padding);
            }
          }
          if (rval) {
            _finish = true;
            cipher.update();
          }
          if (!encrypt) {
            rval = _input.length() === 0;
            if (rval) {
              if (pad) {
                rval = pad(8, _output, !encrypt);
              } else {
                var len = _output.length();
                var count = _output.at(len - 1);
                if (count > len) {
                  rval = false;
                } else {
                  _output.truncate(count);
                }
              }
            }
          }
          return rval;
        }
      };
      return cipher;
    };
    forge.rc2.startEncrypting = function(key, iv, output) {
      var cipher = forge.rc2.createEncryptionCipher(key, 128);
      cipher.start(iv, output);
      return cipher;
    };
    forge.rc2.createEncryptionCipher = function(key, bits) {
      return createCipher(key, bits, true);
    };
    forge.rc2.startDecrypting = function(key, iv, output) {
      var cipher = forge.rc2.createDecryptionCipher(key, 128);
      cipher.start(iv, output);
      return cipher;
    };
    forge.rc2.createDecryptionCipher = function(key, bits) {
      return createCipher(key, bits, false);
    };
  }
});

// node_modules/node-forge/lib/jsbn.js
var require_jsbn = __commonJS({
  "node_modules/node-forge/lib/jsbn.js"(exports, module2) {
    var forge = require_forge();
    module2.exports = forge.jsbn = forge.jsbn || {};
    var dbits;
    var canary = 244837814094590;
    var j_lm = (canary & 16777215) == 15715070;
    function BigInteger(a, b, c) {
      this.data = [];
      if (a != null)
        if ("number" == typeof a)
          this.fromNumber(a, b, c);
        else if (b == null && "string" != typeof a)
          this.fromString(a, 256);
        else
          this.fromString(a, b);
    }
    forge.jsbn.BigInteger = BigInteger;
    function nbi() {
      return new BigInteger(null);
    }
    function am1(i, x, w, j, c, n) {
      while (--n >= 0) {
        var v = x * this.data[i++] + w.data[j] + c;
        c = Math.floor(v / 67108864);
        w.data[j++] = v & 67108863;
      }
      return c;
    }
    function am2(i, x, w, j, c, n) {
      var xl = x & 32767, xh = x >> 15;
      while (--n >= 0) {
        var l = this.data[i] & 32767;
        var h = this.data[i++] >> 15;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 32767) << 15) + w.data[j] + (c & 1073741823);
        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
        w.data[j++] = l & 1073741823;
      }
      return c;
    }
    function am3(i, x, w, j, c, n) {
      var xl = x & 16383, xh = x >> 14;
      while (--n >= 0) {
        var l = this.data[i] & 16383;
        var h = this.data[i++] >> 14;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 16383) << 14) + w.data[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w.data[j++] = l & 268435455;
      }
      return c;
    }
    if (typeof navigator === "undefined") {
      BigInteger.prototype.am = am3;
      dbits = 28;
    } else if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
      BigInteger.prototype.am = am2;
      dbits = 30;
    } else if (j_lm && navigator.appName != "Netscape") {
      BigInteger.prototype.am = am1;
      dbits = 26;
    } else {
      BigInteger.prototype.am = am3;
      dbits = 28;
    }
    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = (1 << dbits) - 1;
    BigInteger.prototype.DV = 1 << dbits;
    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2, BI_FP);
    BigInteger.prototype.F1 = BI_FP - dbits;
    BigInteger.prototype.F2 = 2 * dbits - BI_FP;
    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
    var BI_RC = new Array();
    var rr;
    var vv;
    rr = "0".charCodeAt(0);
    for (vv = 0; vv <= 9; ++vv)
      BI_RC[rr++] = vv;
    rr = "a".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv)
      BI_RC[rr++] = vv;
    rr = "A".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv)
      BI_RC[rr++] = vv;
    function int2char(n) {
      return BI_RM.charAt(n);
    }
    function intAt(s, i) {
      var c = BI_RC[s.charCodeAt(i)];
      return c == null ? -1 : c;
    }
    function bnpCopyTo(r) {
      for (var i = this.t - 1; i >= 0; --i)
        r.data[i] = this.data[i];
      r.t = this.t;
      r.s = this.s;
    }
    function bnpFromInt(x) {
      this.t = 1;
      this.s = x < 0 ? -1 : 0;
      if (x > 0)
        this.data[0] = x;
      else if (x < -1)
        this.data[0] = x + this.DV;
      else
        this.t = 0;
    }
    function nbv(i) {
      var r = nbi();
      r.fromInt(i);
      return r;
    }
    function bnpFromString(s, b) {
      var k;
      if (b == 16)
        k = 4;
      else if (b == 8)
        k = 3;
      else if (b == 256)
        k = 8;
      else if (b == 2)
        k = 1;
      else if (b == 32)
        k = 5;
      else if (b == 4)
        k = 2;
      else {
        this.fromRadix(s, b);
        return;
      }
      this.t = 0;
      this.s = 0;
      var i = s.length, mi = false, sh = 0;
      while (--i >= 0) {
        var x = k == 8 ? s[i] & 255 : intAt(s, i);
        if (x < 0) {
          if (s.charAt(i) == "-")
            mi = true;
          continue;
        }
        mi = false;
        if (sh == 0)
          this.data[this.t++] = x;
        else if (sh + k > this.DB) {
          this.data[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
          this.data[this.t++] = x >> this.DB - sh;
        } else
          this.data[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB)
          sh -= this.DB;
      }
      if (k == 8 && (s[0] & 128) != 0) {
        this.s = -1;
        if (sh > 0)
          this.data[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
      }
      this.clamp();
      if (mi)
        BigInteger.ZERO.subTo(this, this);
    }
    function bnpClamp() {
      var c = this.s & this.DM;
      while (this.t > 0 && this.data[this.t - 1] == c)
        --this.t;
    }
    function bnToString(b) {
      if (this.s < 0)
        return "-" + this.negate().toString(b);
      var k;
      if (b == 16)
        k = 4;
      else if (b == 8)
        k = 3;
      else if (b == 2)
        k = 1;
      else if (b == 32)
        k = 5;
      else if (b == 4)
        k = 2;
      else
        return this.toRadix(b);
      var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
      var p = this.DB - i * this.DB % k;
      if (i-- > 0) {
        if (p < this.DB && (d = this.data[i] >> p) > 0) {
          m = true;
          r = int2char(d);
        }
        while (i >= 0) {
          if (p < k) {
            d = (this.data[i] & (1 << p) - 1) << k - p;
            d |= this.data[--i] >> (p += this.DB - k);
          } else {
            d = this.data[i] >> (p -= k) & km;
            if (p <= 0) {
              p += this.DB;
              --i;
            }
          }
          if (d > 0)
            m = true;
          if (m)
            r += int2char(d);
        }
      }
      return m ? r : "0";
    }
    function bnNegate() {
      var r = nbi();
      BigInteger.ZERO.subTo(this, r);
      return r;
    }
    function bnAbs() {
      return this.s < 0 ? this.negate() : this;
    }
    function bnCompareTo(a) {
      var r = this.s - a.s;
      if (r != 0)
        return r;
      var i = this.t;
      r = i - a.t;
      if (r != 0)
        return this.s < 0 ? -r : r;
      while (--i >= 0)
        if ((r = this.data[i] - a.data[i]) != 0)
          return r;
      return 0;
    }
    function nbits(x) {
      var r = 1, t;
      if ((t = x >>> 16) != 0) {
        x = t;
        r += 16;
      }
      if ((t = x >> 8) != 0) {
        x = t;
        r += 8;
      }
      if ((t = x >> 4) != 0) {
        x = t;
        r += 4;
      }
      if ((t = x >> 2) != 0) {
        x = t;
        r += 2;
      }
      if ((t = x >> 1) != 0) {
        x = t;
        r += 1;
      }
      return r;
    }
    function bnBitLength() {
      if (this.t <= 0)
        return 0;
      return this.DB * (this.t - 1) + nbits(this.data[this.t - 1] ^ this.s & this.DM);
    }
    function bnpDLShiftTo(n, r) {
      var i;
      for (i = this.t - 1; i >= 0; --i)
        r.data[i + n] = this.data[i];
      for (i = n - 1; i >= 0; --i)
        r.data[i] = 0;
      r.t = this.t + n;
      r.s = this.s;
    }
    function bnpDRShiftTo(n, r) {
      for (var i = n; i < this.t; ++i)
        r.data[i - n] = this.data[i];
      r.t = Math.max(this.t - n, 0);
      r.s = this.s;
    }
    function bnpLShiftTo(n, r) {
      var bs = n % this.DB;
      var cbs = this.DB - bs;
      var bm = (1 << cbs) - 1;
      var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;
      for (i = this.t - 1; i >= 0; --i) {
        r.data[i + ds + 1] = this.data[i] >> cbs | c;
        c = (this.data[i] & bm) << bs;
      }
      for (i = ds - 1; i >= 0; --i)
        r.data[i] = 0;
      r.data[ds] = c;
      r.t = this.t + ds + 1;
      r.s = this.s;
      r.clamp();
    }
    function bnpRShiftTo(n, r) {
      r.s = this.s;
      var ds = Math.floor(n / this.DB);
      if (ds >= this.t) {
        r.t = 0;
        return;
      }
      var bs = n % this.DB;
      var cbs = this.DB - bs;
      var bm = (1 << bs) - 1;
      r.data[0] = this.data[ds] >> bs;
      for (var i = ds + 1; i < this.t; ++i) {
        r.data[i - ds - 1] |= (this.data[i] & bm) << cbs;
        r.data[i - ds] = this.data[i] >> bs;
      }
      if (bs > 0)
        r.data[this.t - ds - 1] |= (this.s & bm) << cbs;
      r.t = this.t - ds;
      r.clamp();
    }
    function bnpSubTo(a, r) {
      var i = 0, c = 0, m = Math.min(a.t, this.t);
      while (i < m) {
        c += this.data[i] - a.data[i];
        r.data[i++] = c & this.DM;
        c >>= this.DB;
      }
      if (a.t < this.t) {
        c -= a.s;
        while (i < this.t) {
          c += this.data[i];
          r.data[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += this.s;
      } else {
        c += this.s;
        while (i < a.t) {
          c -= a.data[i];
          r.data[i++] = c & this.DM;
          c >>= this.DB;
        }
        c -= a.s;
      }
      r.s = c < 0 ? -1 : 0;
      if (c < -1)
        r.data[i++] = this.DV + c;
      else if (c > 0)
        r.data[i++] = c;
      r.t = i;
      r.clamp();
    }
    function bnpMultiplyTo(a, r) {
      var x = this.abs(), y = a.abs();
      var i = x.t;
      r.t = i + y.t;
      while (--i >= 0)
        r.data[i] = 0;
      for (i = 0; i < y.t; ++i)
        r.data[i + x.t] = x.am(0, y.data[i], r, i, 0, x.t);
      r.s = 0;
      r.clamp();
      if (this.s != a.s)
        BigInteger.ZERO.subTo(r, r);
    }
    function bnpSquareTo(r) {
      var x = this.abs();
      var i = r.t = 2 * x.t;
      while (--i >= 0)
        r.data[i] = 0;
      for (i = 0; i < x.t - 1; ++i) {
        var c = x.am(i, x.data[i], r, 2 * i, 0, 1);
        if ((r.data[i + x.t] += x.am(i + 1, 2 * x.data[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
          r.data[i + x.t] -= x.DV;
          r.data[i + x.t + 1] = 1;
        }
      }
      if (r.t > 0)
        r.data[r.t - 1] += x.am(i, x.data[i], r, 2 * i, 0, 1);
      r.s = 0;
      r.clamp();
    }
    function bnpDivRemTo(m, q, r) {
      var pm = m.abs();
      if (pm.t <= 0)
        return;
      var pt = this.abs();
      if (pt.t < pm.t) {
        if (q != null)
          q.fromInt(0);
        if (r != null)
          this.copyTo(r);
        return;
      }
      if (r == null)
        r = nbi();
      var y = nbi(), ts = this.s, ms = m.s;
      var nsh = this.DB - nbits(pm.data[pm.t - 1]);
      if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
      } else {
        pm.copyTo(y);
        pt.copyTo(r);
      }
      var ys = y.t;
      var y0 = y.data[ys - 1];
      if (y0 == 0)
        return;
      var yt = y0 * (1 << this.F1) + (ys > 1 ? y.data[ys - 2] >> this.F2 : 0);
      var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
      var i = r.t, j = i - ys, t = q == null ? nbi() : q;
      y.dlShiftTo(j, t);
      if (r.compareTo(t) >= 0) {
        r.data[r.t++] = 1;
        r.subTo(t, r);
      }
      BigInteger.ONE.dlShiftTo(ys, t);
      t.subTo(y, y);
      while (y.t < ys)
        y.data[y.t++] = 0;
      while (--j >= 0) {
        var qd = r.data[--i] == y0 ? this.DM : Math.floor(r.data[i] * d1 + (r.data[i - 1] + e) * d2);
        if ((r.data[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
          y.dlShiftTo(j, t);
          r.subTo(t, r);
          while (r.data[i] < --qd)
            r.subTo(t, r);
        }
      }
      if (q != null) {
        r.drShiftTo(ys, q);
        if (ts != ms)
          BigInteger.ZERO.subTo(q, q);
      }
      r.t = ys;
      r.clamp();
      if (nsh > 0)
        r.rShiftTo(nsh, r);
      if (ts < 0)
        BigInteger.ZERO.subTo(r, r);
    }
    function bnMod(a) {
      var r = nbi();
      this.abs().divRemTo(a, null, r);
      if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
        a.subTo(r, r);
      return r;
    }
    function Classic(m) {
      this.m = m;
    }
    function cConvert(x) {
      if (x.s < 0 || x.compareTo(this.m) >= 0)
        return x.mod(this.m);
      else
        return x;
    }
    function cRevert(x) {
      return x;
    }
    function cReduce(x) {
      x.divRemTo(this.m, null, x);
    }
    function cMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    function cSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    Classic.prototype.convert = cConvert;
    Classic.prototype.revert = cRevert;
    Classic.prototype.reduce = cReduce;
    Classic.prototype.mulTo = cMulTo;
    Classic.prototype.sqrTo = cSqrTo;
    function bnpInvDigit() {
      if (this.t < 1)
        return 0;
      var x = this.data[0];
      if ((x & 1) == 0)
        return 0;
      var y = x & 3;
      y = y * (2 - (x & 15) * y) & 15;
      y = y * (2 - (x & 255) * y) & 255;
      y = y * (2 - ((x & 65535) * y & 65535)) & 65535;
      y = y * (2 - x * y % this.DV) % this.DV;
      return y > 0 ? this.DV - y : -y;
    }
    function Montgomery(m) {
      this.m = m;
      this.mp = m.invDigit();
      this.mpl = this.mp & 32767;
      this.mph = this.mp >> 15;
      this.um = (1 << m.DB - 15) - 1;
      this.mt2 = 2 * m.t;
    }
    function montConvert(x) {
      var r = nbi();
      x.abs().dlShiftTo(this.m.t, r);
      r.divRemTo(this.m, null, r);
      if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
        this.m.subTo(r, r);
      return r;
    }
    function montRevert(x) {
      var r = nbi();
      x.copyTo(r);
      this.reduce(r);
      return r;
    }
    function montReduce(x) {
      while (x.t <= this.mt2)
        x.data[x.t++] = 0;
      for (var i = 0; i < this.m.t; ++i) {
        var j = x.data[i] & 32767;
        var u0 = j * this.mpl + ((j * this.mph + (x.data[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
        j = i + this.m.t;
        x.data[j] += this.m.am(0, u0, x, i, 0, this.m.t);
        while (x.data[j] >= x.DV) {
          x.data[j] -= x.DV;
          x.data[++j]++;
        }
      }
      x.clamp();
      x.drShiftTo(this.m.t, x);
      if (x.compareTo(this.m) >= 0)
        x.subTo(this.m, x);
    }
    function montSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    function montMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo;
    function bnpIsEven() {
      return (this.t > 0 ? this.data[0] & 1 : this.s) == 0;
    }
    function bnpExp(e, z) {
      if (e > 4294967295 || e < 1)
        return BigInteger.ONE;
      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;
      g.copyTo(r);
      while (--i >= 0) {
        z.sqrTo(r, r2);
        if ((e & 1 << i) > 0)
          z.mulTo(r2, g, r);
        else {
          var t = r;
          r = r2;
          r2 = t;
        }
      }
      return z.revert(r);
    }
    function bnModPowInt(e, m) {
      var z;
      if (e < 256 || m.isEven())
        z = new Classic(m);
      else
        z = new Montgomery(m);
      return this.exp(e, z);
    }
    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.isEven = bnpIsEven;
    BigInteger.prototype.exp = bnpExp;
    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.modPowInt = bnModPowInt;
    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);
    function bnClone() {
      var r = nbi();
      this.copyTo(r);
      return r;
    }
    function bnIntValue() {
      if (this.s < 0) {
        if (this.t == 1)
          return this.data[0] - this.DV;
        else if (this.t == 0)
          return -1;
      } else if (this.t == 1)
        return this.data[0];
      else if (this.t == 0)
        return 0;
      return (this.data[1] & (1 << 32 - this.DB) - 1) << this.DB | this.data[0];
    }
    function bnByteValue() {
      return this.t == 0 ? this.s : this.data[0] << 24 >> 24;
    }
    function bnShortValue() {
      return this.t == 0 ? this.s : this.data[0] << 16 >> 16;
    }
    function bnpChunkSize(r) {
      return Math.floor(Math.LN2 * this.DB / Math.log(r));
    }
    function bnSigNum() {
      if (this.s < 0)
        return -1;
      else if (this.t <= 0 || this.t == 1 && this.data[0] <= 0)
        return 0;
      else
        return 1;
    }
    function bnpToRadix(b) {
      if (b == null)
        b = 10;
      if (this.signum() == 0 || b < 2 || b > 36)
        return "0";
      var cs = this.chunkSize(b);
      var a = Math.pow(b, cs);
      var d = nbv(a), y = nbi(), z = nbi(), r = "";
      this.divRemTo(d, y, z);
      while (y.signum() > 0) {
        r = (a + z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d, y, z);
      }
      return z.intValue().toString(b) + r;
    }
    function bnpFromRadix(s, b) {
      this.fromInt(0);
      if (b == null)
        b = 10;
      var cs = this.chunkSize(b);
      var d = Math.pow(b, cs), mi = false, j = 0, w = 0;
      for (var i = 0; i < s.length; ++i) {
        var x = intAt(s, i);
        if (x < 0) {
          if (s.charAt(i) == "-" && this.signum() == 0)
            mi = true;
          continue;
        }
        w = b * w + x;
        if (++j >= cs) {
          this.dMultiply(d);
          this.dAddOffset(w, 0);
          j = 0;
          w = 0;
        }
      }
      if (j > 0) {
        this.dMultiply(Math.pow(b, j));
        this.dAddOffset(w, 0);
      }
      if (mi)
        BigInteger.ZERO.subTo(this, this);
    }
    function bnpFromNumber(a, b, c) {
      if ("number" == typeof b) {
        if (a < 2)
          this.fromInt(1);
        else {
          this.fromNumber(a, c);
          if (!this.testBit(a - 1))
            this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
          if (this.isEven())
            this.dAddOffset(1, 0);
          while (!this.isProbablePrime(b)) {
            this.dAddOffset(2, 0);
            if (this.bitLength() > a)
              this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
          }
        }
      } else {
        var x = new Array(), t = a & 7;
        x.length = (a >> 3) + 1;
        b.nextBytes(x);
        if (t > 0)
          x[0] &= (1 << t) - 1;
        else
          x[0] = 0;
        this.fromString(x, 256);
      }
    }
    function bnToByteArray() {
      var i = this.t, r = new Array();
      r[0] = this.s;
      var p = this.DB - i * this.DB % 8, d, k = 0;
      if (i-- > 0) {
        if (p < this.DB && (d = this.data[i] >> p) != (this.s & this.DM) >> p)
          r[k++] = d | this.s << this.DB - p;
        while (i >= 0) {
          if (p < 8) {
            d = (this.data[i] & (1 << p) - 1) << 8 - p;
            d |= this.data[--i] >> (p += this.DB - 8);
          } else {
            d = this.data[i] >> (p -= 8) & 255;
            if (p <= 0) {
              p += this.DB;
              --i;
            }
          }
          if ((d & 128) != 0)
            d |= -256;
          if (k == 0 && (this.s & 128) != (d & 128))
            ++k;
          if (k > 0 || d != this.s)
            r[k++] = d;
        }
      }
      return r;
    }
    function bnEquals(a) {
      return this.compareTo(a) == 0;
    }
    function bnMin(a) {
      return this.compareTo(a) < 0 ? this : a;
    }
    function bnMax(a) {
      return this.compareTo(a) > 0 ? this : a;
    }
    function bnpBitwiseTo(a, op, r) {
      var i, f, m = Math.min(a.t, this.t);
      for (i = 0; i < m; ++i)
        r.data[i] = op(this.data[i], a.data[i]);
      if (a.t < this.t) {
        f = a.s & this.DM;
        for (i = m; i < this.t; ++i)
          r.data[i] = op(this.data[i], f);
        r.t = this.t;
      } else {
        f = this.s & this.DM;
        for (i = m; i < a.t; ++i)
          r.data[i] = op(f, a.data[i]);
        r.t = a.t;
      }
      r.s = op(this.s, a.s);
      r.clamp();
    }
    function op_and(x, y) {
      return x & y;
    }
    function bnAnd(a) {
      var r = nbi();
      this.bitwiseTo(a, op_and, r);
      return r;
    }
    function op_or(x, y) {
      return x | y;
    }
    function bnOr(a) {
      var r = nbi();
      this.bitwiseTo(a, op_or, r);
      return r;
    }
    function op_xor(x, y) {
      return x ^ y;
    }
    function bnXor(a) {
      var r = nbi();
      this.bitwiseTo(a, op_xor, r);
      return r;
    }
    function op_andnot(x, y) {
      return x & ~y;
    }
    function bnAndNot(a) {
      var r = nbi();
      this.bitwiseTo(a, op_andnot, r);
      return r;
    }
    function bnNot() {
      var r = nbi();
      for (var i = 0; i < this.t; ++i)
        r.data[i] = this.DM & ~this.data[i];
      r.t = this.t;
      r.s = ~this.s;
      return r;
    }
    function bnShiftLeft(n) {
      var r = nbi();
      if (n < 0)
        this.rShiftTo(-n, r);
      else
        this.lShiftTo(n, r);
      return r;
    }
    function bnShiftRight(n) {
      var r = nbi();
      if (n < 0)
        this.lShiftTo(-n, r);
      else
        this.rShiftTo(n, r);
      return r;
    }
    function lbit(x) {
      if (x == 0)
        return -1;
      var r = 0;
      if ((x & 65535) == 0) {
        x >>= 16;
        r += 16;
      }
      if ((x & 255) == 0) {
        x >>= 8;
        r += 8;
      }
      if ((x & 15) == 0) {
        x >>= 4;
        r += 4;
      }
      if ((x & 3) == 0) {
        x >>= 2;
        r += 2;
      }
      if ((x & 1) == 0)
        ++r;
      return r;
    }
    function bnGetLowestSetBit() {
      for (var i = 0; i < this.t; ++i)
        if (this.data[i] != 0)
          return i * this.DB + lbit(this.data[i]);
      if (this.s < 0)
        return this.t * this.DB;
      return -1;
    }
    function cbit(x) {
      var r = 0;
      while (x != 0) {
        x &= x - 1;
        ++r;
      }
      return r;
    }
    function bnBitCount() {
      var r = 0, x = this.s & this.DM;
      for (var i = 0; i < this.t; ++i)
        r += cbit(this.data[i] ^ x);
      return r;
    }
    function bnTestBit(n) {
      var j = Math.floor(n / this.DB);
      if (j >= this.t)
        return this.s != 0;
      return (this.data[j] & 1 << n % this.DB) != 0;
    }
    function bnpChangeBit(n, op) {
      var r = BigInteger.ONE.shiftLeft(n);
      this.bitwiseTo(r, op, r);
      return r;
    }
    function bnSetBit(n) {
      return this.changeBit(n, op_or);
    }
    function bnClearBit(n) {
      return this.changeBit(n, op_andnot);
    }
    function bnFlipBit(n) {
      return this.changeBit(n, op_xor);
    }
    function bnpAddTo(a, r) {
      var i = 0, c = 0, m = Math.min(a.t, this.t);
      while (i < m) {
        c += this.data[i] + a.data[i];
        r.data[i++] = c & this.DM;
        c >>= this.DB;
      }
      if (a.t < this.t) {
        c += a.s;
        while (i < this.t) {
          c += this.data[i];
          r.data[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += this.s;
      } else {
        c += this.s;
        while (i < a.t) {
          c += a.data[i];
          r.data[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += a.s;
      }
      r.s = c < 0 ? -1 : 0;
      if (c > 0)
        r.data[i++] = c;
      else if (c < -1)
        r.data[i++] = this.DV + c;
      r.t = i;
      r.clamp();
    }
    function bnAdd(a) {
      var r = nbi();
      this.addTo(a, r);
      return r;
    }
    function bnSubtract(a) {
      var r = nbi();
      this.subTo(a, r);
      return r;
    }
    function bnMultiply(a) {
      var r = nbi();
      this.multiplyTo(a, r);
      return r;
    }
    function bnDivide(a) {
      var r = nbi();
      this.divRemTo(a, r, null);
      return r;
    }
    function bnRemainder(a) {
      var r = nbi();
      this.divRemTo(a, null, r);
      return r;
    }
    function bnDivideAndRemainder(a) {
      var q = nbi(), r = nbi();
      this.divRemTo(a, q, r);
      return new Array(q, r);
    }
    function bnpDMultiply(n) {
      this.data[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
      ++this.t;
      this.clamp();
    }
    function bnpDAddOffset(n, w) {
      if (n == 0)
        return;
      while (this.t <= w)
        this.data[this.t++] = 0;
      this.data[w] += n;
      while (this.data[w] >= this.DV) {
        this.data[w] -= this.DV;
        if (++w >= this.t)
          this.data[this.t++] = 0;
        ++this.data[w];
      }
    }
    function NullExp() {
    }
    function nNop(x) {
      return x;
    }
    function nMulTo(x, y, r) {
      x.multiplyTo(y, r);
    }
    function nSqrTo(x, r) {
      x.squareTo(r);
    }
    NullExp.prototype.convert = nNop;
    NullExp.prototype.revert = nNop;
    NullExp.prototype.mulTo = nMulTo;
    NullExp.prototype.sqrTo = nSqrTo;
    function bnPow(e) {
      return this.exp(e, new NullExp());
    }
    function bnpMultiplyLowerTo(a, n, r) {
      var i = Math.min(this.t + a.t, n);
      r.s = 0;
      r.t = i;
      while (i > 0)
        r.data[--i] = 0;
      var j;
      for (j = r.t - this.t; i < j; ++i)
        r.data[i + this.t] = this.am(0, a.data[i], r, i, 0, this.t);
      for (j = Math.min(a.t, n); i < j; ++i)
        this.am(0, a.data[i], r, i, 0, n - i);
      r.clamp();
    }
    function bnpMultiplyUpperTo(a, n, r) {
      --n;
      var i = r.t = this.t + a.t - n;
      r.s = 0;
      while (--i >= 0)
        r.data[i] = 0;
      for (i = Math.max(n - this.t, 0); i < a.t; ++i)
        r.data[this.t + i - n] = this.am(n - i, a.data[i], r, 0, 0, this.t + i - n);
      r.clamp();
      r.drShiftTo(1, r);
    }
    function Barrett(m) {
      this.r2 = nbi();
      this.q3 = nbi();
      BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
      this.mu = this.r2.divide(m);
      this.m = m;
    }
    function barrettConvert(x) {
      if (x.s < 0 || x.t > 2 * this.m.t)
        return x.mod(this.m);
      else if (x.compareTo(this.m) < 0)
        return x;
      else {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
      }
    }
    function barrettRevert(x) {
      return x;
    }
    function barrettReduce(x) {
      x.drShiftTo(this.m.t - 1, this.r2);
      if (x.t > this.m.t + 1) {
        x.t = this.m.t + 1;
        x.clamp();
      }
      this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
      this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
      while (x.compareTo(this.r2) < 0)
        x.dAddOffset(1, this.m.t + 1);
      x.subTo(this.r2, x);
      while (x.compareTo(this.m) >= 0)
        x.subTo(this.m, x);
    }
    function barrettSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    function barrettMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    Barrett.prototype.convert = barrettConvert;
    Barrett.prototype.revert = barrettRevert;
    Barrett.prototype.reduce = barrettReduce;
    Barrett.prototype.mulTo = barrettMulTo;
    Barrett.prototype.sqrTo = barrettSqrTo;
    function bnModPow(e, m) {
      var i = e.bitLength(), k, r = nbv(1), z;
      if (i <= 0)
        return r;
      else if (i < 18)
        k = 1;
      else if (i < 48)
        k = 3;
      else if (i < 144)
        k = 4;
      else if (i < 768)
        k = 5;
      else
        k = 6;
      if (i < 8)
        z = new Classic(m);
      else if (m.isEven())
        z = new Barrett(m);
      else
        z = new Montgomery(m);
      var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;
      g[1] = z.convert(this);
      if (k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1], g2);
        while (n <= km) {
          g[n] = nbi();
          z.mulTo(g2, g[n - 2], g[n]);
          n += 2;
        }
      }
      var j = e.t - 1, w, is1 = true, r2 = nbi(), t;
      i = nbits(e.data[j]) - 1;
      while (j >= 0) {
        if (i >= k1)
          w = e.data[j] >> i - k1 & km;
        else {
          w = (e.data[j] & (1 << i + 1) - 1) << k1 - i;
          if (j > 0)
            w |= e.data[j - 1] >> this.DB + i - k1;
        }
        n = k;
        while ((w & 1) == 0) {
          w >>= 1;
          --n;
        }
        if ((i -= n) < 0) {
          i += this.DB;
          --j;
        }
        if (is1) {
          g[w].copyTo(r);
          is1 = false;
        } else {
          while (n > 1) {
            z.sqrTo(r, r2);
            z.sqrTo(r2, r);
            n -= 2;
          }
          if (n > 0)
            z.sqrTo(r, r2);
          else {
            t = r;
            r = r2;
            r2 = t;
          }
          z.mulTo(r2, g[w], r);
        }
        while (j >= 0 && (e.data[j] & 1 << i) == 0) {
          z.sqrTo(r, r2);
          t = r;
          r = r2;
          r2 = t;
          if (--i < 0) {
            i = this.DB - 1;
            --j;
          }
        }
      }
      return z.revert(r);
    }
    function bnGCD(a) {
      var x = this.s < 0 ? this.negate() : this.clone();
      var y = a.s < 0 ? a.negate() : a.clone();
      if (x.compareTo(y) < 0) {
        var t = x;
        x = y;
        y = t;
      }
      var i = x.getLowestSetBit(), g = y.getLowestSetBit();
      if (g < 0)
        return x;
      if (i < g)
        g = i;
      if (g > 0) {
        x.rShiftTo(g, x);
        y.rShiftTo(g, y);
      }
      while (x.signum() > 0) {
        if ((i = x.getLowestSetBit()) > 0)
          x.rShiftTo(i, x);
        if ((i = y.getLowestSetBit()) > 0)
          y.rShiftTo(i, y);
        if (x.compareTo(y) >= 0) {
          x.subTo(y, x);
          x.rShiftTo(1, x);
        } else {
          y.subTo(x, y);
          y.rShiftTo(1, y);
        }
      }
      if (g > 0)
        y.lShiftTo(g, y);
      return y;
    }
    function bnpModInt(n) {
      if (n <= 0)
        return 0;
      var d = this.DV % n, r = this.s < 0 ? n - 1 : 0;
      if (this.t > 0)
        if (d == 0)
          r = this.data[0] % n;
        else
          for (var i = this.t - 1; i >= 0; --i)
            r = (d * r + this.data[i]) % n;
      return r;
    }
    function bnModInverse(m) {
      var ac = m.isEven();
      if (this.isEven() && ac || m.signum() == 0)
        return BigInteger.ZERO;
      var u = m.clone(), v = this.clone();
      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
      while (u.signum() != 0) {
        while (u.isEven()) {
          u.rShiftTo(1, u);
          if (ac) {
            if (!a.isEven() || !b.isEven()) {
              a.addTo(this, a);
              b.subTo(m, b);
            }
            a.rShiftTo(1, a);
          } else if (!b.isEven())
            b.subTo(m, b);
          b.rShiftTo(1, b);
        }
        while (v.isEven()) {
          v.rShiftTo(1, v);
          if (ac) {
            if (!c.isEven() || !d.isEven()) {
              c.addTo(this, c);
              d.subTo(m, d);
            }
            c.rShiftTo(1, c);
          } else if (!d.isEven())
            d.subTo(m, d);
          d.rShiftTo(1, d);
        }
        if (u.compareTo(v) >= 0) {
          u.subTo(v, u);
          if (ac)
            a.subTo(c, a);
          b.subTo(d, b);
        } else {
          v.subTo(u, v);
          if (ac)
            c.subTo(a, c);
          d.subTo(b, d);
        }
      }
      if (v.compareTo(BigInteger.ONE) != 0)
        return BigInteger.ZERO;
      if (d.compareTo(m) >= 0)
        return d.subtract(m);
      if (d.signum() < 0)
        d.addTo(m, d);
      else
        return d;
      if (d.signum() < 0)
        return d.add(m);
      else
        return d;
    }
    var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509];
    var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];
    function bnIsProbablePrime(t) {
      var i, x = this.abs();
      if (x.t == 1 && x.data[0] <= lowprimes[lowprimes.length - 1]) {
        for (i = 0; i < lowprimes.length; ++i)
          if (x.data[0] == lowprimes[i])
            return true;
        return false;
      }
      if (x.isEven())
        return false;
      i = 1;
      while (i < lowprimes.length) {
        var m = lowprimes[i], j = i + 1;
        while (j < lowprimes.length && m < lplim)
          m *= lowprimes[j++];
        m = x.modInt(m);
        while (i < j)
          if (m % lowprimes[i++] == 0)
            return false;
      }
      return x.millerRabin(t);
    }
    function bnpMillerRabin(t) {
      var n1 = this.subtract(BigInteger.ONE);
      var k = n1.getLowestSetBit();
      if (k <= 0)
        return false;
      var r = n1.shiftRight(k);
      var prng = bnGetPrng();
      var a;
      for (var i = 0; i < t; ++i) {
        do {
          a = new BigInteger(this.bitLength(), prng);
        } while (a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);
        var y = a.modPow(r, this);
        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
          var j = 1;
          while (j++ < k && y.compareTo(n1) != 0) {
            y = y.modPowInt(2, this);
            if (y.compareTo(BigInteger.ONE) == 0)
              return false;
          }
          if (y.compareTo(n1) != 0)
            return false;
        }
      }
      return true;
    }
    function bnGetPrng() {
      return {
        // x is an array to fill with bytes
        nextBytes: function(x) {
          for (var i = 0; i < x.length; ++i) {
            x[i] = Math.floor(Math.random() * 256);
          }
        }
      };
    }
    BigInteger.prototype.chunkSize = bnpChunkSize;
    BigInteger.prototype.toRadix = bnpToRadix;
    BigInteger.prototype.fromRadix = bnpFromRadix;
    BigInteger.prototype.fromNumber = bnpFromNumber;
    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
    BigInteger.prototype.changeBit = bnpChangeBit;
    BigInteger.prototype.addTo = bnpAddTo;
    BigInteger.prototype.dMultiply = bnpDMultiply;
    BigInteger.prototype.dAddOffset = bnpDAddOffset;
    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
    BigInteger.prototype.modInt = bnpModInt;
    BigInteger.prototype.millerRabin = bnpMillerRabin;
    BigInteger.prototype.clone = bnClone;
    BigInteger.prototype.intValue = bnIntValue;
    BigInteger.prototype.byteValue = bnByteValue;
    BigInteger.prototype.shortValue = bnShortValue;
    BigInteger.prototype.signum = bnSigNum;
    BigInteger.prototype.toByteArray = bnToByteArray;
    BigInteger.prototype.equals = bnEquals;
    BigInteger.prototype.min = bnMin;
    BigInteger.prototype.max = bnMax;
    BigInteger.prototype.and = bnAnd;
    BigInteger.prototype.or = bnOr;
    BigInteger.prototype.xor = bnXor;
    BigInteger.prototype.andNot = bnAndNot;
    BigInteger.prototype.not = bnNot;
    BigInteger.prototype.shiftLeft = bnShiftLeft;
    BigInteger.prototype.shiftRight = bnShiftRight;
    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
    BigInteger.prototype.bitCount = bnBitCount;
    BigInteger.prototype.testBit = bnTestBit;
    BigInteger.prototype.setBit = bnSetBit;
    BigInteger.prototype.clearBit = bnClearBit;
    BigInteger.prototype.flipBit = bnFlipBit;
    BigInteger.prototype.add = bnAdd;
    BigInteger.prototype.subtract = bnSubtract;
    BigInteger.prototype.multiply = bnMultiply;
    BigInteger.prototype.divide = bnDivide;
    BigInteger.prototype.remainder = bnRemainder;
    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
    BigInteger.prototype.modPow = bnModPow;
    BigInteger.prototype.modInverse = bnModInverse;
    BigInteger.prototype.pow = bnPow;
    BigInteger.prototype.gcd = bnGCD;
    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;
  }
});

// node_modules/node-forge/lib/sha1.js
var require_sha1 = __commonJS({
  "node_modules/node-forge/lib/sha1.js"(exports, module2) {
    var forge = require_forge();
    require_md();
    require_util();
    var sha12 = module2.exports = forge.sha1 = forge.sha1 || {};
    forge.md.sha1 = forge.md.algorithms.sha1 = sha12;
    sha12.create = function() {
      if (!_initialized) {
        _init();
      }
      var _state = null;
      var _input = forge.util.createBuffer();
      var _w = new Array(80);
      var md = {
        algorithm: "sha1",
        blockLength: 64,
        digestLength: 20,
        // 56-bit length of message so far (does not including padding)
        messageLength: 0,
        // true message length
        fullMessageLength: null,
        // size of message length in bytes
        messageLengthSize: 8
      };
      md.start = function() {
        md.messageLength = 0;
        md.fullMessageLength = md.messageLength64 = [];
        var int32s = md.messageLengthSize / 4;
        for (var i = 0; i < int32s; ++i) {
          md.fullMessageLength.push(0);
        }
        _input = forge.util.createBuffer();
        _state = {
          h0: 1732584193,
          h1: 4023233417,
          h2: 2562383102,
          h3: 271733878,
          h4: 3285377520
        };
        return md;
      };
      md.start();
      md.update = function(msg, encoding) {
        if (encoding === "utf8") {
          msg = forge.util.encodeUtf8(msg);
        }
        var len = msg.length;
        md.messageLength += len;
        len = [len / 4294967296 >>> 0, len >>> 0];
        for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
          md.fullMessageLength[i] += len[1];
          len[1] = len[0] + (md.fullMessageLength[i] / 4294967296 >>> 0);
          md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
          len[0] = len[1] / 4294967296 >>> 0;
        }
        _input.putBytes(msg);
        _update(_state, _w, _input);
        if (_input.read > 2048 || _input.length() === 0) {
          _input.compact();
        }
        return md;
      };
      md.digest = function() {
        var finalBlock = forge.util.createBuffer();
        finalBlock.putBytes(_input.bytes());
        var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize;
        var overflow = remaining & md.blockLength - 1;
        finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));
        var next, carry;
        var bits = md.fullMessageLength[0] * 8;
        for (var i = 0; i < md.fullMessageLength.length - 1; ++i) {
          next = md.fullMessageLength[i + 1] * 8;
          carry = next / 4294967296 >>> 0;
          bits += carry;
          finalBlock.putInt32(bits >>> 0);
          bits = next >>> 0;
        }
        finalBlock.putInt32(bits);
        var s2 = {
          h0: _state.h0,
          h1: _state.h1,
          h2: _state.h2,
          h3: _state.h3,
          h4: _state.h4
        };
        _update(s2, _w, finalBlock);
        var rval = forge.util.createBuffer();
        rval.putInt32(s2.h0);
        rval.putInt32(s2.h1);
        rval.putInt32(s2.h2);
        rval.putInt32(s2.h3);
        rval.putInt32(s2.h4);
        return rval;
      };
      return md;
    };
    var _padding = null;
    var _initialized = false;
    function _init() {
      _padding = String.fromCharCode(128);
      _padding += forge.util.fillString(String.fromCharCode(0), 64);
      _initialized = true;
    }
    function _update(s, w, bytes) {
      var t, a, b, c, d, e, f, i;
      var len = bytes.length();
      while (len >= 64) {
        a = s.h0;
        b = s.h1;
        c = s.h2;
        d = s.h3;
        e = s.h4;
        for (i = 0; i < 16; ++i) {
          t = bytes.getInt32();
          w[i] = t;
          f = d ^ b & (c ^ d);
          t = (a << 5 | a >>> 27) + f + e + 1518500249 + t;
          e = d;
          d = c;
          c = (b << 30 | b >>> 2) >>> 0;
          b = a;
          a = t;
        }
        for (; i < 20; ++i) {
          t = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];
          t = t << 1 | t >>> 31;
          w[i] = t;
          f = d ^ b & (c ^ d);
          t = (a << 5 | a >>> 27) + f + e + 1518500249 + t;
          e = d;
          d = c;
          c = (b << 30 | b >>> 2) >>> 0;
          b = a;
          a = t;
        }
        for (; i < 32; ++i) {
          t = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];
          t = t << 1 | t >>> 31;
          w[i] = t;
          f = b ^ c ^ d;
          t = (a << 5 | a >>> 27) + f + e + 1859775393 + t;
          e = d;
          d = c;
          c = (b << 30 | b >>> 2) >>> 0;
          b = a;
          a = t;
        }
        for (; i < 40; ++i) {
          t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
          t = t << 2 | t >>> 30;
          w[i] = t;
          f = b ^ c ^ d;
          t = (a << 5 | a >>> 27) + f + e + 1859775393 + t;
          e = d;
          d = c;
          c = (b << 30 | b >>> 2) >>> 0;
          b = a;
          a = t;
        }
        for (; i < 60; ++i) {
          t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
          t = t << 2 | t >>> 30;
          w[i] = t;
          f = b & c | d & (b ^ c);
          t = (a << 5 | a >>> 27) + f + e + 2400959708 + t;
          e = d;
          d = c;
          c = (b << 30 | b >>> 2) >>> 0;
          b = a;
          a = t;
        }
        for (; i < 80; ++i) {
          t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
          t = t << 2 | t >>> 30;
          w[i] = t;
          f = b ^ c ^ d;
          t = (a << 5 | a >>> 27) + f + e + 3395469782 + t;
          e = d;
          d = c;
          c = (b << 30 | b >>> 2) >>> 0;
          b = a;
          a = t;
        }
        s.h0 = s.h0 + a | 0;
        s.h1 = s.h1 + b | 0;
        s.h2 = s.h2 + c | 0;
        s.h3 = s.h3 + d | 0;
        s.h4 = s.h4 + e | 0;
        len -= 64;
      }
    }
  }
});

// node_modules/node-forge/lib/pkcs1.js
var require_pkcs1 = __commonJS({
  "node_modules/node-forge/lib/pkcs1.js"(exports, module2) {
    var forge = require_forge();
    require_util();
    require_random();
    require_sha1();
    var pkcs1 = module2.exports = forge.pkcs1 = forge.pkcs1 || {};
    pkcs1.encode_rsa_oaep = function(key, message, options) {
      var label;
      var seed;
      var md;
      var mgf1Md;
      if (typeof options === "string") {
        label = options;
        seed = arguments[3] || void 0;
        md = arguments[4] || void 0;
      } else if (options) {
        label = options.label || void 0;
        seed = options.seed || void 0;
        md = options.md || void 0;
        if (options.mgf1 && options.mgf1.md) {
          mgf1Md = options.mgf1.md;
        }
      }
      if (!md) {
        md = forge.md.sha1.create();
      } else {
        md.start();
      }
      if (!mgf1Md) {
        mgf1Md = md;
      }
      var keyLength = Math.ceil(key.n.bitLength() / 8);
      var maxLength = keyLength - 2 * md.digestLength - 2;
      if (message.length > maxLength) {
        var error = new Error("RSAES-OAEP input message length is too long.");
        error.length = message.length;
        error.maxLength = maxLength;
        throw error;
      }
      if (!label) {
        label = "";
      }
      md.update(label, "raw");
      var lHash = md.digest();
      var PS = "";
      var PS_length = maxLength - message.length;
      for (var i = 0; i < PS_length; i++) {
        PS += "\0";
      }
      var DB = lHash.getBytes() + PS + "" + message;
      if (!seed) {
        seed = forge.random.getBytes(md.digestLength);
      } else if (seed.length !== md.digestLength) {
        var error = new Error("Invalid RSAES-OAEP seed. The seed length must match the digest length.");
        error.seedLength = seed.length;
        error.digestLength = md.digestLength;
        throw error;
      }
      var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
      var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);
      var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
      var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length);
      return "\0" + maskedSeed + maskedDB;
    };
    pkcs1.decode_rsa_oaep = function(key, em, options) {
      var label;
      var md;
      var mgf1Md;
      if (typeof options === "string") {
        label = options;
        md = arguments[3] || void 0;
      } else if (options) {
        label = options.label || void 0;
        md = options.md || void 0;
        if (options.mgf1 && options.mgf1.md) {
          mgf1Md = options.mgf1.md;
        }
      }
      var keyLength = Math.ceil(key.n.bitLength() / 8);
      if (em.length !== keyLength) {
        var error = new Error("RSAES-OAEP encoded message length is invalid.");
        error.length = em.length;
        error.expectedLength = keyLength;
        throw error;
      }
      if (md === void 0) {
        md = forge.md.sha1.create();
      } else {
        md.start();
      }
      if (!mgf1Md) {
        mgf1Md = md;
      }
      if (keyLength < 2 * md.digestLength + 2) {
        throw new Error("RSAES-OAEP key is too short for the hash function.");
      }
      if (!label) {
        label = "";
      }
      md.update(label, "raw");
      var lHash = md.digest().getBytes();
      var y = em.charAt(0);
      var maskedSeed = em.substring(1, md.digestLength + 1);
      var maskedDB = em.substring(1 + md.digestLength);
      var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
      var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);
      var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
      var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);
      var lHashPrime = db.substring(0, md.digestLength);
      var error = y !== "\0";
      for (var i = 0; i < md.digestLength; ++i) {
        error |= lHash.charAt(i) !== lHashPrime.charAt(i);
      }
      var in_ps = 1;
      var index = md.digestLength;
      for (var j = md.digestLength; j < db.length; j++) {
        var code = db.charCodeAt(j);
        var is_0 = code & 1 ^ 1;
        var error_mask = in_ps ? 65534 : 0;
        error |= code & error_mask;
        in_ps = in_ps & is_0;
        index += in_ps;
      }
      if (error || db.charCodeAt(index) !== 1) {
        throw new Error("Invalid RSAES-OAEP padding.");
      }
      return db.substring(index + 1);
    };
    function rsa_mgf1(seed, maskLength, hash) {
      if (!hash) {
        hash = forge.md.sha1.create();
      }
      var t = "";
      var count = Math.ceil(maskLength / hash.digestLength);
      for (var i = 0; i < count; ++i) {
        var c = String.fromCharCode(
          i >> 24 & 255,
          i >> 16 & 255,
          i >> 8 & 255,
          i & 255
        );
        hash.start();
        hash.update(seed + c);
        t += hash.digest().getBytes();
      }
      return t.substring(0, maskLength);
    }
  }
});

// node_modules/node-forge/lib/prime.js
var require_prime = __commonJS({
  "node_modules/node-forge/lib/prime.js"(exports, module2) {
    var forge = require_forge();
    require_util();
    require_jsbn();
    require_random();
    (function() {
      if (forge.prime) {
        module2.exports = forge.prime;
        return;
      }
      var prime = module2.exports = forge.prime = forge.prime || {};
      var BigInteger = forge.jsbn.BigInteger;
      var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];
      var THIRTY = new BigInteger(null);
      THIRTY.fromInt(30);
      var op_or = function(x, y) {
        return x | y;
      };
      prime.generateProbablePrime = function(bits, options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = {};
        }
        options = options || {};
        var algorithm = options.algorithm || "PRIMEINC";
        if (typeof algorithm === "string") {
          algorithm = { name: algorithm };
        }
        algorithm.options = algorithm.options || {};
        var prng = options.prng || forge.random;
        var rng2 = {
          // x is an array to fill with bytes
          nextBytes: function(x) {
            var b = prng.getBytesSync(x.length);
            for (var i = 0; i < x.length; ++i) {
              x[i] = b.charCodeAt(i);
            }
          }
        };
        if (algorithm.name === "PRIMEINC") {
          return primeincFindPrime(bits, rng2, algorithm.options, callback);
        }
        throw new Error("Invalid prime generation algorithm: " + algorithm.name);
      };
      function primeincFindPrime(bits, rng2, options, callback) {
        if ("workers" in options) {
          return primeincFindPrimeWithWorkers(bits, rng2, options, callback);
        }
        return primeincFindPrimeWithoutWorkers(bits, rng2, options, callback);
      }
      function primeincFindPrimeWithoutWorkers(bits, rng2, options, callback) {
        var num = generateRandom(bits, rng2);
        var deltaIdx = 0;
        var mrTests = getMillerRabinTests(num.bitLength());
        if ("millerRabinTests" in options) {
          mrTests = options.millerRabinTests;
        }
        var maxBlockTime = 10;
        if ("maxBlockTime" in options) {
          maxBlockTime = options.maxBlockTime;
        }
        _primeinc(num, bits, rng2, deltaIdx, mrTests, maxBlockTime, callback);
      }
      function _primeinc(num, bits, rng2, deltaIdx, mrTests, maxBlockTime, callback) {
        var start = +/* @__PURE__ */ new Date();
        do {
          if (num.bitLength() > bits) {
            num = generateRandom(bits, rng2);
          }
          if (num.isProbablePrime(mrTests)) {
            return callback(null, num);
          }
          num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
        } while (maxBlockTime < 0 || +/* @__PURE__ */ new Date() - start < maxBlockTime);
        forge.util.setImmediate(function() {
          _primeinc(num, bits, rng2, deltaIdx, mrTests, maxBlockTime, callback);
        });
      }
      function primeincFindPrimeWithWorkers(bits, rng2, options, callback) {
        if (typeof Worker === "undefined") {
          return primeincFindPrimeWithoutWorkers(bits, rng2, options, callback);
        }
        var num = generateRandom(bits, rng2);
        var numWorkers = options.workers;
        var workLoad = options.workLoad || 100;
        var range = workLoad * 30 / 8;
        var workerScript = options.workerScript || "forge/prime.worker.js";
        if (numWorkers === -1) {
          return forge.util.estimateCores(function(err, cores) {
            if (err) {
              cores = 2;
            }
            numWorkers = cores - 1;
            generate();
          });
        }
        generate();
        function generate() {
          numWorkers = Math.max(1, numWorkers);
          var workers = [];
          for (var i = 0; i < numWorkers; ++i) {
            workers[i] = new Worker(workerScript);
          }
          var running = numWorkers;
          for (var i = 0; i < numWorkers; ++i) {
            workers[i].addEventListener("message", workerMessage);
          }
          var found = false;
          function workerMessage(e) {
            if (found) {
              return;
            }
            --running;
            var data = e.data;
            if (data.found) {
              for (var i2 = 0; i2 < workers.length; ++i2) {
                workers[i2].terminate();
              }
              found = true;
              return callback(null, new BigInteger(data.prime, 16));
            }
            if (num.bitLength() > bits) {
              num = generateRandom(bits, rng2);
            }
            var hex = num.toString(16);
            e.target.postMessage({
              hex,
              workLoad
            });
            num.dAddOffset(range, 0);
          }
        }
      }
      function generateRandom(bits, rng2) {
        var num = new BigInteger(bits, rng2);
        var bits1 = bits - 1;
        if (!num.testBit(bits1)) {
          num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);
        }
        num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);
        return num;
      }
      function getMillerRabinTests(bits) {
        if (bits <= 100)
          return 27;
        if (bits <= 150)
          return 18;
        if (bits <= 200)
          return 15;
        if (bits <= 250)
          return 12;
        if (bits <= 300)
          return 9;
        if (bits <= 350)
          return 8;
        if (bits <= 400)
          return 7;
        if (bits <= 500)
          return 6;
        if (bits <= 600)
          return 5;
        if (bits <= 800)
          return 4;
        if (bits <= 1250)
          return 3;
        return 2;
      }
    })();
  }
});

// node_modules/node-forge/lib/rsa.js
var require_rsa = __commonJS({
  "node_modules/node-forge/lib/rsa.js"(exports, module2) {
    var forge = require_forge();
    require_asn1();
    require_jsbn();
    require_oids();
    require_pkcs1();
    require_prime();
    require_random();
    require_util();
    if (typeof BigInteger === "undefined") {
      BigInteger = forge.jsbn.BigInteger;
    }
    var BigInteger;
    var _crypto = forge.util.isNodejs ? require("crypto") : null;
    var asn1 = forge.asn1;
    var util = forge.util;
    forge.pki = forge.pki || {};
    module2.exports = forge.pki.rsa = forge.rsa = forge.rsa || {};
    var pki = forge.pki;
    var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];
    var privateKeyValidator = {
      // PrivateKeyInfo
      name: "PrivateKeyInfo",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        // Version (INTEGER)
        name: "PrivateKeyInfo.version",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "privateKeyVersion"
      }, {
        // privateKeyAlgorithm
        name: "PrivateKeyInfo.privateKeyAlgorithm",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: "AlgorithmIdentifier.algorithm",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: "privateKeyOid"
        }]
      }, {
        // PrivateKey
        name: "PrivateKeyInfo",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OCTETSTRING,
        constructed: false,
        capture: "privateKey"
      }]
    };
    var rsaPrivateKeyValidator = {
      // RSAPrivateKey
      name: "RSAPrivateKey",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        // Version (INTEGER)
        name: "RSAPrivateKey.version",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "privateKeyVersion"
      }, {
        // modulus (n)
        name: "RSAPrivateKey.modulus",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "privateKeyModulus"
      }, {
        // publicExponent (e)
        name: "RSAPrivateKey.publicExponent",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "privateKeyPublicExponent"
      }, {
        // privateExponent (d)
        name: "RSAPrivateKey.privateExponent",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "privateKeyPrivateExponent"
      }, {
        // prime1 (p)
        name: "RSAPrivateKey.prime1",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "privateKeyPrime1"
      }, {
        // prime2 (q)
        name: "RSAPrivateKey.prime2",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "privateKeyPrime2"
      }, {
        // exponent1 (d mod (p-1))
        name: "RSAPrivateKey.exponent1",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "privateKeyExponent1"
      }, {
        // exponent2 (d mod (q-1))
        name: "RSAPrivateKey.exponent2",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "privateKeyExponent2"
      }, {
        // coefficient ((inverse of q) mod p)
        name: "RSAPrivateKey.coefficient",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "privateKeyCoefficient"
      }]
    };
    var rsaPublicKeyValidator = {
      // RSAPublicKey
      name: "RSAPublicKey",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        // modulus (n)
        name: "RSAPublicKey.modulus",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "publicKeyModulus"
      }, {
        // publicExponent (e)
        name: "RSAPublicKey.exponent",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "publicKeyExponent"
      }]
    };
    var publicKeyValidator = forge.pki.rsa.publicKeyValidator = {
      name: "SubjectPublicKeyInfo",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: "subjectPublicKeyInfo",
      value: [{
        name: "SubjectPublicKeyInfo.AlgorithmIdentifier",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: "AlgorithmIdentifier.algorithm",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: "publicKeyOid"
        }]
      }, {
        // subjectPublicKey
        name: "SubjectPublicKeyInfo.subjectPublicKey",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.BITSTRING,
        constructed: false,
        value: [{
          // RSAPublicKey
          name: "SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          optional: true,
          captureAsn1: "rsaPublicKey"
        }]
      }]
    };
    var digestInfoValidator = {
      name: "DigestInfo",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "DigestInfo.DigestAlgorithm",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: "DigestInfo.DigestAlgorithm.algorithmIdentifier",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: "algorithmIdentifier"
        }, {
          // NULL paramters
          name: "DigestInfo.DigestAlgorithm.parameters",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.NULL,
          // captured only to check existence for md2 and md5
          capture: "parameters",
          optional: true,
          constructed: false
        }]
      }, {
        // digest
        name: "DigestInfo.digest",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OCTETSTRING,
        constructed: false,
        capture: "digest"
      }]
    };
    var emsaPkcs1v15encode = function(md) {
      var oid;
      if (md.algorithm in pki.oids) {
        oid = pki.oids[md.algorithm];
      } else {
        var error = new Error("Unknown message digest algorithm.");
        error.algorithm = md.algorithm;
        throw error;
      }
      var oidBytes = asn1.oidToDer(oid).getBytes();
      var digestInfo = asn1.create(
        asn1.Class.UNIVERSAL,
        asn1.Type.SEQUENCE,
        true,
        []
      );
      var digestAlgorithm = asn1.create(
        asn1.Class.UNIVERSAL,
        asn1.Type.SEQUENCE,
        true,
        []
      );
      digestAlgorithm.value.push(asn1.create(
        asn1.Class.UNIVERSAL,
        asn1.Type.OID,
        false,
        oidBytes
      ));
      digestAlgorithm.value.push(asn1.create(
        asn1.Class.UNIVERSAL,
        asn1.Type.NULL,
        false,
        ""
      ));
      var digest = asn1.create(
        asn1.Class.UNIVERSAL,
        asn1.Type.OCTETSTRING,
        false,
        md.digest().getBytes()
      );
      digestInfo.value.push(digestAlgorithm);
      digestInfo.value.push(digest);
      return asn1.toDer(digestInfo).getBytes();
    };
    var _modPow = function(x, key, pub) {
      if (pub) {
        return x.modPow(key.e, key.n);
      }
      if (!key.p || !key.q) {
        return x.modPow(key.d, key.n);
      }
      if (!key.dP) {
        key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));
      }
      if (!key.dQ) {
        key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));
      }
      if (!key.qInv) {
        key.qInv = key.q.modInverse(key.p);
      }
      var r;
      do {
        r = new BigInteger(
          forge.util.bytesToHex(forge.random.getBytes(key.n.bitLength() / 8)),
          16
        );
      } while (r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger.ONE));
      x = x.multiply(r.modPow(key.e, key.n)).mod(key.n);
      var xp = x.mod(key.p).modPow(key.dP, key.p);
      var xq = x.mod(key.q).modPow(key.dQ, key.q);
      while (xp.compareTo(xq) < 0) {
        xp = xp.add(key.p);
      }
      var y = xp.subtract(xq).multiply(key.qInv).mod(key.p).multiply(key.q).add(xq);
      y = y.multiply(r.modInverse(key.n)).mod(key.n);
      return y;
    };
    pki.rsa.encrypt = function(m, key, bt) {
      var pub = bt;
      var eb;
      var k = Math.ceil(key.n.bitLength() / 8);
      if (bt !== false && bt !== true) {
        pub = bt === 2;
        eb = _encodePkcs1_v1_5(m, key, bt);
      } else {
        eb = forge.util.createBuffer();
        eb.putBytes(m);
      }
      var x = new BigInteger(eb.toHex(), 16);
      var y = _modPow(x, key, pub);
      var yhex = y.toString(16);
      var ed = forge.util.createBuffer();
      var zeros = k - Math.ceil(yhex.length / 2);
      while (zeros > 0) {
        ed.putByte(0);
        --zeros;
      }
      ed.putBytes(forge.util.hexToBytes(yhex));
      return ed.getBytes();
    };
    pki.rsa.decrypt = function(ed, key, pub, ml) {
      var k = Math.ceil(key.n.bitLength() / 8);
      if (ed.length !== k) {
        var error = new Error("Encrypted message length is invalid.");
        error.length = ed.length;
        error.expected = k;
        throw error;
      }
      var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16);
      if (y.compareTo(key.n) >= 0) {
        throw new Error("Encrypted message is invalid.");
      }
      var x = _modPow(y, key, pub);
      var xhex = x.toString(16);
      var eb = forge.util.createBuffer();
      var zeros = k - Math.ceil(xhex.length / 2);
      while (zeros > 0) {
        eb.putByte(0);
        --zeros;
      }
      eb.putBytes(forge.util.hexToBytes(xhex));
      if (ml !== false) {
        return _decodePkcs1_v1_5(eb.getBytes(), key, pub);
      }
      return eb.getBytes();
    };
    pki.rsa.createKeyPairGenerationState = function(bits, e, options) {
      if (typeof bits === "string") {
        bits = parseInt(bits, 10);
      }
      bits = bits || 2048;
      options = options || {};
      var prng = options.prng || forge.random;
      var rng2 = {
        // x is an array to fill with bytes
        nextBytes: function(x) {
          var b = prng.getBytesSync(x.length);
          for (var i = 0; i < x.length; ++i) {
            x[i] = b.charCodeAt(i);
          }
        }
      };
      var algorithm = options.algorithm || "PRIMEINC";
      var rval;
      if (algorithm === "PRIMEINC") {
        rval = {
          algorithm,
          state: 0,
          bits,
          rng: rng2,
          eInt: e || 65537,
          e: new BigInteger(null),
          p: null,
          q: null,
          qBits: bits >> 1,
          pBits: bits - (bits >> 1),
          pqState: 0,
          num: null,
          keys: null
        };
        rval.e.fromInt(rval.eInt);
      } else {
        throw new Error("Invalid key generation algorithm: " + algorithm);
      }
      return rval;
    };
    pki.rsa.stepKeyPairGenerationState = function(state, n) {
      if (!("algorithm" in state)) {
        state.algorithm = "PRIMEINC";
      }
      var THIRTY = new BigInteger(null);
      THIRTY.fromInt(30);
      var deltaIdx = 0;
      var op_or = function(x, y) {
        return x | y;
      };
      var t1 = +/* @__PURE__ */ new Date();
      var t2;
      var total = 0;
      while (state.keys === null && (n <= 0 || total < n)) {
        if (state.state === 0) {
          var bits = state.p === null ? state.pBits : state.qBits;
          var bits1 = bits - 1;
          if (state.pqState === 0) {
            state.num = new BigInteger(bits, state.rng);
            if (!state.num.testBit(bits1)) {
              state.num.bitwiseTo(
                BigInteger.ONE.shiftLeft(bits1),
                op_or,
                state.num
              );
            }
            state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);
            deltaIdx = 0;
            ++state.pqState;
          } else if (state.pqState === 1) {
            if (state.num.bitLength() > bits) {
              state.pqState = 0;
            } else if (state.num.isProbablePrime(
              _getMillerRabinTests(state.num.bitLength())
            )) {
              ++state.pqState;
            } else {
              state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
            }
          } else if (state.pqState === 2) {
            state.pqState = state.num.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) === 0 ? 3 : 0;
          } else if (state.pqState === 3) {
            state.pqState = 0;
            if (state.p === null) {
              state.p = state.num;
            } else {
              state.q = state.num;
            }
            if (state.p !== null && state.q !== null) {
              ++state.state;
            }
            state.num = null;
          }
        } else if (state.state === 1) {
          if (state.p.compareTo(state.q) < 0) {
            state.num = state.p;
            state.p = state.q;
            state.q = state.num;
          }
          ++state.state;
        } else if (state.state === 2) {
          state.p1 = state.p.subtract(BigInteger.ONE);
          state.q1 = state.q.subtract(BigInteger.ONE);
          state.phi = state.p1.multiply(state.q1);
          ++state.state;
        } else if (state.state === 3) {
          if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) {
            ++state.state;
          } else {
            state.p = null;
            state.q = null;
            state.state = 0;
          }
        } else if (state.state === 4) {
          state.n = state.p.multiply(state.q);
          if (state.n.bitLength() === state.bits) {
            ++state.state;
          } else {
            state.q = null;
            state.state = 0;
          }
        } else if (state.state === 5) {
          var d = state.e.modInverse(state.phi);
          state.keys = {
            privateKey: pki.rsa.setPrivateKey(
              state.n,
              state.e,
              d,
              state.p,
              state.q,
              d.mod(state.p1),
              d.mod(state.q1),
              state.q.modInverse(state.p)
            ),
            publicKey: pki.rsa.setPublicKey(state.n, state.e)
          };
        }
        t2 = +/* @__PURE__ */ new Date();
        total += t2 - t1;
        t1 = t2;
      }
      return state.keys !== null;
    };
    pki.rsa.generateKeyPair = function(bits, e, options, callback) {
      if (arguments.length === 1) {
        if (typeof bits === "object") {
          options = bits;
          bits = void 0;
        } else if (typeof bits === "function") {
          callback = bits;
          bits = void 0;
        }
      } else if (arguments.length === 2) {
        if (typeof bits === "number") {
          if (typeof e === "function") {
            callback = e;
            e = void 0;
          } else if (typeof e !== "number") {
            options = e;
            e = void 0;
          }
        } else {
          options = bits;
          callback = e;
          bits = void 0;
          e = void 0;
        }
      } else if (arguments.length === 3) {
        if (typeof e === "number") {
          if (typeof options === "function") {
            callback = options;
            options = void 0;
          }
        } else {
          callback = options;
          options = e;
          e = void 0;
        }
      }
      options = options || {};
      if (bits === void 0) {
        bits = options.bits || 2048;
      }
      if (e === void 0) {
        e = options.e || 65537;
      }
      if (!forge.options.usePureJavaScript && !options.prng && bits >= 256 && bits <= 16384 && (e === 65537 || e === 3)) {
        if (callback) {
          if (_detectNodeCrypto("generateKeyPair")) {
            return _crypto.generateKeyPair("rsa", {
              modulusLength: bits,
              publicExponent: e,
              publicKeyEncoding: {
                type: "spki",
                format: "pem"
              },
              privateKeyEncoding: {
                type: "pkcs8",
                format: "pem"
              }
            }, function(err, pub, priv) {
              if (err) {
                return callback(err);
              }
              callback(null, {
                privateKey: pki.privateKeyFromPem(priv),
                publicKey: pki.publicKeyFromPem(pub)
              });
            });
          }
          if (_detectSubtleCrypto("generateKey") && _detectSubtleCrypto("exportKey")) {
            return util.globalScope.crypto.subtle.generateKey({
              name: "RSASSA-PKCS1-v1_5",
              modulusLength: bits,
              publicExponent: _intToUint8Array(e),
              hash: { name: "SHA-256" }
            }, true, ["sign", "verify"]).then(function(pair) {
              return util.globalScope.crypto.subtle.exportKey(
                "pkcs8",
                pair.privateKey
              );
            }).then(void 0, function(err) {
              callback(err);
            }).then(function(pkcs8) {
              if (pkcs8) {
                var privateKey = pki.privateKeyFromAsn1(
                  asn1.fromDer(forge.util.createBuffer(pkcs8))
                );
                callback(null, {
                  privateKey,
                  publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)
                });
              }
            });
          }
          if (_detectSubtleMsCrypto("generateKey") && _detectSubtleMsCrypto("exportKey")) {
            var genOp = util.globalScope.msCrypto.subtle.generateKey({
              name: "RSASSA-PKCS1-v1_5",
              modulusLength: bits,
              publicExponent: _intToUint8Array(e),
              hash: { name: "SHA-256" }
            }, true, ["sign", "verify"]);
            genOp.oncomplete = function(e2) {
              var pair = e2.target.result;
              var exportOp = util.globalScope.msCrypto.subtle.exportKey(
                "pkcs8",
                pair.privateKey
              );
              exportOp.oncomplete = function(e3) {
                var pkcs8 = e3.target.result;
                var privateKey = pki.privateKeyFromAsn1(
                  asn1.fromDer(forge.util.createBuffer(pkcs8))
                );
                callback(null, {
                  privateKey,
                  publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)
                });
              };
              exportOp.onerror = function(err) {
                callback(err);
              };
            };
            genOp.onerror = function(err) {
              callback(err);
            };
            return;
          }
        } else {
          if (_detectNodeCrypto("generateKeyPairSync")) {
            var keypair = _crypto.generateKeyPairSync("rsa", {
              modulusLength: bits,
              publicExponent: e,
              publicKeyEncoding: {
                type: "spki",
                format: "pem"
              },
              privateKeyEncoding: {
                type: "pkcs8",
                format: "pem"
              }
            });
            return {
              privateKey: pki.privateKeyFromPem(keypair.privateKey),
              publicKey: pki.publicKeyFromPem(keypair.publicKey)
            };
          }
        }
      }
      var state = pki.rsa.createKeyPairGenerationState(bits, e, options);
      if (!callback) {
        pki.rsa.stepKeyPairGenerationState(state, 0);
        return state.keys;
      }
      _generateKeyPair(state, options, callback);
    };
    pki.setRsaPublicKey = pki.rsa.setPublicKey = function(n, e) {
      var key = {
        n,
        e
      };
      key.encrypt = function(data, scheme, schemeOptions) {
        if (typeof scheme === "string") {
          scheme = scheme.toUpperCase();
        } else if (scheme === void 0) {
          scheme = "RSAES-PKCS1-V1_5";
        }
        if (scheme === "RSAES-PKCS1-V1_5") {
          scheme = {
            encode: function(m, key2, pub) {
              return _encodePkcs1_v1_5(m, key2, 2).getBytes();
            }
          };
        } else if (scheme === "RSA-OAEP" || scheme === "RSAES-OAEP") {
          scheme = {
            encode: function(m, key2) {
              return forge.pkcs1.encode_rsa_oaep(key2, m, schemeOptions);
            }
          };
        } else if (["RAW", "NONE", "NULL", null].indexOf(scheme) !== -1) {
          scheme = { encode: function(e3) {
            return e3;
          } };
        } else if (typeof scheme === "string") {
          throw new Error('Unsupported encryption scheme: "' + scheme + '".');
        }
        var e2 = scheme.encode(data, key, true);
        return pki.rsa.encrypt(e2, key, true);
      };
      key.verify = function(digest, signature, scheme, options) {
        if (typeof scheme === "string") {
          scheme = scheme.toUpperCase();
        } else if (scheme === void 0) {
          scheme = "RSASSA-PKCS1-V1_5";
        }
        if (options === void 0) {
          options = {
            _parseAllDigestBytes: true
          };
        }
        if (!("_parseAllDigestBytes" in options)) {
          options._parseAllDigestBytes = true;
        }
        if (scheme === "RSASSA-PKCS1-V1_5") {
          scheme = {
            verify: function(digest2, d2) {
              d2 = _decodePkcs1_v1_5(d2, key, true);
              var obj = asn1.fromDer(d2, {
                parseAllBytes: options._parseAllDigestBytes
              });
              var capture = {};
              var errors = [];
              if (!asn1.validate(obj, digestInfoValidator, capture, errors)) {
                var error = new Error(
                  "ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 DigestInfo value."
                );
                error.errors = errors;
                throw error;
              }
              var oid = asn1.derToOid(capture.algorithmIdentifier);
              if (!(oid === forge.oids.md2 || oid === forge.oids.md5 || oid === forge.oids.sha1 || oid === forge.oids.sha224 || oid === forge.oids.sha256 || oid === forge.oids.sha384 || oid === forge.oids.sha512 || oid === forge.oids["sha512-224"] || oid === forge.oids["sha512-256"])) {
                var error = new Error(
                  "Unknown RSASSA-PKCS1-v1_5 DigestAlgorithm identifier."
                );
                error.oid = oid;
                throw error;
              }
              if (oid === forge.oids.md2 || oid === forge.oids.md5) {
                if (!("parameters" in capture)) {
                  throw new Error(
                    "ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 DigestInfo value. Missing algorithm identifer NULL parameters."
                  );
                }
              }
              return digest2 === capture.digest;
            }
          };
        } else if (scheme === "NONE" || scheme === "NULL" || scheme === null) {
          scheme = {
            verify: function(digest2, d2) {
              d2 = _decodePkcs1_v1_5(d2, key, true);
              return digest2 === d2;
            }
          };
        }
        var d = pki.rsa.decrypt(signature, key, true, false);
        return scheme.verify(digest, d, key.n.bitLength());
      };
      return key;
    };
    pki.setRsaPrivateKey = pki.rsa.setPrivateKey = function(n, e, d, p, q, dP, dQ, qInv) {
      var key = {
        n,
        e,
        d,
        p,
        q,
        dP,
        dQ,
        qInv
      };
      key.decrypt = function(data, scheme, schemeOptions) {
        if (typeof scheme === "string") {
          scheme = scheme.toUpperCase();
        } else if (scheme === void 0) {
          scheme = "RSAES-PKCS1-V1_5";
        }
        var d2 = pki.rsa.decrypt(data, key, false, false);
        if (scheme === "RSAES-PKCS1-V1_5") {
          scheme = { decode: _decodePkcs1_v1_5 };
        } else if (scheme === "RSA-OAEP" || scheme === "RSAES-OAEP") {
          scheme = {
            decode: function(d3, key2) {
              return forge.pkcs1.decode_rsa_oaep(key2, d3, schemeOptions);
            }
          };
        } else if (["RAW", "NONE", "NULL", null].indexOf(scheme) !== -1) {
          scheme = { decode: function(d3) {
            return d3;
          } };
        } else {
          throw new Error('Unsupported encryption scheme: "' + scheme + '".');
        }
        return scheme.decode(d2, key, false);
      };
      key.sign = function(md, scheme) {
        var bt = false;
        if (typeof scheme === "string") {
          scheme = scheme.toUpperCase();
        }
        if (scheme === void 0 || scheme === "RSASSA-PKCS1-V1_5") {
          scheme = { encode: emsaPkcs1v15encode };
          bt = 1;
        } else if (scheme === "NONE" || scheme === "NULL" || scheme === null) {
          scheme = { encode: function() {
            return md;
          } };
          bt = 1;
        }
        var d2 = scheme.encode(md, key.n.bitLength());
        return pki.rsa.encrypt(d2, key, bt);
      };
      return key;
    };
    pki.wrapRsaPrivateKey = function(rsaKey) {
      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // version (0)
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          asn1.integerToDer(0).getBytes()
        ),
        // privateKeyAlgorithm
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OID,
            false,
            asn1.oidToDer(pki.oids.rsaEncryption).getBytes()
          ),
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
        ]),
        // PrivateKey
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.OCTETSTRING,
          false,
          asn1.toDer(rsaKey).getBytes()
        )
      ]);
    };
    pki.privateKeyFromAsn1 = function(obj) {
      var capture = {};
      var errors = [];
      if (asn1.validate(obj, privateKeyValidator, capture, errors)) {
        obj = asn1.fromDer(forge.util.createBuffer(capture.privateKey));
      }
      capture = {};
      errors = [];
      if (!asn1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {
        var error = new Error("Cannot read private key. ASN.1 object does not contain an RSAPrivateKey.");
        error.errors = errors;
        throw error;
      }
      var n, e, d, p, q, dP, dQ, qInv;
      n = forge.util.createBuffer(capture.privateKeyModulus).toHex();
      e = forge.util.createBuffer(capture.privateKeyPublicExponent).toHex();
      d = forge.util.createBuffer(capture.privateKeyPrivateExponent).toHex();
      p = forge.util.createBuffer(capture.privateKeyPrime1).toHex();
      q = forge.util.createBuffer(capture.privateKeyPrime2).toHex();
      dP = forge.util.createBuffer(capture.privateKeyExponent1).toHex();
      dQ = forge.util.createBuffer(capture.privateKeyExponent2).toHex();
      qInv = forge.util.createBuffer(capture.privateKeyCoefficient).toHex();
      return pki.setRsaPrivateKey(
        new BigInteger(n, 16),
        new BigInteger(e, 16),
        new BigInteger(d, 16),
        new BigInteger(p, 16),
        new BigInteger(q, 16),
        new BigInteger(dP, 16),
        new BigInteger(dQ, 16),
        new BigInteger(qInv, 16)
      );
    };
    pki.privateKeyToAsn1 = pki.privateKeyToRSAPrivateKey = function(key) {
      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // version (0 = only 2 primes, 1 multiple primes)
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          asn1.integerToDer(0).getBytes()
        ),
        // modulus (n)
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          _bnToBytes(key.n)
        ),
        // publicExponent (e)
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          _bnToBytes(key.e)
        ),
        // privateExponent (d)
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          _bnToBytes(key.d)
        ),
        // privateKeyPrime1 (p)
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          _bnToBytes(key.p)
        ),
        // privateKeyPrime2 (q)
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          _bnToBytes(key.q)
        ),
        // privateKeyExponent1 (dP)
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          _bnToBytes(key.dP)
        ),
        // privateKeyExponent2 (dQ)
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          _bnToBytes(key.dQ)
        ),
        // coefficient (qInv)
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          _bnToBytes(key.qInv)
        )
      ]);
    };
    pki.publicKeyFromAsn1 = function(obj) {
      var capture = {};
      var errors = [];
      if (asn1.validate(obj, publicKeyValidator, capture, errors)) {
        var oid = asn1.derToOid(capture.publicKeyOid);
        if (oid !== pki.oids.rsaEncryption) {
          var error = new Error("Cannot read public key. Unknown OID.");
          error.oid = oid;
          throw error;
        }
        obj = capture.rsaPublicKey;
      }
      errors = [];
      if (!asn1.validate(obj, rsaPublicKeyValidator, capture, errors)) {
        var error = new Error("Cannot read public key. ASN.1 object does not contain an RSAPublicKey.");
        error.errors = errors;
        throw error;
      }
      var n = forge.util.createBuffer(capture.publicKeyModulus).toHex();
      var e = forge.util.createBuffer(capture.publicKeyExponent).toHex();
      return pki.setRsaPublicKey(
        new BigInteger(n, 16),
        new BigInteger(e, 16)
      );
    };
    pki.publicKeyToAsn1 = pki.publicKeyToSubjectPublicKeyInfo = function(key) {
      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // AlgorithmIdentifier
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // algorithm
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OID,
            false,
            asn1.oidToDer(pki.oids.rsaEncryption).getBytes()
          ),
          // parameters (null)
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
        ]),
        // subjectPublicKey
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [
          pki.publicKeyToRSAPublicKey(key)
        ])
      ]);
    };
    pki.publicKeyToRSAPublicKey = function(key) {
      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // modulus (n)
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          _bnToBytes(key.n)
        ),
        // publicExponent (e)
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          _bnToBytes(key.e)
        )
      ]);
    };
    function _encodePkcs1_v1_5(m, key, bt) {
      var eb = forge.util.createBuffer();
      var k = Math.ceil(key.n.bitLength() / 8);
      if (m.length > k - 11) {
        var error = new Error("Message is too long for PKCS#1 v1.5 padding.");
        error.length = m.length;
        error.max = k - 11;
        throw error;
      }
      eb.putByte(0);
      eb.putByte(bt);
      var padNum = k - 3 - m.length;
      var padByte;
      if (bt === 0 || bt === 1) {
        padByte = bt === 0 ? 0 : 255;
        for (var i = 0; i < padNum; ++i) {
          eb.putByte(padByte);
        }
      } else {
        while (padNum > 0) {
          var numZeros = 0;
          var padBytes = forge.random.getBytes(padNum);
          for (var i = 0; i < padNum; ++i) {
            padByte = padBytes.charCodeAt(i);
            if (padByte === 0) {
              ++numZeros;
            } else {
              eb.putByte(padByte);
            }
          }
          padNum = numZeros;
        }
      }
      eb.putByte(0);
      eb.putBytes(m);
      return eb;
    }
    function _decodePkcs1_v1_5(em, key, pub, ml) {
      var k = Math.ceil(key.n.bitLength() / 8);
      var eb = forge.util.createBuffer(em);
      var first = eb.getByte();
      var bt = eb.getByte();
      if (first !== 0 || pub && bt !== 0 && bt !== 1 || !pub && bt != 2 || pub && bt === 0 && typeof ml === "undefined") {
        throw new Error("Encryption block is invalid.");
      }
      var padNum = 0;
      if (bt === 0) {
        padNum = k - 3 - ml;
        for (var i = 0; i < padNum; ++i) {
          if (eb.getByte() !== 0) {
            throw new Error("Encryption block is invalid.");
          }
        }
      } else if (bt === 1) {
        padNum = 0;
        while (eb.length() > 1) {
          if (eb.getByte() !== 255) {
            --eb.read;
            break;
          }
          ++padNum;
        }
      } else if (bt === 2) {
        padNum = 0;
        while (eb.length() > 1) {
          if (eb.getByte() === 0) {
            --eb.read;
            break;
          }
          ++padNum;
        }
      }
      var zero = eb.getByte();
      if (zero !== 0 || padNum !== k - 3 - eb.length()) {
        throw new Error("Encryption block is invalid.");
      }
      return eb.getBytes();
    }
    function _generateKeyPair(state, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      options = options || {};
      var opts = {
        algorithm: {
          name: options.algorithm || "PRIMEINC",
          options: {
            workers: options.workers || 2,
            workLoad: options.workLoad || 100,
            workerScript: options.workerScript
          }
        }
      };
      if ("prng" in options) {
        opts.prng = options.prng;
      }
      generate();
      function generate() {
        getPrime(state.pBits, function(err, num) {
          if (err) {
            return callback(err);
          }
          state.p = num;
          if (state.q !== null) {
            return finish(err, state.q);
          }
          getPrime(state.qBits, finish);
        });
      }
      function getPrime(bits, callback2) {
        forge.prime.generateProbablePrime(bits, opts, callback2);
      }
      function finish(err, num) {
        if (err) {
          return callback(err);
        }
        state.q = num;
        if (state.p.compareTo(state.q) < 0) {
          var tmp = state.p;
          state.p = state.q;
          state.q = tmp;
        }
        if (state.p.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
          state.p = null;
          generate();
          return;
        }
        if (state.q.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
          state.q = null;
          getPrime(state.qBits, finish);
          return;
        }
        state.p1 = state.p.subtract(BigInteger.ONE);
        state.q1 = state.q.subtract(BigInteger.ONE);
        state.phi = state.p1.multiply(state.q1);
        if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
          state.p = state.q = null;
          generate();
          return;
        }
        state.n = state.p.multiply(state.q);
        if (state.n.bitLength() !== state.bits) {
          state.q = null;
          getPrime(state.qBits, finish);
          return;
        }
        var d = state.e.modInverse(state.phi);
        state.keys = {
          privateKey: pki.rsa.setPrivateKey(
            state.n,
            state.e,
            d,
            state.p,
            state.q,
            d.mod(state.p1),
            d.mod(state.q1),
            state.q.modInverse(state.p)
          ),
          publicKey: pki.rsa.setPublicKey(state.n, state.e)
        };
        callback(null, state.keys);
      }
    }
    function _bnToBytes(b) {
      var hex = b.toString(16);
      if (hex[0] >= "8") {
        hex = "00" + hex;
      }
      var bytes = forge.util.hexToBytes(hex);
      if (bytes.length > 1 && // leading 0x00 for positive integer
      (bytes.charCodeAt(0) === 0 && (bytes.charCodeAt(1) & 128) === 0 || // leading 0xFF for negative integer
      bytes.charCodeAt(0) === 255 && (bytes.charCodeAt(1) & 128) === 128)) {
        return bytes.substr(1);
      }
      return bytes;
    }
    function _getMillerRabinTests(bits) {
      if (bits <= 100)
        return 27;
      if (bits <= 150)
        return 18;
      if (bits <= 200)
        return 15;
      if (bits <= 250)
        return 12;
      if (bits <= 300)
        return 9;
      if (bits <= 350)
        return 8;
      if (bits <= 400)
        return 7;
      if (bits <= 500)
        return 6;
      if (bits <= 600)
        return 5;
      if (bits <= 800)
        return 4;
      if (bits <= 1250)
        return 3;
      return 2;
    }
    function _detectNodeCrypto(fn) {
      return forge.util.isNodejs && typeof _crypto[fn] === "function";
    }
    function _detectSubtleCrypto(fn) {
      return typeof util.globalScope !== "undefined" && typeof util.globalScope.crypto === "object" && typeof util.globalScope.crypto.subtle === "object" && typeof util.globalScope.crypto.subtle[fn] === "function";
    }
    function _detectSubtleMsCrypto(fn) {
      return typeof util.globalScope !== "undefined" && typeof util.globalScope.msCrypto === "object" && typeof util.globalScope.msCrypto.subtle === "object" && typeof util.globalScope.msCrypto.subtle[fn] === "function";
    }
    function _intToUint8Array(x) {
      var bytes = forge.util.hexToBytes(x.toString(16));
      var buffer = new Uint8Array(bytes.length);
      for (var i = 0; i < bytes.length; ++i) {
        buffer[i] = bytes.charCodeAt(i);
      }
      return buffer;
    }
  }
});

// node_modules/node-forge/lib/pbe.js
var require_pbe = __commonJS({
  "node_modules/node-forge/lib/pbe.js"(exports, module2) {
    var forge = require_forge();
    require_aes();
    require_asn1();
    require_des();
    require_md();
    require_oids();
    require_pbkdf2();
    require_pem();
    require_random();
    require_rc2();
    require_rsa();
    require_util();
    if (typeof BigInteger === "undefined") {
      BigInteger = forge.jsbn.BigInteger;
    }
    var BigInteger;
    var asn1 = forge.asn1;
    var pki = forge.pki = forge.pki || {};
    module2.exports = pki.pbe = forge.pbe = forge.pbe || {};
    var oids = pki.oids;
    var encryptedPrivateKeyValidator = {
      name: "EncryptedPrivateKeyInfo",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "EncryptedPrivateKeyInfo.encryptionAlgorithm",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: "AlgorithmIdentifier.algorithm",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: "encryptionOid"
        }, {
          name: "AlgorithmIdentifier.parameters",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          captureAsn1: "encryptionParams"
        }]
      }, {
        // encryptedData
        name: "EncryptedPrivateKeyInfo.encryptedData",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OCTETSTRING,
        constructed: false,
        capture: "encryptedData"
      }]
    };
    var PBES2AlgorithmsValidator = {
      name: "PBES2Algorithms",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "PBES2Algorithms.keyDerivationFunc",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: "PBES2Algorithms.keyDerivationFunc.oid",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: "kdfOid"
        }, {
          name: "PBES2Algorithms.params",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [{
            name: "PBES2Algorithms.params.salt",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OCTETSTRING,
            constructed: false,
            capture: "kdfSalt"
          }, {
            name: "PBES2Algorithms.params.iterationCount",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "kdfIterationCount"
          }, {
            name: "PBES2Algorithms.params.keyLength",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            optional: true,
            capture: "keyLength"
          }, {
            // prf
            name: "PBES2Algorithms.params.prf",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            optional: true,
            value: [{
              name: "PBES2Algorithms.params.prf.algorithm",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OID,
              constructed: false,
              capture: "prfOid"
            }]
          }]
        }]
      }, {
        name: "PBES2Algorithms.encryptionScheme",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: "PBES2Algorithms.encryptionScheme.oid",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: "encOid"
        }, {
          name: "PBES2Algorithms.encryptionScheme.iv",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OCTETSTRING,
          constructed: false,
          capture: "encIv"
        }]
      }]
    };
    var pkcs12PbeParamsValidator = {
      name: "pkcs-12PbeParams",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "pkcs-12PbeParams.salt",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OCTETSTRING,
        constructed: false,
        capture: "salt"
      }, {
        name: "pkcs-12PbeParams.iterations",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "iterations"
      }]
    };
    pki.encryptPrivateKeyInfo = function(obj, password, options) {
      options = options || {};
      options.saltSize = options.saltSize || 8;
      options.count = options.count || 2048;
      options.algorithm = options.algorithm || "aes128";
      options.prfAlgorithm = options.prfAlgorithm || "sha1";
      var salt = forge.random.getBytesSync(options.saltSize);
      var count = options.count;
      var countBytes = asn1.integerToDer(count);
      var dkLen;
      var encryptionAlgorithm;
      var encryptedData;
      if (options.algorithm.indexOf("aes") === 0 || options.algorithm === "des") {
        var ivLen, encOid, cipherFn;
        switch (options.algorithm) {
          case "aes128":
            dkLen = 16;
            ivLen = 16;
            encOid = oids["aes128-CBC"];
            cipherFn = forge.aes.createEncryptionCipher;
            break;
          case "aes192":
            dkLen = 24;
            ivLen = 16;
            encOid = oids["aes192-CBC"];
            cipherFn = forge.aes.createEncryptionCipher;
            break;
          case "aes256":
            dkLen = 32;
            ivLen = 16;
            encOid = oids["aes256-CBC"];
            cipherFn = forge.aes.createEncryptionCipher;
            break;
          case "des":
            dkLen = 8;
            ivLen = 8;
            encOid = oids["desCBC"];
            cipherFn = forge.des.createEncryptionCipher;
            break;
          default:
            var error = new Error("Cannot encrypt private key. Unknown encryption algorithm.");
            error.algorithm = options.algorithm;
            throw error;
        }
        var prfAlgorithm = "hmacWith" + options.prfAlgorithm.toUpperCase();
        var md = prfAlgorithmToMessageDigest(prfAlgorithm);
        var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);
        var iv = forge.random.getBytesSync(ivLen);
        var cipher = cipherFn(dk);
        cipher.start(iv);
        cipher.update(asn1.toDer(obj));
        cipher.finish();
        encryptedData = cipher.output.getBytes();
        var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);
        encryptionAlgorithm = asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.SEQUENCE,
          true,
          [
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(oids["pkcs5PBES2"]).getBytes()
            ),
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              // keyDerivationFunc
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1.oidToDer(oids["pkcs5PBKDF2"]).getBytes()
                ),
                // PBKDF2-params
                params
              ]),
              // encryptionScheme
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1.oidToDer(encOid).getBytes()
                ),
                // iv
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OCTETSTRING,
                  false,
                  iv
                )
              ])
            ])
          ]
        );
      } else if (options.algorithm === "3des") {
        dkLen = 24;
        var saltBytes = new forge.util.ByteBuffer(salt);
        var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);
        var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);
        var cipher = forge.des.createEncryptionCipher(dk);
        cipher.start(iv);
        cipher.update(asn1.toDer(obj));
        cipher.finish();
        encryptedData = cipher.output.getBytes();
        encryptionAlgorithm = asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.SEQUENCE,
          true,
          [
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(oids["pbeWithSHAAnd3-KeyTripleDES-CBC"]).getBytes()
            ),
            // pkcs-12PbeParams
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              // salt
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),
              // iteration count
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.INTEGER,
                false,
                countBytes.getBytes()
              )
            ])
          ]
        );
      } else {
        var error = new Error("Cannot encrypt private key. Unknown encryption algorithm.");
        error.algorithm = options.algorithm;
        throw error;
      }
      var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // encryptionAlgorithm
        encryptionAlgorithm,
        // encryptedData
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.OCTETSTRING,
          false,
          encryptedData
        )
      ]);
      return rval;
    };
    pki.decryptPrivateKeyInfo = function(obj, password) {
      var rval = null;
      var capture = {};
      var errors = [];
      if (!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {
        var error = new Error("Cannot read encrypted private key. ASN.1 object is not a supported EncryptedPrivateKeyInfo.");
        error.errors = errors;
        throw error;
      }
      var oid = asn1.derToOid(capture.encryptionOid);
      var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password);
      var encrypted = forge.util.createBuffer(capture.encryptedData);
      cipher.update(encrypted);
      if (cipher.finish()) {
        rval = asn1.fromDer(cipher.output);
      }
      return rval;
    };
    pki.encryptedPrivateKeyToPem = function(epki, maxline) {
      var msg = {
        type: "ENCRYPTED PRIVATE KEY",
        body: asn1.toDer(epki).getBytes()
      };
      return forge.pem.encode(msg, { maxline });
    };
    pki.encryptedPrivateKeyFromPem = function(pem) {
      var msg = forge.pem.decode(pem)[0];
      if (msg.type !== "ENCRYPTED PRIVATE KEY") {
        var error = new Error('Could not convert encrypted private key from PEM; PEM header type is "ENCRYPTED PRIVATE KEY".');
        error.headerType = msg.type;
        throw error;
      }
      if (msg.procType && msg.procType.type === "ENCRYPTED") {
        throw new Error("Could not convert encrypted private key from PEM; PEM is encrypted.");
      }
      return asn1.fromDer(msg.body);
    };
    pki.encryptRsaPrivateKey = function(rsaKey, password, options) {
      options = options || {};
      if (!options.legacy) {
        var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));
        rval = pki.encryptPrivateKeyInfo(rval, password, options);
        return pki.encryptedPrivateKeyToPem(rval);
      }
      var algorithm;
      var iv;
      var dkLen;
      var cipherFn;
      switch (options.algorithm) {
        case "aes128":
          algorithm = "AES-128-CBC";
          dkLen = 16;
          iv = forge.random.getBytesSync(16);
          cipherFn = forge.aes.createEncryptionCipher;
          break;
        case "aes192":
          algorithm = "AES-192-CBC";
          dkLen = 24;
          iv = forge.random.getBytesSync(16);
          cipherFn = forge.aes.createEncryptionCipher;
          break;
        case "aes256":
          algorithm = "AES-256-CBC";
          dkLen = 32;
          iv = forge.random.getBytesSync(16);
          cipherFn = forge.aes.createEncryptionCipher;
          break;
        case "3des":
          algorithm = "DES-EDE3-CBC";
          dkLen = 24;
          iv = forge.random.getBytesSync(8);
          cipherFn = forge.des.createEncryptionCipher;
          break;
        case "des":
          algorithm = "DES-CBC";
          dkLen = 8;
          iv = forge.random.getBytesSync(8);
          cipherFn = forge.des.createEncryptionCipher;
          break;
        default:
          var error = new Error('Could not encrypt RSA private key; unsupported encryption algorithm "' + options.algorithm + '".');
          error.algorithm = options.algorithm;
          throw error;
      }
      var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
      var cipher = cipherFn(dk);
      cipher.start(iv);
      cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));
      cipher.finish();
      var msg = {
        type: "RSA PRIVATE KEY",
        procType: {
          version: "4",
          type: "ENCRYPTED"
        },
        dekInfo: {
          algorithm,
          parameters: forge.util.bytesToHex(iv).toUpperCase()
        },
        body: cipher.output.getBytes()
      };
      return forge.pem.encode(msg);
    };
    pki.decryptRsaPrivateKey = function(pem, password) {
      var rval = null;
      var msg = forge.pem.decode(pem)[0];
      if (msg.type !== "ENCRYPTED PRIVATE KEY" && msg.type !== "PRIVATE KEY" && msg.type !== "RSA PRIVATE KEY") {
        var error = new Error('Could not convert private key from PEM; PEM header type is not "ENCRYPTED PRIVATE KEY", "PRIVATE KEY", or "RSA PRIVATE KEY".');
        error.headerType = error;
        throw error;
      }
      if (msg.procType && msg.procType.type === "ENCRYPTED") {
        var dkLen;
        var cipherFn;
        switch (msg.dekInfo.algorithm) {
          case "DES-CBC":
            dkLen = 8;
            cipherFn = forge.des.createDecryptionCipher;
            break;
          case "DES-EDE3-CBC":
            dkLen = 24;
            cipherFn = forge.des.createDecryptionCipher;
            break;
          case "AES-128-CBC":
            dkLen = 16;
            cipherFn = forge.aes.createDecryptionCipher;
            break;
          case "AES-192-CBC":
            dkLen = 24;
            cipherFn = forge.aes.createDecryptionCipher;
            break;
          case "AES-256-CBC":
            dkLen = 32;
            cipherFn = forge.aes.createDecryptionCipher;
            break;
          case "RC2-40-CBC":
            dkLen = 5;
            cipherFn = function(key) {
              return forge.rc2.createDecryptionCipher(key, 40);
            };
            break;
          case "RC2-64-CBC":
            dkLen = 8;
            cipherFn = function(key) {
              return forge.rc2.createDecryptionCipher(key, 64);
            };
            break;
          case "RC2-128-CBC":
            dkLen = 16;
            cipherFn = function(key) {
              return forge.rc2.createDecryptionCipher(key, 128);
            };
            break;
          default:
            var error = new Error('Could not decrypt private key; unsupported encryption algorithm "' + msg.dekInfo.algorithm + '".');
            error.algorithm = msg.dekInfo.algorithm;
            throw error;
        }
        var iv = forge.util.hexToBytes(msg.dekInfo.parameters);
        var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
        var cipher = cipherFn(dk);
        cipher.start(iv);
        cipher.update(forge.util.createBuffer(msg.body));
        if (cipher.finish()) {
          rval = cipher.output.getBytes();
        } else {
          return rval;
        }
      } else {
        rval = msg.body;
      }
      if (msg.type === "ENCRYPTED PRIVATE KEY") {
        rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);
      } else {
        rval = asn1.fromDer(rval);
      }
      if (rval !== null) {
        rval = pki.privateKeyFromAsn1(rval);
      }
      return rval;
    };
    pki.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {
      var j, l;
      if (typeof md === "undefined" || md === null) {
        if (!("sha1" in forge.md)) {
          throw new Error('"sha1" hash algorithm unavailable.');
        }
        md = forge.md.sha1.create();
      }
      var u = md.digestLength;
      var v = md.blockLength;
      var result = new forge.util.ByteBuffer();
      var passBuf = new forge.util.ByteBuffer();
      if (password !== null && password !== void 0) {
        for (l = 0; l < password.length; l++) {
          passBuf.putInt16(password.charCodeAt(l));
        }
        passBuf.putInt16(0);
      }
      var p = passBuf.length();
      var s = salt.length();
      var D = new forge.util.ByteBuffer();
      D.fillWithByte(id, v);
      var Slen = v * Math.ceil(s / v);
      var S = new forge.util.ByteBuffer();
      for (l = 0; l < Slen; l++) {
        S.putByte(salt.at(l % s));
      }
      var Plen = v * Math.ceil(p / v);
      var P = new forge.util.ByteBuffer();
      for (l = 0; l < Plen; l++) {
        P.putByte(passBuf.at(l % p));
      }
      var I = S;
      I.putBuffer(P);
      var c = Math.ceil(n / u);
      for (var i = 1; i <= c; i++) {
        var buf = new forge.util.ByteBuffer();
        buf.putBytes(D.bytes());
        buf.putBytes(I.bytes());
        for (var round = 0; round < iter; round++) {
          md.start();
          md.update(buf.getBytes());
          buf = md.digest();
        }
        var B = new forge.util.ByteBuffer();
        for (l = 0; l < v; l++) {
          B.putByte(buf.at(l % u));
        }
        var k = Math.ceil(s / v) + Math.ceil(p / v);
        var Inew = new forge.util.ByteBuffer();
        for (j = 0; j < k; j++) {
          var chunk = new forge.util.ByteBuffer(I.getBytes(v));
          var x = 511;
          for (l = B.length() - 1; l >= 0; l--) {
            x = x >> 8;
            x += B.at(l) + chunk.at(l);
            chunk.setAt(l, x & 255);
          }
          Inew.putBuffer(chunk);
        }
        I = Inew;
        result.putBuffer(buf);
      }
      result.truncate(result.length() - n);
      return result;
    };
    pki.pbe.getCipher = function(oid, params, password) {
      switch (oid) {
        case pki.oids["pkcs5PBES2"]:
          return pki.pbe.getCipherForPBES2(oid, params, password);
        case pki.oids["pbeWithSHAAnd3-KeyTripleDES-CBC"]:
        case pki.oids["pbewithSHAAnd40BitRC2-CBC"]:
          return pki.pbe.getCipherForPKCS12PBE(oid, params, password);
        default:
          var error = new Error("Cannot read encrypted PBE data block. Unsupported OID.");
          error.oid = oid;
          error.supportedOids = [
            "pkcs5PBES2",
            "pbeWithSHAAnd3-KeyTripleDES-CBC",
            "pbewithSHAAnd40BitRC2-CBC"
          ];
          throw error;
      }
    };
    pki.pbe.getCipherForPBES2 = function(oid, params, password) {
      var capture = {};
      var errors = [];
      if (!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {
        var error = new Error("Cannot read password-based-encryption algorithm parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.");
        error.errors = errors;
        throw error;
      }
      oid = asn1.derToOid(capture.kdfOid);
      if (oid !== pki.oids["pkcs5PBKDF2"]) {
        var error = new Error("Cannot read encrypted private key. Unsupported key derivation function OID.");
        error.oid = oid;
        error.supportedOids = ["pkcs5PBKDF2"];
        throw error;
      }
      oid = asn1.derToOid(capture.encOid);
      if (oid !== pki.oids["aes128-CBC"] && oid !== pki.oids["aes192-CBC"] && oid !== pki.oids["aes256-CBC"] && oid !== pki.oids["des-EDE3-CBC"] && oid !== pki.oids["desCBC"]) {
        var error = new Error("Cannot read encrypted private key. Unsupported encryption scheme OID.");
        error.oid = oid;
        error.supportedOids = [
          "aes128-CBC",
          "aes192-CBC",
          "aes256-CBC",
          "des-EDE3-CBC",
          "desCBC"
        ];
        throw error;
      }
      var salt = capture.kdfSalt;
      var count = forge.util.createBuffer(capture.kdfIterationCount);
      count = count.getInt(count.length() << 3);
      var dkLen;
      var cipherFn;
      switch (pki.oids[oid]) {
        case "aes128-CBC":
          dkLen = 16;
          cipherFn = forge.aes.createDecryptionCipher;
          break;
        case "aes192-CBC":
          dkLen = 24;
          cipherFn = forge.aes.createDecryptionCipher;
          break;
        case "aes256-CBC":
          dkLen = 32;
          cipherFn = forge.aes.createDecryptionCipher;
          break;
        case "des-EDE3-CBC":
          dkLen = 24;
          cipherFn = forge.des.createDecryptionCipher;
          break;
        case "desCBC":
          dkLen = 8;
          cipherFn = forge.des.createDecryptionCipher;
          break;
      }
      var md = prfOidToMessageDigest(capture.prfOid);
      var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);
      var iv = capture.encIv;
      var cipher = cipherFn(dk);
      cipher.start(iv);
      return cipher;
    };
    pki.pbe.getCipherForPKCS12PBE = function(oid, params, password) {
      var capture = {};
      var errors = [];
      if (!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {
        var error = new Error("Cannot read password-based-encryption algorithm parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.");
        error.errors = errors;
        throw error;
      }
      var salt = forge.util.createBuffer(capture.salt);
      var count = forge.util.createBuffer(capture.iterations);
      count = count.getInt(count.length() << 3);
      var dkLen, dIvLen, cipherFn;
      switch (oid) {
        case pki.oids["pbeWithSHAAnd3-KeyTripleDES-CBC"]:
          dkLen = 24;
          dIvLen = 8;
          cipherFn = forge.des.startDecrypting;
          break;
        case pki.oids["pbewithSHAAnd40BitRC2-CBC"]:
          dkLen = 5;
          dIvLen = 8;
          cipherFn = function(key2, iv2) {
            var cipher = forge.rc2.createDecryptionCipher(key2, 40);
            cipher.start(iv2, null);
            return cipher;
          };
          break;
        default:
          var error = new Error("Cannot read PKCS #12 PBE data block. Unsupported OID.");
          error.oid = oid;
          throw error;
      }
      var md = prfOidToMessageDigest(capture.prfOid);
      var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);
      md.start();
      var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);
      return cipherFn(key, iv);
    };
    pki.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {
      if (typeof md === "undefined" || md === null) {
        if (!("md5" in forge.md)) {
          throw new Error('"md5" hash algorithm unavailable.');
        }
        md = forge.md.md5.create();
      }
      if (salt === null) {
        salt = "";
      }
      var digests = [hash(md, password + salt)];
      for (var length = 16, i = 1; length < dkLen; ++i, length += 16) {
        digests.push(hash(md, digests[i - 1] + password + salt));
      }
      return digests.join("").substr(0, dkLen);
    };
    function hash(md, bytes) {
      return md.start().update(bytes).digest().getBytes();
    }
    function prfOidToMessageDigest(prfOid) {
      var prfAlgorithm;
      if (!prfOid) {
        prfAlgorithm = "hmacWithSHA1";
      } else {
        prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];
        if (!prfAlgorithm) {
          var error = new Error("Unsupported PRF OID.");
          error.oid = prfOid;
          error.supported = [
            "hmacWithSHA1",
            "hmacWithSHA224",
            "hmacWithSHA256",
            "hmacWithSHA384",
            "hmacWithSHA512"
          ];
          throw error;
        }
      }
      return prfAlgorithmToMessageDigest(prfAlgorithm);
    }
    function prfAlgorithmToMessageDigest(prfAlgorithm) {
      var factory = forge.md;
      switch (prfAlgorithm) {
        case "hmacWithSHA224":
          factory = forge.md.sha512;
        case "hmacWithSHA1":
        case "hmacWithSHA256":
        case "hmacWithSHA384":
        case "hmacWithSHA512":
          prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();
          break;
        default:
          var error = new Error("Unsupported PRF algorithm.");
          error.algorithm = prfAlgorithm;
          error.supported = [
            "hmacWithSHA1",
            "hmacWithSHA224",
            "hmacWithSHA256",
            "hmacWithSHA384",
            "hmacWithSHA512"
          ];
          throw error;
      }
      if (!factory || !(prfAlgorithm in factory)) {
        throw new Error("Unknown hash algorithm: " + prfAlgorithm);
      }
      return factory[prfAlgorithm].create();
    }
    function createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {
      var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // salt
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.OCTETSTRING,
          false,
          salt
        ),
        // iteration count
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          countBytes.getBytes()
        )
      ]);
      if (prfAlgorithm !== "hmacWithSHA1") {
        params.value.push(
          // key length
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.INTEGER,
            false,
            forge.util.hexToBytes(dkLen.toString(16))
          ),
          // AlgorithmIdentifier
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // algorithm
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()
            ),
            // parameters (null)
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
          ])
        );
      }
      return params;
    }
  }
});

// node_modules/node-forge/lib/pkcs7asn1.js
var require_pkcs7asn1 = __commonJS({
  "node_modules/node-forge/lib/pkcs7asn1.js"(exports, module2) {
    var forge = require_forge();
    require_asn1();
    require_util();
    var asn1 = forge.asn1;
    var p7v = module2.exports = forge.pkcs7asn1 = forge.pkcs7asn1 || {};
    forge.pkcs7 = forge.pkcs7 || {};
    forge.pkcs7.asn1 = p7v;
    var contentInfoValidator = {
      name: "ContentInfo",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "ContentInfo.ContentType",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: "contentType"
      }, {
        name: "ContentInfo.content",
        tagClass: asn1.Class.CONTEXT_SPECIFIC,
        type: 0,
        constructed: true,
        optional: true,
        captureAsn1: "content"
      }]
    };
    p7v.contentInfoValidator = contentInfoValidator;
    var encryptedContentInfoValidator = {
      name: "EncryptedContentInfo",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "EncryptedContentInfo.contentType",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: "contentType"
      }, {
        name: "EncryptedContentInfo.contentEncryptionAlgorithm",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: "EncryptedContentInfo.contentEncryptionAlgorithm.algorithm",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: "encAlgorithm"
        }, {
          name: "EncryptedContentInfo.contentEncryptionAlgorithm.parameter",
          tagClass: asn1.Class.UNIVERSAL,
          captureAsn1: "encParameter"
        }]
      }, {
        name: "EncryptedContentInfo.encryptedContent",
        tagClass: asn1.Class.CONTEXT_SPECIFIC,
        type: 0,
        /* The PKCS#7 structure output by OpenSSL somewhat differs from what
         * other implementations do generate.
         *
         * OpenSSL generates a structure like this:
         * SEQUENCE {
         *    ...
         *    [0]
         *       26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
         *       C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
         *       ...
         * }
         *
         * Whereas other implementations (and this PKCS#7 module) generate:
         * SEQUENCE {
         *    ...
         *    [0] {
         *       OCTET STRING
         *          26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
         *          C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
         *          ...
         *    }
         * }
         *
         * In order to support both, we just capture the context specific
         * field here.  The OCTET STRING bit is removed below.
         */
        capture: "encryptedContent",
        captureAsn1: "encryptedContentAsn1"
      }]
    };
    p7v.envelopedDataValidator = {
      name: "EnvelopedData",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "EnvelopedData.Version",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "version"
      }, {
        name: "EnvelopedData.RecipientInfos",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SET,
        constructed: true,
        captureAsn1: "recipientInfos"
      }].concat(encryptedContentInfoValidator)
    };
    p7v.encryptedDataValidator = {
      name: "EncryptedData",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "EncryptedData.Version",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "version"
      }].concat(encryptedContentInfoValidator)
    };
    var signerValidator = {
      name: "SignerInfo",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "SignerInfo.version",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false
      }, {
        name: "SignerInfo.issuerAndSerialNumber",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: "SignerInfo.issuerAndSerialNumber.issuer",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          captureAsn1: "issuer"
        }, {
          name: "SignerInfo.issuerAndSerialNumber.serialNumber",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.INTEGER,
          constructed: false,
          capture: "serial"
        }]
      }, {
        name: "SignerInfo.digestAlgorithm",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: "SignerInfo.digestAlgorithm.algorithm",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: "digestAlgorithm"
        }, {
          name: "SignerInfo.digestAlgorithm.parameter",
          tagClass: asn1.Class.UNIVERSAL,
          constructed: false,
          captureAsn1: "digestParameter",
          optional: true
        }]
      }, {
        name: "SignerInfo.authenticatedAttributes",
        tagClass: asn1.Class.CONTEXT_SPECIFIC,
        type: 0,
        constructed: true,
        optional: true,
        capture: "authenticatedAttributes"
      }, {
        name: "SignerInfo.digestEncryptionAlgorithm",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        capture: "signatureAlgorithm"
      }, {
        name: "SignerInfo.encryptedDigest",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OCTETSTRING,
        constructed: false,
        capture: "signature"
      }, {
        name: "SignerInfo.unauthenticatedAttributes",
        tagClass: asn1.Class.CONTEXT_SPECIFIC,
        type: 1,
        constructed: true,
        optional: true,
        capture: "unauthenticatedAttributes"
      }]
    };
    p7v.signedDataValidator = {
      name: "SignedData",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [
        {
          name: "SignedData.Version",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.INTEGER,
          constructed: false,
          capture: "version"
        },
        {
          name: "SignedData.DigestAlgorithms",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SET,
          constructed: true,
          captureAsn1: "digestAlgorithms"
        },
        contentInfoValidator,
        {
          name: "SignedData.Certificates",
          tagClass: asn1.Class.CONTEXT_SPECIFIC,
          type: 0,
          optional: true,
          captureAsn1: "certificates"
        },
        {
          name: "SignedData.CertificateRevocationLists",
          tagClass: asn1.Class.CONTEXT_SPECIFIC,
          type: 1,
          optional: true,
          captureAsn1: "crls"
        },
        {
          name: "SignedData.SignerInfos",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SET,
          capture: "signerInfos",
          optional: true,
          value: [signerValidator]
        }
      ]
    };
    p7v.recipientInfoValidator = {
      name: "RecipientInfo",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "RecipientInfo.version",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "version"
      }, {
        name: "RecipientInfo.issuerAndSerial",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: "RecipientInfo.issuerAndSerial.issuer",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          captureAsn1: "issuer"
        }, {
          name: "RecipientInfo.issuerAndSerial.serialNumber",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.INTEGER,
          constructed: false,
          capture: "serial"
        }]
      }, {
        name: "RecipientInfo.keyEncryptionAlgorithm",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: "RecipientInfo.keyEncryptionAlgorithm.algorithm",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: "encAlgorithm"
        }, {
          name: "RecipientInfo.keyEncryptionAlgorithm.parameter",
          tagClass: asn1.Class.UNIVERSAL,
          constructed: false,
          captureAsn1: "encParameter",
          optional: true
        }]
      }, {
        name: "RecipientInfo.encryptedKey",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OCTETSTRING,
        constructed: false,
        capture: "encKey"
      }]
    };
  }
});

// node_modules/node-forge/lib/mgf1.js
var require_mgf1 = __commonJS({
  "node_modules/node-forge/lib/mgf1.js"(exports, module2) {
    var forge = require_forge();
    require_util();
    forge.mgf = forge.mgf || {};
    var mgf1 = module2.exports = forge.mgf.mgf1 = forge.mgf1 = forge.mgf1 || {};
    mgf1.create = function(md) {
      var mgf = {
        /**
         * Generate mask of specified length.
         *
         * @param {String} seed The seed for mask generation.
         * @param maskLen Number of bytes to generate.
         * @return {String} The generated mask.
         */
        generate: function(seed, maskLen) {
          var t = new forge.util.ByteBuffer();
          var len = Math.ceil(maskLen / md.digestLength);
          for (var i = 0; i < len; i++) {
            var c = new forge.util.ByteBuffer();
            c.putInt32(i);
            md.start();
            md.update(seed + c.getBytes());
            t.putBuffer(md.digest());
          }
          t.truncate(t.length() - maskLen);
          return t.getBytes();
        }
      };
      return mgf;
    };
  }
});

// node_modules/node-forge/lib/mgf.js
var require_mgf = __commonJS({
  "node_modules/node-forge/lib/mgf.js"(exports, module2) {
    var forge = require_forge();
    require_mgf1();
    module2.exports = forge.mgf = forge.mgf || {};
    forge.mgf.mgf1 = forge.mgf1;
  }
});

// node_modules/node-forge/lib/pss.js
var require_pss = __commonJS({
  "node_modules/node-forge/lib/pss.js"(exports, module2) {
    var forge = require_forge();
    require_random();
    require_util();
    var pss = module2.exports = forge.pss = forge.pss || {};
    pss.create = function(options) {
      if (arguments.length === 3) {
        options = {
          md: arguments[0],
          mgf: arguments[1],
          saltLength: arguments[2]
        };
      }
      var hash = options.md;
      var mgf = options.mgf;
      var hLen = hash.digestLength;
      var salt_ = options.salt || null;
      if (typeof salt_ === "string") {
        salt_ = forge.util.createBuffer(salt_);
      }
      var sLen;
      if ("saltLength" in options) {
        sLen = options.saltLength;
      } else if (salt_ !== null) {
        sLen = salt_.length();
      } else {
        throw new Error("Salt length not specified or specific salt not given.");
      }
      if (salt_ !== null && salt_.length() !== sLen) {
        throw new Error("Given salt length does not match length of given salt.");
      }
      var prng = options.prng || forge.random;
      var pssobj = {};
      pssobj.encode = function(md, modBits) {
        var i;
        var emBits = modBits - 1;
        var emLen = Math.ceil(emBits / 8);
        var mHash = md.digest().getBytes();
        if (emLen < hLen + sLen + 2) {
          throw new Error("Message is too long to encrypt.");
        }
        var salt;
        if (salt_ === null) {
          salt = prng.getBytesSync(sLen);
        } else {
          salt = salt_.bytes();
        }
        var m_ = new forge.util.ByteBuffer();
        m_.fillWithByte(0, 8);
        m_.putBytes(mHash);
        m_.putBytes(salt);
        hash.start();
        hash.update(m_.getBytes());
        var h = hash.digest().getBytes();
        var ps = new forge.util.ByteBuffer();
        ps.fillWithByte(0, emLen - sLen - hLen - 2);
        ps.putByte(1);
        ps.putBytes(salt);
        var db = ps.getBytes();
        var maskLen = emLen - hLen - 1;
        var dbMask = mgf.generate(h, maskLen);
        var maskedDB = "";
        for (i = 0; i < maskLen; i++) {
          maskedDB += String.fromCharCode(db.charCodeAt(i) ^ dbMask.charCodeAt(i));
        }
        var mask = 65280 >> 8 * emLen - emBits & 255;
        maskedDB = String.fromCharCode(maskedDB.charCodeAt(0) & ~mask) + maskedDB.substr(1);
        return maskedDB + h + String.fromCharCode(188);
      };
      pssobj.verify = function(mHash, em, modBits) {
        var i;
        var emBits = modBits - 1;
        var emLen = Math.ceil(emBits / 8);
        em = em.substr(-emLen);
        if (emLen < hLen + sLen + 2) {
          throw new Error("Inconsistent parameters to PSS signature verification.");
        }
        if (em.charCodeAt(emLen - 1) !== 188) {
          throw new Error("Encoded message does not end in 0xBC.");
        }
        var maskLen = emLen - hLen - 1;
        var maskedDB = em.substr(0, maskLen);
        var h = em.substr(maskLen, hLen);
        var mask = 65280 >> 8 * emLen - emBits & 255;
        if ((maskedDB.charCodeAt(0) & mask) !== 0) {
          throw new Error("Bits beyond keysize not zero as expected.");
        }
        var dbMask = mgf.generate(h, maskLen);
        var db = "";
        for (i = 0; i < maskLen; i++) {
          db += String.fromCharCode(maskedDB.charCodeAt(i) ^ dbMask.charCodeAt(i));
        }
        db = String.fromCharCode(db.charCodeAt(0) & ~mask) + db.substr(1);
        var checkLen = emLen - hLen - sLen - 2;
        for (i = 0; i < checkLen; i++) {
          if (db.charCodeAt(i) !== 0) {
            throw new Error("Leftmost octets not zero as expected");
          }
        }
        if (db.charCodeAt(checkLen) !== 1) {
          throw new Error("Inconsistent PSS signature, 0x01 marker not found");
        }
        var salt = db.substr(-sLen);
        var m_ = new forge.util.ByteBuffer();
        m_.fillWithByte(0, 8);
        m_.putBytes(mHash);
        m_.putBytes(salt);
        hash.start();
        hash.update(m_.getBytes());
        var h_ = hash.digest().getBytes();
        return h === h_;
      };
      return pssobj;
    };
  }
});

// node_modules/node-forge/lib/x509.js
var require_x509 = __commonJS({
  "node_modules/node-forge/lib/x509.js"(exports, module2) {
    var forge = require_forge();
    require_aes();
    require_asn1();
    require_des();
    require_md();
    require_mgf();
    require_oids();
    require_pem();
    require_pss();
    require_rsa();
    require_util();
    var asn1 = forge.asn1;
    var pki = module2.exports = forge.pki = forge.pki || {};
    var oids = pki.oids;
    var _shortNames = {};
    _shortNames["CN"] = oids["commonName"];
    _shortNames["commonName"] = "CN";
    _shortNames["C"] = oids["countryName"];
    _shortNames["countryName"] = "C";
    _shortNames["L"] = oids["localityName"];
    _shortNames["localityName"] = "L";
    _shortNames["ST"] = oids["stateOrProvinceName"];
    _shortNames["stateOrProvinceName"] = "ST";
    _shortNames["O"] = oids["organizationName"];
    _shortNames["organizationName"] = "O";
    _shortNames["OU"] = oids["organizationalUnitName"];
    _shortNames["organizationalUnitName"] = "OU";
    _shortNames["E"] = oids["emailAddress"];
    _shortNames["emailAddress"] = "E";
    var publicKeyValidator = forge.pki.rsa.publicKeyValidator;
    var x509CertificateValidator = {
      name: "Certificate",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "Certificate.TBSCertificate",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        captureAsn1: "tbsCertificate",
        value: [
          {
            name: "Certificate.TBSCertificate.version",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 0,
            constructed: true,
            optional: true,
            value: [{
              name: "Certificate.TBSCertificate.version.integer",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "certVersion"
            }]
          },
          {
            name: "Certificate.TBSCertificate.serialNumber",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            capture: "certSerialNumber"
          },
          {
            name: "Certificate.TBSCertificate.signature",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [{
              name: "Certificate.TBSCertificate.signature.algorithm",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OID,
              constructed: false,
              capture: "certinfoSignatureOid"
            }, {
              name: "Certificate.TBSCertificate.signature.parameters",
              tagClass: asn1.Class.UNIVERSAL,
              optional: true,
              captureAsn1: "certinfoSignatureParams"
            }]
          },
          {
            name: "Certificate.TBSCertificate.issuer",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            captureAsn1: "certIssuer"
          },
          {
            name: "Certificate.TBSCertificate.validity",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            // Note: UTC and generalized times may both appear so the capture
            // names are based on their detected order, the names used below
            // are only for the common case, which validity time really means
            // "notBefore" and which means "notAfter" will be determined by order
            value: [{
              // notBefore (Time) (UTC time case)
              name: "Certificate.TBSCertificate.validity.notBefore (utc)",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.UTCTIME,
              constructed: false,
              optional: true,
              capture: "certValidity1UTCTime"
            }, {
              // notBefore (Time) (generalized time case)
              name: "Certificate.TBSCertificate.validity.notBefore (generalized)",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.GENERALIZEDTIME,
              constructed: false,
              optional: true,
              capture: "certValidity2GeneralizedTime"
            }, {
              // notAfter (Time) (only UTC time is supported)
              name: "Certificate.TBSCertificate.validity.notAfter (utc)",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.UTCTIME,
              constructed: false,
              optional: true,
              capture: "certValidity3UTCTime"
            }, {
              // notAfter (Time) (only UTC time is supported)
              name: "Certificate.TBSCertificate.validity.notAfter (generalized)",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.GENERALIZEDTIME,
              constructed: false,
              optional: true,
              capture: "certValidity4GeneralizedTime"
            }]
          },
          {
            // Name (subject) (RDNSequence)
            name: "Certificate.TBSCertificate.subject",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            captureAsn1: "certSubject"
          },
          // SubjectPublicKeyInfo
          publicKeyValidator,
          {
            // issuerUniqueID (optional)
            name: "Certificate.TBSCertificate.issuerUniqueID",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 1,
            constructed: true,
            optional: true,
            value: [{
              name: "Certificate.TBSCertificate.issuerUniqueID.id",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.BITSTRING,
              constructed: false,
              // TODO: support arbitrary bit length ids
              captureBitStringValue: "certIssuerUniqueId"
            }]
          },
          {
            // subjectUniqueID (optional)
            name: "Certificate.TBSCertificate.subjectUniqueID",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 2,
            constructed: true,
            optional: true,
            value: [{
              name: "Certificate.TBSCertificate.subjectUniqueID.id",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.BITSTRING,
              constructed: false,
              // TODO: support arbitrary bit length ids
              captureBitStringValue: "certSubjectUniqueId"
            }]
          },
          {
            // Extensions (optional)
            name: "Certificate.TBSCertificate.extensions",
            tagClass: asn1.Class.CONTEXT_SPECIFIC,
            type: 3,
            constructed: true,
            captureAsn1: "certExtensions",
            optional: true
          }
        ]
      }, {
        // AlgorithmIdentifier (signature algorithm)
        name: "Certificate.signatureAlgorithm",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          // algorithm
          name: "Certificate.signatureAlgorithm.algorithm",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: "certSignatureOid"
        }, {
          name: "Certificate.TBSCertificate.signature.parameters",
          tagClass: asn1.Class.UNIVERSAL,
          optional: true,
          captureAsn1: "certSignatureParams"
        }]
      }, {
        // SignatureValue
        name: "Certificate.signatureValue",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.BITSTRING,
        constructed: false,
        captureBitStringValue: "certSignature"
      }]
    };
    var rsassaPssParameterValidator = {
      name: "rsapss",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "rsapss.hashAlgorithm",
        tagClass: asn1.Class.CONTEXT_SPECIFIC,
        type: 0,
        constructed: true,
        value: [{
          name: "rsapss.hashAlgorithm.AlgorithmIdentifier",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Class.SEQUENCE,
          constructed: true,
          optional: true,
          value: [{
            name: "rsapss.hashAlgorithm.AlgorithmIdentifier.algorithm",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OID,
            constructed: false,
            capture: "hashOid"
            /* parameter block omitted, for SHA1 NULL anyhow. */
          }]
        }]
      }, {
        name: "rsapss.maskGenAlgorithm",
        tagClass: asn1.Class.CONTEXT_SPECIFIC,
        type: 1,
        constructed: true,
        value: [{
          name: "rsapss.maskGenAlgorithm.AlgorithmIdentifier",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Class.SEQUENCE,
          constructed: true,
          optional: true,
          value: [{
            name: "rsapss.maskGenAlgorithm.AlgorithmIdentifier.algorithm",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OID,
            constructed: false,
            capture: "maskGenOid"
          }, {
            name: "rsapss.maskGenAlgorithm.AlgorithmIdentifier.params",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [{
              name: "rsapss.maskGenAlgorithm.AlgorithmIdentifier.params.algorithm",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OID,
              constructed: false,
              capture: "maskGenHashOid"
              /* parameter block omitted, for SHA1 NULL anyhow. */
            }]
          }]
        }]
      }, {
        name: "rsapss.saltLength",
        tagClass: asn1.Class.CONTEXT_SPECIFIC,
        type: 2,
        optional: true,
        value: [{
          name: "rsapss.saltLength.saltLength",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Class.INTEGER,
          constructed: false,
          capture: "saltLength"
        }]
      }, {
        name: "rsapss.trailerField",
        tagClass: asn1.Class.CONTEXT_SPECIFIC,
        type: 3,
        optional: true,
        value: [{
          name: "rsapss.trailer.trailer",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Class.INTEGER,
          constructed: false,
          capture: "trailer"
        }]
      }]
    };
    var certificationRequestInfoValidator = {
      name: "CertificationRequestInfo",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: "certificationRequestInfo",
      value: [
        {
          name: "CertificationRequestInfo.integer",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.INTEGER,
          constructed: false,
          capture: "certificationRequestInfoVersion"
        },
        {
          // Name (subject) (RDNSequence)
          name: "CertificationRequestInfo.subject",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          captureAsn1: "certificationRequestInfoSubject"
        },
        // SubjectPublicKeyInfo
        publicKeyValidator,
        {
          name: "CertificationRequestInfo.attributes",
          tagClass: asn1.Class.CONTEXT_SPECIFIC,
          type: 0,
          constructed: true,
          optional: true,
          capture: "certificationRequestInfoAttributes",
          value: [{
            name: "CertificationRequestInfo.attributes",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            value: [{
              name: "CertificationRequestInfo.attributes.type",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OID,
              constructed: false
            }, {
              name: "CertificationRequestInfo.attributes.value",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SET,
              constructed: true
            }]
          }]
        }
      ]
    };
    var certificationRequestValidator = {
      name: "CertificationRequest",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: "csr",
      value: [
        certificationRequestInfoValidator,
        {
          // AlgorithmIdentifier (signature algorithm)
          name: "CertificationRequest.signatureAlgorithm",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [{
            // algorithm
            name: "CertificationRequest.signatureAlgorithm.algorithm",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OID,
            constructed: false,
            capture: "csrSignatureOid"
          }, {
            name: "CertificationRequest.signatureAlgorithm.parameters",
            tagClass: asn1.Class.UNIVERSAL,
            optional: true,
            captureAsn1: "csrSignatureParams"
          }]
        },
        {
          // signature
          name: "CertificationRequest.signature",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.BITSTRING,
          constructed: false,
          captureBitStringValue: "csrSignature"
        }
      ]
    };
    pki.RDNAttributesAsArray = function(rdn, md) {
      var rval = [];
      var set, attr, obj;
      for (var si = 0; si < rdn.value.length; ++si) {
        set = rdn.value[si];
        for (var i = 0; i < set.value.length; ++i) {
          obj = {};
          attr = set.value[i];
          obj.type = asn1.derToOid(attr.value[0].value);
          obj.value = attr.value[1].value;
          obj.valueTagClass = attr.value[1].type;
          if (obj.type in oids) {
            obj.name = oids[obj.type];
            if (obj.name in _shortNames) {
              obj.shortName = _shortNames[obj.name];
            }
          }
          if (md) {
            md.update(obj.type);
            md.update(obj.value);
          }
          rval.push(obj);
        }
      }
      return rval;
    };
    pki.CRIAttributesAsArray = function(attributes) {
      var rval = [];
      for (var si = 0; si < attributes.length; ++si) {
        var seq = attributes[si];
        var type = asn1.derToOid(seq.value[0].value);
        var values = seq.value[1].value;
        for (var vi = 0; vi < values.length; ++vi) {
          var obj = {};
          obj.type = type;
          obj.value = values[vi].value;
          obj.valueTagClass = values[vi].type;
          if (obj.type in oids) {
            obj.name = oids[obj.type];
            if (obj.name in _shortNames) {
              obj.shortName = _shortNames[obj.name];
            }
          }
          if (obj.type === oids.extensionRequest) {
            obj.extensions = [];
            for (var ei = 0; ei < obj.value.length; ++ei) {
              obj.extensions.push(pki.certificateExtensionFromAsn1(obj.value[ei]));
            }
          }
          rval.push(obj);
        }
      }
      return rval;
    };
    function _getAttribute(obj, options) {
      if (typeof options === "string") {
        options = { shortName: options };
      }
      var rval = null;
      var attr;
      for (var i = 0; rval === null && i < obj.attributes.length; ++i) {
        attr = obj.attributes[i];
        if (options.type && options.type === attr.type) {
          rval = attr;
        } else if (options.name && options.name === attr.name) {
          rval = attr;
        } else if (options.shortName && options.shortName === attr.shortName) {
          rval = attr;
        }
      }
      return rval;
    }
    var _readSignatureParameters = function(oid, obj, fillDefaults) {
      var params = {};
      if (oid !== oids["RSASSA-PSS"]) {
        return params;
      }
      if (fillDefaults) {
        params = {
          hash: {
            algorithmOid: oids["sha1"]
          },
          mgf: {
            algorithmOid: oids["mgf1"],
            hash: {
              algorithmOid: oids["sha1"]
            }
          },
          saltLength: 20
        };
      }
      var capture = {};
      var errors = [];
      if (!asn1.validate(obj, rsassaPssParameterValidator, capture, errors)) {
        var error = new Error("Cannot read RSASSA-PSS parameter block.");
        error.errors = errors;
        throw error;
      }
      if (capture.hashOid !== void 0) {
        params.hash = params.hash || {};
        params.hash.algorithmOid = asn1.derToOid(capture.hashOid);
      }
      if (capture.maskGenOid !== void 0) {
        params.mgf = params.mgf || {};
        params.mgf.algorithmOid = asn1.derToOid(capture.maskGenOid);
        params.mgf.hash = params.mgf.hash || {};
        params.mgf.hash.algorithmOid = asn1.derToOid(capture.maskGenHashOid);
      }
      if (capture.saltLength !== void 0) {
        params.saltLength = capture.saltLength.charCodeAt(0);
      }
      return params;
    };
    var _createSignatureDigest = function(options) {
      switch (oids[options.signatureOid]) {
        case "sha1WithRSAEncryption":
        case "sha1WithRSASignature":
          return forge.md.sha1.create();
        case "md5WithRSAEncryption":
          return forge.md.md5.create();
        case "sha256WithRSAEncryption":
          return forge.md.sha256.create();
        case "sha384WithRSAEncryption":
          return forge.md.sha384.create();
        case "sha512WithRSAEncryption":
          return forge.md.sha512.create();
        case "RSASSA-PSS":
          return forge.md.sha256.create();
        default:
          var error = new Error(
            "Could not compute " + options.type + " digest. Unknown signature OID."
          );
          error.signatureOid = options.signatureOid;
          throw error;
      }
    };
    var _verifySignature = function(options) {
      var cert = options.certificate;
      var scheme;
      switch (cert.signatureOid) {
        case oids.sha1WithRSAEncryption:
        case oids.sha1WithRSASignature:
          break;
        case oids["RSASSA-PSS"]:
          var hash, mgf;
          hash = oids[cert.signatureParameters.mgf.hash.algorithmOid];
          if (hash === void 0 || forge.md[hash] === void 0) {
            var error = new Error("Unsupported MGF hash function.");
            error.oid = cert.signatureParameters.mgf.hash.algorithmOid;
            error.name = hash;
            throw error;
          }
          mgf = oids[cert.signatureParameters.mgf.algorithmOid];
          if (mgf === void 0 || forge.mgf[mgf] === void 0) {
            var error = new Error("Unsupported MGF function.");
            error.oid = cert.signatureParameters.mgf.algorithmOid;
            error.name = mgf;
            throw error;
          }
          mgf = forge.mgf[mgf].create(forge.md[hash].create());
          hash = oids[cert.signatureParameters.hash.algorithmOid];
          if (hash === void 0 || forge.md[hash] === void 0) {
            var error = new Error("Unsupported RSASSA-PSS hash function.");
            error.oid = cert.signatureParameters.hash.algorithmOid;
            error.name = hash;
            throw error;
          }
          scheme = forge.pss.create(
            forge.md[hash].create(),
            mgf,
            cert.signatureParameters.saltLength
          );
          break;
      }
      return cert.publicKey.verify(
        options.md.digest().getBytes(),
        options.signature,
        scheme
      );
    };
    pki.certificateFromPem = function(pem, computeHash, strict) {
      var msg = forge.pem.decode(pem)[0];
      if (msg.type !== "CERTIFICATE" && msg.type !== "X509 CERTIFICATE" && msg.type !== "TRUSTED CERTIFICATE") {
        var error = new Error(
          'Could not convert certificate from PEM; PEM header type is not "CERTIFICATE", "X509 CERTIFICATE", or "TRUSTED CERTIFICATE".'
        );
        error.headerType = msg.type;
        throw error;
      }
      if (msg.procType && msg.procType.type === "ENCRYPTED") {
        throw new Error(
          "Could not convert certificate from PEM; PEM is encrypted."
        );
      }
      var obj = asn1.fromDer(msg.body, strict);
      return pki.certificateFromAsn1(obj, computeHash);
    };
    pki.certificateToPem = function(cert, maxline) {
      var msg = {
        type: "CERTIFICATE",
        body: asn1.toDer(pki.certificateToAsn1(cert)).getBytes()
      };
      return forge.pem.encode(msg, { maxline });
    };
    pki.publicKeyFromPem = function(pem) {
      var msg = forge.pem.decode(pem)[0];
      if (msg.type !== "PUBLIC KEY" && msg.type !== "RSA PUBLIC KEY") {
        var error = new Error('Could not convert public key from PEM; PEM header type is not "PUBLIC KEY" or "RSA PUBLIC KEY".');
        error.headerType = msg.type;
        throw error;
      }
      if (msg.procType && msg.procType.type === "ENCRYPTED") {
        throw new Error("Could not convert public key from PEM; PEM is encrypted.");
      }
      var obj = asn1.fromDer(msg.body);
      return pki.publicKeyFromAsn1(obj);
    };
    pki.publicKeyToPem = function(key, maxline) {
      var msg = {
        type: "PUBLIC KEY",
        body: asn1.toDer(pki.publicKeyToAsn1(key)).getBytes()
      };
      return forge.pem.encode(msg, { maxline });
    };
    pki.publicKeyToRSAPublicKeyPem = function(key, maxline) {
      var msg = {
        type: "RSA PUBLIC KEY",
        body: asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes()
      };
      return forge.pem.encode(msg, { maxline });
    };
    pki.getPublicKeyFingerprint = function(key, options) {
      options = options || {};
      var md = options.md || forge.md.sha1.create();
      var type = options.type || "RSAPublicKey";
      var bytes;
      switch (type) {
        case "RSAPublicKey":
          bytes = asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes();
          break;
        case "SubjectPublicKeyInfo":
          bytes = asn1.toDer(pki.publicKeyToAsn1(key)).getBytes();
          break;
        default:
          throw new Error('Unknown fingerprint type "' + options.type + '".');
      }
      md.start();
      md.update(bytes);
      var digest = md.digest();
      if (options.encoding === "hex") {
        var hex = digest.toHex();
        if (options.delimiter) {
          return hex.match(/.{2}/g).join(options.delimiter);
        }
        return hex;
      } else if (options.encoding === "binary") {
        return digest.getBytes();
      } else if (options.encoding) {
        throw new Error('Unknown encoding "' + options.encoding + '".');
      }
      return digest;
    };
    pki.certificationRequestFromPem = function(pem, computeHash, strict) {
      var msg = forge.pem.decode(pem)[0];
      if (msg.type !== "CERTIFICATE REQUEST") {
        var error = new Error('Could not convert certification request from PEM; PEM header type is not "CERTIFICATE REQUEST".');
        error.headerType = msg.type;
        throw error;
      }
      if (msg.procType && msg.procType.type === "ENCRYPTED") {
        throw new Error("Could not convert certification request from PEM; PEM is encrypted.");
      }
      var obj = asn1.fromDer(msg.body, strict);
      return pki.certificationRequestFromAsn1(obj, computeHash);
    };
    pki.certificationRequestToPem = function(csr, maxline) {
      var msg = {
        type: "CERTIFICATE REQUEST",
        body: asn1.toDer(pki.certificationRequestToAsn1(csr)).getBytes()
      };
      return forge.pem.encode(msg, { maxline });
    };
    pki.createCertificate = function() {
      var cert = {};
      cert.version = 2;
      cert.serialNumber = "00";
      cert.signatureOid = null;
      cert.signature = null;
      cert.siginfo = {};
      cert.siginfo.algorithmOid = null;
      cert.validity = {};
      cert.validity.notBefore = /* @__PURE__ */ new Date();
      cert.validity.notAfter = /* @__PURE__ */ new Date();
      cert.issuer = {};
      cert.issuer.getField = function(sn) {
        return _getAttribute(cert.issuer, sn);
      };
      cert.issuer.addField = function(attr) {
        _fillMissingFields([attr]);
        cert.issuer.attributes.push(attr);
      };
      cert.issuer.attributes = [];
      cert.issuer.hash = null;
      cert.subject = {};
      cert.subject.getField = function(sn) {
        return _getAttribute(cert.subject, sn);
      };
      cert.subject.addField = function(attr) {
        _fillMissingFields([attr]);
        cert.subject.attributes.push(attr);
      };
      cert.subject.attributes = [];
      cert.subject.hash = null;
      cert.extensions = [];
      cert.publicKey = null;
      cert.md = null;
      cert.setSubject = function(attrs, uniqueId) {
        _fillMissingFields(attrs);
        cert.subject.attributes = attrs;
        delete cert.subject.uniqueId;
        if (uniqueId) {
          cert.subject.uniqueId = uniqueId;
        }
        cert.subject.hash = null;
      };
      cert.setIssuer = function(attrs, uniqueId) {
        _fillMissingFields(attrs);
        cert.issuer.attributes = attrs;
        delete cert.issuer.uniqueId;
        if (uniqueId) {
          cert.issuer.uniqueId = uniqueId;
        }
        cert.issuer.hash = null;
      };
      cert.setExtensions = function(exts) {
        for (var i = 0; i < exts.length; ++i) {
          _fillMissingExtensionFields(exts[i], { cert });
        }
        cert.extensions = exts;
      };
      cert.getExtension = function(options) {
        if (typeof options === "string") {
          options = { name: options };
        }
        var rval = null;
        var ext;
        for (var i = 0; rval === null && i < cert.extensions.length; ++i) {
          ext = cert.extensions[i];
          if (options.id && ext.id === options.id) {
            rval = ext;
          } else if (options.name && ext.name === options.name) {
            rval = ext;
          }
        }
        return rval;
      };
      cert.sign = function(key, md) {
        cert.md = md || forge.md.sha1.create();
        var algorithmOid = oids[cert.md.algorithm + "WithRSAEncryption"];
        if (!algorithmOid) {
          var error = new Error("Could not compute certificate digest. Unknown message digest algorithm OID.");
          error.algorithm = cert.md.algorithm;
          throw error;
        }
        cert.signatureOid = cert.siginfo.algorithmOid = algorithmOid;
        cert.tbsCertificate = pki.getTBSCertificate(cert);
        var bytes = asn1.toDer(cert.tbsCertificate);
        cert.md.update(bytes.getBytes());
        cert.signature = key.sign(cert.md);
      };
      cert.verify = function(child) {
        var rval = false;
        if (!cert.issued(child)) {
          var issuer = child.issuer;
          var subject = cert.subject;
          var error = new Error(
            "The parent certificate did not issue the given child certificate; the child certificate's issuer does not match the parent's subject."
          );
          error.expectedIssuer = subject.attributes;
          error.actualIssuer = issuer.attributes;
          throw error;
        }
        var md = child.md;
        if (md === null) {
          md = _createSignatureDigest({
            signatureOid: child.signatureOid,
            type: "certificate"
          });
          var tbsCertificate = child.tbsCertificate || pki.getTBSCertificate(child);
          var bytes = asn1.toDer(tbsCertificate);
          md.update(bytes.getBytes());
        }
        if (md !== null) {
          rval = _verifySignature({
            certificate: cert,
            md,
            signature: child.signature
          });
        }
        return rval;
      };
      cert.isIssuer = function(parent) {
        var rval = false;
        var i = cert.issuer;
        var s = parent.subject;
        if (i.hash && s.hash) {
          rval = i.hash === s.hash;
        } else if (i.attributes.length === s.attributes.length) {
          rval = true;
          var iattr, sattr;
          for (var n = 0; rval && n < i.attributes.length; ++n) {
            iattr = i.attributes[n];
            sattr = s.attributes[n];
            if (iattr.type !== sattr.type || iattr.value !== sattr.value) {
              rval = false;
            }
          }
        }
        return rval;
      };
      cert.issued = function(child) {
        return child.isIssuer(cert);
      };
      cert.generateSubjectKeyIdentifier = function() {
        return pki.getPublicKeyFingerprint(cert.publicKey, { type: "RSAPublicKey" });
      };
      cert.verifySubjectKeyIdentifier = function() {
        var oid = oids["subjectKeyIdentifier"];
        for (var i = 0; i < cert.extensions.length; ++i) {
          var ext = cert.extensions[i];
          if (ext.id === oid) {
            var ski = cert.generateSubjectKeyIdentifier().getBytes();
            return forge.util.hexToBytes(ext.subjectKeyIdentifier) === ski;
          }
        }
        return false;
      };
      return cert;
    };
    pki.certificateFromAsn1 = function(obj, computeHash) {
      var capture = {};
      var errors = [];
      if (!asn1.validate(obj, x509CertificateValidator, capture, errors)) {
        var error = new Error("Cannot read X.509 certificate. ASN.1 object is not an X509v3 Certificate.");
        error.errors = errors;
        throw error;
      }
      var oid = asn1.derToOid(capture.publicKeyOid);
      if (oid !== pki.oids.rsaEncryption) {
        throw new Error("Cannot read public key. OID is not RSA.");
      }
      var cert = pki.createCertificate();
      cert.version = capture.certVersion ? capture.certVersion.charCodeAt(0) : 0;
      var serial = forge.util.createBuffer(capture.certSerialNumber);
      cert.serialNumber = serial.toHex();
      cert.signatureOid = forge.asn1.derToOid(capture.certSignatureOid);
      cert.signatureParameters = _readSignatureParameters(
        cert.signatureOid,
        capture.certSignatureParams,
        true
      );
      cert.siginfo.algorithmOid = forge.asn1.derToOid(capture.certinfoSignatureOid);
      cert.siginfo.parameters = _readSignatureParameters(
        cert.siginfo.algorithmOid,
        capture.certinfoSignatureParams,
        false
      );
      cert.signature = capture.certSignature;
      var validity = [];
      if (capture.certValidity1UTCTime !== void 0) {
        validity.push(asn1.utcTimeToDate(capture.certValidity1UTCTime));
      }
      if (capture.certValidity2GeneralizedTime !== void 0) {
        validity.push(asn1.generalizedTimeToDate(
          capture.certValidity2GeneralizedTime
        ));
      }
      if (capture.certValidity3UTCTime !== void 0) {
        validity.push(asn1.utcTimeToDate(capture.certValidity3UTCTime));
      }
      if (capture.certValidity4GeneralizedTime !== void 0) {
        validity.push(asn1.generalizedTimeToDate(
          capture.certValidity4GeneralizedTime
        ));
      }
      if (validity.length > 2) {
        throw new Error("Cannot read notBefore/notAfter validity times; more than two times were provided in the certificate.");
      }
      if (validity.length < 2) {
        throw new Error("Cannot read notBefore/notAfter validity times; they were not provided as either UTCTime or GeneralizedTime.");
      }
      cert.validity.notBefore = validity[0];
      cert.validity.notAfter = validity[1];
      cert.tbsCertificate = capture.tbsCertificate;
      if (computeHash) {
        cert.md = _createSignatureDigest({
          signatureOid: cert.signatureOid,
          type: "certificate"
        });
        var bytes = asn1.toDer(cert.tbsCertificate);
        cert.md.update(bytes.getBytes());
      }
      var imd = forge.md.sha1.create();
      var ibytes = asn1.toDer(capture.certIssuer);
      imd.update(ibytes.getBytes());
      cert.issuer.getField = function(sn) {
        return _getAttribute(cert.issuer, sn);
      };
      cert.issuer.addField = function(attr) {
        _fillMissingFields([attr]);
        cert.issuer.attributes.push(attr);
      };
      cert.issuer.attributes = pki.RDNAttributesAsArray(capture.certIssuer);
      if (capture.certIssuerUniqueId) {
        cert.issuer.uniqueId = capture.certIssuerUniqueId;
      }
      cert.issuer.hash = imd.digest().toHex();
      var smd = forge.md.sha1.create();
      var sbytes = asn1.toDer(capture.certSubject);
      smd.update(sbytes.getBytes());
      cert.subject.getField = function(sn) {
        return _getAttribute(cert.subject, sn);
      };
      cert.subject.addField = function(attr) {
        _fillMissingFields([attr]);
        cert.subject.attributes.push(attr);
      };
      cert.subject.attributes = pki.RDNAttributesAsArray(capture.certSubject);
      if (capture.certSubjectUniqueId) {
        cert.subject.uniqueId = capture.certSubjectUniqueId;
      }
      cert.subject.hash = smd.digest().toHex();
      if (capture.certExtensions) {
        cert.extensions = pki.certificateExtensionsFromAsn1(capture.certExtensions);
      } else {
        cert.extensions = [];
      }
      cert.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);
      return cert;
    };
    pki.certificateExtensionsFromAsn1 = function(exts) {
      var rval = [];
      for (var i = 0; i < exts.value.length; ++i) {
        var extseq = exts.value[i];
        for (var ei = 0; ei < extseq.value.length; ++ei) {
          rval.push(pki.certificateExtensionFromAsn1(extseq.value[ei]));
        }
      }
      return rval;
    };
    pki.certificateExtensionFromAsn1 = function(ext) {
      var e = {};
      e.id = asn1.derToOid(ext.value[0].value);
      e.critical = false;
      if (ext.value[1].type === asn1.Type.BOOLEAN) {
        e.critical = ext.value[1].value.charCodeAt(0) !== 0;
        e.value = ext.value[2].value;
      } else {
        e.value = ext.value[1].value;
      }
      if (e.id in oids) {
        e.name = oids[e.id];
        if (e.name === "keyUsage") {
          var ev = asn1.fromDer(e.value);
          var b2 = 0;
          var b3 = 0;
          if (ev.value.length > 1) {
            b2 = ev.value.charCodeAt(1);
            b3 = ev.value.length > 2 ? ev.value.charCodeAt(2) : 0;
          }
          e.digitalSignature = (b2 & 128) === 128;
          e.nonRepudiation = (b2 & 64) === 64;
          e.keyEncipherment = (b2 & 32) === 32;
          e.dataEncipherment = (b2 & 16) === 16;
          e.keyAgreement = (b2 & 8) === 8;
          e.keyCertSign = (b2 & 4) === 4;
          e.cRLSign = (b2 & 2) === 2;
          e.encipherOnly = (b2 & 1) === 1;
          e.decipherOnly = (b3 & 128) === 128;
        } else if (e.name === "basicConstraints") {
          var ev = asn1.fromDer(e.value);
          if (ev.value.length > 0 && ev.value[0].type === asn1.Type.BOOLEAN) {
            e.cA = ev.value[0].value.charCodeAt(0) !== 0;
          } else {
            e.cA = false;
          }
          var value = null;
          if (ev.value.length > 0 && ev.value[0].type === asn1.Type.INTEGER) {
            value = ev.value[0].value;
          } else if (ev.value.length > 1) {
            value = ev.value[1].value;
          }
          if (value !== null) {
            e.pathLenConstraint = asn1.derToInteger(value);
          }
        } else if (e.name === "extKeyUsage") {
          var ev = asn1.fromDer(e.value);
          for (var vi = 0; vi < ev.value.length; ++vi) {
            var oid = asn1.derToOid(ev.value[vi].value);
            if (oid in oids) {
              e[oids[oid]] = true;
            } else {
              e[oid] = true;
            }
          }
        } else if (e.name === "nsCertType") {
          var ev = asn1.fromDer(e.value);
          var b2 = 0;
          if (ev.value.length > 1) {
            b2 = ev.value.charCodeAt(1);
          }
          e.client = (b2 & 128) === 128;
          e.server = (b2 & 64) === 64;
          e.email = (b2 & 32) === 32;
          e.objsign = (b2 & 16) === 16;
          e.reserved = (b2 & 8) === 8;
          e.sslCA = (b2 & 4) === 4;
          e.emailCA = (b2 & 2) === 2;
          e.objCA = (b2 & 1) === 1;
        } else if (e.name === "subjectAltName" || e.name === "issuerAltName") {
          e.altNames = [];
          var gn;
          var ev = asn1.fromDer(e.value);
          for (var n = 0; n < ev.value.length; ++n) {
            gn = ev.value[n];
            var altName = {
              type: gn.type,
              value: gn.value
            };
            e.altNames.push(altName);
            switch (gn.type) {
              case 1:
              case 2:
              case 6:
                break;
              case 7:
                altName.ip = forge.util.bytesToIP(gn.value);
                break;
              case 8:
                altName.oid = asn1.derToOid(gn.value);
                break;
              default:
            }
          }
        } else if (e.name === "subjectKeyIdentifier") {
          var ev = asn1.fromDer(e.value);
          e.subjectKeyIdentifier = forge.util.bytesToHex(ev.value);
        }
      }
      return e;
    };
    pki.certificationRequestFromAsn1 = function(obj, computeHash) {
      var capture = {};
      var errors = [];
      if (!asn1.validate(obj, certificationRequestValidator, capture, errors)) {
        var error = new Error("Cannot read PKCS#10 certificate request. ASN.1 object is not a PKCS#10 CertificationRequest.");
        error.errors = errors;
        throw error;
      }
      var oid = asn1.derToOid(capture.publicKeyOid);
      if (oid !== pki.oids.rsaEncryption) {
        throw new Error("Cannot read public key. OID is not RSA.");
      }
      var csr = pki.createCertificationRequest();
      csr.version = capture.csrVersion ? capture.csrVersion.charCodeAt(0) : 0;
      csr.signatureOid = forge.asn1.derToOid(capture.csrSignatureOid);
      csr.signatureParameters = _readSignatureParameters(
        csr.signatureOid,
        capture.csrSignatureParams,
        true
      );
      csr.siginfo.algorithmOid = forge.asn1.derToOid(capture.csrSignatureOid);
      csr.siginfo.parameters = _readSignatureParameters(
        csr.siginfo.algorithmOid,
        capture.csrSignatureParams,
        false
      );
      csr.signature = capture.csrSignature;
      csr.certificationRequestInfo = capture.certificationRequestInfo;
      if (computeHash) {
        csr.md = _createSignatureDigest({
          signatureOid: csr.signatureOid,
          type: "certification request"
        });
        var bytes = asn1.toDer(csr.certificationRequestInfo);
        csr.md.update(bytes.getBytes());
      }
      var smd = forge.md.sha1.create();
      csr.subject.getField = function(sn) {
        return _getAttribute(csr.subject, sn);
      };
      csr.subject.addField = function(attr) {
        _fillMissingFields([attr]);
        csr.subject.attributes.push(attr);
      };
      csr.subject.attributes = pki.RDNAttributesAsArray(
        capture.certificationRequestInfoSubject,
        smd
      );
      csr.subject.hash = smd.digest().toHex();
      csr.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);
      csr.getAttribute = function(sn) {
        return _getAttribute(csr, sn);
      };
      csr.addAttribute = function(attr) {
        _fillMissingFields([attr]);
        csr.attributes.push(attr);
      };
      csr.attributes = pki.CRIAttributesAsArray(
        capture.certificationRequestInfoAttributes || []
      );
      return csr;
    };
    pki.createCertificationRequest = function() {
      var csr = {};
      csr.version = 0;
      csr.signatureOid = null;
      csr.signature = null;
      csr.siginfo = {};
      csr.siginfo.algorithmOid = null;
      csr.subject = {};
      csr.subject.getField = function(sn) {
        return _getAttribute(csr.subject, sn);
      };
      csr.subject.addField = function(attr) {
        _fillMissingFields([attr]);
        csr.subject.attributes.push(attr);
      };
      csr.subject.attributes = [];
      csr.subject.hash = null;
      csr.publicKey = null;
      csr.attributes = [];
      csr.getAttribute = function(sn) {
        return _getAttribute(csr, sn);
      };
      csr.addAttribute = function(attr) {
        _fillMissingFields([attr]);
        csr.attributes.push(attr);
      };
      csr.md = null;
      csr.setSubject = function(attrs) {
        _fillMissingFields(attrs);
        csr.subject.attributes = attrs;
        csr.subject.hash = null;
      };
      csr.setAttributes = function(attrs) {
        _fillMissingFields(attrs);
        csr.attributes = attrs;
      };
      csr.sign = function(key, md) {
        csr.md = md || forge.md.sha1.create();
        var algorithmOid = oids[csr.md.algorithm + "WithRSAEncryption"];
        if (!algorithmOid) {
          var error = new Error("Could not compute certification request digest. Unknown message digest algorithm OID.");
          error.algorithm = csr.md.algorithm;
          throw error;
        }
        csr.signatureOid = csr.siginfo.algorithmOid = algorithmOid;
        csr.certificationRequestInfo = pki.getCertificationRequestInfo(csr);
        var bytes = asn1.toDer(csr.certificationRequestInfo);
        csr.md.update(bytes.getBytes());
        csr.signature = key.sign(csr.md);
      };
      csr.verify = function() {
        var rval = false;
        var md = csr.md;
        if (md === null) {
          md = _createSignatureDigest({
            signatureOid: csr.signatureOid,
            type: "certification request"
          });
          var cri = csr.certificationRequestInfo || pki.getCertificationRequestInfo(csr);
          var bytes = asn1.toDer(cri);
          md.update(bytes.getBytes());
        }
        if (md !== null) {
          rval = _verifySignature({
            certificate: csr,
            md,
            signature: csr.signature
          });
        }
        return rval;
      };
      return csr;
    };
    function _dnToAsn1(obj) {
      var rval = asn1.create(
        asn1.Class.UNIVERSAL,
        asn1.Type.SEQUENCE,
        true,
        []
      );
      var attr, set;
      var attrs = obj.attributes;
      for (var i = 0; i < attrs.length; ++i) {
        attr = attrs[i];
        var value = attr.value;
        var valueTagClass = asn1.Type.PRINTABLESTRING;
        if ("valueTagClass" in attr) {
          valueTagClass = attr.valueTagClass;
          if (valueTagClass === asn1.Type.UTF8) {
            value = forge.util.encodeUtf8(value);
          }
        }
        set = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // AttributeType
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(attr.type).getBytes()
            ),
            // AttributeValue
            asn1.create(asn1.Class.UNIVERSAL, valueTagClass, false, value)
          ])
        ]);
        rval.value.push(set);
      }
      return rval;
    }
    function _fillMissingFields(attrs) {
      var attr;
      for (var i = 0; i < attrs.length; ++i) {
        attr = attrs[i];
        if (typeof attr.name === "undefined") {
          if (attr.type && attr.type in pki.oids) {
            attr.name = pki.oids[attr.type];
          } else if (attr.shortName && attr.shortName in _shortNames) {
            attr.name = pki.oids[_shortNames[attr.shortName]];
          }
        }
        if (typeof attr.type === "undefined") {
          if (attr.name && attr.name in pki.oids) {
            attr.type = pki.oids[attr.name];
          } else {
            var error = new Error("Attribute type not specified.");
            error.attribute = attr;
            throw error;
          }
        }
        if (typeof attr.shortName === "undefined") {
          if (attr.name && attr.name in _shortNames) {
            attr.shortName = _shortNames[attr.name];
          }
        }
        if (attr.type === oids.extensionRequest) {
          attr.valueConstructed = true;
          attr.valueTagClass = asn1.Type.SEQUENCE;
          if (!attr.value && attr.extensions) {
            attr.value = [];
            for (var ei = 0; ei < attr.extensions.length; ++ei) {
              attr.value.push(pki.certificateExtensionToAsn1(
                _fillMissingExtensionFields(attr.extensions[ei])
              ));
            }
          }
        }
        if (typeof attr.value === "undefined") {
          var error = new Error("Attribute value not specified.");
          error.attribute = attr;
          throw error;
        }
      }
    }
    function _fillMissingExtensionFields(e, options) {
      options = options || {};
      if (typeof e.name === "undefined") {
        if (e.id && e.id in pki.oids) {
          e.name = pki.oids[e.id];
        }
      }
      if (typeof e.id === "undefined") {
        if (e.name && e.name in pki.oids) {
          e.id = pki.oids[e.name];
        } else {
          var error = new Error("Extension ID not specified.");
          error.extension = e;
          throw error;
        }
      }
      if (typeof e.value !== "undefined") {
        return e;
      }
      if (e.name === "keyUsage") {
        var unused = 0;
        var b2 = 0;
        var b3 = 0;
        if (e.digitalSignature) {
          b2 |= 128;
          unused = 7;
        }
        if (e.nonRepudiation) {
          b2 |= 64;
          unused = 6;
        }
        if (e.keyEncipherment) {
          b2 |= 32;
          unused = 5;
        }
        if (e.dataEncipherment) {
          b2 |= 16;
          unused = 4;
        }
        if (e.keyAgreement) {
          b2 |= 8;
          unused = 3;
        }
        if (e.keyCertSign) {
          b2 |= 4;
          unused = 2;
        }
        if (e.cRLSign) {
          b2 |= 2;
          unused = 1;
        }
        if (e.encipherOnly) {
          b2 |= 1;
          unused = 0;
        }
        if (e.decipherOnly) {
          b3 |= 128;
          unused = 7;
        }
        var value = String.fromCharCode(unused);
        if (b3 !== 0) {
          value += String.fromCharCode(b2) + String.fromCharCode(b3);
        } else if (b2 !== 0) {
          value += String.fromCharCode(b2);
        }
        e.value = asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.BITSTRING,
          false,
          value
        );
      } else if (e.name === "basicConstraints") {
        e.value = asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.SEQUENCE,
          true,
          []
        );
        if (e.cA) {
          e.value.value.push(asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.BOOLEAN,
            false,
            String.fromCharCode(255)
          ));
        }
        if ("pathLenConstraint" in e) {
          e.value.value.push(asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.INTEGER,
            false,
            asn1.integerToDer(e.pathLenConstraint).getBytes()
          ));
        }
      } else if (e.name === "extKeyUsage") {
        e.value = asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.SEQUENCE,
          true,
          []
        );
        var seq = e.value.value;
        for (var key in e) {
          if (e[key] !== true) {
            continue;
          }
          if (key in oids) {
            seq.push(asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(oids[key]).getBytes()
            ));
          } else if (key.indexOf(".") !== -1) {
            seq.push(asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(key).getBytes()
            ));
          }
        }
      } else if (e.name === "nsCertType") {
        var unused = 0;
        var b2 = 0;
        if (e.client) {
          b2 |= 128;
          unused = 7;
        }
        if (e.server) {
          b2 |= 64;
          unused = 6;
        }
        if (e.email) {
          b2 |= 32;
          unused = 5;
        }
        if (e.objsign) {
          b2 |= 16;
          unused = 4;
        }
        if (e.reserved) {
          b2 |= 8;
          unused = 3;
        }
        if (e.sslCA) {
          b2 |= 4;
          unused = 2;
        }
        if (e.emailCA) {
          b2 |= 2;
          unused = 1;
        }
        if (e.objCA) {
          b2 |= 1;
          unused = 0;
        }
        var value = String.fromCharCode(unused);
        if (b2 !== 0) {
          value += String.fromCharCode(b2);
        }
        e.value = asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.BITSTRING,
          false,
          value
        );
      } else if (e.name === "subjectAltName" || e.name === "issuerAltName") {
        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
        var altName;
        for (var n = 0; n < e.altNames.length; ++n) {
          altName = e.altNames[n];
          var value = altName.value;
          if (altName.type === 7 && altName.ip) {
            value = forge.util.bytesFromIP(altName.ip);
            if (value === null) {
              var error = new Error(
                'Extension "ip" value is not a valid IPv4 or IPv6 address.'
              );
              error.extension = e;
              throw error;
            }
          } else if (altName.type === 8) {
            if (altName.oid) {
              value = asn1.oidToDer(asn1.oidToDer(altName.oid));
            } else {
              value = asn1.oidToDer(value);
            }
          }
          e.value.value.push(asn1.create(
            asn1.Class.CONTEXT_SPECIFIC,
            altName.type,
            false,
            value
          ));
        }
      } else if (e.name === "nsComment" && options.cert) {
        if (!/^[\x00-\x7F]*$/.test(e.comment) || e.comment.length < 1 || e.comment.length > 128) {
          throw new Error('Invalid "nsComment" content.');
        }
        e.value = asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.IA5STRING,
          false,
          e.comment
        );
      } else if (e.name === "subjectKeyIdentifier" && options.cert) {
        var ski = options.cert.generateSubjectKeyIdentifier();
        e.subjectKeyIdentifier = ski.toHex();
        e.value = asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.OCTETSTRING,
          false,
          ski.getBytes()
        );
      } else if (e.name === "authorityKeyIdentifier" && options.cert) {
        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
        var seq = e.value.value;
        if (e.keyIdentifier) {
          var keyIdentifier = e.keyIdentifier === true ? options.cert.generateSubjectKeyIdentifier().getBytes() : e.keyIdentifier;
          seq.push(
            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, false, keyIdentifier)
          );
        }
        if (e.authorityCertIssuer) {
          var authorityCertIssuer = [
            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 4, true, [
              _dnToAsn1(e.authorityCertIssuer === true ? options.cert.issuer : e.authorityCertIssuer)
            ])
          ];
          seq.push(
            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, authorityCertIssuer)
          );
        }
        if (e.serialNumber) {
          var serialNumber = forge.util.hexToBytes(e.serialNumber === true ? options.cert.serialNumber : e.serialNumber);
          seq.push(
            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, false, serialNumber)
          );
        }
      } else if (e.name === "cRLDistributionPoints") {
        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
        var seq = e.value.value;
        var subSeq = asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.SEQUENCE,
          true,
          []
        );
        var fullNameGeneralNames = asn1.create(
          asn1.Class.CONTEXT_SPECIFIC,
          0,
          true,
          []
        );
        var altName;
        for (var n = 0; n < e.altNames.length; ++n) {
          altName = e.altNames[n];
          var value = altName.value;
          if (altName.type === 7 && altName.ip) {
            value = forge.util.bytesFromIP(altName.ip);
            if (value === null) {
              var error = new Error(
                'Extension "ip" value is not a valid IPv4 or IPv6 address.'
              );
              error.extension = e;
              throw error;
            }
          } else if (altName.type === 8) {
            if (altName.oid) {
              value = asn1.oidToDer(asn1.oidToDer(altName.oid));
            } else {
              value = asn1.oidToDer(value);
            }
          }
          fullNameGeneralNames.value.push(asn1.create(
            asn1.Class.CONTEXT_SPECIFIC,
            altName.type,
            false,
            value
          ));
        }
        subSeq.value.push(asn1.create(
          asn1.Class.CONTEXT_SPECIFIC,
          0,
          true,
          [fullNameGeneralNames]
        ));
        seq.push(subSeq);
      }
      if (typeof e.value === "undefined") {
        var error = new Error("Extension value not specified.");
        error.extension = e;
        throw error;
      }
      return e;
    }
    function _signatureParametersToAsn1(oid, params) {
      switch (oid) {
        case oids["RSASSA-PSS"]:
          var parts = [];
          if (params.hash.algorithmOid !== void 0) {
            parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1.oidToDer(params.hash.algorithmOid).getBytes()
                ),
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
              ])
            ]));
          }
          if (params.mgf.algorithmOid !== void 0) {
            parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1.oidToDer(params.mgf.algorithmOid).getBytes()
                ),
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.OID,
                    false,
                    asn1.oidToDer(params.mgf.hash.algorithmOid).getBytes()
                  ),
                  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
                ])
              ])
            ]));
          }
          if (params.saltLength !== void 0) {
            parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.INTEGER,
                false,
                asn1.integerToDer(params.saltLength).getBytes()
              )
            ]));
          }
          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, parts);
        default:
          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "");
      }
    }
    function _CRIAttributesToAsn1(csr) {
      var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []);
      if (csr.attributes.length === 0) {
        return rval;
      }
      var attrs = csr.attributes;
      for (var i = 0; i < attrs.length; ++i) {
        var attr = attrs[i];
        var value = attr.value;
        var valueTagClass = asn1.Type.UTF8;
        if ("valueTagClass" in attr) {
          valueTagClass = attr.valueTagClass;
        }
        if (valueTagClass === asn1.Type.UTF8) {
          value = forge.util.encodeUtf8(value);
        }
        var valueConstructed = false;
        if ("valueConstructed" in attr) {
          valueConstructed = attr.valueConstructed;
        }
        var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // AttributeType
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OID,
            false,
            asn1.oidToDer(attr.type).getBytes()
          ),
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
            // AttributeValue
            asn1.create(
              asn1.Class.UNIVERSAL,
              valueTagClass,
              valueConstructed,
              value
            )
          ])
        ]);
        rval.value.push(seq);
      }
      return rval;
    }
    var jan_1_1950 = /* @__PURE__ */ new Date("1950-01-01T00:00:00Z");
    var jan_1_2050 = /* @__PURE__ */ new Date("2050-01-01T00:00:00Z");
    function _dateToAsn1(date) {
      if (date >= jan_1_1950 && date < jan_1_2050) {
        return asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.UTCTIME,
          false,
          asn1.dateToUtcTime(date)
        );
      } else {
        return asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.GENERALIZEDTIME,
          false,
          asn1.dateToGeneralizedTime(date)
        );
      }
    }
    pki.getTBSCertificate = function(cert) {
      var notBefore = _dateToAsn1(cert.validity.notBefore);
      var notAfter = _dateToAsn1(cert.validity.notAfter);
      var tbs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // version
        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
          // integer
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.INTEGER,
            false,
            asn1.integerToDer(cert.version).getBytes()
          )
        ]),
        // serialNumber
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          forge.util.hexToBytes(cert.serialNumber)
        ),
        // signature
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // algorithm
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OID,
            false,
            asn1.oidToDer(cert.siginfo.algorithmOid).getBytes()
          ),
          // parameters
          _signatureParametersToAsn1(
            cert.siginfo.algorithmOid,
            cert.siginfo.parameters
          )
        ]),
        // issuer
        _dnToAsn1(cert.issuer),
        // validity
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          notBefore,
          notAfter
        ]),
        // subject
        _dnToAsn1(cert.subject),
        // SubjectPublicKeyInfo
        pki.publicKeyToAsn1(cert.publicKey)
      ]);
      if (cert.issuer.uniqueId) {
        tbs.value.push(
          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.BITSTRING,
              false,
              // TODO: support arbitrary bit length ids
              String.fromCharCode(0) + cert.issuer.uniqueId
            )
          ])
        );
      }
      if (cert.subject.uniqueId) {
        tbs.value.push(
          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.BITSTRING,
              false,
              // TODO: support arbitrary bit length ids
              String.fromCharCode(0) + cert.subject.uniqueId
            )
          ])
        );
      }
      if (cert.extensions.length > 0) {
        tbs.value.push(pki.certificateExtensionsToAsn1(cert.extensions));
      }
      return tbs;
    };
    pki.getCertificationRequestInfo = function(csr) {
      var cri = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // version
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          asn1.integerToDer(csr.version).getBytes()
        ),
        // subject
        _dnToAsn1(csr.subject),
        // SubjectPublicKeyInfo
        pki.publicKeyToAsn1(csr.publicKey),
        // attributes
        _CRIAttributesToAsn1(csr)
      ]);
      return cri;
    };
    pki.distinguishedNameToAsn1 = function(dn) {
      return _dnToAsn1(dn);
    };
    pki.certificateToAsn1 = function(cert) {
      var tbsCertificate = cert.tbsCertificate || pki.getTBSCertificate(cert);
      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // TBSCertificate
        tbsCertificate,
        // AlgorithmIdentifier (signature algorithm)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // algorithm
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OID,
            false,
            asn1.oidToDer(cert.signatureOid).getBytes()
          ),
          // parameters
          _signatureParametersToAsn1(cert.signatureOid, cert.signatureParameters)
        ]),
        // SignatureValue
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.BITSTRING,
          false,
          String.fromCharCode(0) + cert.signature
        )
      ]);
    };
    pki.certificateExtensionsToAsn1 = function(exts) {
      var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 3, true, []);
      var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
      rval.value.push(seq);
      for (var i = 0; i < exts.length; ++i) {
        seq.value.push(pki.certificateExtensionToAsn1(exts[i]));
      }
      return rval;
    };
    pki.certificateExtensionToAsn1 = function(ext) {
      var extseq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
      extseq.value.push(asn1.create(
        asn1.Class.UNIVERSAL,
        asn1.Type.OID,
        false,
        asn1.oidToDer(ext.id).getBytes()
      ));
      if (ext.critical) {
        extseq.value.push(asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.BOOLEAN,
          false,
          String.fromCharCode(255)
        ));
      }
      var value = ext.value;
      if (typeof ext.value !== "string") {
        value = asn1.toDer(value).getBytes();
      }
      extseq.value.push(asn1.create(
        asn1.Class.UNIVERSAL,
        asn1.Type.OCTETSTRING,
        false,
        value
      ));
      return extseq;
    };
    pki.certificationRequestToAsn1 = function(csr) {
      var cri = csr.certificationRequestInfo || pki.getCertificationRequestInfo(csr);
      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // CertificationRequestInfo
        cri,
        // AlgorithmIdentifier (signature algorithm)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // algorithm
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OID,
            false,
            asn1.oidToDer(csr.signatureOid).getBytes()
          ),
          // parameters
          _signatureParametersToAsn1(csr.signatureOid, csr.signatureParameters)
        ]),
        // signature
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.BITSTRING,
          false,
          String.fromCharCode(0) + csr.signature
        )
      ]);
    };
    pki.createCaStore = function(certs) {
      var caStore = {
        // stored certificates
        certs: {}
      };
      caStore.getIssuer = function(cert2) {
        var rval = getBySubject(cert2.issuer);
        return rval;
      };
      caStore.addCertificate = function(cert2) {
        if (typeof cert2 === "string") {
          cert2 = forge.pki.certificateFromPem(cert2);
        }
        ensureSubjectHasHash(cert2.subject);
        if (!caStore.hasCertificate(cert2)) {
          if (cert2.subject.hash in caStore.certs) {
            var tmp = caStore.certs[cert2.subject.hash];
            if (!forge.util.isArray(tmp)) {
              tmp = [tmp];
            }
            tmp.push(cert2);
            caStore.certs[cert2.subject.hash] = tmp;
          } else {
            caStore.certs[cert2.subject.hash] = cert2;
          }
        }
      };
      caStore.hasCertificate = function(cert2) {
        if (typeof cert2 === "string") {
          cert2 = forge.pki.certificateFromPem(cert2);
        }
        var match = getBySubject(cert2.subject);
        if (!match) {
          return false;
        }
        if (!forge.util.isArray(match)) {
          match = [match];
        }
        var der1 = asn1.toDer(pki.certificateToAsn1(cert2)).getBytes();
        for (var i2 = 0; i2 < match.length; ++i2) {
          var der2 = asn1.toDer(pki.certificateToAsn1(match[i2])).getBytes();
          if (der1 === der2) {
            return true;
          }
        }
        return false;
      };
      caStore.listAllCertificates = function() {
        var certList = [];
        for (var hash in caStore.certs) {
          if (caStore.certs.hasOwnProperty(hash)) {
            var value = caStore.certs[hash];
            if (!forge.util.isArray(value)) {
              certList.push(value);
            } else {
              for (var i2 = 0; i2 < value.length; ++i2) {
                certList.push(value[i2]);
              }
            }
          }
        }
        return certList;
      };
      caStore.removeCertificate = function(cert2) {
        var result;
        if (typeof cert2 === "string") {
          cert2 = forge.pki.certificateFromPem(cert2);
        }
        ensureSubjectHasHash(cert2.subject);
        if (!caStore.hasCertificate(cert2)) {
          return null;
        }
        var match = getBySubject(cert2.subject);
        if (!forge.util.isArray(match)) {
          result = caStore.certs[cert2.subject.hash];
          delete caStore.certs[cert2.subject.hash];
          return result;
        }
        var der1 = asn1.toDer(pki.certificateToAsn1(cert2)).getBytes();
        for (var i2 = 0; i2 < match.length; ++i2) {
          var der2 = asn1.toDer(pki.certificateToAsn1(match[i2])).getBytes();
          if (der1 === der2) {
            result = match[i2];
            match.splice(i2, 1);
          }
        }
        if (match.length === 0) {
          delete caStore.certs[cert2.subject.hash];
        }
        return result;
      };
      function getBySubject(subject) {
        ensureSubjectHasHash(subject);
        return caStore.certs[subject.hash] || null;
      }
      function ensureSubjectHasHash(subject) {
        if (!subject.hash) {
          var md = forge.md.sha1.create();
          subject.attributes = pki.RDNAttributesAsArray(_dnToAsn1(subject), md);
          subject.hash = md.digest().toHex();
        }
      }
      if (certs) {
        for (var i = 0; i < certs.length; ++i) {
          var cert = certs[i];
          caStore.addCertificate(cert);
        }
      }
      return caStore;
    };
    pki.certificateError = {
      bad_certificate: "forge.pki.BadCertificate",
      unsupported_certificate: "forge.pki.UnsupportedCertificate",
      certificate_revoked: "forge.pki.CertificateRevoked",
      certificate_expired: "forge.pki.CertificateExpired",
      certificate_unknown: "forge.pki.CertificateUnknown",
      unknown_ca: "forge.pki.UnknownCertificateAuthority"
    };
    pki.verifyCertificateChain = function(caStore, chain, options) {
      if (typeof options === "function") {
        options = { verify: options };
      }
      options = options || {};
      chain = chain.slice(0);
      var certs = chain.slice(0);
      var validityCheckDate = options.validityCheckDate;
      if (typeof validityCheckDate === "undefined") {
        validityCheckDate = /* @__PURE__ */ new Date();
      }
      var first = true;
      var error = null;
      var depth = 0;
      do {
        var cert = chain.shift();
        var parent = null;
        var selfSigned = false;
        if (validityCheckDate) {
          if (validityCheckDate < cert.validity.notBefore || validityCheckDate > cert.validity.notAfter) {
            error = {
              message: "Certificate is not valid yet or has expired.",
              error: pki.certificateError.certificate_expired,
              notBefore: cert.validity.notBefore,
              notAfter: cert.validity.notAfter,
              // TODO: we might want to reconsider renaming 'now' to
              // 'validityCheckDate' should this API be changed in the future.
              now: validityCheckDate
            };
          }
        }
        if (error === null) {
          parent = chain[0] || caStore.getIssuer(cert);
          if (parent === null) {
            if (cert.isIssuer(cert)) {
              selfSigned = true;
              parent = cert;
            }
          }
          if (parent) {
            var parents = parent;
            if (!forge.util.isArray(parents)) {
              parents = [parents];
            }
            var verified = false;
            while (!verified && parents.length > 0) {
              parent = parents.shift();
              try {
                verified = parent.verify(cert);
              } catch (ex) {
              }
            }
            if (!verified) {
              error = {
                message: "Certificate signature is invalid.",
                error: pki.certificateError.bad_certificate
              };
            }
          }
          if (error === null && (!parent || selfSigned) && !caStore.hasCertificate(cert)) {
            error = {
              message: "Certificate is not trusted.",
              error: pki.certificateError.unknown_ca
            };
          }
        }
        if (error === null && parent && !cert.isIssuer(parent)) {
          error = {
            message: "Certificate issuer is invalid.",
            error: pki.certificateError.bad_certificate
          };
        }
        if (error === null) {
          var se = {
            keyUsage: true,
            basicConstraints: true
          };
          for (var i = 0; error === null && i < cert.extensions.length; ++i) {
            var ext = cert.extensions[i];
            if (ext.critical && !(ext.name in se)) {
              error = {
                message: "Certificate has an unsupported critical extension.",
                error: pki.certificateError.unsupported_certificate
              };
            }
          }
        }
        if (error === null && (!first || chain.length === 0 && (!parent || selfSigned))) {
          var bcExt = cert.getExtension("basicConstraints");
          var keyUsageExt = cert.getExtension("keyUsage");
          if (keyUsageExt !== null) {
            if (!keyUsageExt.keyCertSign || bcExt === null) {
              error = {
                message: "Certificate keyUsage or basicConstraints conflict or indicate that the certificate is not a CA. If the certificate is the only one in the chain or isn't the first then the certificate must be a valid CA.",
                error: pki.certificateError.bad_certificate
              };
            }
          }
          if (error === null && bcExt !== null && !bcExt.cA) {
            error = {
              message: "Certificate basicConstraints indicates the certificate is not a CA.",
              error: pki.certificateError.bad_certificate
            };
          }
          if (error === null && keyUsageExt !== null && "pathLenConstraint" in bcExt) {
            var pathLen = depth - 1;
            if (pathLen > bcExt.pathLenConstraint) {
              error = {
                message: "Certificate basicConstraints pathLenConstraint violated.",
                error: pki.certificateError.bad_certificate
              };
            }
          }
        }
        var vfd = error === null ? true : error.error;
        var ret = options.verify ? options.verify(vfd, depth, certs) : vfd;
        if (ret === true) {
          error = null;
        } else {
          if (vfd === true) {
            error = {
              message: "The application rejected the certificate.",
              error: pki.certificateError.bad_certificate
            };
          }
          if (ret || ret === 0) {
            if (typeof ret === "object" && !forge.util.isArray(ret)) {
              if (ret.message) {
                error.message = ret.message;
              }
              if (ret.error) {
                error.error = ret.error;
              }
            } else if (typeof ret === "string") {
              error.error = ret;
            }
          }
          throw error;
        }
        first = false;
        ++depth;
      } while (chain.length > 0);
      return true;
    };
  }
});

// node_modules/node-forge/lib/pkcs12.js
var require_pkcs12 = __commonJS({
  "node_modules/node-forge/lib/pkcs12.js"(exports, module2) {
    var forge = require_forge();
    require_asn1();
    require_hmac();
    require_oids();
    require_pkcs7asn1();
    require_pbe();
    require_random();
    require_rsa();
    require_sha1();
    require_util();
    require_x509();
    var asn1 = forge.asn1;
    var pki = forge.pki;
    var p12 = module2.exports = forge.pkcs12 = forge.pkcs12 || {};
    var contentInfoValidator = {
      name: "ContentInfo",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      // a ContentInfo
      constructed: true,
      value: [{
        name: "ContentInfo.contentType",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: "contentType"
      }, {
        name: "ContentInfo.content",
        tagClass: asn1.Class.CONTEXT_SPECIFIC,
        constructed: true,
        captureAsn1: "content"
      }]
    };
    var pfxValidator = {
      name: "PFX",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [
        {
          name: "PFX.version",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.INTEGER,
          constructed: false,
          capture: "version"
        },
        contentInfoValidator,
        {
          name: "PFX.macData",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          optional: true,
          captureAsn1: "mac",
          value: [{
            name: "PFX.macData.mac",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            // DigestInfo
            constructed: true,
            value: [{
              name: "PFX.macData.mac.digestAlgorithm",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              // DigestAlgorithmIdentifier
              constructed: true,
              value: [{
                name: "PFX.macData.mac.digestAlgorithm.algorithm",
                tagClass: asn1.Class.UNIVERSAL,
                type: asn1.Type.OID,
                constructed: false,
                capture: "macAlgorithm"
              }, {
                name: "PFX.macData.mac.digestAlgorithm.parameters",
                tagClass: asn1.Class.UNIVERSAL,
                captureAsn1: "macAlgorithmParameters"
              }]
            }, {
              name: "PFX.macData.mac.digest",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OCTETSTRING,
              constructed: false,
              capture: "macDigest"
            }]
          }, {
            name: "PFX.macData.macSalt",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OCTETSTRING,
            constructed: false,
            capture: "macSalt"
          }, {
            name: "PFX.macData.iterations",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.INTEGER,
            constructed: false,
            optional: true,
            capture: "macIterations"
          }]
        }
      ]
    };
    var safeBagValidator = {
      name: "SafeBag",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "SafeBag.bagId",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: "bagId"
      }, {
        name: "SafeBag.bagValue",
        tagClass: asn1.Class.CONTEXT_SPECIFIC,
        constructed: true,
        captureAsn1: "bagValue"
      }, {
        name: "SafeBag.bagAttributes",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SET,
        constructed: true,
        optional: true,
        capture: "bagAttributes"
      }]
    };
    var attributeValidator = {
      name: "Attribute",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "Attribute.attrId",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: "oid"
      }, {
        name: "Attribute.attrValues",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SET,
        constructed: true,
        capture: "values"
      }]
    };
    var certBagValidator = {
      name: "CertBag",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: "CertBag.certId",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: "certId"
      }, {
        name: "CertBag.certValue",
        tagClass: asn1.Class.CONTEXT_SPECIFIC,
        constructed: true,
        /* So far we only support X.509 certificates (which are wrapped in
           an OCTET STRING, hence hard code that here). */
        value: [{
          name: "CertBag.certValue[0]",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Class.OCTETSTRING,
          constructed: false,
          capture: "cert"
        }]
      }]
    };
    function _getBagsByAttribute(safeContents, attrName, attrValue, bagType) {
      var result = [];
      for (var i = 0; i < safeContents.length; i++) {
        for (var j = 0; j < safeContents[i].safeBags.length; j++) {
          var bag = safeContents[i].safeBags[j];
          if (bagType !== void 0 && bag.type !== bagType) {
            continue;
          }
          if (attrName === null) {
            result.push(bag);
            continue;
          }
          if (bag.attributes[attrName] !== void 0 && bag.attributes[attrName].indexOf(attrValue) >= 0) {
            result.push(bag);
          }
        }
      }
      return result;
    }
    p12.pkcs12FromAsn1 = function(obj, strict, password) {
      if (typeof strict === "string") {
        password = strict;
        strict = true;
      } else if (strict === void 0) {
        strict = true;
      }
      var capture = {};
      var errors = [];
      if (!asn1.validate(obj, pfxValidator, capture, errors)) {
        var error = new Error("Cannot read PKCS#12 PFX. ASN.1 object is not an PKCS#12 PFX.");
        error.errors = error;
        throw error;
      }
      var pfx = {
        version: capture.version.charCodeAt(0),
        safeContents: [],
        /**
         * Gets bags with matching attributes.
         *
         * @param filter the attributes to filter by:
         *          [localKeyId] the localKeyId to search for.
         *          [localKeyIdHex] the localKeyId in hex to search for.
         *          [friendlyName] the friendly name to search for.
         *          [bagType] bag type to narrow each attribute search by.
         *
         * @return a map of attribute type to an array of matching bags or, if no
         *           attribute was given but a bag type, the map key will be the
         *           bag type.
         */
        getBags: function(filter) {
          var rval = {};
          var localKeyId;
          if ("localKeyId" in filter) {
            localKeyId = filter.localKeyId;
          } else if ("localKeyIdHex" in filter) {
            localKeyId = forge.util.hexToBytes(filter.localKeyIdHex);
          }
          if (localKeyId === void 0 && !("friendlyName" in filter) && "bagType" in filter) {
            rval[filter.bagType] = _getBagsByAttribute(
              pfx.safeContents,
              null,
              null,
              filter.bagType
            );
          }
          if (localKeyId !== void 0) {
            rval.localKeyId = _getBagsByAttribute(
              pfx.safeContents,
              "localKeyId",
              localKeyId,
              filter.bagType
            );
          }
          if ("friendlyName" in filter) {
            rval.friendlyName = _getBagsByAttribute(
              pfx.safeContents,
              "friendlyName",
              filter.friendlyName,
              filter.bagType
            );
          }
          return rval;
        },
        /**
         * DEPRECATED: use getBags() instead.
         *
         * Get bags with matching friendlyName attribute.
         *
         * @param friendlyName the friendly name to search for.
         * @param [bagType] bag type to narrow search by.
         *
         * @return an array of bags with matching friendlyName attribute.
         */
        getBagsByFriendlyName: function(friendlyName, bagType) {
          return _getBagsByAttribute(
            pfx.safeContents,
            "friendlyName",
            friendlyName,
            bagType
          );
        },
        /**
         * DEPRECATED: use getBags() instead.
         *
         * Get bags with matching localKeyId attribute.
         *
         * @param localKeyId the localKeyId to search for.
         * @param [bagType] bag type to narrow search by.
         *
         * @return an array of bags with matching localKeyId attribute.
         */
        getBagsByLocalKeyId: function(localKeyId, bagType) {
          return _getBagsByAttribute(
            pfx.safeContents,
            "localKeyId",
            localKeyId,
            bagType
          );
        }
      };
      if (capture.version.charCodeAt(0) !== 3) {
        var error = new Error("PKCS#12 PFX of version other than 3 not supported.");
        error.version = capture.version.charCodeAt(0);
        throw error;
      }
      if (asn1.derToOid(capture.contentType) !== pki.oids.data) {
        var error = new Error("Only PKCS#12 PFX in password integrity mode supported.");
        error.oid = asn1.derToOid(capture.contentType);
        throw error;
      }
      var data = capture.content.value[0];
      if (data.tagClass !== asn1.Class.UNIVERSAL || data.type !== asn1.Type.OCTETSTRING) {
        throw new Error("PKCS#12 authSafe content data is not an OCTET STRING.");
      }
      data = _decodePkcs7Data(data);
      if (capture.mac) {
        var md = null;
        var macKeyBytes = 0;
        var macAlgorithm = asn1.derToOid(capture.macAlgorithm);
        switch (macAlgorithm) {
          case pki.oids.sha1:
            md = forge.md.sha1.create();
            macKeyBytes = 20;
            break;
          case pki.oids.sha256:
            md = forge.md.sha256.create();
            macKeyBytes = 32;
            break;
          case pki.oids.sha384:
            md = forge.md.sha384.create();
            macKeyBytes = 48;
            break;
          case pki.oids.sha512:
            md = forge.md.sha512.create();
            macKeyBytes = 64;
            break;
          case pki.oids.md5:
            md = forge.md.md5.create();
            macKeyBytes = 16;
            break;
        }
        if (md === null) {
          throw new Error("PKCS#12 uses unsupported MAC algorithm: " + macAlgorithm);
        }
        var macSalt = new forge.util.ByteBuffer(capture.macSalt);
        var macIterations = "macIterations" in capture ? parseInt(forge.util.bytesToHex(capture.macIterations), 16) : 1;
        var macKey = p12.generateKey(
          password,
          macSalt,
          3,
          macIterations,
          macKeyBytes,
          md
        );
        var mac = forge.hmac.create();
        mac.start(md, macKey);
        mac.update(data.value);
        var macValue = mac.getMac();
        if (macValue.getBytes() !== capture.macDigest) {
          throw new Error("PKCS#12 MAC could not be verified. Invalid password?");
        }
      }
      _decodeAuthenticatedSafe(pfx, data.value, strict, password);
      return pfx;
    };
    function _decodePkcs7Data(data) {
      if (data.composed || data.constructed) {
        var value = forge.util.createBuffer();
        for (var i = 0; i < data.value.length; ++i) {
          value.putBytes(data.value[i].value);
        }
        data.composed = data.constructed = false;
        data.value = value.getBytes();
      }
      return data;
    }
    function _decodeAuthenticatedSafe(pfx, authSafe, strict, password) {
      authSafe = asn1.fromDer(authSafe, strict);
      if (authSafe.tagClass !== asn1.Class.UNIVERSAL || authSafe.type !== asn1.Type.SEQUENCE || authSafe.constructed !== true) {
        throw new Error("PKCS#12 AuthenticatedSafe expected to be a SEQUENCE OF ContentInfo");
      }
      for (var i = 0; i < authSafe.value.length; i++) {
        var contentInfo = authSafe.value[i];
        var capture = {};
        var errors = [];
        if (!asn1.validate(contentInfo, contentInfoValidator, capture, errors)) {
          var error = new Error("Cannot read ContentInfo.");
          error.errors = errors;
          throw error;
        }
        var obj = {
          encrypted: false
        };
        var safeContents = null;
        var data = capture.content.value[0];
        switch (asn1.derToOid(capture.contentType)) {
          case pki.oids.data:
            if (data.tagClass !== asn1.Class.UNIVERSAL || data.type !== asn1.Type.OCTETSTRING) {
              throw new Error("PKCS#12 SafeContents Data is not an OCTET STRING.");
            }
            safeContents = _decodePkcs7Data(data).value;
            break;
          case pki.oids.encryptedData:
            safeContents = _decryptSafeContents(data, password);
            obj.encrypted = true;
            break;
          default:
            var error = new Error("Unsupported PKCS#12 contentType.");
            error.contentType = asn1.derToOid(capture.contentType);
            throw error;
        }
        obj.safeBags = _decodeSafeContents(safeContents, strict, password);
        pfx.safeContents.push(obj);
      }
    }
    function _decryptSafeContents(data, password) {
      var capture = {};
      var errors = [];
      if (!asn1.validate(
        data,
        forge.pkcs7.asn1.encryptedDataValidator,
        capture,
        errors
      )) {
        var error = new Error("Cannot read EncryptedContentInfo.");
        error.errors = errors;
        throw error;
      }
      var oid = asn1.derToOid(capture.contentType);
      if (oid !== pki.oids.data) {
        var error = new Error(
          "PKCS#12 EncryptedContentInfo ContentType is not Data."
        );
        error.oid = oid;
        throw error;
      }
      oid = asn1.derToOid(capture.encAlgorithm);
      var cipher = pki.pbe.getCipher(oid, capture.encParameter, password);
      var encryptedContentAsn1 = _decodePkcs7Data(capture.encryptedContentAsn1);
      var encrypted = forge.util.createBuffer(encryptedContentAsn1.value);
      cipher.update(encrypted);
      if (!cipher.finish()) {
        throw new Error("Failed to decrypt PKCS#12 SafeContents.");
      }
      return cipher.output.getBytes();
    }
    function _decodeSafeContents(safeContents, strict, password) {
      if (!strict && safeContents.length === 0) {
        return [];
      }
      safeContents = asn1.fromDer(safeContents, strict);
      if (safeContents.tagClass !== asn1.Class.UNIVERSAL || safeContents.type !== asn1.Type.SEQUENCE || safeContents.constructed !== true) {
        throw new Error(
          "PKCS#12 SafeContents expected to be a SEQUENCE OF SafeBag."
        );
      }
      var res = [];
      for (var i = 0; i < safeContents.value.length; i++) {
        var safeBag = safeContents.value[i];
        var capture = {};
        var errors = [];
        if (!asn1.validate(safeBag, safeBagValidator, capture, errors)) {
          var error = new Error("Cannot read SafeBag.");
          error.errors = errors;
          throw error;
        }
        var bag = {
          type: asn1.derToOid(capture.bagId),
          attributes: _decodeBagAttributes(capture.bagAttributes)
        };
        res.push(bag);
        var validator, decoder;
        var bagAsn1 = capture.bagValue.value[0];
        switch (bag.type) {
          case pki.oids.pkcs8ShroudedKeyBag:
            bagAsn1 = pki.decryptPrivateKeyInfo(bagAsn1, password);
            if (bagAsn1 === null) {
              throw new Error(
                "Unable to decrypt PKCS#8 ShroudedKeyBag, wrong password?"
              );
            }
          case pki.oids.keyBag:
            try {
              bag.key = pki.privateKeyFromAsn1(bagAsn1);
            } catch (e) {
              bag.key = null;
              bag.asn1 = bagAsn1;
            }
            continue;
          case pki.oids.certBag:
            validator = certBagValidator;
            decoder = function() {
              if (asn1.derToOid(capture.certId) !== pki.oids.x509Certificate) {
                var error2 = new Error(
                  "Unsupported certificate type, only X.509 supported."
                );
                error2.oid = asn1.derToOid(capture.certId);
                throw error2;
              }
              var certAsn1 = asn1.fromDer(capture.cert, strict);
              try {
                bag.cert = pki.certificateFromAsn1(certAsn1, true);
              } catch (e) {
                bag.cert = null;
                bag.asn1 = certAsn1;
              }
            };
            break;
          default:
            var error = new Error("Unsupported PKCS#12 SafeBag type.");
            error.oid = bag.type;
            throw error;
        }
        if (validator !== void 0 && !asn1.validate(bagAsn1, validator, capture, errors)) {
          var error = new Error("Cannot read PKCS#12 " + validator.name);
          error.errors = errors;
          throw error;
        }
        decoder();
      }
      return res;
    }
    function _decodeBagAttributes(attributes) {
      var decodedAttrs = {};
      if (attributes !== void 0) {
        for (var i = 0; i < attributes.length; ++i) {
          var capture = {};
          var errors = [];
          if (!asn1.validate(attributes[i], attributeValidator, capture, errors)) {
            var error = new Error("Cannot read PKCS#12 BagAttribute.");
            error.errors = errors;
            throw error;
          }
          var oid = asn1.derToOid(capture.oid);
          if (pki.oids[oid] === void 0) {
            continue;
          }
          decodedAttrs[pki.oids[oid]] = [];
          for (var j = 0; j < capture.values.length; ++j) {
            decodedAttrs[pki.oids[oid]].push(capture.values[j].value);
          }
        }
      }
      return decodedAttrs;
    }
    p12.toPkcs12Asn1 = function(key, cert, password, options) {
      options = options || {};
      options.saltSize = options.saltSize || 8;
      options.count = options.count || 2048;
      options.algorithm = options.algorithm || options.encAlgorithm || "aes128";
      if (!("useMac" in options)) {
        options.useMac = true;
      }
      if (!("localKeyId" in options)) {
        options.localKeyId = null;
      }
      if (!("generateLocalKeyId" in options)) {
        options.generateLocalKeyId = true;
      }
      var localKeyId = options.localKeyId;
      var bagAttrs;
      if (localKeyId !== null) {
        localKeyId = forge.util.hexToBytes(localKeyId);
      } else if (options.generateLocalKeyId) {
        if (cert) {
          var pairedCert = forge.util.isArray(cert) ? cert[0] : cert;
          if (typeof pairedCert === "string") {
            pairedCert = pki.certificateFromPem(pairedCert);
          }
          var sha12 = forge.md.sha1.create();
          sha12.update(asn1.toDer(pki.certificateToAsn1(pairedCert)).getBytes());
          localKeyId = sha12.digest().getBytes();
        } else {
          localKeyId = forge.random.getBytes(20);
        }
      }
      var attrs = [];
      if (localKeyId !== null) {
        attrs.push(
          // localKeyID
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // attrId
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(pki.oids.localKeyId).getBytes()
            ),
            // attrValues
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OCTETSTRING,
                false,
                localKeyId
              )
            ])
          ])
        );
      }
      if ("friendlyName" in options) {
        attrs.push(
          // friendlyName
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // attrId
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(pki.oids.friendlyName).getBytes()
            ),
            // attrValues
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.BMPSTRING,
                false,
                options.friendlyName
              )
            ])
          ])
        );
      }
      if (attrs.length > 0) {
        bagAttrs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, attrs);
      }
      var contents = [];
      var chain = [];
      if (cert !== null) {
        if (forge.util.isArray(cert)) {
          chain = cert;
        } else {
          chain = [cert];
        }
      }
      var certSafeBags = [];
      for (var i = 0; i < chain.length; ++i) {
        cert = chain[i];
        if (typeof cert === "string") {
          cert = pki.certificateFromPem(cert);
        }
        var certBagAttrs = i === 0 ? bagAttrs : void 0;
        var certAsn1 = pki.certificateToAsn1(cert);
        var certSafeBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // bagId
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OID,
            false,
            asn1.oidToDer(pki.oids.certBag).getBytes()
          ),
          // bagValue
          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
            // CertBag
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              // certId
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OID,
                false,
                asn1.oidToDer(pki.oids.x509Certificate).getBytes()
              ),
              // certValue (x509Certificate)
              asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OCTETSTRING,
                  false,
                  asn1.toDer(certAsn1).getBytes()
                )
              ])
            ])
          ]),
          // bagAttributes (OPTIONAL)
          certBagAttrs
        ]);
        certSafeBags.push(certSafeBag);
      }
      if (certSafeBags.length > 0) {
        var certSafeContents = asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.SEQUENCE,
          true,
          certSafeBags
        );
        var certCI = (
          // PKCS#7 ContentInfo
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // contentType
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              // OID for the content type is 'data'
              asn1.oidToDer(pki.oids.data).getBytes()
            ),
            // content
            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OCTETSTRING,
                false,
                asn1.toDer(certSafeContents).getBytes()
              )
            ])
          ])
        );
        contents.push(certCI);
      }
      var keyBag = null;
      if (key !== null) {
        var pkAsn1 = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(key));
        if (password === null) {
          keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // bagId
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(pki.oids.keyBag).getBytes()
            ),
            // bagValue
            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
              // PrivateKeyInfo
              pkAsn1
            ]),
            // bagAttributes (OPTIONAL)
            bagAttrs
          ]);
        } else {
          keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // bagId
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(pki.oids.pkcs8ShroudedKeyBag).getBytes()
            ),
            // bagValue
            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
              // EncryptedPrivateKeyInfo
              pki.encryptPrivateKeyInfo(pkAsn1, password, options)
            ]),
            // bagAttributes (OPTIONAL)
            bagAttrs
          ]);
        }
        var keySafeContents = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [keyBag]);
        var keyCI = (
          // PKCS#7 ContentInfo
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // contentType
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              // OID for the content type is 'data'
              asn1.oidToDer(pki.oids.data).getBytes()
            ),
            // content
            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OCTETSTRING,
                false,
                asn1.toDer(keySafeContents).getBytes()
              )
            ])
          ])
        );
        contents.push(keyCI);
      }
      var safe = asn1.create(
        asn1.Class.UNIVERSAL,
        asn1.Type.SEQUENCE,
        true,
        contents
      );
      var macData;
      if (options.useMac) {
        var sha12 = forge.md.sha1.create();
        var macSalt = new forge.util.ByteBuffer(
          forge.random.getBytes(options.saltSize)
        );
        var count = options.count;
        var key = p12.generateKey(password, macSalt, 3, count, 20);
        var mac = forge.hmac.create();
        mac.start(sha12, key);
        mac.update(asn1.toDer(safe).getBytes());
        var macValue = mac.getMac();
        macData = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // mac DigestInfo
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // digestAlgorithm
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              // algorithm = SHA-1
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OID,
                false,
                asn1.oidToDer(pki.oids.sha1).getBytes()
              ),
              // parameters = Null
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
            ]),
            // digest
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OCTETSTRING,
              false,
              macValue.getBytes()
            )
          ]),
          // macSalt OCTET STRING
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OCTETSTRING,
            false,
            macSalt.getBytes()
          ),
          // iterations INTEGER (XXX: Only support count < 65536)
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.INTEGER,
            false,
            asn1.integerToDer(count).getBytes()
          )
        ]);
      }
      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // version (3)
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          asn1.integerToDer(3).getBytes()
        ),
        // PKCS#7 ContentInfo
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // contentType
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OID,
            false,
            // OID for the content type is 'data'
            asn1.oidToDer(pki.oids.data).getBytes()
          ),
          // content
          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OCTETSTRING,
              false,
              asn1.toDer(safe).getBytes()
            )
          ])
        ]),
        macData
      ]);
    };
    p12.generateKey = forge.pbe.generatePkcs12Key;
  }
});

// node_modules/node-forge/lib/pki.js
var require_pki = __commonJS({
  "node_modules/node-forge/lib/pki.js"(exports, module2) {
    var forge = require_forge();
    require_asn1();
    require_oids();
    require_pbe();
    require_pem();
    require_pbkdf2();
    require_pkcs12();
    require_pss();
    require_rsa();
    require_util();
    require_x509();
    var asn1 = forge.asn1;
    var pki = module2.exports = forge.pki = forge.pki || {};
    pki.pemToDer = function(pem) {
      var msg = forge.pem.decode(pem)[0];
      if (msg.procType && msg.procType.type === "ENCRYPTED") {
        throw new Error("Could not convert PEM to DER; PEM is encrypted.");
      }
      return forge.util.createBuffer(msg.body);
    };
    pki.privateKeyFromPem = function(pem) {
      var msg = forge.pem.decode(pem)[0];
      if (msg.type !== "PRIVATE KEY" && msg.type !== "RSA PRIVATE KEY") {
        var error = new Error('Could not convert private key from PEM; PEM header type is not "PRIVATE KEY" or "RSA PRIVATE KEY".');
        error.headerType = msg.type;
        throw error;
      }
      if (msg.procType && msg.procType.type === "ENCRYPTED") {
        throw new Error("Could not convert private key from PEM; PEM is encrypted.");
      }
      var obj = asn1.fromDer(msg.body);
      return pki.privateKeyFromAsn1(obj);
    };
    pki.privateKeyToPem = function(key, maxline) {
      var msg = {
        type: "RSA PRIVATE KEY",
        body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes()
      };
      return forge.pem.encode(msg, { maxline });
    };
    pki.privateKeyInfoToPem = function(pki2, maxline) {
      var msg = {
        type: "PRIVATE KEY",
        body: asn1.toDer(pki2).getBytes()
      };
      return forge.pem.encode(msg, { maxline });
    };
  }
});

// node_modules/node-forge/lib/tls.js
var require_tls = __commonJS({
  "node_modules/node-forge/lib/tls.js"(exports, module2) {
    var forge = require_forge();
    require_asn1();
    require_hmac();
    require_md5();
    require_pem();
    require_pki();
    require_random();
    require_sha1();
    require_util();
    var prf_TLS1 = function(secret, label, seed, length) {
      var rval = forge.util.createBuffer();
      var idx = secret.length >> 1;
      var slen = idx + (secret.length & 1);
      var s1 = secret.substr(0, slen);
      var s2 = secret.substr(idx, slen);
      var ai = forge.util.createBuffer();
      var hmac = forge.hmac.create();
      seed = label + seed;
      var md5itr = Math.ceil(length / 16);
      var sha1itr = Math.ceil(length / 20);
      hmac.start("MD5", s1);
      var md5bytes = forge.util.createBuffer();
      ai.putBytes(seed);
      for (var i = 0; i < md5itr; ++i) {
        hmac.start(null, null);
        hmac.update(ai.getBytes());
        ai.putBuffer(hmac.digest());
        hmac.start(null, null);
        hmac.update(ai.bytes() + seed);
        md5bytes.putBuffer(hmac.digest());
      }
      hmac.start("SHA1", s2);
      var sha1bytes = forge.util.createBuffer();
      ai.clear();
      ai.putBytes(seed);
      for (var i = 0; i < sha1itr; ++i) {
        hmac.start(null, null);
        hmac.update(ai.getBytes());
        ai.putBuffer(hmac.digest());
        hmac.start(null, null);
        hmac.update(ai.bytes() + seed);
        sha1bytes.putBuffer(hmac.digest());
      }
      rval.putBytes(forge.util.xorBytes(
        md5bytes.getBytes(),
        sha1bytes.getBytes(),
        length
      ));
      return rval;
    };
    var hmac_sha1 = function(key2, seqNum, record) {
      var hmac = forge.hmac.create();
      hmac.start("SHA1", key2);
      var b = forge.util.createBuffer();
      b.putInt32(seqNum[0]);
      b.putInt32(seqNum[1]);
      b.putByte(record.type);
      b.putByte(record.version.major);
      b.putByte(record.version.minor);
      b.putInt16(record.length);
      b.putBytes(record.fragment.bytes());
      hmac.update(b.getBytes());
      return hmac.digest().getBytes();
    };
    var deflate = function(c, record, s) {
      var rval = false;
      try {
        var bytes = c.deflate(record.fragment.getBytes());
        record.fragment = forge.util.createBuffer(bytes);
        record.length = bytes.length;
        rval = true;
      } catch (ex) {
      }
      return rval;
    };
    var inflate = function(c, record, s) {
      var rval = false;
      try {
        var bytes = c.inflate(record.fragment.getBytes());
        record.fragment = forge.util.createBuffer(bytes);
        record.length = bytes.length;
        rval = true;
      } catch (ex) {
      }
      return rval;
    };
    var readVector = function(b, lenBytes) {
      var len = 0;
      switch (lenBytes) {
        case 1:
          len = b.getByte();
          break;
        case 2:
          len = b.getInt16();
          break;
        case 3:
          len = b.getInt24();
          break;
        case 4:
          len = b.getInt32();
          break;
      }
      return forge.util.createBuffer(b.getBytes(len));
    };
    var writeVector = function(b, lenBytes, v) {
      b.putInt(v.length(), lenBytes << 3);
      b.putBuffer(v);
    };
    var tls = {};
    tls.Versions = {
      TLS_1_0: { major: 3, minor: 1 },
      TLS_1_1: { major: 3, minor: 2 },
      TLS_1_2: { major: 3, minor: 3 }
    };
    tls.SupportedVersions = [
      tls.Versions.TLS_1_1,
      tls.Versions.TLS_1_0
    ];
    tls.Version = tls.SupportedVersions[0];
    tls.MaxFragment = 16384 - 1024;
    tls.ConnectionEnd = {
      server: 0,
      client: 1
    };
    tls.PRFAlgorithm = {
      tls_prf_sha256: 0
    };
    tls.BulkCipherAlgorithm = {
      none: null,
      rc4: 0,
      des3: 1,
      aes: 2
    };
    tls.CipherType = {
      stream: 0,
      block: 1,
      aead: 2
    };
    tls.MACAlgorithm = {
      none: null,
      hmac_md5: 0,
      hmac_sha1: 1,
      hmac_sha256: 2,
      hmac_sha384: 3,
      hmac_sha512: 4
    };
    tls.CompressionMethod = {
      none: 0,
      deflate: 1
    };
    tls.ContentType = {
      change_cipher_spec: 20,
      alert: 21,
      handshake: 22,
      application_data: 23,
      heartbeat: 24
    };
    tls.HandshakeType = {
      hello_request: 0,
      client_hello: 1,
      server_hello: 2,
      certificate: 11,
      server_key_exchange: 12,
      certificate_request: 13,
      server_hello_done: 14,
      certificate_verify: 15,
      client_key_exchange: 16,
      finished: 20
    };
    tls.Alert = {};
    tls.Alert.Level = {
      warning: 1,
      fatal: 2
    };
    tls.Alert.Description = {
      close_notify: 0,
      unexpected_message: 10,
      bad_record_mac: 20,
      decryption_failed: 21,
      record_overflow: 22,
      decompression_failure: 30,
      handshake_failure: 40,
      bad_certificate: 42,
      unsupported_certificate: 43,
      certificate_revoked: 44,
      certificate_expired: 45,
      certificate_unknown: 46,
      illegal_parameter: 47,
      unknown_ca: 48,
      access_denied: 49,
      decode_error: 50,
      decrypt_error: 51,
      export_restriction: 60,
      protocol_version: 70,
      insufficient_security: 71,
      internal_error: 80,
      user_canceled: 90,
      no_renegotiation: 100
    };
    tls.HeartbeatMessageType = {
      heartbeat_request: 1,
      heartbeat_response: 2
    };
    tls.CipherSuites = {};
    tls.getCipherSuite = function(twoBytes) {
      var rval = null;
      for (var key2 in tls.CipherSuites) {
        var cs = tls.CipherSuites[key2];
        if (cs.id[0] === twoBytes.charCodeAt(0) && cs.id[1] === twoBytes.charCodeAt(1)) {
          rval = cs;
          break;
        }
      }
      return rval;
    };
    tls.handleUnexpected = function(c, record) {
      var ignore = !c.open && c.entity === tls.ConnectionEnd.client;
      if (!ignore) {
        c.error(c, {
          message: "Unexpected message. Received TLS record out of order.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.unexpected_message
          }
        });
      }
    };
    tls.handleHelloRequest = function(c, record, length) {
      if (!c.handshaking && c.handshakes > 0) {
        tls.queue(c, tls.createAlert(c, {
          level: tls.Alert.Level.warning,
          description: tls.Alert.Description.no_renegotiation
        }));
        tls.flush(c);
      }
      c.process();
    };
    tls.parseHelloMessage = function(c, record, length) {
      var msg = null;
      var client = c.entity === tls.ConnectionEnd.client;
      if (length < 38) {
        c.error(c, {
          message: client ? "Invalid ServerHello message. Message too short." : "Invalid ClientHello message. Message too short.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.illegal_parameter
          }
        });
      } else {
        var b = record.fragment;
        var remaining = b.length();
        msg = {
          version: {
            major: b.getByte(),
            minor: b.getByte()
          },
          random: forge.util.createBuffer(b.getBytes(32)),
          session_id: readVector(b, 1),
          extensions: []
        };
        if (client) {
          msg.cipher_suite = b.getBytes(2);
          msg.compression_method = b.getByte();
        } else {
          msg.cipher_suites = readVector(b, 2);
          msg.compression_methods = readVector(b, 1);
        }
        remaining = length - (remaining - b.length());
        if (remaining > 0) {
          var exts = readVector(b, 2);
          while (exts.length() > 0) {
            msg.extensions.push({
              type: [exts.getByte(), exts.getByte()],
              data: readVector(exts, 2)
            });
          }
          if (!client) {
            for (var i = 0; i < msg.extensions.length; ++i) {
              var ext = msg.extensions[i];
              if (ext.type[0] === 0 && ext.type[1] === 0) {
                var snl = readVector(ext.data, 2);
                while (snl.length() > 0) {
                  var snType = snl.getByte();
                  if (snType !== 0) {
                    break;
                  }
                  c.session.extensions.server_name.serverNameList.push(
                    readVector(snl, 2).getBytes()
                  );
                }
              }
            }
          }
        }
        if (c.session.version) {
          if (msg.version.major !== c.session.version.major || msg.version.minor !== c.session.version.minor) {
            return c.error(c, {
              message: "TLS version change is disallowed during renegotiation.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.protocol_version
              }
            });
          }
        }
        if (client) {
          c.session.cipherSuite = tls.getCipherSuite(msg.cipher_suite);
        } else {
          var tmp = forge.util.createBuffer(msg.cipher_suites.bytes());
          while (tmp.length() > 0) {
            c.session.cipherSuite = tls.getCipherSuite(tmp.getBytes(2));
            if (c.session.cipherSuite !== null) {
              break;
            }
          }
        }
        if (c.session.cipherSuite === null) {
          return c.error(c, {
            message: "No cipher suites in common.",
            send: true,
            alert: {
              level: tls.Alert.Level.fatal,
              description: tls.Alert.Description.handshake_failure
            },
            cipherSuite: forge.util.bytesToHex(msg.cipher_suite)
          });
        }
        if (client) {
          c.session.compressionMethod = msg.compression_method;
        } else {
          c.session.compressionMethod = tls.CompressionMethod.none;
        }
      }
      return msg;
    };
    tls.createSecurityParameters = function(c, msg) {
      var client = c.entity === tls.ConnectionEnd.client;
      var msgRandom = msg.random.bytes();
      var cRandom = client ? c.session.sp.client_random : msgRandom;
      var sRandom = client ? msgRandom : tls.createRandom().getBytes();
      c.session.sp = {
        entity: c.entity,
        prf_algorithm: tls.PRFAlgorithm.tls_prf_sha256,
        bulk_cipher_algorithm: null,
        cipher_type: null,
        enc_key_length: null,
        block_length: null,
        fixed_iv_length: null,
        record_iv_length: null,
        mac_algorithm: null,
        mac_length: null,
        mac_key_length: null,
        compression_algorithm: c.session.compressionMethod,
        pre_master_secret: null,
        master_secret: null,
        client_random: cRandom,
        server_random: sRandom
      };
    };
    tls.handleServerHello = function(c, record, length) {
      var msg = tls.parseHelloMessage(c, record, length);
      if (c.fail) {
        return;
      }
      if (msg.version.minor <= c.version.minor) {
        c.version.minor = msg.version.minor;
      } else {
        return c.error(c, {
          message: "Incompatible TLS version.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.protocol_version
          }
        });
      }
      c.session.version = c.version;
      var sessionId = msg.session_id.bytes();
      if (sessionId.length > 0 && sessionId === c.session.id) {
        c.expect = SCC;
        c.session.resuming = true;
        c.session.sp.server_random = msg.random.bytes();
      } else {
        c.expect = SCE;
        c.session.resuming = false;
        tls.createSecurityParameters(c, msg);
      }
      c.session.id = sessionId;
      c.process();
    };
    tls.handleClientHello = function(c, record, length) {
      var msg = tls.parseHelloMessage(c, record, length);
      if (c.fail) {
        return;
      }
      var sessionId = msg.session_id.bytes();
      var session = null;
      if (c.sessionCache) {
        session = c.sessionCache.getSession(sessionId);
        if (session === null) {
          sessionId = "";
        } else if (session.version.major !== msg.version.major || session.version.minor > msg.version.minor) {
          session = null;
          sessionId = "";
        }
      }
      if (sessionId.length === 0) {
        sessionId = forge.random.getBytes(32);
      }
      c.session.id = sessionId;
      c.session.clientHelloVersion = msg.version;
      c.session.sp = {};
      if (session) {
        c.version = c.session.version = session.version;
        c.session.sp = session.sp;
      } else {
        var version2;
        for (var i = 1; i < tls.SupportedVersions.length; ++i) {
          version2 = tls.SupportedVersions[i];
          if (version2.minor <= msg.version.minor) {
            break;
          }
        }
        c.version = { major: version2.major, minor: version2.minor };
        c.session.version = c.version;
      }
      if (session !== null) {
        c.expect = CCC;
        c.session.resuming = true;
        c.session.sp.client_random = msg.random.bytes();
      } else {
        c.expect = c.verifyClient !== false ? CCE : CKE;
        c.session.resuming = false;
        tls.createSecurityParameters(c, msg);
      }
      c.open = true;
      tls.queue(c, tls.createRecord(c, {
        type: tls.ContentType.handshake,
        data: tls.createServerHello(c)
      }));
      if (c.session.resuming) {
        tls.queue(c, tls.createRecord(c, {
          type: tls.ContentType.change_cipher_spec,
          data: tls.createChangeCipherSpec()
        }));
        c.state.pending = tls.createConnectionState(c);
        c.state.current.write = c.state.pending.write;
        tls.queue(c, tls.createRecord(c, {
          type: tls.ContentType.handshake,
          data: tls.createFinished(c)
        }));
      } else {
        tls.queue(c, tls.createRecord(c, {
          type: tls.ContentType.handshake,
          data: tls.createCertificate(c)
        }));
        if (!c.fail) {
          tls.queue(c, tls.createRecord(c, {
            type: tls.ContentType.handshake,
            data: tls.createServerKeyExchange(c)
          }));
          if (c.verifyClient !== false) {
            tls.queue(c, tls.createRecord(c, {
              type: tls.ContentType.handshake,
              data: tls.createCertificateRequest(c)
            }));
          }
          tls.queue(c, tls.createRecord(c, {
            type: tls.ContentType.handshake,
            data: tls.createServerHelloDone(c)
          }));
        }
      }
      tls.flush(c);
      c.process();
    };
    tls.handleCertificate = function(c, record, length) {
      if (length < 3) {
        return c.error(c, {
          message: "Invalid Certificate message. Message too short.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.illegal_parameter
          }
        });
      }
      var b = record.fragment;
      var msg = {
        certificate_list: readVector(b, 3)
      };
      var cert, asn1;
      var certs = [];
      try {
        while (msg.certificate_list.length() > 0) {
          cert = readVector(msg.certificate_list, 3);
          asn1 = forge.asn1.fromDer(cert);
          cert = forge.pki.certificateFromAsn1(asn1, true);
          certs.push(cert);
        }
      } catch (ex) {
        return c.error(c, {
          message: "Could not parse certificate list.",
          cause: ex,
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.bad_certificate
          }
        });
      }
      var client = c.entity === tls.ConnectionEnd.client;
      if ((client || c.verifyClient === true) && certs.length === 0) {
        c.error(c, {
          message: client ? "No server certificate provided." : "No client certificate provided.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.illegal_parameter
          }
        });
      } else if (certs.length === 0) {
        c.expect = client ? SKE : CKE;
      } else {
        if (client) {
          c.session.serverCertificate = certs[0];
        } else {
          c.session.clientCertificate = certs[0];
        }
        if (tls.verifyCertificateChain(c, certs)) {
          c.expect = client ? SKE : CKE;
        }
      }
      c.process();
    };
    tls.handleServerKeyExchange = function(c, record, length) {
      if (length > 0) {
        return c.error(c, {
          message: "Invalid key parameters. Only RSA is supported.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.unsupported_certificate
          }
        });
      }
      c.expect = SCR;
      c.process();
    };
    tls.handleClientKeyExchange = function(c, record, length) {
      if (length < 48) {
        return c.error(c, {
          message: "Invalid key parameters. Only RSA is supported.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.unsupported_certificate
          }
        });
      }
      var b = record.fragment;
      var msg = {
        enc_pre_master_secret: readVector(b, 2).getBytes()
      };
      var privateKey = null;
      if (c.getPrivateKey) {
        try {
          privateKey = c.getPrivateKey(c, c.session.serverCertificate);
          privateKey = forge.pki.privateKeyFromPem(privateKey);
        } catch (ex) {
          c.error(c, {
            message: "Could not get private key.",
            cause: ex,
            send: true,
            alert: {
              level: tls.Alert.Level.fatal,
              description: tls.Alert.Description.internal_error
            }
          });
        }
      }
      if (privateKey === null) {
        return c.error(c, {
          message: "No private key set.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.internal_error
          }
        });
      }
      try {
        var sp = c.session.sp;
        sp.pre_master_secret = privateKey.decrypt(msg.enc_pre_master_secret);
        var version2 = c.session.clientHelloVersion;
        if (version2.major !== sp.pre_master_secret.charCodeAt(0) || version2.minor !== sp.pre_master_secret.charCodeAt(1)) {
          throw new Error("TLS version rollback attack detected.");
        }
      } catch (ex) {
        sp.pre_master_secret = forge.random.getBytes(48);
      }
      c.expect = CCC;
      if (c.session.clientCertificate !== null) {
        c.expect = CCV;
      }
      c.process();
    };
    tls.handleCertificateRequest = function(c, record, length) {
      if (length < 3) {
        return c.error(c, {
          message: "Invalid CertificateRequest. Message too short.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.illegal_parameter
          }
        });
      }
      var b = record.fragment;
      var msg = {
        certificate_types: readVector(b, 1),
        certificate_authorities: readVector(b, 2)
      };
      c.session.certificateRequest = msg;
      c.expect = SHD;
      c.process();
    };
    tls.handleCertificateVerify = function(c, record, length) {
      if (length < 2) {
        return c.error(c, {
          message: "Invalid CertificateVerify. Message too short.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.illegal_parameter
          }
        });
      }
      var b = record.fragment;
      b.read -= 4;
      var msgBytes = b.bytes();
      b.read += 4;
      var msg = {
        signature: readVector(b, 2).getBytes()
      };
      var verify = forge.util.createBuffer();
      verify.putBuffer(c.session.md5.digest());
      verify.putBuffer(c.session.sha1.digest());
      verify = verify.getBytes();
      try {
        var cert = c.session.clientCertificate;
        if (!cert.publicKey.verify(verify, msg.signature, "NONE")) {
          throw new Error("CertificateVerify signature does not match.");
        }
        c.session.md5.update(msgBytes);
        c.session.sha1.update(msgBytes);
      } catch (ex) {
        return c.error(c, {
          message: "Bad signature in CertificateVerify.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.handshake_failure
          }
        });
      }
      c.expect = CCC;
      c.process();
    };
    tls.handleServerHelloDone = function(c, record, length) {
      if (length > 0) {
        return c.error(c, {
          message: "Invalid ServerHelloDone message. Invalid length.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.record_overflow
          }
        });
      }
      if (c.serverCertificate === null) {
        var error = {
          message: "No server certificate provided. Not enough security.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.insufficient_security
          }
        };
        var depth = 0;
        var ret = c.verify(c, error.alert.description, depth, []);
        if (ret !== true) {
          if (ret || ret === 0) {
            if (typeof ret === "object" && !forge.util.isArray(ret)) {
              if (ret.message) {
                error.message = ret.message;
              }
              if (ret.alert) {
                error.alert.description = ret.alert;
              }
            } else if (typeof ret === "number") {
              error.alert.description = ret;
            }
          }
          return c.error(c, error);
        }
      }
      if (c.session.certificateRequest !== null) {
        record = tls.createRecord(c, {
          type: tls.ContentType.handshake,
          data: tls.createCertificate(c)
        });
        tls.queue(c, record);
      }
      record = tls.createRecord(c, {
        type: tls.ContentType.handshake,
        data: tls.createClientKeyExchange(c)
      });
      tls.queue(c, record);
      c.expect = SER;
      var callback = function(c2, signature) {
        if (c2.session.certificateRequest !== null && c2.session.clientCertificate !== null) {
          tls.queue(c2, tls.createRecord(c2, {
            type: tls.ContentType.handshake,
            data: tls.createCertificateVerify(c2, signature)
          }));
        }
        tls.queue(c2, tls.createRecord(c2, {
          type: tls.ContentType.change_cipher_spec,
          data: tls.createChangeCipherSpec()
        }));
        c2.state.pending = tls.createConnectionState(c2);
        c2.state.current.write = c2.state.pending.write;
        tls.queue(c2, tls.createRecord(c2, {
          type: tls.ContentType.handshake,
          data: tls.createFinished(c2)
        }));
        c2.expect = SCC;
        tls.flush(c2);
        c2.process();
      };
      if (c.session.certificateRequest === null || c.session.clientCertificate === null) {
        return callback(c, null);
      }
      tls.getClientSignature(c, callback);
    };
    tls.handleChangeCipherSpec = function(c, record) {
      if (record.fragment.getByte() !== 1) {
        return c.error(c, {
          message: "Invalid ChangeCipherSpec message received.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.illegal_parameter
          }
        });
      }
      var client = c.entity === tls.ConnectionEnd.client;
      if (c.session.resuming && client || !c.session.resuming && !client) {
        c.state.pending = tls.createConnectionState(c);
      }
      c.state.current.read = c.state.pending.read;
      if (!c.session.resuming && client || c.session.resuming && !client) {
        c.state.pending = null;
      }
      c.expect = client ? SFI : CFI;
      c.process();
    };
    tls.handleFinished = function(c, record, length) {
      var b = record.fragment;
      b.read -= 4;
      var msgBytes = b.bytes();
      b.read += 4;
      var vd = record.fragment.getBytes();
      b = forge.util.createBuffer();
      b.putBuffer(c.session.md5.digest());
      b.putBuffer(c.session.sha1.digest());
      var client = c.entity === tls.ConnectionEnd.client;
      var label = client ? "server finished" : "client finished";
      var sp = c.session.sp;
      var vdl = 12;
      var prf = prf_TLS1;
      b = prf(sp.master_secret, label, b.getBytes(), vdl);
      if (b.getBytes() !== vd) {
        return c.error(c, {
          message: "Invalid verify_data in Finished message.",
          send: true,
          alert: {
            level: tls.Alert.Level.fatal,
            description: tls.Alert.Description.decrypt_error
          }
        });
      }
      c.session.md5.update(msgBytes);
      c.session.sha1.update(msgBytes);
      if (c.session.resuming && client || !c.session.resuming && !client) {
        tls.queue(c, tls.createRecord(c, {
          type: tls.ContentType.change_cipher_spec,
          data: tls.createChangeCipherSpec()
        }));
        c.state.current.write = c.state.pending.write;
        c.state.pending = null;
        tls.queue(c, tls.createRecord(c, {
          type: tls.ContentType.handshake,
          data: tls.createFinished(c)
        }));
      }
      c.expect = client ? SAD : CAD;
      c.handshaking = false;
      ++c.handshakes;
      c.peerCertificate = client ? c.session.serverCertificate : c.session.clientCertificate;
      tls.flush(c);
      c.isConnected = true;
      c.connected(c);
      c.process();
    };
    tls.handleAlert = function(c, record) {
      var b = record.fragment;
      var alert = {
        level: b.getByte(),
        description: b.getByte()
      };
      var msg;
      switch (alert.description) {
        case tls.Alert.Description.close_notify:
          msg = "Connection closed.";
          break;
        case tls.Alert.Description.unexpected_message:
          msg = "Unexpected message.";
          break;
        case tls.Alert.Description.bad_record_mac:
          msg = "Bad record MAC.";
          break;
        case tls.Alert.Description.decryption_failed:
          msg = "Decryption failed.";
          break;
        case tls.Alert.Description.record_overflow:
          msg = "Record overflow.";
          break;
        case tls.Alert.Description.decompression_failure:
          msg = "Decompression failed.";
          break;
        case tls.Alert.Description.handshake_failure:
          msg = "Handshake failure.";
          break;
        case tls.Alert.Description.bad_certificate:
          msg = "Bad certificate.";
          break;
        case tls.Alert.Description.unsupported_certificate:
          msg = "Unsupported certificate.";
          break;
        case tls.Alert.Description.certificate_revoked:
          msg = "Certificate revoked.";
          break;
        case tls.Alert.Description.certificate_expired:
          msg = "Certificate expired.";
          break;
        case tls.Alert.Description.certificate_unknown:
          msg = "Certificate unknown.";
          break;
        case tls.Alert.Description.illegal_parameter:
          msg = "Illegal parameter.";
          break;
        case tls.Alert.Description.unknown_ca:
          msg = "Unknown certificate authority.";
          break;
        case tls.Alert.Description.access_denied:
          msg = "Access denied.";
          break;
        case tls.Alert.Description.decode_error:
          msg = "Decode error.";
          break;
        case tls.Alert.Description.decrypt_error:
          msg = "Decrypt error.";
          break;
        case tls.Alert.Description.export_restriction:
          msg = "Export restriction.";
          break;
        case tls.Alert.Description.protocol_version:
          msg = "Unsupported protocol version.";
          break;
        case tls.Alert.Description.insufficient_security:
          msg = "Insufficient security.";
          break;
        case tls.Alert.Description.internal_error:
          msg = "Internal error.";
          break;
        case tls.Alert.Description.user_canceled:
          msg = "User canceled.";
          break;
        case tls.Alert.Description.no_renegotiation:
          msg = "Renegotiation not supported.";
          break;
        default:
          msg = "Unknown error.";
          break;
      }
      if (alert.description === tls.Alert.Description.close_notify) {
        return c.close();
      }
      c.error(c, {
        message: msg,
        send: false,
        // origin is the opposite end
        origin: c.entity === tls.ConnectionEnd.client ? "server" : "client",
        alert
      });
      c.process();
    };
    tls.handleHandshake = function(c, record) {
      var b = record.fragment;
      var type = b.getByte();
      var length = b.getInt24();
      if (length > b.length()) {
        c.fragmented = record;
        record.fragment = forge.util.createBuffer();
        b.read -= 4;
        return c.process();
      }
      c.fragmented = null;
      b.read -= 4;
      var bytes = b.bytes(length + 4);
      b.read += 4;
      if (type in hsTable[c.entity][c.expect]) {
        if (c.entity === tls.ConnectionEnd.server && !c.open && !c.fail) {
          c.handshaking = true;
          c.session = {
            version: null,
            extensions: {
              server_name: {
                serverNameList: []
              }
            },
            cipherSuite: null,
            compressionMethod: null,
            serverCertificate: null,
            clientCertificate: null,
            md5: forge.md.md5.create(),
            sha1: forge.md.sha1.create()
          };
        }
        if (type !== tls.HandshakeType.hello_request && type !== tls.HandshakeType.certificate_verify && type !== tls.HandshakeType.finished) {
          c.session.md5.update(bytes);
          c.session.sha1.update(bytes);
        }
        hsTable[c.entity][c.expect][type](c, record, length);
      } else {
        tls.handleUnexpected(c, record);
      }
    };
    tls.handleApplicationData = function(c, record) {
      c.data.putBuffer(record.fragment);
      c.dataReady(c);
      c.process();
    };
    tls.handleHeartbeat = function(c, record) {
      var b = record.fragment;
      var type = b.getByte();
      var length = b.getInt16();
      var payload = b.getBytes(length);
      if (type === tls.HeartbeatMessageType.heartbeat_request) {
        if (c.handshaking || length > payload.length) {
          return c.process();
        }
        tls.queue(c, tls.createRecord(c, {
          type: tls.ContentType.heartbeat,
          data: tls.createHeartbeat(
            tls.HeartbeatMessageType.heartbeat_response,
            payload
          )
        }));
        tls.flush(c);
      } else if (type === tls.HeartbeatMessageType.heartbeat_response) {
        if (payload !== c.expectedHeartbeatPayload) {
          return c.process();
        }
        if (c.heartbeatReceived) {
          c.heartbeatReceived(c, forge.util.createBuffer(payload));
        }
      }
      c.process();
    };
    var SHE = 0;
    var SCE = 1;
    var SKE = 2;
    var SCR = 3;
    var SHD = 4;
    var SCC = 5;
    var SFI = 6;
    var SAD = 7;
    var SER = 8;
    var CHE = 0;
    var CCE = 1;
    var CKE = 2;
    var CCV = 3;
    var CCC = 4;
    var CFI = 5;
    var CAD = 6;
    var __ = tls.handleUnexpected;
    var R0 = tls.handleChangeCipherSpec;
    var R1 = tls.handleAlert;
    var R2 = tls.handleHandshake;
    var R3 = tls.handleApplicationData;
    var R4 = tls.handleHeartbeat;
    var ctTable = [];
    ctTable[tls.ConnectionEnd.client] = [
      //      CC,AL,HS,AD,HB
      /*SHE*/
      [__, R1, R2, __, R4],
      /*SCE*/
      [__, R1, R2, __, R4],
      /*SKE*/
      [__, R1, R2, __, R4],
      /*SCR*/
      [__, R1, R2, __, R4],
      /*SHD*/
      [__, R1, R2, __, R4],
      /*SCC*/
      [R0, R1, __, __, R4],
      /*SFI*/
      [__, R1, R2, __, R4],
      /*SAD*/
      [__, R1, R2, R3, R4],
      /*SER*/
      [__, R1, R2, __, R4]
    ];
    ctTable[tls.ConnectionEnd.server] = [
      //      CC,AL,HS,AD
      /*CHE*/
      [__, R1, R2, __, R4],
      /*CCE*/
      [__, R1, R2, __, R4],
      /*CKE*/
      [__, R1, R2, __, R4],
      /*CCV*/
      [__, R1, R2, __, R4],
      /*CCC*/
      [R0, R1, __, __, R4],
      /*CFI*/
      [__, R1, R2, __, R4],
      /*CAD*/
      [__, R1, R2, R3, R4],
      /*CER*/
      [__, R1, R2, __, R4]
    ];
    var H0 = tls.handleHelloRequest;
    var H1 = tls.handleServerHello;
    var H2 = tls.handleCertificate;
    var H3 = tls.handleServerKeyExchange;
    var H4 = tls.handleCertificateRequest;
    var H5 = tls.handleServerHelloDone;
    var H6 = tls.handleFinished;
    var hsTable = [];
    hsTable[tls.ConnectionEnd.client] = [
      //      HR,01,SH,03,04,05,06,07,08,09,10,SC,SK,CR,HD,15,CK,17,18,19,FI
      /*SHE*/
      [__, __, H1, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __],
      /*SCE*/
      [H0, __, __, __, __, __, __, __, __, __, __, H2, H3, H4, H5, __, __, __, __, __, __],
      /*SKE*/
      [H0, __, __, __, __, __, __, __, __, __, __, __, H3, H4, H5, __, __, __, __, __, __],
      /*SCR*/
      [H0, __, __, __, __, __, __, __, __, __, __, __, __, H4, H5, __, __, __, __, __, __],
      /*SHD*/
      [H0, __, __, __, __, __, __, __, __, __, __, __, __, __, H5, __, __, __, __, __, __],
      /*SCC*/
      [H0, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __],
      /*SFI*/
      [H0, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, H6],
      /*SAD*/
      [H0, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __],
      /*SER*/
      [H0, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __]
    ];
    var H7 = tls.handleClientHello;
    var H8 = tls.handleClientKeyExchange;
    var H9 = tls.handleCertificateVerify;
    hsTable[tls.ConnectionEnd.server] = [
      //      01,CH,02,03,04,05,06,07,08,09,10,CC,12,13,14,CV,CK,17,18,19,FI
      /*CHE*/
      [__, H7, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __],
      /*CCE*/
      [__, __, __, __, __, __, __, __, __, __, __, H2, __, __, __, __, __, __, __, __, __],
      /*CKE*/
      [__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, H8, __, __, __, __],
      /*CCV*/
      [__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, H9, __, __, __, __, __],
      /*CCC*/
      [__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __],
      /*CFI*/
      [__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, H6],
      /*CAD*/
      [__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __],
      /*CER*/
      [__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __]
    ];
    tls.generateKeys = function(c, sp) {
      var prf = prf_TLS1;
      var random = sp.client_random + sp.server_random;
      if (!c.session.resuming) {
        sp.master_secret = prf(
          sp.pre_master_secret,
          "master secret",
          random,
          48
        ).bytes();
        sp.pre_master_secret = null;
      }
      random = sp.server_random + sp.client_random;
      var length = 2 * sp.mac_key_length + 2 * sp.enc_key_length;
      var tls10 = c.version.major === tls.Versions.TLS_1_0.major && c.version.minor === tls.Versions.TLS_1_0.minor;
      if (tls10) {
        length += 2 * sp.fixed_iv_length;
      }
      var km = prf(sp.master_secret, "key expansion", random, length);
      var rval = {
        client_write_MAC_key: km.getBytes(sp.mac_key_length),
        server_write_MAC_key: km.getBytes(sp.mac_key_length),
        client_write_key: km.getBytes(sp.enc_key_length),
        server_write_key: km.getBytes(sp.enc_key_length)
      };
      if (tls10) {
        rval.client_write_IV = km.getBytes(sp.fixed_iv_length);
        rval.server_write_IV = km.getBytes(sp.fixed_iv_length);
      }
      return rval;
    };
    tls.createConnectionState = function(c) {
      var client = c.entity === tls.ConnectionEnd.client;
      var createMode = function() {
        var mode = {
          // two 32-bit numbers, first is most significant
          sequenceNumber: [0, 0],
          macKey: null,
          macLength: 0,
          macFunction: null,
          cipherState: null,
          cipherFunction: function(record) {
            return true;
          },
          compressionState: null,
          compressFunction: function(record) {
            return true;
          },
          updateSequenceNumber: function() {
            if (mode.sequenceNumber[1] === 4294967295) {
              mode.sequenceNumber[1] = 0;
              ++mode.sequenceNumber[0];
            } else {
              ++mode.sequenceNumber[1];
            }
          }
        };
        return mode;
      };
      var state = {
        read: createMode(),
        write: createMode()
      };
      state.read.update = function(c2, record) {
        if (!state.read.cipherFunction(record, state.read)) {
          c2.error(c2, {
            message: "Could not decrypt record or bad MAC.",
            send: true,
            alert: {
              level: tls.Alert.Level.fatal,
              // doesn't matter if decryption failed or MAC was
              // invalid, return the same error so as not to reveal
              // which one occurred
              description: tls.Alert.Description.bad_record_mac
            }
          });
        } else if (!state.read.compressFunction(c2, record, state.read)) {
          c2.error(c2, {
            message: "Could not decompress record.",
            send: true,
            alert: {
              level: tls.Alert.Level.fatal,
              description: tls.Alert.Description.decompression_failure
            }
          });
        }
        return !c2.fail;
      };
      state.write.update = function(c2, record) {
        if (!state.write.compressFunction(c2, record, state.write)) {
          c2.error(c2, {
            message: "Could not compress record.",
            send: false,
            alert: {
              level: tls.Alert.Level.fatal,
              description: tls.Alert.Description.internal_error
            }
          });
        } else if (!state.write.cipherFunction(record, state.write)) {
          c2.error(c2, {
            message: "Could not encrypt record.",
            send: false,
            alert: {
              level: tls.Alert.Level.fatal,
              description: tls.Alert.Description.internal_error
            }
          });
        }
        return !c2.fail;
      };
      if (c.session) {
        var sp = c.session.sp;
        c.session.cipherSuite.initSecurityParameters(sp);
        sp.keys = tls.generateKeys(c, sp);
        state.read.macKey = client ? sp.keys.server_write_MAC_key : sp.keys.client_write_MAC_key;
        state.write.macKey = client ? sp.keys.client_write_MAC_key : sp.keys.server_write_MAC_key;
        c.session.cipherSuite.initConnectionState(state, c, sp);
        switch (sp.compression_algorithm) {
          case tls.CompressionMethod.none:
            break;
          case tls.CompressionMethod.deflate:
            state.read.compressFunction = inflate;
            state.write.compressFunction = deflate;
            break;
          default:
            throw new Error("Unsupported compression algorithm.");
        }
      }
      return state;
    };
    tls.createRandom = function() {
      var d = /* @__PURE__ */ new Date();
      var utc = +d + d.getTimezoneOffset() * 6e4;
      var rval = forge.util.createBuffer();
      rval.putInt32(utc);
      rval.putBytes(forge.random.getBytes(28));
      return rval;
    };
    tls.createRecord = function(c, options) {
      if (!options.data) {
        return null;
      }
      var record = {
        type: options.type,
        version: {
          major: c.version.major,
          minor: c.version.minor
        },
        length: options.data.length(),
        fragment: options.data
      };
      return record;
    };
    tls.createAlert = function(c, alert) {
      var b = forge.util.createBuffer();
      b.putByte(alert.level);
      b.putByte(alert.description);
      return tls.createRecord(c, {
        type: tls.ContentType.alert,
        data: b
      });
    };
    tls.createClientHello = function(c) {
      c.session.clientHelloVersion = {
        major: c.version.major,
        minor: c.version.minor
      };
      var cipherSuites = forge.util.createBuffer();
      for (var i = 0; i < c.cipherSuites.length; ++i) {
        var cs = c.cipherSuites[i];
        cipherSuites.putByte(cs.id[0]);
        cipherSuites.putByte(cs.id[1]);
      }
      var cSuites = cipherSuites.length();
      var compressionMethods = forge.util.createBuffer();
      compressionMethods.putByte(tls.CompressionMethod.none);
      var cMethods = compressionMethods.length();
      var extensions = forge.util.createBuffer();
      if (c.virtualHost) {
        var ext = forge.util.createBuffer();
        ext.putByte(0);
        ext.putByte(0);
        var serverName = forge.util.createBuffer();
        serverName.putByte(0);
        writeVector(serverName, 2, forge.util.createBuffer(c.virtualHost));
        var snList = forge.util.createBuffer();
        writeVector(snList, 2, serverName);
        writeVector(ext, 2, snList);
        extensions.putBuffer(ext);
      }
      var extLength = extensions.length();
      if (extLength > 0) {
        extLength += 2;
      }
      var sessionId = c.session.id;
      var length = sessionId.length + 1 + // session ID vector
      2 + // version (major + minor)
      4 + 28 + // random time and random bytes
      2 + cSuites + // cipher suites vector
      1 + cMethods + // compression methods vector
      extLength;
      var rval = forge.util.createBuffer();
      rval.putByte(tls.HandshakeType.client_hello);
      rval.putInt24(length);
      rval.putByte(c.version.major);
      rval.putByte(c.version.minor);
      rval.putBytes(c.session.sp.client_random);
      writeVector(rval, 1, forge.util.createBuffer(sessionId));
      writeVector(rval, 2, cipherSuites);
      writeVector(rval, 1, compressionMethods);
      if (extLength > 0) {
        writeVector(rval, 2, extensions);
      }
      return rval;
    };
    tls.createServerHello = function(c) {
      var sessionId = c.session.id;
      var length = sessionId.length + 1 + // session ID vector
      2 + // version (major + minor)
      4 + 28 + // random time and random bytes
      2 + // chosen cipher suite
      1;
      var rval = forge.util.createBuffer();
      rval.putByte(tls.HandshakeType.server_hello);
      rval.putInt24(length);
      rval.putByte(c.version.major);
      rval.putByte(c.version.minor);
      rval.putBytes(c.session.sp.server_random);
      writeVector(rval, 1, forge.util.createBuffer(sessionId));
      rval.putByte(c.session.cipherSuite.id[0]);
      rval.putByte(c.session.cipherSuite.id[1]);
      rval.putByte(c.session.compressionMethod);
      return rval;
    };
    tls.createCertificate = function(c) {
      var client = c.entity === tls.ConnectionEnd.client;
      var cert = null;
      if (c.getCertificate) {
        var hint;
        if (client) {
          hint = c.session.certificateRequest;
        } else {
          hint = c.session.extensions.server_name.serverNameList;
        }
        cert = c.getCertificate(c, hint);
      }
      var certList = forge.util.createBuffer();
      if (cert !== null) {
        try {
          if (!forge.util.isArray(cert)) {
            cert = [cert];
          }
          var asn1 = null;
          for (var i = 0; i < cert.length; ++i) {
            var msg = forge.pem.decode(cert[i])[0];
            if (msg.type !== "CERTIFICATE" && msg.type !== "X509 CERTIFICATE" && msg.type !== "TRUSTED CERTIFICATE") {
              var error = new Error('Could not convert certificate from PEM; PEM header type is not "CERTIFICATE", "X509 CERTIFICATE", or "TRUSTED CERTIFICATE".');
              error.headerType = msg.type;
              throw error;
            }
            if (msg.procType && msg.procType.type === "ENCRYPTED") {
              throw new Error("Could not convert certificate from PEM; PEM is encrypted.");
            }
            var der = forge.util.createBuffer(msg.body);
            if (asn1 === null) {
              asn1 = forge.asn1.fromDer(der.bytes(), false);
            }
            var certBuffer = forge.util.createBuffer();
            writeVector(certBuffer, 3, der);
            certList.putBuffer(certBuffer);
          }
          cert = forge.pki.certificateFromAsn1(asn1);
          if (client) {
            c.session.clientCertificate = cert;
          } else {
            c.session.serverCertificate = cert;
          }
        } catch (ex) {
          return c.error(c, {
            message: "Could not send certificate list.",
            cause: ex,
            send: true,
            alert: {
              level: tls.Alert.Level.fatal,
              description: tls.Alert.Description.bad_certificate
            }
          });
        }
      }
      var length = 3 + certList.length();
      var rval = forge.util.createBuffer();
      rval.putByte(tls.HandshakeType.certificate);
      rval.putInt24(length);
      writeVector(rval, 3, certList);
      return rval;
    };
    tls.createClientKeyExchange = function(c) {
      var b = forge.util.createBuffer();
      b.putByte(c.session.clientHelloVersion.major);
      b.putByte(c.session.clientHelloVersion.minor);
      b.putBytes(forge.random.getBytes(46));
      var sp = c.session.sp;
      sp.pre_master_secret = b.getBytes();
      var key2 = c.session.serverCertificate.publicKey;
      b = key2.encrypt(sp.pre_master_secret);
      var length = b.length + 2;
      var rval = forge.util.createBuffer();
      rval.putByte(tls.HandshakeType.client_key_exchange);
      rval.putInt24(length);
      rval.putInt16(b.length);
      rval.putBytes(b);
      return rval;
    };
    tls.createServerKeyExchange = function(c) {
      var length = 0;
      var rval = forge.util.createBuffer();
      if (length > 0) {
        rval.putByte(tls.HandshakeType.server_key_exchange);
        rval.putInt24(length);
      }
      return rval;
    };
    tls.getClientSignature = function(c, callback) {
      var b = forge.util.createBuffer();
      b.putBuffer(c.session.md5.digest());
      b.putBuffer(c.session.sha1.digest());
      b = b.getBytes();
      c.getSignature = c.getSignature || function(c2, b2, callback2) {
        var privateKey = null;
        if (c2.getPrivateKey) {
          try {
            privateKey = c2.getPrivateKey(c2, c2.session.clientCertificate);
            privateKey = forge.pki.privateKeyFromPem(privateKey);
          } catch (ex) {
            c2.error(c2, {
              message: "Could not get private key.",
              cause: ex,
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.internal_error
              }
            });
          }
        }
        if (privateKey === null) {
          c2.error(c2, {
            message: "No private key set.",
            send: true,
            alert: {
              level: tls.Alert.Level.fatal,
              description: tls.Alert.Description.internal_error
            }
          });
        } else {
          b2 = privateKey.sign(b2, null);
        }
        callback2(c2, b2);
      };
      c.getSignature(c, b, callback);
    };
    tls.createCertificateVerify = function(c, signature) {
      var length = signature.length + 2;
      var rval = forge.util.createBuffer();
      rval.putByte(tls.HandshakeType.certificate_verify);
      rval.putInt24(length);
      rval.putInt16(signature.length);
      rval.putBytes(signature);
      return rval;
    };
    tls.createCertificateRequest = function(c) {
      var certTypes = forge.util.createBuffer();
      certTypes.putByte(1);
      var cAs = forge.util.createBuffer();
      for (var key2 in c.caStore.certs) {
        var cert = c.caStore.certs[key2];
        var dn = forge.pki.distinguishedNameToAsn1(cert.subject);
        var byteBuffer = forge.asn1.toDer(dn);
        cAs.putInt16(byteBuffer.length());
        cAs.putBuffer(byteBuffer);
      }
      var length = 1 + certTypes.length() + 2 + cAs.length();
      var rval = forge.util.createBuffer();
      rval.putByte(tls.HandshakeType.certificate_request);
      rval.putInt24(length);
      writeVector(rval, 1, certTypes);
      writeVector(rval, 2, cAs);
      return rval;
    };
    tls.createServerHelloDone = function(c) {
      var rval = forge.util.createBuffer();
      rval.putByte(tls.HandshakeType.server_hello_done);
      rval.putInt24(0);
      return rval;
    };
    tls.createChangeCipherSpec = function() {
      var rval = forge.util.createBuffer();
      rval.putByte(1);
      return rval;
    };
    tls.createFinished = function(c) {
      var b = forge.util.createBuffer();
      b.putBuffer(c.session.md5.digest());
      b.putBuffer(c.session.sha1.digest());
      var client = c.entity === tls.ConnectionEnd.client;
      var sp = c.session.sp;
      var vdl = 12;
      var prf = prf_TLS1;
      var label = client ? "client finished" : "server finished";
      b = prf(sp.master_secret, label, b.getBytes(), vdl);
      var rval = forge.util.createBuffer();
      rval.putByte(tls.HandshakeType.finished);
      rval.putInt24(b.length());
      rval.putBuffer(b);
      return rval;
    };
    tls.createHeartbeat = function(type, payload, payloadLength) {
      if (typeof payloadLength === "undefined") {
        payloadLength = payload.length;
      }
      var rval = forge.util.createBuffer();
      rval.putByte(type);
      rval.putInt16(payloadLength);
      rval.putBytes(payload);
      var plaintextLength = rval.length();
      var paddingLength = Math.max(16, plaintextLength - payloadLength - 3);
      rval.putBytes(forge.random.getBytes(paddingLength));
      return rval;
    };
    tls.queue = function(c, record) {
      if (!record) {
        return;
      }
      if (record.fragment.length() === 0) {
        if (record.type === tls.ContentType.handshake || record.type === tls.ContentType.alert || record.type === tls.ContentType.change_cipher_spec) {
          return;
        }
      }
      if (record.type === tls.ContentType.handshake) {
        var bytes = record.fragment.bytes();
        c.session.md5.update(bytes);
        c.session.sha1.update(bytes);
        bytes = null;
      }
      var records;
      if (record.fragment.length() <= tls.MaxFragment) {
        records = [record];
      } else {
        records = [];
        var data = record.fragment.bytes();
        while (data.length > tls.MaxFragment) {
          records.push(tls.createRecord(c, {
            type: record.type,
            data: forge.util.createBuffer(data.slice(0, tls.MaxFragment))
          }));
          data = data.slice(tls.MaxFragment);
        }
        if (data.length > 0) {
          records.push(tls.createRecord(c, {
            type: record.type,
            data: forge.util.createBuffer(data)
          }));
        }
      }
      for (var i = 0; i < records.length && !c.fail; ++i) {
        var rec = records[i];
        var s = c.state.current.write;
        if (s.update(c, rec)) {
          c.records.push(rec);
        }
      }
    };
    tls.flush = function(c) {
      for (var i = 0; i < c.records.length; ++i) {
        var record = c.records[i];
        c.tlsData.putByte(record.type);
        c.tlsData.putByte(record.version.major);
        c.tlsData.putByte(record.version.minor);
        c.tlsData.putInt16(record.fragment.length());
        c.tlsData.putBuffer(c.records[i].fragment);
      }
      c.records = [];
      return c.tlsDataReady(c);
    };
    var _certErrorToAlertDesc = function(error) {
      switch (error) {
        case true:
          return true;
        case forge.pki.certificateError.bad_certificate:
          return tls.Alert.Description.bad_certificate;
        case forge.pki.certificateError.unsupported_certificate:
          return tls.Alert.Description.unsupported_certificate;
        case forge.pki.certificateError.certificate_revoked:
          return tls.Alert.Description.certificate_revoked;
        case forge.pki.certificateError.certificate_expired:
          return tls.Alert.Description.certificate_expired;
        case forge.pki.certificateError.certificate_unknown:
          return tls.Alert.Description.certificate_unknown;
        case forge.pki.certificateError.unknown_ca:
          return tls.Alert.Description.unknown_ca;
        default:
          return tls.Alert.Description.bad_certificate;
      }
    };
    var _alertDescToCertError = function(desc) {
      switch (desc) {
        case true:
          return true;
        case tls.Alert.Description.bad_certificate:
          return forge.pki.certificateError.bad_certificate;
        case tls.Alert.Description.unsupported_certificate:
          return forge.pki.certificateError.unsupported_certificate;
        case tls.Alert.Description.certificate_revoked:
          return forge.pki.certificateError.certificate_revoked;
        case tls.Alert.Description.certificate_expired:
          return forge.pki.certificateError.certificate_expired;
        case tls.Alert.Description.certificate_unknown:
          return forge.pki.certificateError.certificate_unknown;
        case tls.Alert.Description.unknown_ca:
          return forge.pki.certificateError.unknown_ca;
        default:
          return forge.pki.certificateError.bad_certificate;
      }
    };
    tls.verifyCertificateChain = function(c, chain) {
      try {
        var options = {};
        for (var key2 in c.verifyOptions) {
          options[key2] = c.verifyOptions[key2];
        }
        options.verify = function(vfd, depth, chain2) {
          var desc = _certErrorToAlertDesc(vfd);
          var ret = c.verify(c, vfd, depth, chain2);
          if (ret !== true) {
            if (typeof ret === "object" && !forge.util.isArray(ret)) {
              var error = new Error("The application rejected the certificate.");
              error.send = true;
              error.alert = {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.bad_certificate
              };
              if (ret.message) {
                error.message = ret.message;
              }
              if (ret.alert) {
                error.alert.description = ret.alert;
              }
              throw error;
            }
            if (ret !== vfd) {
              ret = _alertDescToCertError(ret);
            }
          }
          return ret;
        };
        forge.pki.verifyCertificateChain(c.caStore, chain, options);
      } catch (ex) {
        var err = ex;
        if (typeof err !== "object" || forge.util.isArray(err)) {
          err = {
            send: true,
            alert: {
              level: tls.Alert.Level.fatal,
              description: _certErrorToAlertDesc(ex)
            }
          };
        }
        if (!("send" in err)) {
          err.send = true;
        }
        if (!("alert" in err)) {
          err.alert = {
            level: tls.Alert.Level.fatal,
            description: _certErrorToAlertDesc(err.error)
          };
        }
        c.error(c, err);
      }
      return !c.fail;
    };
    tls.createSessionCache = function(cache, capacity) {
      var rval = null;
      if (cache && cache.getSession && cache.setSession && cache.order) {
        rval = cache;
      } else {
        rval = {};
        rval.cache = cache || {};
        rval.capacity = Math.max(capacity || 100, 1);
        rval.order = [];
        for (var key2 in cache) {
          if (rval.order.length <= capacity) {
            rval.order.push(key2);
          } else {
            delete cache[key2];
          }
        }
        rval.getSession = function(sessionId) {
          var session = null;
          var key3 = null;
          if (sessionId) {
            key3 = forge.util.bytesToHex(sessionId);
          } else if (rval.order.length > 0) {
            key3 = rval.order[0];
          }
          if (key3 !== null && key3 in rval.cache) {
            session = rval.cache[key3];
            delete rval.cache[key3];
            for (var i in rval.order) {
              if (rval.order[i] === key3) {
                rval.order.splice(i, 1);
                break;
              }
            }
          }
          return session;
        };
        rval.setSession = function(sessionId, session) {
          if (rval.order.length === rval.capacity) {
            var key3 = rval.order.shift();
            delete rval.cache[key3];
          }
          var key3 = forge.util.bytesToHex(sessionId);
          rval.order.push(key3);
          rval.cache[key3] = session;
        };
      }
      return rval;
    };
    tls.createConnection = function(options) {
      var caStore = null;
      if (options.caStore) {
        if (forge.util.isArray(options.caStore)) {
          caStore = forge.pki.createCaStore(options.caStore);
        } else {
          caStore = options.caStore;
        }
      } else {
        caStore = forge.pki.createCaStore();
      }
      var cipherSuites = options.cipherSuites || null;
      if (cipherSuites === null) {
        cipherSuites = [];
        for (var key2 in tls.CipherSuites) {
          cipherSuites.push(tls.CipherSuites[key2]);
        }
      }
      var entity = options.server || false ? tls.ConnectionEnd.server : tls.ConnectionEnd.client;
      var sessionCache = options.sessionCache ? tls.createSessionCache(options.sessionCache) : null;
      var c = {
        version: { major: tls.Version.major, minor: tls.Version.minor },
        entity,
        sessionId: options.sessionId,
        caStore,
        sessionCache,
        cipherSuites,
        connected: options.connected,
        virtualHost: options.virtualHost || null,
        verifyClient: options.verifyClient || false,
        verify: options.verify || function(cn, vfd, dpth, cts) {
          return vfd;
        },
        verifyOptions: options.verifyOptions || {},
        getCertificate: options.getCertificate || null,
        getPrivateKey: options.getPrivateKey || null,
        getSignature: options.getSignature || null,
        input: forge.util.createBuffer(),
        tlsData: forge.util.createBuffer(),
        data: forge.util.createBuffer(),
        tlsDataReady: options.tlsDataReady,
        dataReady: options.dataReady,
        heartbeatReceived: options.heartbeatReceived,
        closed: options.closed,
        error: function(c2, ex) {
          ex.origin = ex.origin || (c2.entity === tls.ConnectionEnd.client ? "client" : "server");
          if (ex.send) {
            tls.queue(c2, tls.createAlert(c2, ex.alert));
            tls.flush(c2);
          }
          var fatal = ex.fatal !== false;
          if (fatal) {
            c2.fail = true;
          }
          options.error(c2, ex);
          if (fatal) {
            c2.close(false);
          }
        },
        deflate: options.deflate || null,
        inflate: options.inflate || null
      };
      c.reset = function(clearFail) {
        c.version = { major: tls.Version.major, minor: tls.Version.minor };
        c.record = null;
        c.session = null;
        c.peerCertificate = null;
        c.state = {
          pending: null,
          current: null
        };
        c.expect = c.entity === tls.ConnectionEnd.client ? SHE : CHE;
        c.fragmented = null;
        c.records = [];
        c.open = false;
        c.handshakes = 0;
        c.handshaking = false;
        c.isConnected = false;
        c.fail = !(clearFail || typeof clearFail === "undefined");
        c.input.clear();
        c.tlsData.clear();
        c.data.clear();
        c.state.current = tls.createConnectionState(c);
      };
      c.reset();
      var _update = function(c2, record) {
        var aligned = record.type - tls.ContentType.change_cipher_spec;
        var handlers = ctTable[c2.entity][c2.expect];
        if (aligned in handlers) {
          handlers[aligned](c2, record);
        } else {
          tls.handleUnexpected(c2, record);
        }
      };
      var _readRecordHeader = function(c2) {
        var rval = 0;
        var b = c2.input;
        var len = b.length();
        if (len < 5) {
          rval = 5 - len;
        } else {
          c2.record = {
            type: b.getByte(),
            version: {
              major: b.getByte(),
              minor: b.getByte()
            },
            length: b.getInt16(),
            fragment: forge.util.createBuffer(),
            ready: false
          };
          var compatibleVersion = c2.record.version.major === c2.version.major;
          if (compatibleVersion && c2.session && c2.session.version) {
            compatibleVersion = c2.record.version.minor === c2.version.minor;
          }
          if (!compatibleVersion) {
            c2.error(c2, {
              message: "Incompatible TLS version.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.protocol_version
              }
            });
          }
        }
        return rval;
      };
      var _readRecord = function(c2) {
        var rval = 0;
        var b = c2.input;
        var len = b.length();
        if (len < c2.record.length) {
          rval = c2.record.length - len;
        } else {
          c2.record.fragment.putBytes(b.getBytes(c2.record.length));
          b.compact();
          var s = c2.state.current.read;
          if (s.update(c2, c2.record)) {
            if (c2.fragmented !== null) {
              if (c2.fragmented.type === c2.record.type) {
                c2.fragmented.fragment.putBuffer(c2.record.fragment);
                c2.record = c2.fragmented;
              } else {
                c2.error(c2, {
                  message: "Invalid fragmented record.",
                  send: true,
                  alert: {
                    level: tls.Alert.Level.fatal,
                    description: tls.Alert.Description.unexpected_message
                  }
                });
              }
            }
            c2.record.ready = true;
          }
        }
        return rval;
      };
      c.handshake = function(sessionId) {
        if (c.entity !== tls.ConnectionEnd.client) {
          c.error(c, {
            message: "Cannot initiate handshake as a server.",
            fatal: false
          });
        } else if (c.handshaking) {
          c.error(c, {
            message: "Handshake already in progress.",
            fatal: false
          });
        } else {
          if (c.fail && !c.open && c.handshakes === 0) {
            c.fail = false;
          }
          c.handshaking = true;
          sessionId = sessionId || "";
          var session = null;
          if (sessionId.length > 0) {
            if (c.sessionCache) {
              session = c.sessionCache.getSession(sessionId);
            }
            if (session === null) {
              sessionId = "";
            }
          }
          if (sessionId.length === 0 && c.sessionCache) {
            session = c.sessionCache.getSession();
            if (session !== null) {
              sessionId = session.id;
            }
          }
          c.session = {
            id: sessionId,
            version: null,
            cipherSuite: null,
            compressionMethod: null,
            serverCertificate: null,
            certificateRequest: null,
            clientCertificate: null,
            sp: {},
            md5: forge.md.md5.create(),
            sha1: forge.md.sha1.create()
          };
          if (session) {
            c.version = session.version;
            c.session.sp = session.sp;
          }
          c.session.sp.client_random = tls.createRandom().getBytes();
          c.open = true;
          tls.queue(c, tls.createRecord(c, {
            type: tls.ContentType.handshake,
            data: tls.createClientHello(c)
          }));
          tls.flush(c);
        }
      };
      c.process = function(data) {
        var rval = 0;
        if (data) {
          c.input.putBytes(data);
        }
        if (!c.fail) {
          if (c.record !== null && c.record.ready && c.record.fragment.isEmpty()) {
            c.record = null;
          }
          if (c.record === null) {
            rval = _readRecordHeader(c);
          }
          if (!c.fail && c.record !== null && !c.record.ready) {
            rval = _readRecord(c);
          }
          if (!c.fail && c.record !== null && c.record.ready) {
            _update(c, c.record);
          }
        }
        return rval;
      };
      c.prepare = function(data) {
        tls.queue(c, tls.createRecord(c, {
          type: tls.ContentType.application_data,
          data: forge.util.createBuffer(data)
        }));
        return tls.flush(c);
      };
      c.prepareHeartbeatRequest = function(payload, payloadLength) {
        if (payload instanceof forge.util.ByteBuffer) {
          payload = payload.bytes();
        }
        if (typeof payloadLength === "undefined") {
          payloadLength = payload.length;
        }
        c.expectedHeartbeatPayload = payload;
        tls.queue(c, tls.createRecord(c, {
          type: tls.ContentType.heartbeat,
          data: tls.createHeartbeat(
            tls.HeartbeatMessageType.heartbeat_request,
            payload,
            payloadLength
          )
        }));
        return tls.flush(c);
      };
      c.close = function(clearFail) {
        if (!c.fail && c.sessionCache && c.session) {
          var session = {
            id: c.session.id,
            version: c.session.version,
            sp: c.session.sp
          };
          session.sp.keys = null;
          c.sessionCache.setSession(session.id, session);
        }
        if (c.open) {
          c.open = false;
          c.input.clear();
          if (c.isConnected || c.handshaking) {
            c.isConnected = c.handshaking = false;
            tls.queue(c, tls.createAlert(c, {
              level: tls.Alert.Level.warning,
              description: tls.Alert.Description.close_notify
            }));
            tls.flush(c);
          }
          c.closed(c);
        }
        c.reset(clearFail);
      };
      return c;
    };
    module2.exports = forge.tls = forge.tls || {};
    for (key in tls) {
      if (typeof tls[key] !== "function") {
        forge.tls[key] = tls[key];
      }
    }
    var key;
    forge.tls.prf_tls1 = prf_TLS1;
    forge.tls.hmac_sha1 = hmac_sha1;
    forge.tls.createSessionCache = tls.createSessionCache;
    forge.tls.createConnection = tls.createConnection;
  }
});

// node_modules/node-forge/lib/aesCipherSuites.js
var require_aesCipherSuites = __commonJS({
  "node_modules/node-forge/lib/aesCipherSuites.js"(exports, module2) {
    var forge = require_forge();
    require_aes();
    require_tls();
    var tls = module2.exports = forge.tls;
    tls.CipherSuites["TLS_RSA_WITH_AES_128_CBC_SHA"] = {
      id: [0, 47],
      name: "TLS_RSA_WITH_AES_128_CBC_SHA",
      initSecurityParameters: function(sp) {
        sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;
        sp.cipher_type = tls.CipherType.block;
        sp.enc_key_length = 16;
        sp.block_length = 16;
        sp.fixed_iv_length = 16;
        sp.record_iv_length = 16;
        sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;
        sp.mac_length = 20;
        sp.mac_key_length = 20;
      },
      initConnectionState
    };
    tls.CipherSuites["TLS_RSA_WITH_AES_256_CBC_SHA"] = {
      id: [0, 53],
      name: "TLS_RSA_WITH_AES_256_CBC_SHA",
      initSecurityParameters: function(sp) {
        sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;
        sp.cipher_type = tls.CipherType.block;
        sp.enc_key_length = 32;
        sp.block_length = 16;
        sp.fixed_iv_length = 16;
        sp.record_iv_length = 16;
        sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;
        sp.mac_length = 20;
        sp.mac_key_length = 20;
      },
      initConnectionState
    };
    function initConnectionState(state, c, sp) {
      var client = c.entity === forge.tls.ConnectionEnd.client;
      state.read.cipherState = {
        init: false,
        cipher: forge.cipher.createDecipher("AES-CBC", client ? sp.keys.server_write_key : sp.keys.client_write_key),
        iv: client ? sp.keys.server_write_IV : sp.keys.client_write_IV
      };
      state.write.cipherState = {
        init: false,
        cipher: forge.cipher.createCipher("AES-CBC", client ? sp.keys.client_write_key : sp.keys.server_write_key),
        iv: client ? sp.keys.client_write_IV : sp.keys.server_write_IV
      };
      state.read.cipherFunction = decrypt_aes_cbc_sha1;
      state.write.cipherFunction = encrypt_aes_cbc_sha1;
      state.read.macLength = state.write.macLength = sp.mac_length;
      state.read.macFunction = state.write.macFunction = tls.hmac_sha1;
    }
    function encrypt_aes_cbc_sha1(record, s) {
      var rval = false;
      var mac = s.macFunction(s.macKey, s.sequenceNumber, record);
      record.fragment.putBytes(mac);
      s.updateSequenceNumber();
      var iv;
      if (record.version.minor === tls.Versions.TLS_1_0.minor) {
        iv = s.cipherState.init ? null : s.cipherState.iv;
      } else {
        iv = forge.random.getBytesSync(16);
      }
      s.cipherState.init = true;
      var cipher = s.cipherState.cipher;
      cipher.start({ iv });
      if (record.version.minor >= tls.Versions.TLS_1_1.minor) {
        cipher.output.putBytes(iv);
      }
      cipher.update(record.fragment);
      if (cipher.finish(encrypt_aes_cbc_sha1_padding)) {
        record.fragment = cipher.output;
        record.length = record.fragment.length();
        rval = true;
      }
      return rval;
    }
    function encrypt_aes_cbc_sha1_padding(blockSize, input, decrypt) {
      if (!decrypt) {
        var padding = blockSize - input.length() % blockSize;
        input.fillWithByte(padding - 1, padding);
      }
      return true;
    }
    function decrypt_aes_cbc_sha1_padding(blockSize, output, decrypt) {
      var rval = true;
      if (decrypt) {
        var len = output.length();
        var paddingLength = output.last();
        for (var i = len - 1 - paddingLength; i < len - 1; ++i) {
          rval = rval && output.at(i) == paddingLength;
        }
        if (rval) {
          output.truncate(paddingLength + 1);
        }
      }
      return rval;
    }
    function decrypt_aes_cbc_sha1(record, s) {
      var rval = false;
      var iv;
      if (record.version.minor === tls.Versions.TLS_1_0.minor) {
        iv = s.cipherState.init ? null : s.cipherState.iv;
      } else {
        iv = record.fragment.getBytes(16);
      }
      s.cipherState.init = true;
      var cipher = s.cipherState.cipher;
      cipher.start({ iv });
      cipher.update(record.fragment);
      rval = cipher.finish(decrypt_aes_cbc_sha1_padding);
      var macLen = s.macLength;
      var mac = forge.random.getBytesSync(macLen);
      var len = cipher.output.length();
      if (len >= macLen) {
        record.fragment = cipher.output.getBytes(len - macLen);
        mac = cipher.output.getBytes(macLen);
      } else {
        record.fragment = cipher.output.getBytes();
      }
      record.fragment = forge.util.createBuffer(record.fragment);
      record.length = record.fragment.length();
      var mac2 = s.macFunction(s.macKey, s.sequenceNumber, record);
      s.updateSequenceNumber();
      rval = compareMacs(s.macKey, mac, mac2) && rval;
      return rval;
    }
    function compareMacs(key, mac1, mac2) {
      var hmac = forge.hmac.create();
      hmac.start("SHA1", key);
      hmac.update(mac1);
      mac1 = hmac.digest().getBytes();
      hmac.start(null, null);
      hmac.update(mac2);
      mac2 = hmac.digest().getBytes();
      return mac1 === mac2;
    }
  }
});

// node_modules/node-forge/lib/sha512.js
var require_sha512 = __commonJS({
  "node_modules/node-forge/lib/sha512.js"(exports, module2) {
    var forge = require_forge();
    require_md();
    require_util();
    var sha512 = module2.exports = forge.sha512 = forge.sha512 || {};
    forge.md.sha512 = forge.md.algorithms.sha512 = sha512;
    var sha384 = forge.sha384 = forge.sha512.sha384 = forge.sha512.sha384 || {};
    sha384.create = function() {
      return sha512.create("SHA-384");
    };
    forge.md.sha384 = forge.md.algorithms.sha384 = sha384;
    forge.sha512.sha256 = forge.sha512.sha256 || {
      create: function() {
        return sha512.create("SHA-512/256");
      }
    };
    forge.md["sha512/256"] = forge.md.algorithms["sha512/256"] = forge.sha512.sha256;
    forge.sha512.sha224 = forge.sha512.sha224 || {
      create: function() {
        return sha512.create("SHA-512/224");
      }
    };
    forge.md["sha512/224"] = forge.md.algorithms["sha512/224"] = forge.sha512.sha224;
    sha512.create = function(algorithm) {
      if (!_initialized) {
        _init();
      }
      if (typeof algorithm === "undefined") {
        algorithm = "SHA-512";
      }
      if (!(algorithm in _states)) {
        throw new Error("Invalid SHA-512 algorithm: " + algorithm);
      }
      var _state = _states[algorithm];
      var _h = null;
      var _input = forge.util.createBuffer();
      var _w = new Array(80);
      for (var wi = 0; wi < 80; ++wi) {
        _w[wi] = new Array(2);
      }
      var digestLength = 64;
      switch (algorithm) {
        case "SHA-384":
          digestLength = 48;
          break;
        case "SHA-512/256":
          digestLength = 32;
          break;
        case "SHA-512/224":
          digestLength = 28;
          break;
      }
      var md = {
        // SHA-512 => sha512
        algorithm: algorithm.replace("-", "").toLowerCase(),
        blockLength: 128,
        digestLength,
        // 56-bit length of message so far (does not including padding)
        messageLength: 0,
        // true message length
        fullMessageLength: null,
        // size of message length in bytes
        messageLengthSize: 16
      };
      md.start = function() {
        md.messageLength = 0;
        md.fullMessageLength = md.messageLength128 = [];
        var int32s = md.messageLengthSize / 4;
        for (var i = 0; i < int32s; ++i) {
          md.fullMessageLength.push(0);
        }
        _input = forge.util.createBuffer();
        _h = new Array(_state.length);
        for (var i = 0; i < _state.length; ++i) {
          _h[i] = _state[i].slice(0);
        }
        return md;
      };
      md.start();
      md.update = function(msg, encoding) {
        if (encoding === "utf8") {
          msg = forge.util.encodeUtf8(msg);
        }
        var len = msg.length;
        md.messageLength += len;
        len = [len / 4294967296 >>> 0, len >>> 0];
        for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
          md.fullMessageLength[i] += len[1];
          len[1] = len[0] + (md.fullMessageLength[i] / 4294967296 >>> 0);
          md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
          len[0] = len[1] / 4294967296 >>> 0;
        }
        _input.putBytes(msg);
        _update(_h, _w, _input);
        if (_input.read > 2048 || _input.length() === 0) {
          _input.compact();
        }
        return md;
      };
      md.digest = function() {
        var finalBlock = forge.util.createBuffer();
        finalBlock.putBytes(_input.bytes());
        var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize;
        var overflow = remaining & md.blockLength - 1;
        finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));
        var next, carry;
        var bits = md.fullMessageLength[0] * 8;
        for (var i = 0; i < md.fullMessageLength.length - 1; ++i) {
          next = md.fullMessageLength[i + 1] * 8;
          carry = next / 4294967296 >>> 0;
          bits += carry;
          finalBlock.putInt32(bits >>> 0);
          bits = next >>> 0;
        }
        finalBlock.putInt32(bits);
        var h = new Array(_h.length);
        for (var i = 0; i < _h.length; ++i) {
          h[i] = _h[i].slice(0);
        }
        _update(h, _w, finalBlock);
        var rval = forge.util.createBuffer();
        var hlen;
        if (algorithm === "SHA-512") {
          hlen = h.length;
        } else if (algorithm === "SHA-384") {
          hlen = h.length - 2;
        } else {
          hlen = h.length - 4;
        }
        for (var i = 0; i < hlen; ++i) {
          rval.putInt32(h[i][0]);
          if (i !== hlen - 1 || algorithm !== "SHA-512/224") {
            rval.putInt32(h[i][1]);
          }
        }
        return rval;
      };
      return md;
    };
    var _padding = null;
    var _initialized = false;
    var _k = null;
    var _states = null;
    function _init() {
      _padding = String.fromCharCode(128);
      _padding += forge.util.fillString(String.fromCharCode(0), 128);
      _k = [
        [1116352408, 3609767458],
        [1899447441, 602891725],
        [3049323471, 3964484399],
        [3921009573, 2173295548],
        [961987163, 4081628472],
        [1508970993, 3053834265],
        [2453635748, 2937671579],
        [2870763221, 3664609560],
        [3624381080, 2734883394],
        [310598401, 1164996542],
        [607225278, 1323610764],
        [1426881987, 3590304994],
        [1925078388, 4068182383],
        [2162078206, 991336113],
        [2614888103, 633803317],
        [3248222580, 3479774868],
        [3835390401, 2666613458],
        [4022224774, 944711139],
        [264347078, 2341262773],
        [604807628, 2007800933],
        [770255983, 1495990901],
        [1249150122, 1856431235],
        [1555081692, 3175218132],
        [1996064986, 2198950837],
        [2554220882, 3999719339],
        [2821834349, 766784016],
        [2952996808, 2566594879],
        [3210313671, 3203337956],
        [3336571891, 1034457026],
        [3584528711, 2466948901],
        [113926993, 3758326383],
        [338241895, 168717936],
        [666307205, 1188179964],
        [773529912, 1546045734],
        [1294757372, 1522805485],
        [1396182291, 2643833823],
        [1695183700, 2343527390],
        [1986661051, 1014477480],
        [2177026350, 1206759142],
        [2456956037, 344077627],
        [2730485921, 1290863460],
        [2820302411, 3158454273],
        [3259730800, 3505952657],
        [3345764771, 106217008],
        [3516065817, 3606008344],
        [3600352804, 1432725776],
        [4094571909, 1467031594],
        [275423344, 851169720],
        [430227734, 3100823752],
        [506948616, 1363258195],
        [659060556, 3750685593],
        [883997877, 3785050280],
        [958139571, 3318307427],
        [1322822218, 3812723403],
        [1537002063, 2003034995],
        [1747873779, 3602036899],
        [1955562222, 1575990012],
        [2024104815, 1125592928],
        [2227730452, 2716904306],
        [2361852424, 442776044],
        [2428436474, 593698344],
        [2756734187, 3733110249],
        [3204031479, 2999351573],
        [3329325298, 3815920427],
        [3391569614, 3928383900],
        [3515267271, 566280711],
        [3940187606, 3454069534],
        [4118630271, 4000239992],
        [116418474, 1914138554],
        [174292421, 2731055270],
        [289380356, 3203993006],
        [460393269, 320620315],
        [685471733, 587496836],
        [852142971, 1086792851],
        [1017036298, 365543100],
        [1126000580, 2618297676],
        [1288033470, 3409855158],
        [1501505948, 4234509866],
        [1607167915, 987167468],
        [1816402316, 1246189591]
      ];
      _states = {};
      _states["SHA-512"] = [
        [1779033703, 4089235720],
        [3144134277, 2227873595],
        [1013904242, 4271175723],
        [2773480762, 1595750129],
        [1359893119, 2917565137],
        [2600822924, 725511199],
        [528734635, 4215389547],
        [1541459225, 327033209]
      ];
      _states["SHA-384"] = [
        [3418070365, 3238371032],
        [1654270250, 914150663],
        [2438529370, 812702999],
        [355462360, 4144912697],
        [1731405415, 4290775857],
        [2394180231, 1750603025],
        [3675008525, 1694076839],
        [1203062813, 3204075428]
      ];
      _states["SHA-512/256"] = [
        [573645204, 4230739756],
        [2673172387, 3360449730],
        [596883563, 1867755857],
        [2520282905, 1497426621],
        [2519219938, 2827943907],
        [3193839141, 1401305490],
        [721525244, 746961066],
        [246885852, 2177182882]
      ];
      _states["SHA-512/224"] = [
        [2352822216, 424955298],
        [1944164710, 2312950998],
        [502970286, 855612546],
        [1738396948, 1479516111],
        [258812777, 2077511080],
        [2011393907, 79989058],
        [1067287976, 1780299464],
        [286451373, 2446758561]
      ];
      _initialized = true;
    }
    function _update(s, w, bytes) {
      var t1_hi, t1_lo;
      var t2_hi, t2_lo;
      var s0_hi, s0_lo;
      var s1_hi, s1_lo;
      var ch_hi, ch_lo;
      var maj_hi, maj_lo;
      var a_hi, a_lo;
      var b_hi, b_lo;
      var c_hi, c_lo;
      var d_hi, d_lo;
      var e_hi, e_lo;
      var f_hi, f_lo;
      var g_hi, g_lo;
      var h_hi, h_lo;
      var i, hi, lo, w2, w7, w15, w16;
      var len = bytes.length();
      while (len >= 128) {
        for (i = 0; i < 16; ++i) {
          w[i][0] = bytes.getInt32() >>> 0;
          w[i][1] = bytes.getInt32() >>> 0;
        }
        for (; i < 80; ++i) {
          w2 = w[i - 2];
          hi = w2[0];
          lo = w2[1];
          t1_hi = ((hi >>> 19 | lo << 13) ^ // ROTR 19
          (lo >>> 29 | hi << 3) ^ // ROTR 61/(swap + ROTR 29)
          hi >>> 6) >>> 0;
          t1_lo = ((hi << 13 | lo >>> 19) ^ // ROTR 19
          (lo << 3 | hi >>> 29) ^ // ROTR 61/(swap + ROTR 29)
          (hi << 26 | lo >>> 6)) >>> 0;
          w15 = w[i - 15];
          hi = w15[0];
          lo = w15[1];
          t2_hi = ((hi >>> 1 | lo << 31) ^ // ROTR 1
          (hi >>> 8 | lo << 24) ^ // ROTR 8
          hi >>> 7) >>> 0;
          t2_lo = ((hi << 31 | lo >>> 1) ^ // ROTR 1
          (hi << 24 | lo >>> 8) ^ // ROTR 8
          (hi << 25 | lo >>> 7)) >>> 0;
          w7 = w[i - 7];
          w16 = w[i - 16];
          lo = t1_lo + w7[1] + t2_lo + w16[1];
          w[i][0] = t1_hi + w7[0] + t2_hi + w16[0] + (lo / 4294967296 >>> 0) >>> 0;
          w[i][1] = lo >>> 0;
        }
        a_hi = s[0][0];
        a_lo = s[0][1];
        b_hi = s[1][0];
        b_lo = s[1][1];
        c_hi = s[2][0];
        c_lo = s[2][1];
        d_hi = s[3][0];
        d_lo = s[3][1];
        e_hi = s[4][0];
        e_lo = s[4][1];
        f_hi = s[5][0];
        f_lo = s[5][1];
        g_hi = s[6][0];
        g_lo = s[6][1];
        h_hi = s[7][0];
        h_lo = s[7][1];
        for (i = 0; i < 80; ++i) {
          s1_hi = ((e_hi >>> 14 | e_lo << 18) ^ // ROTR 14
          (e_hi >>> 18 | e_lo << 14) ^ // ROTR 18
          (e_lo >>> 9 | e_hi << 23)) >>> 0;
          s1_lo = ((e_hi << 18 | e_lo >>> 14) ^ // ROTR 14
          (e_hi << 14 | e_lo >>> 18) ^ // ROTR 18
          (e_lo << 23 | e_hi >>> 9)) >>> 0;
          ch_hi = (g_hi ^ e_hi & (f_hi ^ g_hi)) >>> 0;
          ch_lo = (g_lo ^ e_lo & (f_lo ^ g_lo)) >>> 0;
          s0_hi = ((a_hi >>> 28 | a_lo << 4) ^ // ROTR 28
          (a_lo >>> 2 | a_hi << 30) ^ // ROTR 34/(swap + ROTR 2)
          (a_lo >>> 7 | a_hi << 25)) >>> 0;
          s0_lo = ((a_hi << 4 | a_lo >>> 28) ^ // ROTR 28
          (a_lo << 30 | a_hi >>> 2) ^ // ROTR 34/(swap + ROTR 2)
          (a_lo << 25 | a_hi >>> 7)) >>> 0;
          maj_hi = (a_hi & b_hi | c_hi & (a_hi ^ b_hi)) >>> 0;
          maj_lo = (a_lo & b_lo | c_lo & (a_lo ^ b_lo)) >>> 0;
          lo = h_lo + s1_lo + ch_lo + _k[i][1] + w[i][1];
          t1_hi = h_hi + s1_hi + ch_hi + _k[i][0] + w[i][0] + (lo / 4294967296 >>> 0) >>> 0;
          t1_lo = lo >>> 0;
          lo = s0_lo + maj_lo;
          t2_hi = s0_hi + maj_hi + (lo / 4294967296 >>> 0) >>> 0;
          t2_lo = lo >>> 0;
          h_hi = g_hi;
          h_lo = g_lo;
          g_hi = f_hi;
          g_lo = f_lo;
          f_hi = e_hi;
          f_lo = e_lo;
          lo = d_lo + t1_lo;
          e_hi = d_hi + t1_hi + (lo / 4294967296 >>> 0) >>> 0;
          e_lo = lo >>> 0;
          d_hi = c_hi;
          d_lo = c_lo;
          c_hi = b_hi;
          c_lo = b_lo;
          b_hi = a_hi;
          b_lo = a_lo;
          lo = t1_lo + t2_lo;
          a_hi = t1_hi + t2_hi + (lo / 4294967296 >>> 0) >>> 0;
          a_lo = lo >>> 0;
        }
        lo = s[0][1] + a_lo;
        s[0][0] = s[0][0] + a_hi + (lo / 4294967296 >>> 0) >>> 0;
        s[0][1] = lo >>> 0;
        lo = s[1][1] + b_lo;
        s[1][0] = s[1][0] + b_hi + (lo / 4294967296 >>> 0) >>> 0;
        s[1][1] = lo >>> 0;
        lo = s[2][1] + c_lo;
        s[2][0] = s[2][0] + c_hi + (lo / 4294967296 >>> 0) >>> 0;
        s[2][1] = lo >>> 0;
        lo = s[3][1] + d_lo;
        s[3][0] = s[3][0] + d_hi + (lo / 4294967296 >>> 0) >>> 0;
        s[3][1] = lo >>> 0;
        lo = s[4][1] + e_lo;
        s[4][0] = s[4][0] + e_hi + (lo / 4294967296 >>> 0) >>> 0;
        s[4][1] = lo >>> 0;
        lo = s[5][1] + f_lo;
        s[5][0] = s[5][0] + f_hi + (lo / 4294967296 >>> 0) >>> 0;
        s[5][1] = lo >>> 0;
        lo = s[6][1] + g_lo;
        s[6][0] = s[6][0] + g_hi + (lo / 4294967296 >>> 0) >>> 0;
        s[6][1] = lo >>> 0;
        lo = s[7][1] + h_lo;
        s[7][0] = s[7][0] + h_hi + (lo / 4294967296 >>> 0) >>> 0;
        s[7][1] = lo >>> 0;
        len -= 128;
      }
    }
  }
});

// node_modules/node-forge/lib/asn1-validator.js
var require_asn1_validator = __commonJS({
  "node_modules/node-forge/lib/asn1-validator.js"(exports) {
    var forge = require_forge();
    require_asn1();
    var asn1 = forge.asn1;
    exports.privateKeyValidator = {
      // PrivateKeyInfo
      name: "PrivateKeyInfo",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        // Version (INTEGER)
        name: "PrivateKeyInfo.version",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: "privateKeyVersion"
      }, {
        // privateKeyAlgorithm
        name: "PrivateKeyInfo.privateKeyAlgorithm",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: "AlgorithmIdentifier.algorithm",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: "privateKeyOid"
        }]
      }, {
        // PrivateKey
        name: "PrivateKeyInfo",
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OCTETSTRING,
        constructed: false,
        capture: "privateKey"
      }]
    };
    exports.publicKeyValidator = {
      name: "SubjectPublicKeyInfo",
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: "subjectPublicKeyInfo",
      value: [
        {
          name: "SubjectPublicKeyInfo.AlgorithmIdentifier",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [{
            name: "AlgorithmIdentifier.algorithm",
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.OID,
            constructed: false,
            capture: "publicKeyOid"
          }]
        },
        // capture group for ed25519PublicKey
        {
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.BITSTRING,
          constructed: false,
          composed: true,
          captureBitStringValue: "ed25519PublicKey"
        }
        // FIXME: this is capture group for rsaPublicKey, use it in this API or
        // discard?
        /* {
          // subjectPublicKey
          name: 'SubjectPublicKeyInfo.subjectPublicKey',
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.BITSTRING,
          constructed: false,
          value: [{
            // RSAPublicKey
            name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',
            tagClass: asn1.Class.UNIVERSAL,
            type: asn1.Type.SEQUENCE,
            constructed: true,
            optional: true,
            captureAsn1: 'rsaPublicKey'
          }]
        } */
      ]
    };
  }
});

// node_modules/node-forge/lib/ed25519.js
var require_ed25519 = __commonJS({
  "node_modules/node-forge/lib/ed25519.js"(exports, module2) {
    var forge = require_forge();
    require_jsbn();
    require_random();
    require_sha512();
    require_util();
    var asn1Validator = require_asn1_validator();
    var publicKeyValidator = asn1Validator.publicKeyValidator;
    var privateKeyValidator = asn1Validator.privateKeyValidator;
    if (typeof BigInteger === "undefined") {
      BigInteger = forge.jsbn.BigInteger;
    }
    var BigInteger;
    var ByteBuffer = forge.util.ByteBuffer;
    var NativeBuffer = typeof Buffer === "undefined" ? Uint8Array : Buffer;
    forge.pki = forge.pki || {};
    module2.exports = forge.pki.ed25519 = forge.ed25519 = forge.ed25519 || {};
    var ed25519 = forge.ed25519;
    ed25519.constants = {};
    ed25519.constants.PUBLIC_KEY_BYTE_LENGTH = 32;
    ed25519.constants.PRIVATE_KEY_BYTE_LENGTH = 64;
    ed25519.constants.SEED_BYTE_LENGTH = 32;
    ed25519.constants.SIGN_BYTE_LENGTH = 64;
    ed25519.constants.HASH_BYTE_LENGTH = 64;
    ed25519.generateKeyPair = function(options) {
      options = options || {};
      var seed = options.seed;
      if (seed === void 0) {
        seed = forge.random.getBytesSync(ed25519.constants.SEED_BYTE_LENGTH);
      } else if (typeof seed === "string") {
        if (seed.length !== ed25519.constants.SEED_BYTE_LENGTH) {
          throw new TypeError(
            '"seed" must be ' + ed25519.constants.SEED_BYTE_LENGTH + " bytes in length."
          );
        }
      } else if (!(seed instanceof Uint8Array)) {
        throw new TypeError(
          '"seed" must be a node.js Buffer, Uint8Array, or a binary string.'
        );
      }
      seed = messageToNativeBuffer({ message: seed, encoding: "binary" });
      var pk = new NativeBuffer(ed25519.constants.PUBLIC_KEY_BYTE_LENGTH);
      var sk = new NativeBuffer(ed25519.constants.PRIVATE_KEY_BYTE_LENGTH);
      for (var i = 0; i < 32; ++i) {
        sk[i] = seed[i];
      }
      crypto_sign_keypair(pk, sk);
      return { publicKey: pk, privateKey: sk };
    };
    ed25519.privateKeyFromAsn1 = function(obj) {
      var capture = {};
      var errors = [];
      var valid = forge.asn1.validate(obj, privateKeyValidator, capture, errors);
      if (!valid) {
        var error = new Error("Invalid Key.");
        error.errors = errors;
        throw error;
      }
      var oid = forge.asn1.derToOid(capture.privateKeyOid);
      var ed25519Oid = forge.oids.EdDSA25519;
      if (oid !== ed25519Oid) {
        throw new Error('Invalid OID "' + oid + '"; OID must be "' + ed25519Oid + '".');
      }
      var privateKey = capture.privateKey;
      var privateKeyBytes = messageToNativeBuffer({
        message: forge.asn1.fromDer(privateKey).value,
        encoding: "binary"
      });
      return { privateKeyBytes };
    };
    ed25519.publicKeyFromAsn1 = function(obj) {
      var capture = {};
      var errors = [];
      var valid = forge.asn1.validate(obj, publicKeyValidator, capture, errors);
      if (!valid) {
        var error = new Error("Invalid Key.");
        error.errors = errors;
        throw error;
      }
      var oid = forge.asn1.derToOid(capture.publicKeyOid);
      var ed25519Oid = forge.oids.EdDSA25519;
      if (oid !== ed25519Oid) {
        throw new Error('Invalid OID "' + oid + '"; OID must be "' + ed25519Oid + '".');
      }
      var publicKeyBytes = capture.ed25519PublicKey;
      if (publicKeyBytes.length !== ed25519.constants.PUBLIC_KEY_BYTE_LENGTH) {
        throw new Error("Key length is invalid.");
      }
      return messageToNativeBuffer({
        message: publicKeyBytes,
        encoding: "binary"
      });
    };
    ed25519.publicKeyFromPrivateKey = function(options) {
      options = options || {};
      var privateKey = messageToNativeBuffer({
        message: options.privateKey,
        encoding: "binary"
      });
      if (privateKey.length !== ed25519.constants.PRIVATE_KEY_BYTE_LENGTH) {
        throw new TypeError(
          '"options.privateKey" must have a byte length of ' + ed25519.constants.PRIVATE_KEY_BYTE_LENGTH
        );
      }
      var pk = new NativeBuffer(ed25519.constants.PUBLIC_KEY_BYTE_LENGTH);
      for (var i = 0; i < pk.length; ++i) {
        pk[i] = privateKey[32 + i];
      }
      return pk;
    };
    ed25519.sign = function(options) {
      options = options || {};
      var msg = messageToNativeBuffer(options);
      var privateKey = messageToNativeBuffer({
        message: options.privateKey,
        encoding: "binary"
      });
      if (privateKey.length === ed25519.constants.SEED_BYTE_LENGTH) {
        var keyPair = ed25519.generateKeyPair({ seed: privateKey });
        privateKey = keyPair.privateKey;
      } else if (privateKey.length !== ed25519.constants.PRIVATE_KEY_BYTE_LENGTH) {
        throw new TypeError(
          '"options.privateKey" must have a byte length of ' + ed25519.constants.SEED_BYTE_LENGTH + " or " + ed25519.constants.PRIVATE_KEY_BYTE_LENGTH
        );
      }
      var signedMsg = new NativeBuffer(
        ed25519.constants.SIGN_BYTE_LENGTH + msg.length
      );
      crypto_sign(signedMsg, msg, msg.length, privateKey);
      var sig = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH);
      for (var i = 0; i < sig.length; ++i) {
        sig[i] = signedMsg[i];
      }
      return sig;
    };
    ed25519.verify = function(options) {
      options = options || {};
      var msg = messageToNativeBuffer(options);
      if (options.signature === void 0) {
        throw new TypeError(
          '"options.signature" must be a node.js Buffer, a Uint8Array, a forge ByteBuffer, or a binary string.'
        );
      }
      var sig = messageToNativeBuffer({
        message: options.signature,
        encoding: "binary"
      });
      if (sig.length !== ed25519.constants.SIGN_BYTE_LENGTH) {
        throw new TypeError(
          '"options.signature" must have a byte length of ' + ed25519.constants.SIGN_BYTE_LENGTH
        );
      }
      var publicKey = messageToNativeBuffer({
        message: options.publicKey,
        encoding: "binary"
      });
      if (publicKey.length !== ed25519.constants.PUBLIC_KEY_BYTE_LENGTH) {
        throw new TypeError(
          '"options.publicKey" must have a byte length of ' + ed25519.constants.PUBLIC_KEY_BYTE_LENGTH
        );
      }
      var sm = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH + msg.length);
      var m = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH + msg.length);
      var i;
      for (i = 0; i < ed25519.constants.SIGN_BYTE_LENGTH; ++i) {
        sm[i] = sig[i];
      }
      for (i = 0; i < msg.length; ++i) {
        sm[i + ed25519.constants.SIGN_BYTE_LENGTH] = msg[i];
      }
      return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
    };
    function messageToNativeBuffer(options) {
      var message = options.message;
      if (message instanceof Uint8Array || message instanceof NativeBuffer) {
        return message;
      }
      var encoding = options.encoding;
      if (message === void 0) {
        if (options.md) {
          message = options.md.digest().getBytes();
          encoding = "binary";
        } else {
          throw new TypeError('"options.message" or "options.md" not specified.');
        }
      }
      if (typeof message === "string" && !encoding) {
        throw new TypeError('"options.encoding" must be "binary" or "utf8".');
      }
      if (typeof message === "string") {
        if (typeof Buffer !== "undefined") {
          return Buffer.from(message, encoding);
        }
        message = new ByteBuffer(message, encoding);
      } else if (!(message instanceof ByteBuffer)) {
        throw new TypeError(
          '"options.message" must be a node.js Buffer, a Uint8Array, a forge ByteBuffer, or a string with "options.encoding" specifying its encoding.'
        );
      }
      var buffer = new NativeBuffer(message.length());
      for (var i = 0; i < buffer.length; ++i) {
        buffer[i] = message.at(i);
      }
      return buffer;
    }
    var gf0 = gf();
    var gf1 = gf([1]);
    var D = gf([
      30883,
      4953,
      19914,
      30187,
      55467,
      16705,
      2637,
      112,
      59544,
      30585,
      16505,
      36039,
      65139,
      11119,
      27886,
      20995
    ]);
    var D2 = gf([
      61785,
      9906,
      39828,
      60374,
      45398,
      33411,
      5274,
      224,
      53552,
      61171,
      33010,
      6542,
      64743,
      22239,
      55772,
      9222
    ]);
    var X = gf([
      54554,
      36645,
      11616,
      51542,
      42930,
      38181,
      51040,
      26924,
      56412,
      64982,
      57905,
      49316,
      21502,
      52590,
      14035,
      8553
    ]);
    var Y = gf([
      26200,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214
    ]);
    var L = new Float64Array([
      237,
      211,
      245,
      92,
      26,
      99,
      18,
      88,
      214,
      156,
      247,
      162,
      222,
      249,
      222,
      20,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      16
    ]);
    var I = gf([
      41136,
      18958,
      6951,
      50414,
      58488,
      44335,
      6150,
      12099,
      55207,
      15867,
      153,
      11085,
      57099,
      20417,
      9344,
      11139
    ]);
    function sha512(msg, msgLen) {
      var md = forge.md.sha512.create();
      var buffer = new ByteBuffer(msg);
      md.update(buffer.getBytes(msgLen), "binary");
      var hash = md.digest().getBytes();
      if (typeof Buffer !== "undefined") {
        return Buffer.from(hash, "binary");
      }
      var out = new NativeBuffer(ed25519.constants.HASH_BYTE_LENGTH);
      for (var i = 0; i < 64; ++i) {
        out[i] = hash.charCodeAt(i);
      }
      return out;
    }
    function crypto_sign_keypair(pk, sk) {
      var p = [gf(), gf(), gf(), gf()];
      var i;
      var d = sha512(sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;
      scalarbase(p, d);
      pack(pk, p);
      for (i = 0; i < 32; ++i) {
        sk[i + 32] = pk[i];
      }
      return 0;
    }
    function crypto_sign(sm, m, n, sk) {
      var i, j, x = new Float64Array(64);
      var p = [gf(), gf(), gf(), gf()];
      var d = sha512(sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;
      var smlen = n + 64;
      for (i = 0; i < n; ++i) {
        sm[64 + i] = m[i];
      }
      for (i = 0; i < 32; ++i) {
        sm[32 + i] = d[32 + i];
      }
      var r = sha512(sm.subarray(32), n + 32);
      reduce(r);
      scalarbase(p, r);
      pack(sm, p);
      for (i = 32; i < 64; ++i) {
        sm[i] = sk[i];
      }
      var h = sha512(sm, n + 64);
      reduce(h);
      for (i = 32; i < 64; ++i) {
        x[i] = 0;
      }
      for (i = 0; i < 32; ++i) {
        x[i] = r[i];
      }
      for (i = 0; i < 32; ++i) {
        for (j = 0; j < 32; j++) {
          x[i + j] += h[i] * d[j];
        }
      }
      modL(sm.subarray(32), x);
      return smlen;
    }
    function crypto_sign_open(m, sm, n, pk) {
      var i, mlen;
      var t = new NativeBuffer(32);
      var p = [gf(), gf(), gf(), gf()], q = [gf(), gf(), gf(), gf()];
      mlen = -1;
      if (n < 64) {
        return -1;
      }
      if (unpackneg(q, pk)) {
        return -1;
      }
      for (i = 0; i < n; ++i) {
        m[i] = sm[i];
      }
      for (i = 0; i < 32; ++i) {
        m[i + 32] = pk[i];
      }
      var h = sha512(m, n);
      reduce(h);
      scalarmult(p, q, h);
      scalarbase(q, sm.subarray(32));
      add(p, q);
      pack(t, p);
      n -= 64;
      if (crypto_verify_32(sm, 0, t, 0)) {
        for (i = 0; i < n; ++i) {
          m[i] = 0;
        }
        return -1;
      }
      for (i = 0; i < n; ++i) {
        m[i] = sm[i + 64];
      }
      mlen = n;
      return mlen;
    }
    function modL(r, x) {
      var carry, i, j, k;
      for (i = 63; i >= 32; --i) {
        carry = 0;
        for (j = i - 32, k = i - 12; j < k; ++j) {
          x[j] += carry - 16 * x[i] * L[j - (i - 32)];
          carry = x[j] + 128 >> 8;
          x[j] -= carry * 256;
        }
        x[j] += carry;
        x[i] = 0;
      }
      carry = 0;
      for (j = 0; j < 32; ++j) {
        x[j] += carry - (x[31] >> 4) * L[j];
        carry = x[j] >> 8;
        x[j] &= 255;
      }
      for (j = 0; j < 32; ++j) {
        x[j] -= carry * L[j];
      }
      for (i = 0; i < 32; ++i) {
        x[i + 1] += x[i] >> 8;
        r[i] = x[i] & 255;
      }
    }
    function reduce(r) {
      var x = new Float64Array(64);
      for (var i = 0; i < 64; ++i) {
        x[i] = r[i];
        r[i] = 0;
      }
      modL(r, x);
    }
    function add(p, q) {
      var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();
      Z(a, p[1], p[0]);
      Z(t, q[1], q[0]);
      M(a, a, t);
      A(b, p[0], p[1]);
      A(t, q[0], q[1]);
      M(b, b, t);
      M(c, p[3], q[3]);
      M(c, c, D2);
      M(d, p[2], q[2]);
      A(d, d, d);
      Z(e, b, a);
      Z(f, d, c);
      A(g, d, c);
      A(h, b, a);
      M(p[0], e, f);
      M(p[1], h, g);
      M(p[2], g, f);
      M(p[3], e, h);
    }
    function cswap(p, q, b) {
      for (var i = 0; i < 4; ++i) {
        sel25519(p[i], q[i], b);
      }
    }
    function pack(r, p) {
      var tx = gf(), ty = gf(), zi = gf();
      inv25519(zi, p[2]);
      M(tx, p[0], zi);
      M(ty, p[1], zi);
      pack25519(r, ty);
      r[31] ^= par25519(tx) << 7;
    }
    function pack25519(o, n) {
      var i, j, b;
      var m = gf(), t = gf();
      for (i = 0; i < 16; ++i) {
        t[i] = n[i];
      }
      car25519(t);
      car25519(t);
      car25519(t);
      for (j = 0; j < 2; ++j) {
        m[0] = t[0] - 65517;
        for (i = 1; i < 15; ++i) {
          m[i] = t[i] - 65535 - (m[i - 1] >> 16 & 1);
          m[i - 1] &= 65535;
        }
        m[15] = t[15] - 32767 - (m[14] >> 16 & 1);
        b = m[15] >> 16 & 1;
        m[14] &= 65535;
        sel25519(t, m, 1 - b);
      }
      for (i = 0; i < 16; i++) {
        o[2 * i] = t[i] & 255;
        o[2 * i + 1] = t[i] >> 8;
      }
    }
    function unpackneg(r, p) {
      var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
      set25519(r[2], gf1);
      unpack25519(r[1], p);
      S(num, r[1]);
      M(den, num, D);
      Z(num, num, r[2]);
      A(den, r[2], den);
      S(den2, den);
      S(den4, den2);
      M(den6, den4, den2);
      M(t, den6, num);
      M(t, t, den);
      pow2523(t, t);
      M(t, t, num);
      M(t, t, den);
      M(t, t, den);
      M(r[0], t, den);
      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num)) {
        M(r[0], r[0], I);
      }
      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num)) {
        return -1;
      }
      if (par25519(r[0]) === p[31] >> 7) {
        Z(r[0], gf0, r[0]);
      }
      M(r[3], r[0], r[1]);
      return 0;
    }
    function unpack25519(o, n) {
      var i;
      for (i = 0; i < 16; ++i) {
        o[i] = n[2 * i] + (n[2 * i + 1] << 8);
      }
      o[15] &= 32767;
    }
    function pow2523(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; ++a) {
        c[a] = i[a];
      }
      for (a = 250; a >= 0; --a) {
        S(c, c);
        if (a !== 1) {
          M(c, c, i);
        }
      }
      for (a = 0; a < 16; ++a) {
        o[a] = c[a];
      }
    }
    function neq25519(a, b) {
      var c = new NativeBuffer(32);
      var d = new NativeBuffer(32);
      pack25519(c, a);
      pack25519(d, b);
      return crypto_verify_32(c, 0, d, 0);
    }
    function crypto_verify_32(x, xi, y, yi) {
      return vn(x, xi, y, yi, 32);
    }
    function vn(x, xi, y, yi, n) {
      var i, d = 0;
      for (i = 0; i < n; ++i) {
        d |= x[xi + i] ^ y[yi + i];
      }
      return (1 & d - 1 >>> 8) - 1;
    }
    function par25519(a) {
      var d = new NativeBuffer(32);
      pack25519(d, a);
      return d[0] & 1;
    }
    function scalarmult(p, q, s) {
      var b, i;
      set25519(p[0], gf0);
      set25519(p[1], gf1);
      set25519(p[2], gf1);
      set25519(p[3], gf0);
      for (i = 255; i >= 0; --i) {
        b = s[i / 8 | 0] >> (i & 7) & 1;
        cswap(p, q, b);
        add(q, p);
        add(p, p);
        cswap(p, q, b);
      }
    }
    function scalarbase(p, s) {
      var q = [gf(), gf(), gf(), gf()];
      set25519(q[0], X);
      set25519(q[1], Y);
      set25519(q[2], gf1);
      M(q[3], X, Y);
      scalarmult(p, q, s);
    }
    function set25519(r, a) {
      var i;
      for (i = 0; i < 16; i++) {
        r[i] = a[i] | 0;
      }
    }
    function inv25519(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; ++a) {
        c[a] = i[a];
      }
      for (a = 253; a >= 0; --a) {
        S(c, c);
        if (a !== 2 && a !== 4) {
          M(c, c, i);
        }
      }
      for (a = 0; a < 16; ++a) {
        o[a] = c[a];
      }
    }
    function car25519(o) {
      var i, v, c = 1;
      for (i = 0; i < 16; ++i) {
        v = o[i] + c + 65535;
        c = Math.floor(v / 65536);
        o[i] = v - c * 65536;
      }
      o[0] += c - 1 + 37 * (c - 1);
    }
    function sel25519(p, q, b) {
      var t, c = ~(b - 1);
      for (var i = 0; i < 16; ++i) {
        t = c & (p[i] ^ q[i]);
        p[i] ^= t;
        q[i] ^= t;
      }
    }
    function gf(init) {
      var i, r = new Float64Array(16);
      if (init) {
        for (i = 0; i < init.length; ++i) {
          r[i] = init[i];
        }
      }
      return r;
    }
    function A(o, a, b) {
      for (var i = 0; i < 16; ++i) {
        o[i] = a[i] + b[i];
      }
    }
    function Z(o, a, b) {
      for (var i = 0; i < 16; ++i) {
        o[i] = a[i] - b[i];
      }
    }
    function S(o, a) {
      M(o, a, a);
    }
    function M(o, a, b) {
      var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
      v = a[0];
      t0 += v * b0;
      t1 += v * b1;
      t2 += v * b2;
      t3 += v * b3;
      t4 += v * b4;
      t5 += v * b5;
      t6 += v * b6;
      t7 += v * b7;
      t8 += v * b8;
      t9 += v * b9;
      t10 += v * b10;
      t11 += v * b11;
      t12 += v * b12;
      t13 += v * b13;
      t14 += v * b14;
      t15 += v * b15;
      v = a[1];
      t1 += v * b0;
      t2 += v * b1;
      t3 += v * b2;
      t4 += v * b3;
      t5 += v * b4;
      t6 += v * b5;
      t7 += v * b6;
      t8 += v * b7;
      t9 += v * b8;
      t10 += v * b9;
      t11 += v * b10;
      t12 += v * b11;
      t13 += v * b12;
      t14 += v * b13;
      t15 += v * b14;
      t16 += v * b15;
      v = a[2];
      t2 += v * b0;
      t3 += v * b1;
      t4 += v * b2;
      t5 += v * b3;
      t6 += v * b4;
      t7 += v * b5;
      t8 += v * b6;
      t9 += v * b7;
      t10 += v * b8;
      t11 += v * b9;
      t12 += v * b10;
      t13 += v * b11;
      t14 += v * b12;
      t15 += v * b13;
      t16 += v * b14;
      t17 += v * b15;
      v = a[3];
      t3 += v * b0;
      t4 += v * b1;
      t5 += v * b2;
      t6 += v * b3;
      t7 += v * b4;
      t8 += v * b5;
      t9 += v * b6;
      t10 += v * b7;
      t11 += v * b8;
      t12 += v * b9;
      t13 += v * b10;
      t14 += v * b11;
      t15 += v * b12;
      t16 += v * b13;
      t17 += v * b14;
      t18 += v * b15;
      v = a[4];
      t4 += v * b0;
      t5 += v * b1;
      t6 += v * b2;
      t7 += v * b3;
      t8 += v * b4;
      t9 += v * b5;
      t10 += v * b6;
      t11 += v * b7;
      t12 += v * b8;
      t13 += v * b9;
      t14 += v * b10;
      t15 += v * b11;
      t16 += v * b12;
      t17 += v * b13;
      t18 += v * b14;
      t19 += v * b15;
      v = a[5];
      t5 += v * b0;
      t6 += v * b1;
      t7 += v * b2;
      t8 += v * b3;
      t9 += v * b4;
      t10 += v * b5;
      t11 += v * b6;
      t12 += v * b7;
      t13 += v * b8;
      t14 += v * b9;
      t15 += v * b10;
      t16 += v * b11;
      t17 += v * b12;
      t18 += v * b13;
      t19 += v * b14;
      t20 += v * b15;
      v = a[6];
      t6 += v * b0;
      t7 += v * b1;
      t8 += v * b2;
      t9 += v * b3;
      t10 += v * b4;
      t11 += v * b5;
      t12 += v * b6;
      t13 += v * b7;
      t14 += v * b8;
      t15 += v * b9;
      t16 += v * b10;
      t17 += v * b11;
      t18 += v * b12;
      t19 += v * b13;
      t20 += v * b14;
      t21 += v * b15;
      v = a[7];
      t7 += v * b0;
      t8 += v * b1;
      t9 += v * b2;
      t10 += v * b3;
      t11 += v * b4;
      t12 += v * b5;
      t13 += v * b6;
      t14 += v * b7;
      t15 += v * b8;
      t16 += v * b9;
      t17 += v * b10;
      t18 += v * b11;
      t19 += v * b12;
      t20 += v * b13;
      t21 += v * b14;
      t22 += v * b15;
      v = a[8];
      t8 += v * b0;
      t9 += v * b1;
      t10 += v * b2;
      t11 += v * b3;
      t12 += v * b4;
      t13 += v * b5;
      t14 += v * b6;
      t15 += v * b7;
      t16 += v * b8;
      t17 += v * b9;
      t18 += v * b10;
      t19 += v * b11;
      t20 += v * b12;
      t21 += v * b13;
      t22 += v * b14;
      t23 += v * b15;
      v = a[9];
      t9 += v * b0;
      t10 += v * b1;
      t11 += v * b2;
      t12 += v * b3;
      t13 += v * b4;
      t14 += v * b5;
      t15 += v * b6;
      t16 += v * b7;
      t17 += v * b8;
      t18 += v * b9;
      t19 += v * b10;
      t20 += v * b11;
      t21 += v * b12;
      t22 += v * b13;
      t23 += v * b14;
      t24 += v * b15;
      v = a[10];
      t10 += v * b0;
      t11 += v * b1;
      t12 += v * b2;
      t13 += v * b3;
      t14 += v * b4;
      t15 += v * b5;
      t16 += v * b6;
      t17 += v * b7;
      t18 += v * b8;
      t19 += v * b9;
      t20 += v * b10;
      t21 += v * b11;
      t22 += v * b12;
      t23 += v * b13;
      t24 += v * b14;
      t25 += v * b15;
      v = a[11];
      t11 += v * b0;
      t12 += v * b1;
      t13 += v * b2;
      t14 += v * b3;
      t15 += v * b4;
      t16 += v * b5;
      t17 += v * b6;
      t18 += v * b7;
      t19 += v * b8;
      t20 += v * b9;
      t21 += v * b10;
      t22 += v * b11;
      t23 += v * b12;
      t24 += v * b13;
      t25 += v * b14;
      t26 += v * b15;
      v = a[12];
      t12 += v * b0;
      t13 += v * b1;
      t14 += v * b2;
      t15 += v * b3;
      t16 += v * b4;
      t17 += v * b5;
      t18 += v * b6;
      t19 += v * b7;
      t20 += v * b8;
      t21 += v * b9;
      t22 += v * b10;
      t23 += v * b11;
      t24 += v * b12;
      t25 += v * b13;
      t26 += v * b14;
      t27 += v * b15;
      v = a[13];
      t13 += v * b0;
      t14 += v * b1;
      t15 += v * b2;
      t16 += v * b3;
      t17 += v * b4;
      t18 += v * b5;
      t19 += v * b6;
      t20 += v * b7;
      t21 += v * b8;
      t22 += v * b9;
      t23 += v * b10;
      t24 += v * b11;
      t25 += v * b12;
      t26 += v * b13;
      t27 += v * b14;
      t28 += v * b15;
      v = a[14];
      t14 += v * b0;
      t15 += v * b1;
      t16 += v * b2;
      t17 += v * b3;
      t18 += v * b4;
      t19 += v * b5;
      t20 += v * b6;
      t21 += v * b7;
      t22 += v * b8;
      t23 += v * b9;
      t24 += v * b10;
      t25 += v * b11;
      t26 += v * b12;
      t27 += v * b13;
      t28 += v * b14;
      t29 += v * b15;
      v = a[15];
      t15 += v * b0;
      t16 += v * b1;
      t17 += v * b2;
      t18 += v * b3;
      t19 += v * b4;
      t20 += v * b5;
      t21 += v * b6;
      t22 += v * b7;
      t23 += v * b8;
      t24 += v * b9;
      t25 += v * b10;
      t26 += v * b11;
      t27 += v * b12;
      t28 += v * b13;
      t29 += v * b14;
      t30 += v * b15;
      t0 += 38 * t16;
      t1 += 38 * t17;
      t2 += 38 * t18;
      t3 += 38 * t19;
      t4 += 38 * t20;
      t5 += 38 * t21;
      t6 += 38 * t22;
      t7 += 38 * t23;
      t8 += 38 * t24;
      t9 += 38 * t25;
      t10 += 38 * t26;
      t11 += 38 * t27;
      t12 += 38 * t28;
      t13 += 38 * t29;
      t14 += 38 * t30;
      c = 1;
      v = t0 + c + 65535;
      c = Math.floor(v / 65536);
      t0 = v - c * 65536;
      v = t1 + c + 65535;
      c = Math.floor(v / 65536);
      t1 = v - c * 65536;
      v = t2 + c + 65535;
      c = Math.floor(v / 65536);
      t2 = v - c * 65536;
      v = t3 + c + 65535;
      c = Math.floor(v / 65536);
      t3 = v - c * 65536;
      v = t4 + c + 65535;
      c = Math.floor(v / 65536);
      t4 = v - c * 65536;
      v = t5 + c + 65535;
      c = Math.floor(v / 65536);
      t5 = v - c * 65536;
      v = t6 + c + 65535;
      c = Math.floor(v / 65536);
      t6 = v - c * 65536;
      v = t7 + c + 65535;
      c = Math.floor(v / 65536);
      t7 = v - c * 65536;
      v = t8 + c + 65535;
      c = Math.floor(v / 65536);
      t8 = v - c * 65536;
      v = t9 + c + 65535;
      c = Math.floor(v / 65536);
      t9 = v - c * 65536;
      v = t10 + c + 65535;
      c = Math.floor(v / 65536);
      t10 = v - c * 65536;
      v = t11 + c + 65535;
      c = Math.floor(v / 65536);
      t11 = v - c * 65536;
      v = t12 + c + 65535;
      c = Math.floor(v / 65536);
      t12 = v - c * 65536;
      v = t13 + c + 65535;
      c = Math.floor(v / 65536);
      t13 = v - c * 65536;
      v = t14 + c + 65535;
      c = Math.floor(v / 65536);
      t14 = v - c * 65536;
      v = t15 + c + 65535;
      c = Math.floor(v / 65536);
      t15 = v - c * 65536;
      t0 += c - 1 + 37 * (c - 1);
      c = 1;
      v = t0 + c + 65535;
      c = Math.floor(v / 65536);
      t0 = v - c * 65536;
      v = t1 + c + 65535;
      c = Math.floor(v / 65536);
      t1 = v - c * 65536;
      v = t2 + c + 65535;
      c = Math.floor(v / 65536);
      t2 = v - c * 65536;
      v = t3 + c + 65535;
      c = Math.floor(v / 65536);
      t3 = v - c * 65536;
      v = t4 + c + 65535;
      c = Math.floor(v / 65536);
      t4 = v - c * 65536;
      v = t5 + c + 65535;
      c = Math.floor(v / 65536);
      t5 = v - c * 65536;
      v = t6 + c + 65535;
      c = Math.floor(v / 65536);
      t6 = v - c * 65536;
      v = t7 + c + 65535;
      c = Math.floor(v / 65536);
      t7 = v - c * 65536;
      v = t8 + c + 65535;
      c = Math.floor(v / 65536);
      t8 = v - c * 65536;
      v = t9 + c + 65535;
      c = Math.floor(v / 65536);
      t9 = v - c * 65536;
      v = t10 + c + 65535;
      c = Math.floor(v / 65536);
      t10 = v - c * 65536;
      v = t11 + c + 65535;
      c = Math.floor(v / 65536);
      t11 = v - c * 65536;
      v = t12 + c + 65535;
      c = Math.floor(v / 65536);
      t12 = v - c * 65536;
      v = t13 + c + 65535;
      c = Math.floor(v / 65536);
      t13 = v - c * 65536;
      v = t14 + c + 65535;
      c = Math.floor(v / 65536);
      t14 = v - c * 65536;
      v = t15 + c + 65535;
      c = Math.floor(v / 65536);
      t15 = v - c * 65536;
      t0 += c - 1 + 37 * (c - 1);
      o[0] = t0;
      o[1] = t1;
      o[2] = t2;
      o[3] = t3;
      o[4] = t4;
      o[5] = t5;
      o[6] = t6;
      o[7] = t7;
      o[8] = t8;
      o[9] = t9;
      o[10] = t10;
      o[11] = t11;
      o[12] = t12;
      o[13] = t13;
      o[14] = t14;
      o[15] = t15;
    }
  }
});

// node_modules/node-forge/lib/kem.js
var require_kem = __commonJS({
  "node_modules/node-forge/lib/kem.js"(exports, module2) {
    var forge = require_forge();
    require_util();
    require_random();
    require_jsbn();
    module2.exports = forge.kem = forge.kem || {};
    var BigInteger = forge.jsbn.BigInteger;
    forge.kem.rsa = {};
    forge.kem.rsa.create = function(kdf, options) {
      options = options || {};
      var prng = options.prng || forge.random;
      var kem = {};
      kem.encrypt = function(publicKey, keyLength) {
        var byteLength = Math.ceil(publicKey.n.bitLength() / 8);
        var r;
        do {
          r = new BigInteger(
            forge.util.bytesToHex(prng.getBytesSync(byteLength)),
            16
          ).mod(publicKey.n);
        } while (r.compareTo(BigInteger.ONE) <= 0);
        r = forge.util.hexToBytes(r.toString(16));
        var zeros = byteLength - r.length;
        if (zeros > 0) {
          r = forge.util.fillString(String.fromCharCode(0), zeros) + r;
        }
        var encapsulation = publicKey.encrypt(r, "NONE");
        var key = kdf.generate(r, keyLength);
        return { encapsulation, key };
      };
      kem.decrypt = function(privateKey, encapsulation, keyLength) {
        var r = privateKey.decrypt(encapsulation, "NONE");
        return kdf.generate(r, keyLength);
      };
      return kem;
    };
    forge.kem.kdf1 = function(md, digestLength) {
      _createKDF(this, md, 0, digestLength || md.digestLength);
    };
    forge.kem.kdf2 = function(md, digestLength) {
      _createKDF(this, md, 1, digestLength || md.digestLength);
    };
    function _createKDF(kdf, md, counterStart, digestLength) {
      kdf.generate = function(x, length) {
        var key = new forge.util.ByteBuffer();
        var k = Math.ceil(length / digestLength) + counterStart;
        var c = new forge.util.ByteBuffer();
        for (var i = counterStart; i < k; ++i) {
          c.putInt32(i);
          md.start();
          md.update(x + c.getBytes());
          var hash = md.digest();
          key.putBytes(hash.getBytes(digestLength));
        }
        key.truncate(key.length() - length);
        return key.getBytes();
      };
    }
  }
});

// node_modules/node-forge/lib/log.js
var require_log = __commonJS({
  "node_modules/node-forge/lib/log.js"(exports, module2) {
    var forge = require_forge();
    require_util();
    module2.exports = forge.log = forge.log || {};
    forge.log.levels = [
      "none",
      "error",
      "warning",
      "info",
      "debug",
      "verbose",
      "max"
    ];
    var sLevelInfo = {};
    var sLoggers = [];
    var sConsoleLogger = null;
    forge.log.LEVEL_LOCKED = 1 << 1;
    forge.log.NO_LEVEL_CHECK = 1 << 2;
    forge.log.INTERPOLATE = 1 << 3;
    for (i = 0; i < forge.log.levels.length; ++i) {
      level = forge.log.levels[i];
      sLevelInfo[level] = {
        index: i,
        name: level.toUpperCase()
      };
    }
    var level;
    var i;
    forge.log.logMessage = function(message) {
      var messageLevelIndex = sLevelInfo[message.level].index;
      for (var i2 = 0; i2 < sLoggers.length; ++i2) {
        var logger2 = sLoggers[i2];
        if (logger2.flags & forge.log.NO_LEVEL_CHECK) {
          logger2.f(message);
        } else {
          var loggerLevelIndex = sLevelInfo[logger2.level].index;
          if (messageLevelIndex <= loggerLevelIndex) {
            logger2.f(logger2, message);
          }
        }
      }
    };
    forge.log.prepareStandard = function(message) {
      if (!("standard" in message)) {
        message.standard = sLevelInfo[message.level].name + //' ' + +message.timestamp +
        " [" + message.category + "] " + message.message;
      }
    };
    forge.log.prepareFull = function(message) {
      if (!("full" in message)) {
        var args = [message.message];
        args = args.concat([]);
        message.full = forge.util.format.apply(this, args);
      }
    };
    forge.log.prepareStandardFull = function(message) {
      if (!("standardFull" in message)) {
        forge.log.prepareStandard(message);
        message.standardFull = message.standard;
      }
    };
    if (true) {
      levels = ["error", "warning", "info", "debug", "verbose"];
      for (i = 0; i < levels.length; ++i) {
        (function(level2) {
          forge.log[level2] = function(category, message) {
            var args = Array.prototype.slice.call(arguments).slice(2);
            var msg = {
              timestamp: /* @__PURE__ */ new Date(),
              level: level2,
              category,
              message,
              "arguments": args
              /*standard*/
              /*full*/
              /*fullMessage*/
            };
            forge.log.logMessage(msg);
          };
        })(levels[i]);
      }
    }
    var levels;
    var i;
    forge.log.makeLogger = function(logFunction) {
      var logger2 = {
        flags: 0,
        f: logFunction
      };
      forge.log.setLevel(logger2, "none");
      return logger2;
    };
    forge.log.setLevel = function(logger2, level2) {
      var rval = false;
      if (logger2 && !(logger2.flags & forge.log.LEVEL_LOCKED)) {
        for (var i2 = 0; i2 < forge.log.levels.length; ++i2) {
          var aValidLevel = forge.log.levels[i2];
          if (level2 == aValidLevel) {
            logger2.level = level2;
            rval = true;
            break;
          }
        }
      }
      return rval;
    };
    forge.log.lock = function(logger2, lock2) {
      if (typeof lock2 === "undefined" || lock2) {
        logger2.flags |= forge.log.LEVEL_LOCKED;
      } else {
        logger2.flags &= ~forge.log.LEVEL_LOCKED;
      }
    };
    forge.log.addLogger = function(logger2) {
      sLoggers.push(logger2);
    };
    if (typeof console !== "undefined" && "log" in console) {
      if (console.error && console.warn && console.info && console.debug) {
        levelHandlers = {
          error: console.error,
          warning: console.warn,
          info: console.info,
          debug: console.debug,
          verbose: console.debug
        };
        f = function(logger2, message) {
          forge.log.prepareStandard(message);
          var handler = levelHandlers[message.level];
          var args = [message.standard];
          args = args.concat(message["arguments"].slice());
          handler.apply(console, args);
        };
        logger = forge.log.makeLogger(f);
      } else {
        f = function(logger2, message) {
          forge.log.prepareStandardFull(message);
          console.log(message.standardFull);
        };
        logger = forge.log.makeLogger(f);
      }
      forge.log.setLevel(logger, "debug");
      forge.log.addLogger(logger);
      sConsoleLogger = logger;
    } else {
      console = {
        log: function() {
        }
      };
    }
    var logger;
    var levelHandlers;
    var f;
    if (sConsoleLogger !== null && typeof window !== "undefined" && window.location) {
      query = new URL(window.location.href).searchParams;
      if (query.has("console.level")) {
        forge.log.setLevel(
          sConsoleLogger,
          query.get("console.level").slice(-1)[0]
        );
      }
      if (query.has("console.lock")) {
        lock = query.get("console.lock").slice(-1)[0];
        if (lock == "true") {
          forge.log.lock(sConsoleLogger);
        }
      }
    }
    var query;
    var lock;
    forge.log.consoleLogger = sConsoleLogger;
  }
});

// node_modules/node-forge/lib/md.all.js
var require_md_all = __commonJS({
  "node_modules/node-forge/lib/md.all.js"(exports, module2) {
    module2.exports = require_md();
    require_md5();
    require_sha1();
    require_sha256();
    require_sha512();
  }
});

// node_modules/node-forge/lib/pkcs7.js
var require_pkcs7 = __commonJS({
  "node_modules/node-forge/lib/pkcs7.js"(exports, module2) {
    var forge = require_forge();
    require_aes();
    require_asn1();
    require_des();
    require_oids();
    require_pem();
    require_pkcs7asn1();
    require_random();
    require_util();
    require_x509();
    var asn1 = forge.asn1;
    var p7 = module2.exports = forge.pkcs7 = forge.pkcs7 || {};
    p7.messageFromPem = function(pem) {
      var msg = forge.pem.decode(pem)[0];
      if (msg.type !== "PKCS7") {
        var error = new Error('Could not convert PKCS#7 message from PEM; PEM header type is not "PKCS#7".');
        error.headerType = msg.type;
        throw error;
      }
      if (msg.procType && msg.procType.type === "ENCRYPTED") {
        throw new Error("Could not convert PKCS#7 message from PEM; PEM is encrypted.");
      }
      var obj = asn1.fromDer(msg.body);
      return p7.messageFromAsn1(obj);
    };
    p7.messageToPem = function(msg, maxline) {
      var pemObj = {
        type: "PKCS7",
        body: asn1.toDer(msg.toAsn1()).getBytes()
      };
      return forge.pem.encode(pemObj, { maxline });
    };
    p7.messageFromAsn1 = function(obj) {
      var capture = {};
      var errors = [];
      if (!asn1.validate(obj, p7.asn1.contentInfoValidator, capture, errors)) {
        var error = new Error("Cannot read PKCS#7 message. ASN.1 object is not an PKCS#7 ContentInfo.");
        error.errors = errors;
        throw error;
      }
      var contentType = asn1.derToOid(capture.contentType);
      var msg;
      switch (contentType) {
        case forge.pki.oids.envelopedData:
          msg = p7.createEnvelopedData();
          break;
        case forge.pki.oids.encryptedData:
          msg = p7.createEncryptedData();
          break;
        case forge.pki.oids.signedData:
          msg = p7.createSignedData();
          break;
        default:
          throw new Error("Cannot read PKCS#7 message. ContentType with OID " + contentType + " is not (yet) supported.");
      }
      msg.fromAsn1(capture.content.value[0]);
      return msg;
    };
    p7.createSignedData = function() {
      var msg = null;
      msg = {
        type: forge.pki.oids.signedData,
        version: 1,
        certificates: [],
        crls: [],
        // TODO: add json-formatted signer stuff here?
        signers: [],
        // populated during sign()
        digestAlgorithmIdentifiers: [],
        contentInfo: null,
        signerInfos: [],
        fromAsn1: function(obj) {
          _fromAsn1(msg, obj, p7.asn1.signedDataValidator);
          msg.certificates = [];
          msg.crls = [];
          msg.digestAlgorithmIdentifiers = [];
          msg.contentInfo = null;
          msg.signerInfos = [];
          if (msg.rawCapture.certificates) {
            var certs = msg.rawCapture.certificates.value;
            for (var i = 0; i < certs.length; ++i) {
              msg.certificates.push(forge.pki.certificateFromAsn1(certs[i]));
            }
          }
        },
        toAsn1: function() {
          if (!msg.contentInfo) {
            msg.sign();
          }
          var certs = [];
          for (var i = 0; i < msg.certificates.length; ++i) {
            certs.push(forge.pki.certificateToAsn1(msg.certificates[i]));
          }
          var crls = [];
          var signedData = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              // Version
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.INTEGER,
                false,
                asn1.integerToDer(msg.version).getBytes()
              ),
              // DigestAlgorithmIdentifiers
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.SET,
                true,
                msg.digestAlgorithmIdentifiers
              ),
              // ContentInfo
              msg.contentInfo
            ])
          ]);
          if (certs.length > 0) {
            signedData.value[0].value.push(
              asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, certs)
            );
          }
          if (crls.length > 0) {
            signedData.value[0].value.push(
              asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, crls)
            );
          }
          signedData.value[0].value.push(
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SET,
              true,
              msg.signerInfos
            )
          );
          return asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.SEQUENCE,
            true,
            [
              // ContentType
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OID,
                false,
                asn1.oidToDer(msg.type).getBytes()
              ),
              // [0] SignedData
              signedData
            ]
          );
        },
        /**
         * Add (another) entity to list of signers.
         *
         * Note: If authenticatedAttributes are provided, then, per RFC 2315,
         * they must include at least two attributes: content type and
         * message digest. The message digest attribute value will be
         * auto-calculated during signing and will be ignored if provided.
         *
         * Here's an example of providing these two attributes:
         *
         * forge.pkcs7.createSignedData();
         * p7.addSigner({
         *   issuer: cert.issuer.attributes,
         *   serialNumber: cert.serialNumber,
         *   key: privateKey,
         *   digestAlgorithm: forge.pki.oids.sha1,
         *   authenticatedAttributes: [{
         *     type: forge.pki.oids.contentType,
         *     value: forge.pki.oids.data
         *   }, {
         *     type: forge.pki.oids.messageDigest
         *   }]
         * });
         *
         * TODO: Support [subjectKeyIdentifier] as signer's ID.
         *
         * @param signer the signer information:
         *          key the signer's private key.
         *          [certificate] a certificate containing the public key
         *            associated with the signer's private key; use this option as
         *            an alternative to specifying signer.issuer and
         *            signer.serialNumber.
         *          [issuer] the issuer attributes (eg: cert.issuer.attributes).
         *          [serialNumber] the signer's certificate's serial number in
         *           hexadecimal (eg: cert.serialNumber).
         *          [digestAlgorithm] the message digest OID, as a string, to use
         *            (eg: forge.pki.oids.sha1).
         *          [authenticatedAttributes] an optional array of attributes
         *            to also sign along with the content.
         */
        addSigner: function(signer) {
          var issuer = signer.issuer;
          var serialNumber = signer.serialNumber;
          if (signer.certificate) {
            var cert = signer.certificate;
            if (typeof cert === "string") {
              cert = forge.pki.certificateFromPem(cert);
            }
            issuer = cert.issuer.attributes;
            serialNumber = cert.serialNumber;
          }
          var key = signer.key;
          if (!key) {
            throw new Error(
              "Could not add PKCS#7 signer; no private key specified."
            );
          }
          if (typeof key === "string") {
            key = forge.pki.privateKeyFromPem(key);
          }
          var digestAlgorithm = signer.digestAlgorithm || forge.pki.oids.sha1;
          switch (digestAlgorithm) {
            case forge.pki.oids.sha1:
            case forge.pki.oids.sha256:
            case forge.pki.oids.sha384:
            case forge.pki.oids.sha512:
            case forge.pki.oids.md5:
              break;
            default:
              throw new Error(
                "Could not add PKCS#7 signer; unknown message digest algorithm: " + digestAlgorithm
              );
          }
          var authenticatedAttributes = signer.authenticatedAttributes || [];
          if (authenticatedAttributes.length > 0) {
            var contentType = false;
            var messageDigest = false;
            for (var i = 0; i < authenticatedAttributes.length; ++i) {
              var attr = authenticatedAttributes[i];
              if (!contentType && attr.type === forge.pki.oids.contentType) {
                contentType = true;
                if (messageDigest) {
                  break;
                }
                continue;
              }
              if (!messageDigest && attr.type === forge.pki.oids.messageDigest) {
                messageDigest = true;
                if (contentType) {
                  break;
                }
                continue;
              }
            }
            if (!contentType || !messageDigest) {
              throw new Error("Invalid signer.authenticatedAttributes. If signer.authenticatedAttributes is specified, then it must contain at least two attributes, PKCS #9 content-type and PKCS #9 message-digest.");
            }
          }
          msg.signers.push({
            key,
            version: 1,
            issuer,
            serialNumber,
            digestAlgorithm,
            signatureAlgorithm: forge.pki.oids.rsaEncryption,
            signature: null,
            authenticatedAttributes,
            unauthenticatedAttributes: []
          });
        },
        /**
         * Signs the content.
         * @param options Options to apply when signing:
         *    [detached] boolean. If signing should be done in detached mode. Defaults to false.
         */
        sign: function(options) {
          options = options || {};
          if (typeof msg.content !== "object" || msg.contentInfo === null) {
            msg.contentInfo = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SEQUENCE,
              true,
              [
                // ContentType
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1.oidToDer(forge.pki.oids.data).getBytes()
                )
              ]
            );
            if ("content" in msg) {
              var content;
              if (msg.content instanceof forge.util.ByteBuffer) {
                content = msg.content.bytes();
              } else if (typeof msg.content === "string") {
                content = forge.util.encodeUtf8(msg.content);
              }
              if (options.detached) {
                msg.detachedContent = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, content);
              } else {
                msg.contentInfo.value.push(
                  // [0] EXPLICIT content
                  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                    asn1.create(
                      asn1.Class.UNIVERSAL,
                      asn1.Type.OCTETSTRING,
                      false,
                      content
                    )
                  ])
                );
              }
            }
          }
          if (msg.signers.length === 0) {
            return;
          }
          var mds = addDigestAlgorithmIds();
          addSignerInfos(mds);
        },
        verify: function() {
          throw new Error("PKCS#7 signature verification not yet implemented.");
        },
        /**
         * Add a certificate.
         *
         * @param cert the certificate to add.
         */
        addCertificate: function(cert) {
          if (typeof cert === "string") {
            cert = forge.pki.certificateFromPem(cert);
          }
          msg.certificates.push(cert);
        },
        /**
         * Add a certificate revokation list.
         *
         * @param crl the certificate revokation list to add.
         */
        addCertificateRevokationList: function(crl) {
          throw new Error("PKCS#7 CRL support not yet implemented.");
        }
      };
      return msg;
      function addDigestAlgorithmIds() {
        var mds = {};
        for (var i = 0; i < msg.signers.length; ++i) {
          var signer = msg.signers[i];
          var oid = signer.digestAlgorithm;
          if (!(oid in mds)) {
            mds[oid] = forge.md[forge.pki.oids[oid]].create();
          }
          if (signer.authenticatedAttributes.length === 0) {
            signer.md = mds[oid];
          } else {
            signer.md = forge.md[forge.pki.oids[oid]].create();
          }
        }
        msg.digestAlgorithmIdentifiers = [];
        for (var oid in mds) {
          msg.digestAlgorithmIdentifiers.push(
            // AlgorithmIdentifier
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              // algorithm
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OID,
                false,
                asn1.oidToDer(oid).getBytes()
              ),
              // parameters (null)
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
            ])
          );
        }
        return mds;
      }
      function addSignerInfos(mds) {
        var content;
        if (msg.detachedContent) {
          content = msg.detachedContent;
        } else {
          content = msg.contentInfo.value[1];
          content = content.value[0];
        }
        if (!content) {
          throw new Error(
            "Could not sign PKCS#7 message; there is no content to sign."
          );
        }
        var contentType = asn1.derToOid(msg.contentInfo.value[0].value);
        var bytes = asn1.toDer(content);
        bytes.getByte();
        asn1.getBerValueLength(bytes);
        bytes = bytes.getBytes();
        for (var oid in mds) {
          mds[oid].start().update(bytes);
        }
        var signingTime = /* @__PURE__ */ new Date();
        for (var i = 0; i < msg.signers.length; ++i) {
          var signer = msg.signers[i];
          if (signer.authenticatedAttributes.length === 0) {
            if (contentType !== forge.pki.oids.data) {
              throw new Error(
                "Invalid signer; authenticatedAttributes must be present when the ContentInfo content type is not PKCS#7 Data."
              );
            }
          } else {
            signer.authenticatedAttributesAsn1 = asn1.create(
              asn1.Class.CONTEXT_SPECIFIC,
              0,
              true,
              []
            );
            var attrsAsn1 = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SET,
              true,
              []
            );
            for (var ai = 0; ai < signer.authenticatedAttributes.length; ++ai) {
              var attr = signer.authenticatedAttributes[ai];
              if (attr.type === forge.pki.oids.messageDigest) {
                attr.value = mds[signer.digestAlgorithm].digest();
              } else if (attr.type === forge.pki.oids.signingTime) {
                if (!attr.value) {
                  attr.value = signingTime;
                }
              }
              attrsAsn1.value.push(_attributeToAsn1(attr));
              signer.authenticatedAttributesAsn1.value.push(_attributeToAsn1(attr));
            }
            bytes = asn1.toDer(attrsAsn1).getBytes();
            signer.md.start().update(bytes);
          }
          signer.signature = signer.key.sign(signer.md, "RSASSA-PKCS1-V1_5");
        }
        msg.signerInfos = _signersToAsn1(msg.signers);
      }
    };
    p7.createEncryptedData = function() {
      var msg = null;
      msg = {
        type: forge.pki.oids.encryptedData,
        version: 0,
        encryptedContent: {
          algorithm: forge.pki.oids["aes256-CBC"]
        },
        /**
         * Reads an EncryptedData content block (in ASN.1 format)
         *
         * @param obj The ASN.1 representation of the EncryptedData content block
         */
        fromAsn1: function(obj) {
          _fromAsn1(msg, obj, p7.asn1.encryptedDataValidator);
        },
        /**
         * Decrypt encrypted content
         *
         * @param key The (symmetric) key as a byte buffer
         */
        decrypt: function(key) {
          if (key !== void 0) {
            msg.encryptedContent.key = key;
          }
          _decryptContent(msg);
        }
      };
      return msg;
    };
    p7.createEnvelopedData = function() {
      var msg = null;
      msg = {
        type: forge.pki.oids.envelopedData,
        version: 0,
        recipients: [],
        encryptedContent: {
          algorithm: forge.pki.oids["aes256-CBC"]
        },
        /**
         * Reads an EnvelopedData content block (in ASN.1 format)
         *
         * @param obj the ASN.1 representation of the EnvelopedData content block.
         */
        fromAsn1: function(obj) {
          var capture = _fromAsn1(msg, obj, p7.asn1.envelopedDataValidator);
          msg.recipients = _recipientsFromAsn1(capture.recipientInfos.value);
        },
        toAsn1: function() {
          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // ContentType
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(msg.type).getBytes()
            ),
            // [0] EnvelopedData
            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // Version
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.INTEGER,
                  false,
                  asn1.integerToDer(msg.version).getBytes()
                ),
                // RecipientInfos
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.SET,
                  true,
                  _recipientsToAsn1(msg.recipients)
                ),
                // EncryptedContentInfo
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.SEQUENCE,
                  true,
                  _encryptedContentToAsn1(msg.encryptedContent)
                )
              ])
            ])
          ]);
        },
        /**
         * Find recipient by X.509 certificate's issuer.
         *
         * @param cert the certificate with the issuer to look for.
         *
         * @return the recipient object.
         */
        findRecipient: function(cert) {
          var sAttr = cert.issuer.attributes;
          for (var i = 0; i < msg.recipients.length; ++i) {
            var r = msg.recipients[i];
            var rAttr = r.issuer;
            if (r.serialNumber !== cert.serialNumber) {
              continue;
            }
            if (rAttr.length !== sAttr.length) {
              continue;
            }
            var match = true;
            for (var j = 0; j < sAttr.length; ++j) {
              if (rAttr[j].type !== sAttr[j].type || rAttr[j].value !== sAttr[j].value) {
                match = false;
                break;
              }
            }
            if (match) {
              return r;
            }
          }
          return null;
        },
        /**
         * Decrypt enveloped content
         *
         * @param recipient The recipient object related to the private key
         * @param privKey The (RSA) private key object
         */
        decrypt: function(recipient, privKey) {
          if (msg.encryptedContent.key === void 0 && recipient !== void 0 && privKey !== void 0) {
            switch (recipient.encryptedContent.algorithm) {
              case forge.pki.oids.rsaEncryption:
              case forge.pki.oids.desCBC:
                var key = privKey.decrypt(recipient.encryptedContent.content);
                msg.encryptedContent.key = forge.util.createBuffer(key);
                break;
              default:
                throw new Error("Unsupported asymmetric cipher, OID " + recipient.encryptedContent.algorithm);
            }
          }
          _decryptContent(msg);
        },
        /**
         * Add (another) entity to list of recipients.
         *
         * @param cert The certificate of the entity to add.
         */
        addRecipient: function(cert) {
          msg.recipients.push({
            version: 0,
            issuer: cert.issuer.attributes,
            serialNumber: cert.serialNumber,
            encryptedContent: {
              // We simply assume rsaEncryption here, since forge.pki only
              // supports RSA so far.  If the PKI module supports other
              // ciphers one day, we need to modify this one as well.
              algorithm: forge.pki.oids.rsaEncryption,
              key: cert.publicKey
            }
          });
        },
        /**
         * Encrypt enveloped content.
         *
         * This function supports two optional arguments, cipher and key, which
         * can be used to influence symmetric encryption.  Unless cipher is
         * provided, the cipher specified in encryptedContent.algorithm is used
         * (defaults to AES-256-CBC).  If no key is provided, encryptedContent.key
         * is (re-)used.  If that one's not set, a random key will be generated
         * automatically.
         *
         * @param [key] The key to be used for symmetric encryption.
         * @param [cipher] The OID of the symmetric cipher to use.
         */
        encrypt: function(key, cipher) {
          if (msg.encryptedContent.content === void 0) {
            cipher = cipher || msg.encryptedContent.algorithm;
            key = key || msg.encryptedContent.key;
            var keyLen, ivLen, ciphFn;
            switch (cipher) {
              case forge.pki.oids["aes128-CBC"]:
                keyLen = 16;
                ivLen = 16;
                ciphFn = forge.aes.createEncryptionCipher;
                break;
              case forge.pki.oids["aes192-CBC"]:
                keyLen = 24;
                ivLen = 16;
                ciphFn = forge.aes.createEncryptionCipher;
                break;
              case forge.pki.oids["aes256-CBC"]:
                keyLen = 32;
                ivLen = 16;
                ciphFn = forge.aes.createEncryptionCipher;
                break;
              case forge.pki.oids["des-EDE3-CBC"]:
                keyLen = 24;
                ivLen = 8;
                ciphFn = forge.des.createEncryptionCipher;
                break;
              default:
                throw new Error("Unsupported symmetric cipher, OID " + cipher);
            }
            if (key === void 0) {
              key = forge.util.createBuffer(forge.random.getBytes(keyLen));
            } else if (key.length() != keyLen) {
              throw new Error("Symmetric key has wrong length; got " + key.length() + " bytes, expected " + keyLen + ".");
            }
            msg.encryptedContent.algorithm = cipher;
            msg.encryptedContent.key = key;
            msg.encryptedContent.parameter = forge.util.createBuffer(
              forge.random.getBytes(ivLen)
            );
            var ciph = ciphFn(key);
            ciph.start(msg.encryptedContent.parameter.copy());
            ciph.update(msg.content);
            if (!ciph.finish()) {
              throw new Error("Symmetric encryption failed.");
            }
            msg.encryptedContent.content = ciph.output;
          }
          for (var i = 0; i < msg.recipients.length; ++i) {
            var recipient = msg.recipients[i];
            if (recipient.encryptedContent.content !== void 0) {
              continue;
            }
            switch (recipient.encryptedContent.algorithm) {
              case forge.pki.oids.rsaEncryption:
                recipient.encryptedContent.content = recipient.encryptedContent.key.encrypt(
                  msg.encryptedContent.key.data
                );
                break;
              default:
                throw new Error("Unsupported asymmetric cipher, OID " + recipient.encryptedContent.algorithm);
            }
          }
        }
      };
      return msg;
    };
    function _recipientFromAsn1(obj) {
      var capture = {};
      var errors = [];
      if (!asn1.validate(obj, p7.asn1.recipientInfoValidator, capture, errors)) {
        var error = new Error("Cannot read PKCS#7 RecipientInfo. ASN.1 object is not an PKCS#7 RecipientInfo.");
        error.errors = errors;
        throw error;
      }
      return {
        version: capture.version.charCodeAt(0),
        issuer: forge.pki.RDNAttributesAsArray(capture.issuer),
        serialNumber: forge.util.createBuffer(capture.serial).toHex(),
        encryptedContent: {
          algorithm: asn1.derToOid(capture.encAlgorithm),
          parameter: capture.encParameter ? capture.encParameter.value : void 0,
          content: capture.encKey
        }
      };
    }
    function _recipientToAsn1(obj) {
      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // Version
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          asn1.integerToDer(obj.version).getBytes()
        ),
        // IssuerAndSerialNumber
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // Name
          forge.pki.distinguishedNameToAsn1({ attributes: obj.issuer }),
          // Serial
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.INTEGER,
            false,
            forge.util.hexToBytes(obj.serialNumber)
          )
        ]),
        // KeyEncryptionAlgorithmIdentifier
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // Algorithm
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OID,
            false,
            asn1.oidToDer(obj.encryptedContent.algorithm).getBytes()
          ),
          // Parameter, force NULL, only RSA supported for now.
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
        ]),
        // EncryptedKey
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.OCTETSTRING,
          false,
          obj.encryptedContent.content
        )
      ]);
    }
    function _recipientsFromAsn1(infos) {
      var ret = [];
      for (var i = 0; i < infos.length; ++i) {
        ret.push(_recipientFromAsn1(infos[i]));
      }
      return ret;
    }
    function _recipientsToAsn1(recipients) {
      var ret = [];
      for (var i = 0; i < recipients.length; ++i) {
        ret.push(_recipientToAsn1(recipients[i]));
      }
      return ret;
    }
    function _signerToAsn1(obj) {
      var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // version
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.INTEGER,
          false,
          asn1.integerToDer(obj.version).getBytes()
        ),
        // issuerAndSerialNumber
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // name
          forge.pki.distinguishedNameToAsn1({ attributes: obj.issuer }),
          // serial
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.INTEGER,
            false,
            forge.util.hexToBytes(obj.serialNumber)
          )
        ]),
        // digestAlgorithm
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // algorithm
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OID,
            false,
            asn1.oidToDer(obj.digestAlgorithm).getBytes()
          ),
          // parameters (null)
          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
        ])
      ]);
      if (obj.authenticatedAttributesAsn1) {
        rval.value.push(obj.authenticatedAttributesAsn1);
      }
      rval.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // algorithm
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.OID,
          false,
          asn1.oidToDer(obj.signatureAlgorithm).getBytes()
        ),
        // parameters (null)
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
      ]));
      rval.value.push(asn1.create(
        asn1.Class.UNIVERSAL,
        asn1.Type.OCTETSTRING,
        false,
        obj.signature
      ));
      if (obj.unauthenticatedAttributes.length > 0) {
        var attrsAsn1 = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, []);
        for (var i = 0; i < obj.unauthenticatedAttributes.length; ++i) {
          var attr = obj.unauthenticatedAttributes[i];
          attrsAsn1.values.push(_attributeToAsn1(attr));
        }
        rval.value.push(attrsAsn1);
      }
      return rval;
    }
    function _signersToAsn1(signers) {
      var ret = [];
      for (var i = 0; i < signers.length; ++i) {
        ret.push(_signerToAsn1(signers[i]));
      }
      return ret;
    }
    function _attributeToAsn1(attr) {
      var value;
      if (attr.type === forge.pki.oids.contentType) {
        value = asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.OID,
          false,
          asn1.oidToDer(attr.value).getBytes()
        );
      } else if (attr.type === forge.pki.oids.messageDigest) {
        value = asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.OCTETSTRING,
          false,
          attr.value.bytes()
        );
      } else if (attr.type === forge.pki.oids.signingTime) {
        var jan_1_1950 = /* @__PURE__ */ new Date("1950-01-01T00:00:00Z");
        var jan_1_2050 = /* @__PURE__ */ new Date("2050-01-01T00:00:00Z");
        var date = attr.value;
        if (typeof date === "string") {
          var timestamp = Date.parse(date);
          if (!isNaN(timestamp)) {
            date = new Date(timestamp);
          } else if (date.length === 13) {
            date = asn1.utcTimeToDate(date);
          } else {
            date = asn1.generalizedTimeToDate(date);
          }
        }
        if (date >= jan_1_1950 && date < jan_1_2050) {
          value = asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.UTCTIME,
            false,
            asn1.dateToUtcTime(date)
          );
        } else {
          value = asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.GENERALIZEDTIME,
            false,
            asn1.dateToGeneralizedTime(date)
          );
        }
      }
      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
        // AttributeType
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.OID,
          false,
          asn1.oidToDer(attr.type).getBytes()
        ),
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
          // AttributeValue
          value
        ])
      ]);
    }
    function _encryptedContentToAsn1(ec) {
      return [
        // ContentType, always Data for the moment
        asn1.create(
          asn1.Class.UNIVERSAL,
          asn1.Type.OID,
          false,
          asn1.oidToDer(forge.pki.oids.data).getBytes()
        ),
        // ContentEncryptionAlgorithmIdentifier
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
          // Algorithm
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OID,
            false,
            asn1.oidToDer(ec.algorithm).getBytes()
          ),
          // Parameters (IV)
          !ec.parameter ? void 0 : asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OCTETSTRING,
            false,
            ec.parameter.getBytes()
          )
        ]),
        // [0] EncryptedContent
        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
          asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OCTETSTRING,
            false,
            ec.content.getBytes()
          )
        ])
      ];
    }
    function _fromAsn1(msg, obj, validator) {
      var capture = {};
      var errors = [];
      if (!asn1.validate(obj, validator, capture, errors)) {
        var error = new Error("Cannot read PKCS#7 message. ASN.1 object is not a supported PKCS#7 message.");
        error.errors = error;
        throw error;
      }
      var contentType = asn1.derToOid(capture.contentType);
      if (contentType !== forge.pki.oids.data) {
        throw new Error("Unsupported PKCS#7 message. Only wrapped ContentType Data supported.");
      }
      if (capture.encryptedContent) {
        var content = "";
        if (forge.util.isArray(capture.encryptedContent)) {
          for (var i = 0; i < capture.encryptedContent.length; ++i) {
            if (capture.encryptedContent[i].type !== asn1.Type.OCTETSTRING) {
              throw new Error("Malformed PKCS#7 message, expecting encrypted content constructed of only OCTET STRING objects.");
            }
            content += capture.encryptedContent[i].value;
          }
        } else {
          content = capture.encryptedContent;
        }
        msg.encryptedContent = {
          algorithm: asn1.derToOid(capture.encAlgorithm),
          parameter: forge.util.createBuffer(capture.encParameter.value),
          content: forge.util.createBuffer(content)
        };
      }
      if (capture.content) {
        var content = "";
        if (forge.util.isArray(capture.content)) {
          for (var i = 0; i < capture.content.length; ++i) {
            if (capture.content[i].type !== asn1.Type.OCTETSTRING) {
              throw new Error("Malformed PKCS#7 message, expecting content constructed of only OCTET STRING objects.");
            }
            content += capture.content[i].value;
          }
        } else {
          content = capture.content;
        }
        msg.content = forge.util.createBuffer(content);
      }
      msg.version = capture.version.charCodeAt(0);
      msg.rawCapture = capture;
      return capture;
    }
    function _decryptContent(msg) {
      if (msg.encryptedContent.key === void 0) {
        throw new Error("Symmetric key not available.");
      }
      if (msg.content === void 0) {
        var ciph;
        switch (msg.encryptedContent.algorithm) {
          case forge.pki.oids["aes128-CBC"]:
          case forge.pki.oids["aes192-CBC"]:
          case forge.pki.oids["aes256-CBC"]:
            ciph = forge.aes.createDecryptionCipher(msg.encryptedContent.key);
            break;
          case forge.pki.oids["desCBC"]:
          case forge.pki.oids["des-EDE3-CBC"]:
            ciph = forge.des.createDecryptionCipher(msg.encryptedContent.key);
            break;
          default:
            throw new Error("Unsupported symmetric cipher, OID " + msg.encryptedContent.algorithm);
        }
        ciph.start(msg.encryptedContent.parameter);
        ciph.update(msg.encryptedContent.content);
        if (!ciph.finish()) {
          throw new Error("Symmetric decryption failed.");
        }
        msg.content = ciph.output;
      }
    }
  }
});

// node_modules/node-forge/lib/ssh.js
var require_ssh = __commonJS({
  "node_modules/node-forge/lib/ssh.js"(exports, module2) {
    var forge = require_forge();
    require_aes();
    require_hmac();
    require_md5();
    require_sha1();
    require_util();
    var ssh = module2.exports = forge.ssh = forge.ssh || {};
    ssh.privateKeyToPutty = function(privateKey, passphrase, comment) {
      comment = comment || "";
      passphrase = passphrase || "";
      var algorithm = "ssh-rsa";
      var encryptionAlgorithm = passphrase === "" ? "none" : "aes256-cbc";
      var ppk = "PuTTY-User-Key-File-2: " + algorithm + "\r\n";
      ppk += "Encryption: " + encryptionAlgorithm + "\r\n";
      ppk += "Comment: " + comment + "\r\n";
      var pubbuffer = forge.util.createBuffer();
      _addStringToBuffer(pubbuffer, algorithm);
      _addBigIntegerToBuffer(pubbuffer, privateKey.e);
      _addBigIntegerToBuffer(pubbuffer, privateKey.n);
      var pub = forge.util.encode64(pubbuffer.bytes(), 64);
      var length = Math.floor(pub.length / 66) + 1;
      ppk += "Public-Lines: " + length + "\r\n";
      ppk += pub;
      var privbuffer = forge.util.createBuffer();
      _addBigIntegerToBuffer(privbuffer, privateKey.d);
      _addBigIntegerToBuffer(privbuffer, privateKey.p);
      _addBigIntegerToBuffer(privbuffer, privateKey.q);
      _addBigIntegerToBuffer(privbuffer, privateKey.qInv);
      var priv;
      if (!passphrase) {
        priv = forge.util.encode64(privbuffer.bytes(), 64);
      } else {
        var encLen = privbuffer.length() + 16 - 1;
        encLen -= encLen % 16;
        var padding = _sha1(privbuffer.bytes());
        padding.truncate(padding.length() - encLen + privbuffer.length());
        privbuffer.putBuffer(padding);
        var aeskey = forge.util.createBuffer();
        aeskey.putBuffer(_sha1("\0\0\0\0", passphrase));
        aeskey.putBuffer(_sha1("\0\0\0", passphrase));
        var cipher = forge.aes.createEncryptionCipher(aeskey.truncate(8), "CBC");
        cipher.start(forge.util.createBuffer().fillWithByte(0, 16));
        cipher.update(privbuffer.copy());
        cipher.finish();
        var encrypted = cipher.output;
        encrypted.truncate(16);
        priv = forge.util.encode64(encrypted.bytes(), 64);
      }
      length = Math.floor(priv.length / 66) + 1;
      ppk += "\r\nPrivate-Lines: " + length + "\r\n";
      ppk += priv;
      var mackey = _sha1("putty-private-key-file-mac-key", passphrase);
      var macbuffer = forge.util.createBuffer();
      _addStringToBuffer(macbuffer, algorithm);
      _addStringToBuffer(macbuffer, encryptionAlgorithm);
      _addStringToBuffer(macbuffer, comment);
      macbuffer.putInt32(pubbuffer.length());
      macbuffer.putBuffer(pubbuffer);
      macbuffer.putInt32(privbuffer.length());
      macbuffer.putBuffer(privbuffer);
      var hmac = forge.hmac.create();
      hmac.start("sha1", mackey);
      hmac.update(macbuffer.bytes());
      ppk += "\r\nPrivate-MAC: " + hmac.digest().toHex() + "\r\n";
      return ppk;
    };
    ssh.publicKeyToOpenSSH = function(key, comment) {
      var type = "ssh-rsa";
      comment = comment || "";
      var buffer = forge.util.createBuffer();
      _addStringToBuffer(buffer, type);
      _addBigIntegerToBuffer(buffer, key.e);
      _addBigIntegerToBuffer(buffer, key.n);
      return type + " " + forge.util.encode64(buffer.bytes()) + " " + comment;
    };
    ssh.privateKeyToOpenSSH = function(privateKey, passphrase) {
      if (!passphrase) {
        return forge.pki.privateKeyToPem(privateKey);
      }
      return forge.pki.encryptRsaPrivateKey(
        privateKey,
        passphrase,
        { legacy: true, algorithm: "aes128" }
      );
    };
    ssh.getPublicKeyFingerprint = function(key, options) {
      options = options || {};
      var md = options.md || forge.md.md5.create();
      var type = "ssh-rsa";
      var buffer = forge.util.createBuffer();
      _addStringToBuffer(buffer, type);
      _addBigIntegerToBuffer(buffer, key.e);
      _addBigIntegerToBuffer(buffer, key.n);
      md.start();
      md.update(buffer.getBytes());
      var digest = md.digest();
      if (options.encoding === "hex") {
        var hex = digest.toHex();
        if (options.delimiter) {
          return hex.match(/.{2}/g).join(options.delimiter);
        }
        return hex;
      } else if (options.encoding === "binary") {
        return digest.getBytes();
      } else if (options.encoding) {
        throw new Error('Unknown encoding "' + options.encoding + '".');
      }
      return digest;
    };
    function _addBigIntegerToBuffer(buffer, val) {
      var hexVal = val.toString(16);
      if (hexVal[0] >= "8") {
        hexVal = "00" + hexVal;
      }
      var bytes = forge.util.hexToBytes(hexVal);
      buffer.putInt32(bytes.length);
      buffer.putBytes(bytes);
    }
    function _addStringToBuffer(buffer, val) {
      buffer.putInt32(val.length);
      buffer.putString(val);
    }
    function _sha1() {
      var sha = forge.md.sha1.create();
      var num = arguments.length;
      for (var i = 0; i < num; ++i) {
        sha.update(arguments[i]);
      }
      return sha.digest();
    }
  }
});

// node_modules/node-forge/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/node-forge/lib/index.js"(exports, module2) {
    module2.exports = require_forge();
    require_aes();
    require_aesCipherSuites();
    require_asn1();
    require_cipher();
    require_des();
    require_ed25519();
    require_hmac();
    require_kem();
    require_log();
    require_md_all();
    require_mgf1();
    require_pbkdf2();
    require_pem();
    require_pkcs1();
    require_pkcs12();
    require_pkcs7();
    require_pki();
    require_prime();
    require_prng();
    require_pss();
    require_random();
    require_rc2();
    require_ssh();
    require_tls();
    require_util();
  }
});

// node_modules/statsig-node/dist/ConfigEvaluation.js
var require_ConfigEvaluation = __commonJS({
  "node_modules/statsig-node/dist/ConfigEvaluation.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var ConfigEvaluation = (
      /** @class */
      function() {
        function ConfigEvaluation2(value, rule_id, group_name, secondary_exposures, json_value, explicit_parameters, config_delegate, fetch_from_server) {
          if (rule_id === void 0) {
            rule_id = "";
          }
          if (group_name === void 0) {
            group_name = "";
          }
          if (secondary_exposures === void 0) {
            secondary_exposures = [];
          }
          if (json_value === void 0) {
            json_value = {};
          }
          if (explicit_parameters === void 0) {
            explicit_parameters = null;
          }
          if (config_delegate === void 0) {
            config_delegate = null;
          }
          if (fetch_from_server === void 0) {
            fetch_from_server = false;
          }
          this.value = value;
          this.rule_id = rule_id;
          if (typeof json_value === "boolean") {
            this.json_value = {};
          } else {
            this.json_value = json_value;
          }
          this.secondary_exposures = secondary_exposures;
          this.undelegated_secondary_exposures = secondary_exposures;
          this.config_delegate = config_delegate;
          this.fetch_from_server = fetch_from_server;
          this.explicit_parameters = explicit_parameters;
          this.is_experiment_group = false;
          this.group_name = group_name;
        }
        ConfigEvaluation2.prototype.withEvaluationDetails = function(evaulationDetails) {
          this.evaluation_details = evaulationDetails;
          return this;
        };
        ConfigEvaluation2.prototype.setIsExperimentGroup = function(isExperimentGroup) {
          if (isExperimentGroup === void 0) {
            isExperimentGroup = false;
          }
          this.is_experiment_group = isExperimentGroup;
        };
        ConfigEvaluation2.fetchFromServer = function() {
          return new ConfigEvaluation2(false, "", "", [], {}, void 0, void 0, true);
        };
        return ConfigEvaluation2;
      }()
    );
    exports["default"] = ConfigEvaluation;
  }
});

// node_modules/statsig-node/dist/EvaluationDetails.js
var require_EvaluationDetails = __commonJS({
  "node_modules/statsig-node/dist/EvaluationDetails.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.EvaluationDetails = void 0;
    var EvaluationDetails = (
      /** @class */
      function() {
        function EvaluationDetails2(configSyncTime, initTime, reason) {
          this.configSyncTime = configSyncTime;
          this.initTime = initTime;
          this.reason = reason;
          this.serverTime = Date.now();
        }
        EvaluationDetails2.uninitialized = function() {
          return new EvaluationDetails2(0, 0, "Uninitialized");
        };
        EvaluationDetails2.make = function(lastUpdateTime, initialUpdateTime, reason) {
          return new EvaluationDetails2(initialUpdateTime, lastUpdateTime, reason);
        };
        return EvaluationDetails2;
      }()
    );
    exports.EvaluationDetails = EvaluationDetails;
  }
});

// node_modules/statsig-node/dist/ConfigSpec.js
var require_ConfigSpec = __commonJS({
  "node_modules/statsig-node/dist/ConfigSpec.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.ConfigCondition = exports.ConfigRule = exports.ConfigSpec = void 0;
    var ConfigSpec = (
      /** @class */
      function() {
        function ConfigSpec2(specJSON) {
          this.name = specJSON.name;
          this.type = specJSON.type;
          this.salt = specJSON.salt;
          this.defaultValue = specJSON.defaultValue;
          this.enabled = specJSON.enabled;
          this.idType = specJSON.idType;
          this.rules = this.parseRules(specJSON.rules);
          this.entity = specJSON.entity;
          this.explicitParameters = specJSON.explicitParameters;
          if (specJSON.isActive !== null) {
            this.isActive = specJSON.isActive;
          }
          this.hasSharedParams = specJSON.hasSharedParams != null ? specJSON.hasSharedParams === true : false;
        }
        ConfigSpec2.prototype.parseRules = function(rulesJSON) {
          var json = rulesJSON;
          var rules = [];
          for (var i = 0; i < json.length; i++) {
            var rule = new ConfigRule(json[i]);
            rules.push(rule);
          }
          return rules;
        };
        return ConfigSpec2;
      }()
    );
    exports.ConfigSpec = ConfigSpec;
    var ConfigRule = (
      /** @class */
      function() {
        function ConfigRule2(ruleJSON) {
          var _a, _b;
          this.name = ruleJSON.name;
          this.passPercentage = ruleJSON.passPercentage;
          this.conditions = this.parseConditions(ruleJSON.conditions);
          this.returnValue = ruleJSON.returnValue;
          this.id = ruleJSON.id;
          this.salt = ruleJSON.salt;
          this.idType = ruleJSON.idType;
          this.configDelegate = (_a = ruleJSON.configDelegate) !== null && _a !== void 0 ? _a : null;
          this.groupName = (_b = ruleJSON.groupName) !== null && _b !== void 0 ? _b : "";
          if (ruleJSON.isExperimentGroup !== null) {
            this.isExperimentGroup = ruleJSON.isExperimentGroup;
          }
        }
        ConfigRule2.prototype.parseConditions = function(conditionsJSON) {
          var json = conditionsJSON;
          var conditions = [];
          json === null || json === void 0 ? void 0 : json.forEach(function(cJSON) {
            var condition = new ConfigCondition(cJSON);
            conditions.push(condition);
          });
          return conditions;
        };
        return ConfigRule2;
      }()
    );
    exports.ConfigRule = ConfigRule;
    var ConfigCondition = (
      /** @class */
      function() {
        function ConfigCondition2(conditionJSON) {
          var _a;
          this.type = conditionJSON.type;
          this.targetValue = conditionJSON.targetValue;
          this.operator = conditionJSON.operator;
          this.field = conditionJSON.field;
          this.additionalValues = (_a = conditionJSON.additionalValues) !== null && _a !== void 0 ? _a : {};
          this.idType = conditionJSON.idType;
        }
        return ConfigCondition2;
      }()
    );
    exports.ConfigCondition = ConfigCondition;
  }
});

// node_modules/statsig-node/dist/interfaces/IDataAdapter.js
var require_IDataAdapter = __commonJS({
  "node_modules/statsig-node/dist/interfaces/IDataAdapter.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.DataAdapterKey = void 0;
    var DataAdapterKey;
    (function(DataAdapterKey2) {
      DataAdapterKey2["Rulesets"] = "statsig.cache";
      DataAdapterKey2["IDLists"] = "statsig.id_lists";
    })(DataAdapterKey = exports.DataAdapterKey || (exports.DataAdapterKey = {}));
  }
});

// node_modules/statsig-node/dist/utils/IDListUtil.js
var require_IDListUtil = __commonJS({
  "node_modules/statsig-node/dist/utils/IDListUtil.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    exports.__esModule = true;
    var IDataAdapter_1 = require_IDataAdapter();
    var IDListUtil = (
      /** @class */
      function() {
        function IDListUtil2() {
        }
        IDListUtil2.parseLookupResponse = function(input) {
          if (typeof (input !== null && input !== void 0 ? input : void 0) !== "object") {
            return null;
          }
          return input;
        };
        IDListUtil2.parseBootstrapLookup = function(input) {
          try {
            var result = JSON.parse(input);
            if (Array.isArray(result)) {
              return result;
            }
          } catch (error) {
          }
          return null;
        };
        IDListUtil2.updateIdList = function(lists, name, data) {
          var lines = data.split(/\r?\n/);
          if (data.charAt(0) !== "+" && data.charAt(0) !== "-") {
            delete lists[name];
            throw new Error("Seek range invalid.");
          }
          for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
            var line = lines_1[_i];
            if (line.length <= 1) {
              continue;
            }
            var id = line.slice(1).trim();
            if (line.charAt(0) === "+") {
              lists[name].ids[id] = true;
            } else if (line.charAt(0) === "-") {
              delete lists[name].ids[id];
            }
          }
        };
        IDListUtil2.removeOldIdLists = function(lists, lookup) {
          var deletedLists = [];
          for (var name in lists) {
            if (lists.hasOwnProperty(name) && !lookup.hasOwnProperty(name)) {
              deletedLists.push(name);
            }
          }
          for (var name in deletedLists) {
            delete lists[name];
          }
        };
        IDListUtil2.getIdListDataStoreKey = function(name) {
          return "".concat(IDataAdapter_1.DataAdapterKey.IDLists, "::").concat(name);
        };
        IDListUtil2.saveToDataAdapter = function(dataAdapter, lists) {
          return __awaiter(this, void 0, void 0, function() {
            var tasks, _i, _a, _b, key, value, ids, prop;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  tasks = [];
                  for (_i = 0, _a = Object.entries(lists); _i < _a.length; _i++) {
                    _b = _a[_i], key = _b[0], value = _b[1];
                    ids = "";
                    for (prop in value.ids) {
                      if (!value.ids.hasOwnProperty(prop))
                        continue;
                      ids += "+".concat(prop, "\n");
                    }
                    tasks.push(dataAdapter.set(this.getIdListDataStoreKey(key), ids));
                  }
                  return [4, Promise.all(tasks)];
                case 1:
                  _c.sent();
                  return [4, dataAdapter.set(IDataAdapter_1.DataAdapterKey.IDLists, JSON.stringify(Object.keys(lists)))];
                case 2:
                  _c.sent();
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        return IDListUtil2;
      }()
    );
    exports["default"] = IDListUtil;
  }
});

// node_modules/statsig-node/dist/SpecStore.js
var require_SpecStore = __commonJS({
  "node_modules/statsig-node/dist/SpecStore.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    exports.__esModule = true;
    var ConfigSpec_1 = require_ConfigSpec();
    var Errors_1 = require_Errors();
    var IDataAdapter_1 = require_IDataAdapter();
    var core_1 = require_core();
    var IDListUtil_1 = __importDefault(require_IDListUtil());
    var safeFetch_1 = __importDefault(require_safeFetch());
    var getStatsigMetadata = require_core().getStatsigMetadata;
    var SYNC_OUTDATED_MAX = 120 * 1e3;
    var SpecStore = (
      /** @class */
      function() {
        function SpecStore2(fetcher, options, init_diagnostics) {
          if (init_diagnostics === void 0) {
            init_diagnostics = null;
          }
          var _a;
          this.syncFailureCount = 0;
          this.lastDownloadConfigSpecsSyncTime = Date.now();
          this.fetcher = fetcher;
          this.api = options.api;
          this.rulesUpdatedCallback = (_a = options.rulesUpdatedCallback) !== null && _a !== void 0 ? _a : null;
          this.lastUpdateTime = 0;
          this.initialUpdateTime = 0;
          this.store = {
            gates: {},
            configs: {},
            idLists: {},
            layers: {},
            experimentToLayer: {}
          };
          this.syncInterval = options.rulesetsSyncIntervalMs;
          this.idListSyncInterval = options.idListsSyncIntervalMs;
          this.initialized = false;
          this.syncTimer = null;
          this.idListsSyncTimer = null;
          this.dataAdapter = options.dataAdapter;
          this.initReason = "Uninitialized";
          this.init_diagnostics = init_diagnostics;
          this.bootstrapValues = options.bootstrapValues;
        }
        SpecStore2.prototype.getInitReason = function() {
          return this.initReason;
        };
        SpecStore2.prototype.getInitialUpdateTime = function() {
          return this.initialUpdateTime;
        };
        SpecStore2.prototype.getLastUpdateTime = function() {
          return this.lastUpdateTime;
        };
        SpecStore2.prototype.getGate = function(gateName) {
          var _a;
          return (_a = this.store.gates[gateName]) !== null && _a !== void 0 ? _a : null;
        };
        SpecStore2.prototype.getConfig = function(configName) {
          var _a;
          return (_a = this.store.configs[configName]) !== null && _a !== void 0 ? _a : null;
        };
        SpecStore2.prototype.getLayer = function(layerName) {
          var _a;
          return (_a = this.store.layers[layerName]) !== null && _a !== void 0 ? _a : null;
        };
        SpecStore2.prototype.getExperimentLayer = function(experimentName) {
          var _a;
          return (_a = this.store.experimentToLayer[experimentName]) !== null && _a !== void 0 ? _a : null;
        };
        SpecStore2.prototype.getIDList = function(listName) {
          var _a;
          return (_a = this.store.idLists[listName]) !== null && _a !== void 0 ? _a : null;
        };
        SpecStore2.prototype.getAllGates = function() {
          return this.store.gates;
        };
        SpecStore2.prototype.getAllConfigs = function() {
          return this.store.configs;
        };
        SpecStore2.prototype.getAllLayers = function() {
          return this.store.layers;
        };
        SpecStore2.prototype.init = function() {
          var _a, _b, _c, _d;
          return __awaiter(this, void 0, void 0, function() {
            var specsJSON, adapter, bootstrapIdLists;
            return __generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  specsJSON = null;
                  if (this.bootstrapValues != null) {
                    if (this.dataAdapter != null) {
                      console.error("statsigSDK::initialize> Conflict between bootstrap and adapter. Defaulting to adapter.");
                    } else {
                      try {
                        (_a = this.init_diagnostics) === null || _a === void 0 ? void 0 : _a.mark("bootstrap", "start", "load");
                        specsJSON = JSON.parse(this.bootstrapValues);
                        if (this._process(specsJSON)) {
                          this.initReason = "Bootstrap";
                        }
                        this.setInitialUpdateTime();
                        this.initialized = true;
                        (_b = this.init_diagnostics) === null || _b === void 0 ? void 0 : _b.mark("bootstrap", "end", "load");
                      } catch (e) {
                        console.error("statsigSDK::initialize> the provided bootstrapValues is not a valid JSON string.");
                      }
                    }
                  }
                  adapter = this.dataAdapter;
                  if (!adapter)
                    return [3, 2];
                  return [4, adapter.initialize()];
                case 1:
                  _e.sent();
                  _e.label = 2;
                case 2:
                  if (!this.initialized)
                    return [3, 3];
                  this._syncValues();
                  return [3, 8];
                case 3:
                  if (!adapter)
                    return [3, 5];
                  (_c = this.init_diagnostics) === null || _c === void 0 ? void 0 : _c.mark("data_adapter", "start", "load");
                  return [4, this._fetchConfigSpecsFromAdapter()];
                case 4:
                  _e.sent();
                  (_d = this.init_diagnostics) === null || _d === void 0 ? void 0 : _d.mark("data_adapter", "end", "load");
                  _e.label = 5;
                case 5:
                  if (!(this.lastUpdateTime === 0))
                    return [3, 7];
                  return [4, this._syncValues(true)];
                case 6:
                  _e.sent();
                  _e.label = 7;
                case 7:
                  this.setInitialUpdateTime();
                  _e.label = 8;
                case 8:
                  return [4, adapter === null || adapter === void 0 ? void 0 : adapter.get(IDataAdapter_1.DataAdapterKey.IDLists)];
                case 9:
                  bootstrapIdLists = _e.sent();
                  if (!(adapter && typeof (bootstrapIdLists === null || bootstrapIdLists === void 0 ? void 0 : bootstrapIdLists.result) === "string"))
                    return [3, 11];
                  return [4, this.syncIdListsFromDataAdapter(adapter, bootstrapIdLists.result)];
                case 10:
                  _e.sent();
                  return [3, 13];
                case 11:
                  return [4, this.syncIdListsFromNetwork()];
                case 12:
                  _e.sent();
                  _e.label = 13;
                case 13:
                  this.pollForUpdates();
                  this.initialized = true;
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        SpecStore2.prototype.resetSyncTimerIfExited = function() {
          if (this.lastDownloadConfigSpecsSyncTime >= Date.now() - SYNC_OUTDATED_MAX) {
            return null;
          }
          this.clearTimers();
          this.pollForUpdates();
          var message = "Force reset sync timer. Last update time: ".concat(this.lastDownloadConfigSpecsSyncTime, ", now: ").concat(Date.now());
          this._fetchConfigSpecsFromServer();
          return new Error(message);
        };
        SpecStore2.prototype.isServingChecks = function() {
          return this.lastUpdateTime !== 0;
        };
        SpecStore2.prototype._fetchConfigSpecsFromServer = function() {
          var _a, _b, _c, _d, _e;
          return __awaiter(this, void 0, void 0, function() {
            var response, e_1, specsString, processResult;
            return __generator(this, function(_f) {
              switch (_f.label) {
                case 0:
                  this.lastDownloadConfigSpecsSyncTime = Date.now();
                  (_a = this.init_diagnostics) === null || _a === void 0 ? void 0 : _a.mark("download_config_specs", "start", "network_request");
                  response = null;
                  _f.label = 1;
                case 1:
                  _f.trys.push([1, 3, 4, 5]);
                  return [4, this.fetcher.post(this.api + "/download_config_specs", {
                    statsigMetadata: getStatsigMetadata(),
                    sinceTime: this.lastUpdateTime
                  })];
                case 2:
                  response = _f.sent();
                  return [3, 5];
                case 3:
                  e_1 = _f.sent();
                  throw e_1;
                case 4:
                  (_b = this.init_diagnostics) === null || _b === void 0 ? void 0 : _b.mark("download_config_specs", "end", "network_request", (_c = response === null || response === void 0 ? void 0 : response.status) !== null && _c !== void 0 ? _c : "request error");
                  return [
                    7
                    /*endfinally*/
                  ];
                case 5:
                  (_d = this.init_diagnostics) === null || _d === void 0 ? void 0 : _d.mark("download_config_specs", "start", "process");
                  return [4, response.text()];
                case 6:
                  specsString = _f.sent();
                  processResult = this._process(JSON.parse(specsString));
                  if (!processResult) {
                    return [
                      2
                      /*return*/
                    ];
                  }
                  this.initReason = "Network";
                  if (this.rulesUpdatedCallback != null && typeof this.rulesUpdatedCallback === "function") {
                    this.rulesUpdatedCallback(specsString, this.lastUpdateTime);
                  }
                  this._saveConfigSpecsToAdapter(specsString);
                  (_e = this.init_diagnostics) === null || _e === void 0 ? void 0 : _e.mark("download_config_specs", "end", "process", this.initReason === "Network");
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        SpecStore2.prototype._fetchConfigSpecsFromAdapter = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _a, result, error, time, configSpecs;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!this.dataAdapter) {
                    return [
                      2
                      /*return*/
                    ];
                  }
                  return [4, this.dataAdapter.get(IDataAdapter_1.DataAdapterKey.Rulesets)];
                case 1:
                  _a = _b.sent(), result = _a.result, error = _a.error, time = _a.time;
                  if (result && !error) {
                    configSpecs = JSON.parse(result);
                    if (this._process(configSpecs)) {
                      this.initReason = "DataAdapter";
                    }
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        SpecStore2.prototype._saveConfigSpecsToAdapter = function(specString) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.dataAdapter) {
                    return [
                      2
                      /*return*/
                    ];
                  }
                  return [4, this.dataAdapter.set(IDataAdapter_1.DataAdapterKey.Rulesets, specString, this.lastUpdateTime)];
                case 1:
                  _a.sent();
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        SpecStore2.prototype.pollForUpdates = function() {
          var _this = this;
          if (this.syncTimer == null) {
            this.syncTimer = (0, core_1.poll)(function() {
              return __awaiter(_this, void 0, void 0, function() {
                return __generator(this, function(_a) {
                  switch (_a.label) {
                    case 0:
                      return [4, this._syncValues()];
                    case 1:
                      _a.sent();
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            }, this.syncInterval);
          }
          if (this.idListsSyncTimer == null) {
            this.idListsSyncTimer = (0, core_1.poll)(function() {
              return __awaiter(_this, void 0, void 0, function() {
                return __generator(this, function(_a) {
                  switch (_a.label) {
                    case 0:
                      return [4, this._syncIdLists()];
                    case 1:
                      _a.sent();
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            }, this.idListSyncInterval);
          }
        };
        SpecStore2.prototype._syncValues = function(isColdStart) {
          var _a;
          if (isColdStart === void 0) {
            isColdStart = false;
          }
          return __awaiter(this, void 0, void 0, function() {
            var adapter, shouldSyncFromAdapter, e_2;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  adapter = this.dataAdapter;
                  shouldSyncFromAdapter = ((_a = adapter === null || adapter === void 0 ? void 0 : adapter.supportsPollingUpdatesFor) === null || _a === void 0 ? void 0 : _a.call(adapter, IDataAdapter_1.DataAdapterKey.Rulesets)) === true;
                  _b.label = 1;
                case 1:
                  _b.trys.push([1, 6, , 7]);
                  if (!shouldSyncFromAdapter)
                    return [3, 3];
                  return [4, this._fetchConfigSpecsFromAdapter()];
                case 2:
                  _b.sent();
                  return [3, 5];
                case 3:
                  return [4, this._fetchConfigSpecsFromServer()];
                case 4:
                  _b.sent();
                  _b.label = 5;
                case 5:
                  this.syncFailureCount = 0;
                  return [3, 7];
                case 6:
                  e_2 = _b.sent();
                  this.syncFailureCount++;
                  if (!(e_2 instanceof Errors_1.StatsigLocalModeNetworkError)) {
                    if (isColdStart) {
                      console.error("statsigSDK::initialize> Failed to initialize from the network.  See https://docs.statsig.com/messages/serverSDKConnection for more information");
                    } else if (this.syncFailureCount * this.syncInterval > SYNC_OUTDATED_MAX) {
                      console.warn("statsigSDK::sync> Syncing the server SDK with ".concat(shouldSyncFromAdapter ? "the data adapter" : "statsig", " has failed for  ").concat(this.syncFailureCount * this.syncInterval, "ms.  Your sdk will continue to serve gate/config/experiment definitions as of the last successful sync.  See https://docs.statsig.com/messages/serverSDKConnection for more information"));
                      this.syncFailureCount = 0;
                    }
                  }
                  return [3, 7];
                case 7:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        SpecStore2.prototype._syncIdLists = function() {
          var _a;
          return __awaiter(this, void 0, void 0, function() {
            var adapter, shouldSyncFromAdapter, adapterIdLists;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  adapter = this.dataAdapter;
                  shouldSyncFromAdapter = ((_a = adapter === null || adapter === void 0 ? void 0 : adapter.supportsPollingUpdatesFor) === null || _a === void 0 ? void 0 : _a.call(adapter, IDataAdapter_1.DataAdapterKey.IDLists)) === true;
                  return [4, adapter === null || adapter === void 0 ? void 0 : adapter.get(IDataAdapter_1.DataAdapterKey.IDLists)];
                case 1:
                  adapterIdLists = _b.sent();
                  if (!(shouldSyncFromAdapter && typeof (adapterIdLists === null || adapterIdLists === void 0 ? void 0 : adapterIdLists.result) === "string"))
                    return [3, 3];
                  return [4, this.syncIdListsFromDataAdapter(adapter, adapterIdLists.result)];
                case 2:
                  _b.sent();
                  return [3, 5];
                case 3:
                  return [4, this.syncIdListsFromNetwork()];
                case 4:
                  _b.sent();
                  _b.label = 5;
                case 5:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        SpecStore2.prototype._process = function(specsJSON) {
          var _a;
          if (!(specsJSON === null || specsJSON === void 0 ? void 0 : specsJSON.has_updates)) {
            return false;
          }
          var updatedGates = {};
          var updatedConfigs = {};
          var updatedLayers = {};
          var gateArray = specsJSON === null || specsJSON === void 0 ? void 0 : specsJSON.feature_gates;
          var configArray = specsJSON === null || specsJSON === void 0 ? void 0 : specsJSON.dynamic_configs;
          var layersArray = specsJSON === null || specsJSON === void 0 ? void 0 : specsJSON.layer_configs;
          var layerToExperimentMap = specsJSON === null || specsJSON === void 0 ? void 0 : specsJSON.layers;
          if (!Array.isArray(gateArray) || !Array.isArray(configArray) || !Array.isArray(layersArray)) {
            return false;
          }
          for (var _i = 0, gateArray_1 = gateArray; _i < gateArray_1.length; _i++) {
            var gateJSON = gateArray_1[_i];
            try {
              var gate = new ConfigSpec_1.ConfigSpec(gateJSON);
              updatedGates[gate.name] = gate;
            } catch (e) {
              return false;
            }
          }
          for (var _b = 0, configArray_1 = configArray; _b < configArray_1.length; _b++) {
            var configJSON = configArray_1[_b];
            try {
              var config = new ConfigSpec_1.ConfigSpec(configJSON);
              updatedConfigs[config.name] = config;
            } catch (e) {
              return false;
            }
          }
          for (var _c = 0, layersArray_1 = layersArray; _c < layersArray_1.length; _c++) {
            var layerJSON = layersArray_1[_c];
            try {
              var config = new ConfigSpec_1.ConfigSpec(layerJSON);
              updatedLayers[config.name] = config;
            } catch (e) {
              return false;
            }
          }
          var updatedExpToLayer = this._reverseLayerExperimentMapping(layerToExperimentMap);
          this.store.gates = updatedGates;
          this.store.configs = updatedConfigs;
          this.store.layers = updatedLayers;
          this.store.experimentToLayer = updatedExpToLayer;
          this.lastUpdateTime = (_a = specsJSON.time) !== null && _a !== void 0 ? _a : this.lastUpdateTime;
          return true;
        };
        SpecStore2.prototype._reverseLayerExperimentMapping = function(layersMapping) {
          var reverseMapping = {};
          if (layersMapping != null && typeof layersMapping === "object") {
            for (var _i = 0, _a = Object.entries(
              // @ts-ignore
              layersMapping
            ); _i < _a.length; _i++) {
              var _b = _a[_i], layerName = _b[0], experiments = _b[1];
              for (var _c = 0, experiments_1 = experiments; _c < experiments_1.length; _c++) {
                var experimentName = experiments_1[_c];
                reverseMapping[experimentName] = layerName;
              }
            }
          }
          return reverseMapping;
        };
        SpecStore2.prototype.syncIdListsFromDataAdapter = function(dataAdapter, listsLookupString) {
          return __awaiter(this, void 0, void 0, function() {
            var lookup, tasks, _loop_1, _i, lookup_1, name;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  lookup = IDListUtil_1["default"].parseBootstrapLookup(listsLookupString);
                  if (!lookup) {
                    return [
                      2
                      /*return*/
                    ];
                  }
                  tasks = [];
                  _loop_1 = function(name2) {
                    tasks.push(new Promise(function(resolve) {
                      return __awaiter(_this, void 0, void 0, function() {
                        var data;
                        return __generator(this, function(_a2) {
                          switch (_a2.label) {
                            case 0:
                              return [4, dataAdapter.get(IDListUtil_1["default"].getIdListDataStoreKey(name2))];
                            case 1:
                              data = _a2.sent();
                              if (!data.result) {
                                return [
                                  2
                                  /*return*/
                                ];
                              }
                              this.store.idLists[name2] = {
                                ids: {},
                                readBytes: 0,
                                url: "bootstrap",
                                fileID: "bootstrap",
                                creationTime: 0
                              };
                              IDListUtil_1["default"].updateIdList(this.store.idLists, name2, data.result);
                              resolve();
                              return [
                                2
                                /*return*/
                              ];
                          }
                        });
                      });
                    }));
                  };
                  for (_i = 0, lookup_1 = lookup; _i < lookup_1.length; _i++) {
                    name = lookup_1[_i];
                    _loop_1(name);
                  }
                  return [4, Promise.all(tasks)];
                case 1:
                  _a.sent();
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        SpecStore2.prototype.syncIdListsFromNetwork = function() {
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
          return __awaiter(this, void 0, void 0, function() {
            var response, json, lookup, promises, _loop_2, this_1, _i, _l, _m, name, item, e_3;
            var _this = this;
            return __generator(this, function(_o) {
              switch (_o.label) {
                case 0:
                  _o.trys.push([0, 6, , 7]);
                  (_a = this.init_diagnostics) === null || _a === void 0 ? void 0 : _a.mark("get_id_lists", "start", "network_request");
                  return [4, this.fetcher.post(this.api + "/get_id_lists", {
                    statsigMetadata: getStatsigMetadata()
                  })];
                case 1:
                  response = _o.sent();
                  (_b = this.init_diagnostics) === null || _b === void 0 ? void 0 : _b.mark("get_id_lists", "end", "network_request", response.status);
                  return [4, response.json()];
                case 2:
                  json = _o.sent();
                  lookup = IDListUtil_1["default"].parseLookupResponse(json);
                  if (!lookup) {
                    return [
                      2
                      /*return*/
                    ];
                  }
                  (_c = this.init_diagnostics) === null || _c === void 0 ? void 0 : _c.mark("get_id_lists", "start", "process", Object.entries(lookup).length);
                  promises = [];
                  _loop_2 = function(name2, item2) {
                    var url = item2.url;
                    var fileID = item2.fileID;
                    var newCreationTime = item2.creationTime;
                    var oldCreationTime = (_e = (_d = this_1.store.idLists[name2]) === null || _d === void 0 ? void 0 : _d.creationTime) !== null && _e !== void 0 ? _e : 0;
                    if (typeof url !== "string" || newCreationTime < oldCreationTime || typeof fileID !== "string") {
                      return "continue";
                    }
                    var newFile = fileID !== ((_f = this_1.store.idLists[name2]) === null || _f === void 0 ? void 0 : _f.fileID) && newCreationTime >= oldCreationTime;
                    if (lookup.hasOwnProperty(name2) && !this_1.store.idLists.hasOwnProperty(name2) || newFile) {
                      this_1.store.idLists[name2] = {
                        ids: {},
                        readBytes: 0,
                        url,
                        fileID,
                        creationTime: newCreationTime
                      };
                    }
                    var fileSize = (_g = item2.size) !== null && _g !== void 0 ? _g : 0;
                    var readSize = (_h = this_1.store.idLists[name2].readBytes) !== null && _h !== void 0 ? _h : 0;
                    if (fileSize <= readSize) {
                      return "continue";
                    }
                    var p = (0, safeFetch_1["default"])(url, {
                      method: "GET",
                      headers: {
                        Range: "bytes=".concat(readSize, "-")
                      }
                    }).then(function(res) {
                      var contentLength = res.headers.get("content-length");
                      if (contentLength == null) {
                        throw new Error("Content-Length for the id list is invalid.");
                      }
                      var length = parseInt(contentLength);
                      if (typeof length === "number") {
                        _this.store.idLists[name2].readBytes += length;
                      } else {
                        delete _this.store.idLists[name2];
                        throw new Error("Content-Length for the id list is invalid.");
                      }
                      return res.text();
                    }).then(function(data) {
                      IDListUtil_1["default"].updateIdList(_this.store.idLists, name2, data);
                    })["catch"](function(e) {
                      console.warn(e);
                    });
                    promises.push(p);
                  };
                  this_1 = this;
                  for (_i = 0, _l = Object.entries(lookup); _i < _l.length; _i++) {
                    _m = _l[_i], name = _m[0], item = _m[1];
                    _loop_2(name, item);
                  }
                  IDListUtil_1["default"].removeOldIdLists(this.store.idLists, lookup);
                  return [4, Promise.allSettled(promises)];
                case 3:
                  _o.sent();
                  if (!this.dataAdapter)
                    return [3, 5];
                  return [4, IDListUtil_1["default"].saveToDataAdapter(this.dataAdapter, this.store.idLists)];
                case 4:
                  _o.sent();
                  _o.label = 5;
                case 5:
                  (_j = this.init_diagnostics) === null || _j === void 0 ? void 0 : _j.mark("get_id_lists", "end", "process", true);
                  return [3, 7];
                case 6:
                  e_3 = _o.sent();
                  (_k = this.init_diagnostics) === null || _k === void 0 ? void 0 : _k.mark("get_id_lists", "end", "process", false);
                  return [3, 7];
                case 7:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        SpecStore2.prototype.shutdown = function() {
          var _a;
          this.clearTimers();
          (_a = this.dataAdapter) === null || _a === void 0 ? void 0 : _a.shutdown();
        };
        SpecStore2.prototype.clearTimers = function() {
          if (this.syncTimer != null) {
            clearInterval(this.syncTimer);
            this.syncTimer = null;
          }
          if (this.idListsSyncTimer != null) {
            clearInterval(this.idListsSyncTimer);
            this.idListsSyncTimer = null;
          }
        };
        SpecStore2.prototype.setInitialUpdateTime = function() {
          this.initialUpdateTime = this.lastUpdateTime === 0 ? -1 : this.lastUpdateTime;
        };
        return SpecStore2;
      }()
    );
    exports["default"] = SpecStore;
  }
});

// node_modules/ua-parser-js/src/ua-parser.js
var require_ua_parser = __commonJS({
  "node_modules/ua-parser-js/src/ua-parser.js"(exports, module2) {
    (function(window2, undefined2) {
      "use strict";
      var LIBVERSION = "1.0.34", EMPTY = "", UNKNOWN = "?", FUNC_TYPE = "function", UNDEF_TYPE = "undefined", OBJ_TYPE = "object", STR_TYPE = "string", MAJOR = "major", MODEL = "model", NAME = "name", TYPE2 = "type", VENDOR = "vendor", VERSION = "version", ARCHITECTURE = "architecture", CONSOLE = "console", MOBILE = "mobile", TABLET = "tablet", SMARTTV = "smarttv", WEARABLE = "wearable", EMBEDDED = "embedded", UA_MAX_LENGTH = 350;
      var AMAZON = "Amazon", APPLE = "Apple", ASUS = "ASUS", BLACKBERRY = "BlackBerry", BROWSER = "Browser", CHROME = "Chrome", EDGE = "Edge", FIREFOX = "Firefox", GOOGLE = "Google", HUAWEI = "Huawei", LG = "LG", MICROSOFT = "Microsoft", MOTOROLA = "Motorola", OPERA = "Opera", SAMSUNG = "Samsung", SHARP = "Sharp", SONY = "Sony", VIERA = "Viera", XIAOMI = "Xiaomi", ZEBRA = "Zebra", FACEBOOK = "Facebook", CHROMIUM_OS = "Chromium OS", MAC_OS = "Mac OS";
      var extend = function(regexes2, extensions) {
        var mergedRegexes = {};
        for (var i in regexes2) {
          if (extensions[i] && extensions[i].length % 2 === 0) {
            mergedRegexes[i] = extensions[i].concat(regexes2[i]);
          } else {
            mergedRegexes[i] = regexes2[i];
          }
        }
        return mergedRegexes;
      }, enumerize = function(arr) {
        var enums = {};
        for (var i = 0; i < arr.length; i++) {
          enums[arr[i].toUpperCase()] = arr[i];
        }
        return enums;
      }, has = function(str1, str2) {
        return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
      }, lowerize = function(str) {
        return str.toLowerCase();
      }, majorize = function(version2) {
        return typeof version2 === STR_TYPE ? version2.replace(/[^\d\.]/g, EMPTY).split(".")[0] : undefined2;
      }, trim = function(str, len) {
        if (typeof str === STR_TYPE) {
          str = str.replace(/^\s\s*/, EMPTY);
          return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
        }
      };
      var rgxMapper = function(ua, arrays) {
        var i = 0, j, k, p, q, matches, match;
        while (i < arrays.length && !matches) {
          var regex = arrays[i], props = arrays[i + 1];
          j = k = 0;
          while (j < regex.length && !matches) {
            if (!regex[j]) {
              break;
            }
            matches = regex[j++].exec(ua);
            if (!!matches) {
              for (p = 0; p < props.length; p++) {
                match = matches[++k];
                q = props[p];
                if (typeof q === OBJ_TYPE && q.length > 0) {
                  if (q.length === 2) {
                    if (typeof q[1] == FUNC_TYPE) {
                      this[q[0]] = q[1].call(this, match);
                    } else {
                      this[q[0]] = q[1];
                    }
                  } else if (q.length === 3) {
                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                      this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined2;
                    } else {
                      this[q[0]] = match ? match.replace(q[1], q[2]) : undefined2;
                    }
                  } else if (q.length === 4) {
                    this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined2;
                  }
                } else {
                  this[q] = match ? match : undefined2;
                }
              }
            }
          }
          i += 2;
        }
      }, strMapper = function(str, map) {
        for (var i in map) {
          if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
            for (var j = 0; j < map[i].length; j++) {
              if (has(map[i][j], str)) {
                return i === UNKNOWN ? undefined2 : i;
              }
            }
          } else if (has(map[i], str)) {
            return i === UNKNOWN ? undefined2 : i;
          }
        }
        return str;
      };
      var oldSafariMap = {
        "1.0": "/8",
        "1.2": "/1",
        "1.3": "/3",
        "2.0": "/412",
        "2.0.2": "/416",
        "2.0.3": "/417",
        "2.0.4": "/419",
        "?": "/"
      }, windowsVersionMap = {
        "ME": "4.90",
        "NT 3.11": "NT3.51",
        "NT 4.0": "NT4.0",
        "2000": "NT 5.0",
        "XP": ["NT 5.1", "NT 5.2"],
        "Vista": "NT 6.0",
        "7": "NT 6.1",
        "8": "NT 6.2",
        "8.1": "NT 6.3",
        "10": ["NT 6.4", "NT 10.0"],
        "RT": "ARM"
      };
      var regexes = {
        browser: [
          [
            /\b(?:crmo|crios)\/([\w\.]+)/i
            // Chrome for Android/iOS
          ],
          [VERSION, [NAME, "Chrome"]],
          [
            /edg(?:e|ios|a)?\/([\w\.]+)/i
            // Microsoft Edge
          ],
          [VERSION, [NAME, "Edge"]],
          [
            // Presto based
            /(opera mini)\/([-\w\.]+)/i,
            // Opera Mini
            /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
            // Opera Mobi/Tablet
            /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i
            // Opera
          ],
          [NAME, VERSION],
          [
            /opios[\/ ]+([\w\.]+)/i
            // Opera mini on iphone >= 8.0
          ],
          [VERSION, [NAME, OPERA + " Mini"]],
          [
            /\bopr\/([\w\.]+)/i
            // Opera Webkit
          ],
          [VERSION, [NAME, OPERA]],
          [
            // Mixed
            /(kindle)\/([\w\.]+)/i,
            // Kindle
            /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
            // Lunascape/Maxthon/Netfront/Jasmine/Blazer
            // Trident based
            /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,
            // Avant/IEMobile/SlimBrowser
            /(ba?idubrowser)[\/ ]?([\w\.]+)/i,
            // Baidu Browser
            /(?:ms|\()(ie) ([\w\.]+)/i,
            // Internet Explorer
            // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
            /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
            // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
            /(weibo)__([\d\.]+)/i
            // Weibo
          ],
          [NAME, VERSION],
          [
            /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i
            // UCBrowser
          ],
          [VERSION, [NAME, "UC" + BROWSER]],
          [
            /microm.+\bqbcore\/([\w\.]+)/i,
            // WeChat Desktop for Windows Built-in Browser
            /\bqbcore\/([\w\.]+).+microm/i
          ],
          [VERSION, [NAME, "WeChat(Win) Desktop"]],
          [
            /micromessenger\/([\w\.]+)/i
            // WeChat
          ],
          [VERSION, [NAME, "WeChat"]],
          [
            /konqueror\/([\w\.]+)/i
            // Konqueror
          ],
          [VERSION, [NAME, "Konqueror"]],
          [
            /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i
            // IE11
          ],
          [VERSION, [NAME, "IE"]],
          [
            /yabrowser\/([\w\.]+)/i
            // Yandex
          ],
          [VERSION, [NAME, "Yandex"]],
          [
            /(avast|avg)\/([\w\.]+)/i
            // Avast/AVG Secure Browser
          ],
          [[NAME, /(.+)/, "$1 Secure " + BROWSER], VERSION],
          [
            /\bfocus\/([\w\.]+)/i
            // Firefox Focus
          ],
          [VERSION, [NAME, FIREFOX + " Focus"]],
          [
            /\bopt\/([\w\.]+)/i
            // Opera Touch
          ],
          [VERSION, [NAME, OPERA + " Touch"]],
          [
            /coc_coc\w+\/([\w\.]+)/i
            // Coc Coc Browser
          ],
          [VERSION, [NAME, "Coc Coc"]],
          [
            /dolfin\/([\w\.]+)/i
            // Dolphin
          ],
          [VERSION, [NAME, "Dolphin"]],
          [
            /coast\/([\w\.]+)/i
            // Opera Coast
          ],
          [VERSION, [NAME, OPERA + " Coast"]],
          [
            /miuibrowser\/([\w\.]+)/i
            // MIUI Browser
          ],
          [VERSION, [NAME, "MIUI " + BROWSER]],
          [
            /fxios\/([-\w\.]+)/i
            // Firefox for iOS
          ],
          [VERSION, [NAME, FIREFOX]],
          [
            /\bqihu|(qi?ho?o?|360)browser/i
            // 360
          ],
          [[NAME, "360 " + BROWSER]],
          [
            /(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i
          ],
          [[NAME, /(.+)/, "$1 " + BROWSER], VERSION],
          [
            // Oculus/Samsung/Sailfish/Huawei Browser
            /(comodo_dragon)\/([\w\.]+)/i
            // Comodo Dragon
          ],
          [[NAME, /_/g, " "], VERSION],
          [
            /(electron)\/([\w\.]+) safari/i,
            // Electron-based App
            /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
            // Tesla
            /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i
            // QQBrowser/Baidu App/2345 Browser
          ],
          [NAME, VERSION],
          [
            /(metasr)[\/ ]?([\w\.]+)/i,
            // SouGouBrowser
            /(lbbrowser)/i,
            // LieBao Browser
            /\[(linkedin)app\]/i
            // LinkedIn App for iOS & Android
          ],
          [NAME],
          [
            // WebView
            /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i
            // Facebook App for iOS & Android
          ],
          [[NAME, FACEBOOK], VERSION],
          [
            /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
            // Kakao App
            /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
            // Naver InApp
            /safari (line)\/([\w\.]+)/i,
            // Line App for iOS
            /\b(line)\/([\w\.]+)\/iab/i,
            // Line App for Android
            /(chromium|instagram)[\/ ]([-\w\.]+)/i
            // Chromium/Instagram
          ],
          [NAME, VERSION],
          [
            /\bgsa\/([\w\.]+) .*safari\//i
            // Google Search Appliance on iOS
          ],
          [VERSION, [NAME, "GSA"]],
          [
            /headlesschrome(?:\/([\w\.]+)| )/i
            // Chrome Headless
          ],
          [VERSION, [NAME, CHROME + " Headless"]],
          [
            / wv\).+(chrome)\/([\w\.]+)/i
            // Chrome WebView
          ],
          [[NAME, CHROME + " WebView"], VERSION],
          [
            /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i
            // Android Browser
          ],
          [VERSION, [NAME, "Android " + BROWSER]],
          [
            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i
            // Chrome/OmniWeb/Arora/Tizen/Nokia
          ],
          [NAME, VERSION],
          [
            /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i
            // Mobile Safari
          ],
          [VERSION, [NAME, "Mobile Safari"]],
          [
            /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i
            // Safari & Safari Mobile
          ],
          [VERSION, NAME],
          [
            /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i
            // Safari < 3.0
          ],
          [NAME, [VERSION, strMapper, oldSafariMap]],
          [
            /(webkit|khtml)\/([\w\.]+)/i
          ],
          [NAME, VERSION],
          [
            // Gecko based
            /(navigator|netscape\d?)\/([-\w\.]+)/i
            // Netscape
          ],
          [[NAME, "Netscape"], VERSION],
          [
            /mobile vr; rv:([\w\.]+)\).+firefox/i
            // Firefox Reality
          ],
          [VERSION, [NAME, FIREFOX + " Reality"]],
          [
            /ekiohf.+(flow)\/([\w\.]+)/i,
            // Flow
            /(swiftfox)/i,
            // Swiftfox
            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
            // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
            // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
            /(firefox)\/([\w\.]+)/i,
            // Other Firefox-based
            /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
            // Mozilla
            // Other
            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
            // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
            /(links) \(([\w\.]+)/i,
            // Links
            /panasonic;(viera)/i
            // Panasonic Viera
          ],
          [NAME, VERSION],
          [
            /(cobalt)\/([\w\.]+)/i
            // Cobalt
          ],
          [NAME, [VERSION, /master.|lts./, ""]]
        ],
        cpu: [
          [
            /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i
            // AMD64 (x64)
          ],
          [[ARCHITECTURE, "amd64"]],
          [
            /(ia32(?=;))/i
            // IA32 (quicktime)
          ],
          [[ARCHITECTURE, lowerize]],
          [
            /((?:i[346]|x)86)[;\)]/i
            // IA32 (x86)
          ],
          [[ARCHITECTURE, "ia32"]],
          [
            /\b(aarch64|arm(v?8e?l?|_?64))\b/i
            // ARM64
          ],
          [[ARCHITECTURE, "arm64"]],
          [
            /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i
            // ARMHF
          ],
          [[ARCHITECTURE, "armhf"]],
          [
            // PocketPC mistakenly identified as PowerPC
            /windows (ce|mobile); ppc;/i
          ],
          [[ARCHITECTURE, "arm"]],
          [
            /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i
            // PowerPC
          ],
          [[ARCHITECTURE, /ower/, EMPTY, lowerize]],
          [
            /(sun4\w)[;\)]/i
            // SPARC
          ],
          [[ARCHITECTURE, "sparc"]],
          [
            /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
            // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
          ],
          [[ARCHITECTURE, lowerize]]
        ],
        device: [
          [
            //////////////////////////
            // MOBILES & TABLETS
            /////////////////////////
            // Samsung
            /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
          ],
          [MODEL, [VENDOR, SAMSUNG], [TYPE2, TABLET]],
          [
            /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
            /samsung[- ]([-\w]+)/i,
            /sec-(sgh\w+)/i
          ],
          [MODEL, [VENDOR, SAMSUNG], [TYPE2, MOBILE]],
          [
            // Apple
            /\((ip(?:hone|od)[\w ]*);/i
            // iPod/iPhone
          ],
          [MODEL, [VENDOR, APPLE], [TYPE2, MOBILE]],
          [
            /\((ipad);[-\w\),; ]+apple/i,
            // iPad
            /applecoremedia\/[\w\.]+ \((ipad)/i,
            /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
          ],
          [MODEL, [VENDOR, APPLE], [TYPE2, TABLET]],
          [
            /(macintosh);/i
          ],
          [MODEL, [VENDOR, APPLE]],
          [
            // Sharp
            /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
          ],
          [MODEL, [VENDOR, SHARP], [TYPE2, MOBILE]],
          [
            // Huawei
            /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
          ],
          [MODEL, [VENDOR, HUAWEI], [TYPE2, TABLET]],
          [
            /(?:huawei|honor)([-\w ]+)[;\)]/i,
            /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
          ],
          [MODEL, [VENDOR, HUAWEI], [TYPE2, MOBILE]],
          [
            // Xiaomi
            /\b(poco[\w ]+)(?: bui|\))/i,
            // Xiaomi POCO
            /\b; (\w+) build\/hm\1/i,
            // Xiaomi Hongmi 'numeric' models
            /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
            // Xiaomi Hongmi
            /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
            // Xiaomi Redmi
            /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i
            // Xiaomi Mi
          ],
          [[MODEL, /_/g, " "], [VENDOR, XIAOMI], [TYPE2, MOBILE]],
          [
            /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i
            // Mi Pad tablets
          ],
          [[MODEL, /_/g, " "], [VENDOR, XIAOMI], [TYPE2, TABLET]],
          [
            // OPPO
            /; (\w+) bui.+ oppo/i,
            /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
          ],
          [MODEL, [VENDOR, "OPPO"], [TYPE2, MOBILE]],
          [
            // Vivo
            /vivo (\w+)(?: bui|\))/i,
            /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
          ],
          [MODEL, [VENDOR, "Vivo"], [TYPE2, MOBILE]],
          [
            // Realme
            /\b(rmx[12]\d{3})(?: bui|;|\))/i
          ],
          [MODEL, [VENDOR, "Realme"], [TYPE2, MOBILE]],
          [
            // Motorola
            /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
            /\bmot(?:orola)?[- ](\w*)/i,
            /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
          ],
          [MODEL, [VENDOR, MOTOROLA], [TYPE2, MOBILE]],
          [
            /\b(mz60\d|xoom[2 ]{0,2}) build\//i
          ],
          [MODEL, [VENDOR, MOTOROLA], [TYPE2, TABLET]],
          [
            // LG
            /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
          ],
          [MODEL, [VENDOR, LG], [TYPE2, TABLET]],
          [
            /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
            /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
            /\blg-?([\d\w]+) bui/i
          ],
          [MODEL, [VENDOR, LG], [TYPE2, MOBILE]],
          [
            // Lenovo
            /(ideatab[-\w ]+)/i,
            /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
          ],
          [MODEL, [VENDOR, "Lenovo"], [TYPE2, TABLET]],
          [
            // Nokia
            /(?:maemo|nokia).*(n900|lumia \d+)/i,
            /nokia[-_ ]?([-\w\.]*)/i
          ],
          [[MODEL, /_/g, " "], [VENDOR, "Nokia"], [TYPE2, MOBILE]],
          [
            // Google
            /(pixel c)\b/i
            // Google Pixel C
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE2, TABLET]],
          [
            /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i
            // Google Pixel
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE2, MOBILE]],
          [
            // Sony
            /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
          ],
          [MODEL, [VENDOR, SONY], [TYPE2, MOBILE]],
          [
            /sony tablet [ps]/i,
            /\b(?:sony)?sgp\w+(?: bui|\))/i
          ],
          [[MODEL, "Xperia Tablet"], [VENDOR, SONY], [TYPE2, TABLET]],
          [
            // OnePlus
            / (kb2005|in20[12]5|be20[12][59])\b/i,
            /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
          ],
          [MODEL, [VENDOR, "OnePlus"], [TYPE2, MOBILE]],
          [
            // Amazon
            /(alexa)webm/i,
            /(kf[a-z]{2}wi)( bui|\))/i,
            // Kindle Fire without Silk
            /(kf[a-z]+)( bui|\)).+silk\//i
            // Kindle Fire HD
          ],
          [MODEL, [VENDOR, AMAZON], [TYPE2, TABLET]],
          [
            /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i
            // Fire Phone
          ],
          [[MODEL, /(.+)/g, "Fire Phone $1"], [VENDOR, AMAZON], [TYPE2, MOBILE]],
          [
            // BlackBerry
            /(playbook);[-\w\),; ]+(rim)/i
            // BlackBerry PlayBook
          ],
          [MODEL, VENDOR, [TYPE2, TABLET]],
          [
            /\b((?:bb[a-f]|st[hv])100-\d)/i,
            /\(bb10; (\w+)/i
            // BlackBerry 10
          ],
          [MODEL, [VENDOR, BLACKBERRY], [TYPE2, MOBILE]],
          [
            // Asus
            /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
          ],
          [MODEL, [VENDOR, ASUS], [TYPE2, TABLET]],
          [
            / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
          ],
          [MODEL, [VENDOR, ASUS], [TYPE2, MOBILE]],
          [
            // HTC
            /(nexus 9)/i
            // HTC Nexus 9
          ],
          [MODEL, [VENDOR, "HTC"], [TYPE2, TABLET]],
          [
            /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
            // HTC
            // ZTE
            /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
            /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i
            // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
          ],
          [VENDOR, [MODEL, /_/g, " "], [TYPE2, MOBILE]],
          [
            // Acer
            /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
          ],
          [MODEL, [VENDOR, "Acer"], [TYPE2, TABLET]],
          [
            // Meizu
            /droid.+; (m[1-5] note) bui/i,
            /\bmz-([-\w]{2,})/i
          ],
          [MODEL, [VENDOR, "Meizu"], [TYPE2, MOBILE]],
          [
            // MIXED
            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,
            // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
            /(hp) ([\w ]+\w)/i,
            // HP iPAQ
            /(asus)-?(\w+)/i,
            // Asus
            /(microsoft); (lumia[\w ]+)/i,
            // Microsoft Lumia
            /(lenovo)[-_ ]?([-\w]+)/i,
            // Lenovo
            /(jolla)/i,
            // Jolla
            /(oppo) ?([\w ]+) bui/i
            // OPPO
          ],
          [VENDOR, MODEL, [TYPE2, MOBILE]],
          [
            /(kobo)\s(ereader|touch)/i,
            // Kobo
            /(archos) (gamepad2?)/i,
            // Archos
            /(hp).+(touchpad(?!.+tablet)|tablet)/i,
            // HP TouchPad
            /(kindle)\/([\w\.]+)/i,
            // Kindle
            /(nook)[\w ]+build\/(\w+)/i,
            // Nook
            /(dell) (strea[kpr\d ]*[\dko])/i,
            // Dell Streak
            /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
            // Le Pan Tablets
            /(trinity)[- ]*(t\d{3}) bui/i,
            // Trinity Tablets
            /(gigaset)[- ]+(q\w{1,9}) bui/i,
            // Gigaset Tablets
            /(vodafone) ([\w ]+)(?:\)| bui)/i
            // Vodafone
          ],
          [VENDOR, MODEL, [TYPE2, TABLET]],
          [
            /(surface duo)/i
            // Surface Duo
          ],
          [MODEL, [VENDOR, MICROSOFT], [TYPE2, TABLET]],
          [
            /droid [\d\.]+; (fp\du?)(?: b|\))/i
            // Fairphone
          ],
          [MODEL, [VENDOR, "Fairphone"], [TYPE2, MOBILE]],
          [
            /(u304aa)/i
            // AT&T
          ],
          [MODEL, [VENDOR, "AT&T"], [TYPE2, MOBILE]],
          [
            /\bsie-(\w*)/i
            // Siemens
          ],
          [MODEL, [VENDOR, "Siemens"], [TYPE2, MOBILE]],
          [
            /\b(rct\w+) b/i
            // RCA Tablets
          ],
          [MODEL, [VENDOR, "RCA"], [TYPE2, TABLET]],
          [
            /\b(venue[\d ]{2,7}) b/i
            // Dell Venue Tablets
          ],
          [MODEL, [VENDOR, "Dell"], [TYPE2, TABLET]],
          [
            /\b(q(?:mv|ta)\w+) b/i
            // Verizon Tablet
          ],
          [MODEL, [VENDOR, "Verizon"], [TYPE2, TABLET]],
          [
            /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i
            // Barnes & Noble Tablet
          ],
          [MODEL, [VENDOR, "Barnes & Noble"], [TYPE2, TABLET]],
          [
            /\b(tm\d{3}\w+) b/i
          ],
          [MODEL, [VENDOR, "NuVision"], [TYPE2, TABLET]],
          [
            /\b(k88) b/i
            // ZTE K Series Tablet
          ],
          [MODEL, [VENDOR, "ZTE"], [TYPE2, TABLET]],
          [
            /\b(nx\d{3}j) b/i
            // ZTE Nubia
          ],
          [MODEL, [VENDOR, "ZTE"], [TYPE2, MOBILE]],
          [
            /\b(gen\d{3}) b.+49h/i
            // Swiss GEN Mobile
          ],
          [MODEL, [VENDOR, "Swiss"], [TYPE2, MOBILE]],
          [
            /\b(zur\d{3}) b/i
            // Swiss ZUR Tablet
          ],
          [MODEL, [VENDOR, "Swiss"], [TYPE2, TABLET]],
          [
            /\b((zeki)?tb.*\b) b/i
            // Zeki Tablets
          ],
          [MODEL, [VENDOR, "Zeki"], [TYPE2, TABLET]],
          [
            /\b([yr]\d{2}) b/i,
            /\b(dragon[- ]+touch |dt)(\w{5}) b/i
            // Dragon Touch Tablet
          ],
          [[VENDOR, "Dragon Touch"], MODEL, [TYPE2, TABLET]],
          [
            /\b(ns-?\w{0,9}) b/i
            // Insignia Tablets
          ],
          [MODEL, [VENDOR, "Insignia"], [TYPE2, TABLET]],
          [
            /\b((nxa|next)-?\w{0,9}) b/i
            // NextBook Tablets
          ],
          [MODEL, [VENDOR, "NextBook"], [TYPE2, TABLET]],
          [
            /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i
            // Voice Xtreme Phones
          ],
          [[VENDOR, "Voice"], MODEL, [TYPE2, MOBILE]],
          [
            /\b(lvtel\-)?(v1[12]) b/i
            // LvTel Phones
          ],
          [[VENDOR, "LvTel"], MODEL, [TYPE2, MOBILE]],
          [
            /\b(ph-1) /i
            // Essential PH-1
          ],
          [MODEL, [VENDOR, "Essential"], [TYPE2, MOBILE]],
          [
            /\b(v(100md|700na|7011|917g).*\b) b/i
            // Envizen Tablets
          ],
          [MODEL, [VENDOR, "Envizen"], [TYPE2, TABLET]],
          [
            /\b(trio[-\w\. ]+) b/i
            // MachSpeed Tablets
          ],
          [MODEL, [VENDOR, "MachSpeed"], [TYPE2, TABLET]],
          [
            /\btu_(1491) b/i
            // Rotor Tablets
          ],
          [MODEL, [VENDOR, "Rotor"], [TYPE2, TABLET]],
          [
            /(shield[\w ]+) b/i
            // Nvidia Shield Tablets
          ],
          [MODEL, [VENDOR, "Nvidia"], [TYPE2, TABLET]],
          [
            /(sprint) (\w+)/i
            // Sprint Phones
          ],
          [VENDOR, MODEL, [TYPE2, MOBILE]],
          [
            /(kin\.[onetw]{3})/i
            // Microsoft Kin
          ],
          [[MODEL, /\./g, " "], [VENDOR, MICROSOFT], [TYPE2, MOBILE]],
          [
            /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i
            // Zebra
          ],
          [MODEL, [VENDOR, ZEBRA], [TYPE2, TABLET]],
          [
            /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
          ],
          [MODEL, [VENDOR, ZEBRA], [TYPE2, MOBILE]],
          [
            ///////////////////
            // SMARTTVS
            ///////////////////
            /smart-tv.+(samsung)/i
            // Samsung
          ],
          [VENDOR, [TYPE2, SMARTTV]],
          [
            /hbbtv.+maple;(\d+)/i
          ],
          [[MODEL, /^/, "SmartTV"], [VENDOR, SAMSUNG], [TYPE2, SMARTTV]],
          [
            /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i
            // LG SmartTV
          ],
          [[VENDOR, LG], [TYPE2, SMARTTV]],
          [
            /(apple) ?tv/i
            // Apple TV
          ],
          [VENDOR, [MODEL, APPLE + " TV"], [TYPE2, SMARTTV]],
          [
            /crkey/i
            // Google Chromecast
          ],
          [[MODEL, CHROME + "cast"], [VENDOR, GOOGLE], [TYPE2, SMARTTV]],
          [
            /droid.+aft(\w)( bui|\))/i
            // Fire TV
          ],
          [MODEL, [VENDOR, AMAZON], [TYPE2, SMARTTV]],
          [
            /\(dtv[\);].+(aquos)/i,
            /(aquos-tv[\w ]+)\)/i
            // Sharp
          ],
          [MODEL, [VENDOR, SHARP], [TYPE2, SMARTTV]],
          [
            /(bravia[\w ]+)( bui|\))/i
            // Sony
          ],
          [MODEL, [VENDOR, SONY], [TYPE2, SMARTTV]],
          [
            /(mitv-\w{5}) bui/i
            // Xiaomi
          ],
          [MODEL, [VENDOR, XIAOMI], [TYPE2, SMARTTV]],
          [
            /Hbbtv.*(technisat) (.*);/i
            // TechniSAT
          ],
          [VENDOR, MODEL, [TYPE2, SMARTTV]],
          [
            /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
            // Roku
            /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i
            // HbbTV devices
          ],
          [[VENDOR, trim], [MODEL, trim], [TYPE2, SMARTTV]],
          [
            /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i
            // SmartTV from Unidentified Vendors
          ],
          [[TYPE2, SMARTTV]],
          [
            ///////////////////
            // CONSOLES
            ///////////////////
            /(ouya)/i,
            // Ouya
            /(nintendo) ([wids3utch]+)/i
            // Nintendo
          ],
          [VENDOR, MODEL, [TYPE2, CONSOLE]],
          [
            /droid.+; (shield) bui/i
            // Nvidia
          ],
          [MODEL, [VENDOR, "Nvidia"], [TYPE2, CONSOLE]],
          [
            /(playstation [345portablevi]+)/i
            // Playstation
          ],
          [MODEL, [VENDOR, SONY], [TYPE2, CONSOLE]],
          [
            /\b(xbox(?: one)?(?!; xbox))[\); ]/i
            // Microsoft Xbox
          ],
          [MODEL, [VENDOR, MICROSOFT], [TYPE2, CONSOLE]],
          [
            ///////////////////
            // WEARABLES
            ///////////////////
            /((pebble))app/i
            // Pebble
          ],
          [VENDOR, MODEL, [TYPE2, WEARABLE]],
          [
            /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i
            // Apple Watch
          ],
          [MODEL, [VENDOR, APPLE], [TYPE2, WEARABLE]],
          [
            /droid.+; (glass) \d/i
            // Google Glass
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE2, WEARABLE]],
          [
            /droid.+; (wt63?0{2,3})\)/i
          ],
          [MODEL, [VENDOR, ZEBRA], [TYPE2, WEARABLE]],
          [
            /(quest( 2| pro)?)/i
            // Oculus Quest
          ],
          [MODEL, [VENDOR, FACEBOOK], [TYPE2, WEARABLE]],
          [
            ///////////////////
            // EMBEDDED
            ///////////////////
            /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i
            // Tesla
          ],
          [VENDOR, [TYPE2, EMBEDDED]],
          [
            ////////////////////
            // MIXED (GENERIC)
            ///////////////////
            /droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i
            // Android Phones from Unidentified Vendors
          ],
          [MODEL, [TYPE2, MOBILE]],
          [
            /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i
            // Android Tablets from Unidentified Vendors
          ],
          [MODEL, [TYPE2, TABLET]],
          [
            /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i
            // Unidentifiable Tablet
          ],
          [[TYPE2, TABLET]],
          [
            /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i
            // Unidentifiable Mobile
          ],
          [[TYPE2, MOBILE]],
          [
            /(android[-\w\. ]{0,9});.+buil/i
            // Generic Android Device
          ],
          [MODEL, [VENDOR, "Generic"]]
        ],
        engine: [
          [
            /windows.+ edge\/([\w\.]+)/i
            // EdgeHTML
          ],
          [VERSION, [NAME, EDGE + "HTML"]],
          [
            /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i
            // Blink
          ],
          [VERSION, [NAME, "Blink"]],
          [
            /(presto)\/([\w\.]+)/i,
            // Presto
            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
            // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
            /ekioh(flow)\/([\w\.]+)/i,
            // Flow
            /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
            // KHTML/Tasman/Links
            /(icab)[\/ ]([23]\.[\d\.]+)/i
            // iCab
          ],
          [NAME, VERSION],
          [
            /rv\:([\w\.]{1,9})\b.+(gecko)/i
            // Gecko
          ],
          [VERSION, NAME]
        ],
        os: [
          [
            // Windows
            /microsoft (windows) (vista|xp)/i
            // Windows (iTunes)
          ],
          [NAME, VERSION],
          [
            /(windows) nt 6\.2; (arm)/i,
            // Windows RT
            /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,
            // Windows Phone
            /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i
          ],
          [NAME, [VERSION, strMapper, windowsVersionMap]],
          [
            /(win(?=3|9|n)|win 9x )([nt\d\.]+)/i
          ],
          [[NAME, "Windows"], [VERSION, strMapper, windowsVersionMap]],
          [
            // iOS/macOS
            /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
            // iOS
            /cfnetwork\/.+darwin/i
          ],
          [[VERSION, /_/g, "."], [NAME, "iOS"]],
          [
            /(mac os x) ?([\w\. ]*)/i,
            /(macintosh|mac_powerpc\b)(?!.+haiku)/i
            // Mac OS
          ],
          [[NAME, MAC_OS], [VERSION, /_/g, "."]],
          [
            // Mobile OSes
            /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i
            // Android-x86/HarmonyOS
          ],
          [VERSION, NAME],
          [
            // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS
            /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
            /(blackberry)\w*\/([\w\.]*)/i,
            // Blackberry
            /(tizen|kaios)[\/ ]([\w\.]+)/i,
            // Tizen/KaiOS
            /\((series40);/i
            // Series 40
          ],
          [NAME, VERSION],
          [
            /\(bb(10);/i
            // BlackBerry 10
          ],
          [VERSION, [NAME, BLACKBERRY]],
          [
            /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i
            // Symbian
          ],
          [VERSION, [NAME, "Symbian"]],
          [
            /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i
            // Firefox OS
          ],
          [VERSION, [NAME, FIREFOX + " OS"]],
          [
            /web0s;.+rt(tv)/i,
            /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i
            // WebOS
          ],
          [VERSION, [NAME, "webOS"]],
          [
            /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i
            // watchOS
          ],
          [VERSION, [NAME, "watchOS"]],
          [
            // Google Chromecast
            /crkey\/([\d\.]+)/i
            // Google Chromecast
          ],
          [VERSION, [NAME, CHROME + "cast"]],
          [
            /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i
            // Chromium OS
          ],
          [[NAME, CHROMIUM_OS], VERSION],
          [
            // Smart TVs
            /panasonic;(viera)/i,
            // Panasonic Viera
            /(netrange)mmh/i,
            // Netrange
            /(nettv)\/(\d+\.[\w\.]+)/i,
            // NetTV
            // Console
            /(nintendo|playstation) ([wids345portablevuch]+)/i,
            // Nintendo/Playstation
            /(xbox); +xbox ([^\);]+)/i,
            // Microsoft Xbox (360, One, X, S, Series X, Series S)
            // Other
            /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
            // Joli/Palm
            /(mint)[\/\(\) ]?(\w*)/i,
            // Mint
            /(mageia|vectorlinux)[; ]/i,
            // Mageia/VectorLinux
            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
            // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
            /(hurd|linux) ?([\w\.]*)/i,
            // Hurd/Linux
            /(gnu) ?([\w\.]*)/i,
            // GNU
            /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
            // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
            /(haiku) (\w+)/i
            // Haiku
          ],
          [NAME, VERSION],
          [
            /(sunos) ?([\w\.\d]*)/i
            // Solaris
          ],
          [[NAME, "Solaris"], VERSION],
          [
            /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
            // Solaris
            /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
            // AIX
            /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,
            // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX
            /(unix) ?([\w\.]*)/i
            // UNIX
          ],
          [NAME, VERSION]
        ]
      };
      var UAParser = function(ua, extensions) {
        if (typeof ua === OBJ_TYPE) {
          extensions = ua;
          ua = undefined2;
        }
        if (!(this instanceof UAParser)) {
          return new UAParser(ua, extensions).getResult();
        }
        var _navigator = typeof window2 !== UNDEF_TYPE && window2.navigator ? window2.navigator : undefined2;
        var _ua = ua || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);
        var _uach = _navigator && _navigator.userAgentData ? _navigator.userAgentData : undefined2;
        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
        this.getBrowser = function() {
          var _browser = {};
          _browser[NAME] = undefined2;
          _browser[VERSION] = undefined2;
          rgxMapper.call(_browser, _ua, _rgxmap.browser);
          _browser[MAJOR] = majorize(_browser[VERSION]);
          if (_navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {
            _browser[NAME] = "Brave";
          }
          return _browser;
        };
        this.getCPU = function() {
          var _cpu = {};
          _cpu[ARCHITECTURE] = undefined2;
          rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
          return _cpu;
        };
        this.getDevice = function() {
          var _device = {};
          _device[VENDOR] = undefined2;
          _device[MODEL] = undefined2;
          _device[TYPE2] = undefined2;
          rgxMapper.call(_device, _ua, _rgxmap.device);
          if (!_device[TYPE2] && _uach && _uach.mobile) {
            _device[TYPE2] = MOBILE;
          }
          if (_device[MODEL] == "Macintosh" && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
            _device[MODEL] = "iPad";
            _device[TYPE2] = TABLET;
          }
          return _device;
        };
        this.getEngine = function() {
          var _engine = {};
          _engine[NAME] = undefined2;
          _engine[VERSION] = undefined2;
          rgxMapper.call(_engine, _ua, _rgxmap.engine);
          return _engine;
        };
        this.getOS = function() {
          var _os = {};
          _os[NAME] = undefined2;
          _os[VERSION] = undefined2;
          rgxMapper.call(_os, _ua, _rgxmap.os);
          if (!_os[NAME] && _uach && _uach.platform != "Unknown") {
            _os[NAME] = _uach.platform.replace(/chrome os/i, CHROMIUM_OS).replace(/macos/i, MAC_OS);
          }
          return _os;
        };
        this.getResult = function() {
          return {
            ua: this.getUA(),
            browser: this.getBrowser(),
            engine: this.getEngine(),
            os: this.getOS(),
            device: this.getDevice(),
            cpu: this.getCPU()
          };
        };
        this.getUA = function() {
          return _ua;
        };
        this.setUA = function(ua2) {
          _ua = typeof ua2 === STR_TYPE && ua2.length > UA_MAX_LENGTH ? trim(ua2, UA_MAX_LENGTH) : ua2;
          return this;
        };
        this.setUA(_ua);
        return this;
      };
      UAParser.VERSION = LIBVERSION;
      UAParser.BROWSER = enumerize([NAME, VERSION, MAJOR]);
      UAParser.CPU = enumerize([ARCHITECTURE]);
      UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE2, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
      UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);
      if (typeof exports !== UNDEF_TYPE) {
        if (typeof module2 !== UNDEF_TYPE && module2.exports) {
          exports = module2.exports = UAParser;
        }
        exports.UAParser = UAParser;
      } else {
        if (typeof define === FUNC_TYPE && define.amd) {
          define(function() {
            return UAParser;
          });
        } else if (typeof window2 !== UNDEF_TYPE) {
          window2.UAParser = UAParser;
        }
      }
      var $ = typeof window2 !== UNDEF_TYPE && (window2.jQuery || window2.Zepto);
      if ($ && !$.ua) {
        var parser = new UAParser();
        $.ua = parser.getResult();
        $.ua.get = function() {
          return parser.getUA();
        };
        $.ua.set = function(ua) {
          parser.setUA(ua);
          var result = parser.getResult();
          for (var prop in result) {
            $.ua[prop] = result[prop];
          }
        };
      }
    })(typeof window === "object" ? window : exports);
  }
});

// node_modules/statsig-node/dist/utils/parseUserAgent.js
var require_parseUserAgent = __commonJS({
  "node_modules/statsig-node/dist/utils/parseUserAgent.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    exports.__esModule = true;
    var ua_parser_js_1 = __importDefault(require_ua_parser());
    function parseUserAgent(uaString) {
      var res = (0, ua_parser_js_1["default"])(uaString);
      if (res.os.name === "Mac OS") {
        res.os.name = "Mac OS X";
      }
      if ((res.browser.name === "Chrome" || res.browser.name === "Firefox") && (res.device.type === "mobile" || res.device.type === "tablet")) {
        res.browser.name += " Mobile";
      }
      return res;
    }
    exports["default"] = parseUserAgent;
  }
});

// node_modules/ip3country/src/ip_supalite.js
var require_ip_supalite = __commonJS({
  "node_modules/ip3country/src/ip_supalite.js"(exports, module2) {
    var data = Buffer.from("/~--USCNAUJPTHINMYKRSGHKTWKHPHVNNOESFRNLCZGBDEATCHBRITGRPLBEIEDKPTSEGHTRRUCMZAFIAEHUJOROLUARUGAMTZBIUYCLBGUAEGCAILQAMDHRSCIQLVEEUZSKKZGEALPSSACYMTLTCRIRBHMXCOSYLBAZZWZMOMRSISSIMKLIJEBAPEKGIMGGGILYYEBYREJMGPMQKWLKSZCDBTBNPMPALAGUMPDOIDNGNZECVEPRBOVIBDPKPGTLSBVUFJCKTONPKEMOTTLSMAVGKNAGVCKYLCMMGDCWBBBSPYGTUMDMTMTKMVAFNCMNWFSMMESVADMCGLBZTJFOHTMFLRMUBWTNMGAONACISDMWGAMLBJTDCVRWCGMZGMGNBFSOSLNECFTGSSGQSNDZASMRDJKMIOYTNRWSFMPFHNNIBMGFNUTVPWMHKIKPAWCUSRGYVASTETERGWFKBLAITCSXAXAQNFBQMSGS**\xF3\0\0\b @\x80>@\x80|\x80\xF2\0\x7F\x80\xF2\0\xF2\0\x07\xF2\0\xF2\0\b\nu\x80\xF2\0	\xF2\0@	\xF24\xF2\x8C	\xF2\0\xF2\0\xF2\0\x07\xF2\0\b\x80\b@\n\b\v\n\v\n\b\f	\v	\v	\b\b\f\v\r\v\xF2\0\xF2\0\f\xF2\0\v\xF2\0\xF2\0\x07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\b\xF2\0\v\xF2\0\xF2\0\xF2\0\b\xF2\0\xF2\0	\xF2\0\xF2\0\xF2\0(\xF2\xCF\f\xF20\f\xF2\0	\xD0\b\v\b\n p\x80\xF2\0\xF2\0\x07\xF2\0\f\xF2\0\f\xF2\0	\xF2\0\xF2\x000	\xF2\x1B\n !\"#$!%&'#$!($)$!\x1B&\b\x1B $*\v\v +#\b!!,-&\b./0##!1!-!\b-2\b!\x1B0#3'\x1B\b\b-!##$#!23&'4!\b&!#\b +#\v#&&!\b!($$$!!4\x1B5!!&&6\b& 5\b!(&#!#!\b2!\b!!7\b\b3-!%8$!!4!\x07-\x1B!\b$9  9\xF2\0\b\xF2\0\xF2\0(\xF2\08:#;<4$!=\b4#$\v,5$5$\v#5\b>!/$$\x07'35?$5$@A\b$B5&++\v\b57,!$#\b5C?8\b\n\n!	!>8,7#;:C:D'4$E#\b)\b5'\v\f\b\v\n++$$F\b\b5$\v\b#G#HI	\vI$?:J$\b)!\b$5$\b\xF2\0$\xF2\0\b!\xF2\0\bB\xF2\0 \xF2\0\x1B\xF2\0F\xF2\0$\xF2@\xF2\xBE\xF2HG\xF2\xB5\xF2\0\b\xF2\0\b\xF2\0\xF2\0B\xF2\0\b\xF2\0K\xF2\0\xF2\0\xF2\0\xF2l\x07\xF2\x93\b\xF2\0K\xF2\0\b\xF2U\xF2\xA8\f\xF2\0\b\xF2\0\xF2\0\b\xF2\xA8!I\xF2O!!!\xF2\0\n\xF2@\n<	\n\b&\x07!L&\v7\xF2\0\x07\xF2\0\xF2\0\f\xF2\x8A\xCD\xF2\xA7\xF2\0\xE4	\xF2\x1B	\xF2\0\xF2\xF6\xF2	\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\x07\xF2\xE8\xF2\0\xF2\xF2\xF0\xF2\0x\xF2\xF4\0\xF2\xFF\xF2\v\xF2\xF277\xF2JM\xF2r\n\xF2\xD77\xF2<	-N\xF27\xF2\xAE797\xF2\xAE\v7\xF2f\xB8\xF2\0O 5\b\b\b$\b\r\x07\b=#=\b\x88\b\b $\b#\b \x80+\xF2\0$\xF2\0$G$\n$'$$\b$$$,$$  P$\x070$\b=\xF2\n\bC  \b# \n\n\n\b\b=\bQ\bRS&===\b\bE\b$\b\b \x80#\xF2\0+\xF2\0$\xF2\0I\xF2\0T\x80K\b8\b\b$A$5 UK'\b!!\b\b)#,F\b\b\b$\b' V$\bK\b#\x80\xF2\0#\b)\b$\b\r\b@@8@\xF2\08\xF2\x80(\b4\bW\b$\b\b\b:\bX\b@T\xF2\0\x80B \bE\b\n5\bK\b\b?\bY\xA0$\bZ\v\b!\b\b\b+\b\b\xF2\0T\x80(\x80)\x80 ;\b$\b\b\b\b/\b\b\b\b\xF2\0\xF2\0F\x80$\bZ\b\b\b  = F@ @[ $ ; E\b\b\b$\b$\bQ$#$$\b\b#\b\bC\b#\b\b$\b!\b?!\b\b>\b'\b\b\b>\b$\b$?*\b\b\b\bP\f$B\f$'$B$'$'$$'$\xF2\0#\xF2\0\xF2\0K\\\x07\b$ K \b(\b\b5\b$\x804\xF2\0\x1B\b\b\b5\b)\b\b\b@:KK\b$\b\bP\bP\b]\b\bK\b\b\b\b5\bU @\b\b\b\b$\b$\b!\b\xF2\05\b$A]$\b\n$$B\n$5$$5\f($\b[\b$\x1B$A@$\xF2\0\b$KK\v\b\b\b'4\b@\b\b\b\b$\b)\b\n$\x07\n\b\b^_^H^`=\b`K\ba\bK\b @B\b$\b\b\b$\b/\b\b\b@)\xF2\0\b\xF2\x80K\x80\xF2\0B $ @\x80/tQ\x8B@@\x80$\xF2\0\xF2\0F--\b\b5\b+\b\b' \b\b\b(\b@ \b\b\xF2\0@@$\b\b\bb\b c\b\bP$\b8&$5$$\bB$\f\x07?\b$\b$\b\b?$)$4,@7 $ 5\b\bdefeg E\b\b\b\b$\b\b\bT\b@8\xF2\0#\b\b 5h#\b'\b\b\b\bO\b+ 4\b\b$\bK\b\b\bB888\b\xF2\05\xF2\0K\xF2\0(\xF2\0F\xF2\0K\xF2\0$\x80@@F\b[\b\b\bE\b\bI$\v44#'$$? [\bC !Q\b\b\b\b\b\bQ\b/\b\b\bU\b\bHK\bO\b\b$ O\xF2\xF3\0\f\xF2\0\b$08$\b $\bK\b\b\b\b\b@\x1Bh\b\bK\b\b\b\b$\b\b@$\xF2\0\xA0 @)\b\b0 [=,\b5\bF\b$\b\b\b\b$5\b)7\x80\x07 @!\xAD*\x80C \b\v\b \b>\b[\b\b(@(\b$5$5(\b\b\x80!\n\b[+ ++: +U+[+++++![\xF2\0O\xF2\0F'!'!I!''?!?'\b\bW\bi\x07 |+@ \b\b $@\b\v\b\b\bI\b\b\bC\b\b\b\bK($\b@\b\b,\b\b)\b\b#\x8CKQsK\xF2\0\xF2\0T\xF2\0F\xF2\0$\xF2\0 $\bU\b@\b!\b\b\x1B\b\b\xF2 \b\b\b\njka\b($\x80\xF2\0#Q((\b$\bA\b\b!\b$\b\b\b\x80C >(\b\b!\b@\b<:B$\f9#'\n$\v5#:)5$\x07,$#\v\n\b\b;$\v\b\v#44$45$5++$\f#\v:=#\f+$#\n7\b5$4$@$:5:$:K $8\v$#$$5)$N-h\b8Q\nlm\b\b\b#\bU$,\b$&&# #\b\v5$$\b$!+$$5+4$\xF2\0\xF2\0\b\bC\b\b\b$\b\b $fgfg\x80)&$5c$\f?$\v\n$#\r$\b$$B$$$8\f$\b$&$$@&,\f$5,B\f$#$I!!\n$$+4$$?$?$8\x07$\v$B\x80$@\b$\v$B$B\b$,$\xF2\0K\xF2\0Q\xF2\0(\xF2\0\xF2\0Q\x80\b\b K \b*!!\x827\rI\b* $\b\b5  $\xC0K\x80\xF2\x80K\xF2\0\x1B\xF2\0)\xF2\0\x80$@)\b\b\b \bD\xF2\05\xF2\0K\xF2\0\b!\bK\bH\b\b\b$\b\b@#\xF2\0$\xF2\0#\xF2\0\xF2\x98K(\xF2dK\xF2\0!\xF2\0F\xF2\05\x80  !!\bW $ \x80K B\b'\b$ Q\b!\b$#\xF2\0B#V$$Q\b$\n#n$\b$!o$$+$5I$#KU\vK+$E'^FK$\v #$$\b#? p8+,#I#+++++++++++ !\b\b!\b$\b ! $ b5\bC\b\b\b\b 5\f$B\v$'$'\x07$$'$\xF21n7\xF3>\x95qr\xF2{(\xF2\xF87\xF2s@\n\xF2\x94\n\xF2\x8AJ8!3 M\xF2\xCD\x1B\x07c>7\x07\b77t#K\n\xF2D\v7\nl}\n7\v77D$~\xC1\xF2P7\b7\xE2m\n\x96#d7Q\x8B\xBF\xB47\xF277\xEC\b7\xF2\n\xF2u\b7\n7\xF2&77\bYu&\x97\by47U&3\\L-\xF25\n1\n	Y;\vj\b\f\v8v?:IV#B4$>K!x$\xF2\v5'i,\x07H \x83d)+U73\x1B7\xF2 7\xF2M7\xF2\x89Q\xF2\0@\xF2\0\xF2\0 $\f&(@@$@\xF2\0\v\x80@@\x80\v\xF2\x80\v\n\xF2\0 \xA0\\MJ\b3\bN\bw\b\\\bxo\f\\ -  N \\-N3wMo\bJ\bx\v!\v\xF2\\\x7F`\xF3\xA0	\xF3\0\0\xF2\xD2\xF2\xA13\xF2\x9C\r\b\xF2 yy\xF2\xE0\xF2]y\xF2\xDAz\xF2>\xF2Hyy	y{{\xF2Cy\xF2\xF4y{y{y\xF2\xCF\x07y\xF20y\vyyy\xF24y\xF2KQ\x07\b\x07'\x07!\b'\x07\b\b'''''\b&\b\n\x07\x077\b\b!!\f!!\b!\r!\n!\b!v\x07vvv\b\x07\b\x077\x07\b\b7\x07\b\b\x07\b	\f\b\b\f\b\b\b\b\b')\n\xD1\b\f\n\f\f\n\f\f\f\f\x07&	7	\x07\f(\b\x07\x07(\x07	\x07\xF2\0\xF2\0\b\xF2\0!\xF2\0\xF2\0!\xF2\0\xF2\0\v\x80\n\xF2\x80\x80\x80@\v\x80@\x80\x07  7\xF2\0 \v  @ @\b\b\xF2\0\x80\v\x80\xF2\0\n@\xC0\x80\x80\xF2\0\xF2\0\xF2\0\x80\xF2H\b\v 7\xF2\0\x80\x80@\v@\xF2\x80\xF2\0\b)7	\x07	!	\x07(\n7\v\x07\v\b\x07\n7\n\v\n\n\v		\x07\x07	\v\b\x9F\x07\n7\b7\v\x077\by\b	\b\vy7\n\v\n\v\n&\x07&\v	'\x07\b\n7	'''\x97		\v\xF2\xF2\0\xF2\0\b\xF2\0	\xF2\0\x07\xF2\0P\xF2\0\xF2\0	\xF2\0\xF2\0\n\xF2\n	\x07\x07	7\x07	\x07	\v \n\x07 	 \v 	 7 \x07	 80\b\vL\b\v7\b7\b\bD\bLN\bLN\bN\v\b-\b-\b-\x07\b\x07\b\x07\b\x07\b\x07\b\x07\b\x07\b\x07\n\b\x07\n7\xF2\b\n\xF2\0\xF2\0\x07\b\xF2\x95a\xF2\0y&\xF2\x86&\xF2\0  \v\x07t!\x07L\n\x07!\n7\n\x80n  /\x07\xF2\0\n\xF2\0\b`	\x80\v\f\v@v|}\n\f\x07\x80\b\xF2\0\xF2\0\xF2\0	\xF2\0\b\xF2\0\xF2\0@	\xF2\0\x07\xF2\0\n\xF2\0\x80\x07\b\b\bt\x07\v\x07 \x07\v\xF2\0v\x07\v\n	\n\x07\v\n@\xF2\x80	\xF2\0\xF2\0\xF2\0\xF2\0\v v~\x7F\x80~\x80\x81\x82q\x83\n\x81~v\x84\x82~\x85\n\n@!\bt\b\x86u)'  \xF2\0	\xF2\0\x07\xF2\0\xF2\0 \x07\v\b\x07\v\b\x07\v\x07\b\v\b\v\b~	  } @\b\xF2\0\xF2\0\x07\xF2\0\xF2\0\v\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0\xF2\0 \xF2\fh\xF2\x88\xF2l\xF2$\xF2\xD4\xF2\xFCH$Q\xF2H\xF2\xC2\xDF#\xF2~\n\x07C\xF2$\x1B\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\v\b\b\b\n\n\n\f!\x07	\n7\vL&\xF2\xA4\x99L\n\xF2[L\n\nL\xF2\0\xF2\0\xF2\0\x07\n7	&\xF2\xAE\xF2F\n\xF2\0\x07\xF2\xC9\v\x07\xF28\b\n	7\n\f&!\xCA\xF2\07\xF2\0\xF2\0\n7\n\b\n\x07		/!&\xF2`\xF2\0\xF2!\n\xF2;\x07\xF2\xD2{\xF2\xFFJ\xF2\xFF\0\xF2\xB9\b\xF2\xAC\xF2\xED9\xF2\xB8\"\xF2\xB3,\xF2h.\x80\xF2c\xF2\xADGP*\xF2t\xF2\xF2>\xF2\xAF\xF2\0%\xF2t\xF2\xA5\xF2|\xF2c\xF2D\xF2\xF1\xF2\xDC\xF29\r\xF2m\xF2\xD8\xF2'\xF2y\xF2	\b\xF2N\xDAG\xF2\0\xF2\xC1\xF2zW\xF2\xD3\xF2\xF1\xF2\xC0@\na\xF2\x95\x07\xF2u|\xEA\xF2\xCF\xF2w}\xF2/\xF2\x83^n\xF2V\xF2)\x07\xF2\xF2\0\v\xF29\xF2;\xF2\x8A\xF2\0!\xF2\x84\xF2\xFF	\xF2i\xF2g#P\xAF\xF2\xA6\xC4\xF2\xEC\xF2e\xA7\xF2\xFAS\xF2\xCD\xF2\xDE\xF2\xA2\xF2+7\xF2]\xEF\xF2\xF2\\\xF2\x97\xF2\xD7>\xF2(\xF2\x07\xF2+u\xF2\xB2\x9C\x07\x07!\n\xF2\x9B\xF2\xF0(J\xE6\xAB\xF2\xBD>\xF2\f\x94&#\\\n\x07\n\x07\n\x07\n\x07\n\x07\n\xAA\x07M\v\x07\xF2\x8F\n\xF2\xB7	7\xE07H\b7\xA87\b7(7\b7\b7 7\b\b7\b7\xF2\xB0\b7\x887P\b7X7\b770\b7\xF2\x82\x07\nz\n\xF2\xF2	(\b\xF2 \b7677\bM\b7\bM473(\b\b\b7 7\xF2\xF2\v\xF2\xF0\bM\bM\xF2\xB0\r\xF2@\f'\n\b\b\bj\b'\f!\f\b\b!H#(\b\f\b\b\b\b\b\b\b\xB8!8\b'\b&$\b\b\b(\b\b#\bF(\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b(\b\b\b\b\b\b\b\b\b\b\b\b\bF$ $\b!,\x07\x07@@\x07(\b\b#\xF2\xF8\0\xF2\xF0\0\b\b\b0\b\b\b\b!\b\b\b\b\b!\b#\b#A\x07\xBD\x07\b$\b \b$\b\b\b'))\x07#!,\x07\b\b\b\b\x07\b8@8 88 8 8\b88888 88 8	88	8888\b88  8'c!x\n\x07\n\x07\n\x07	\n\x07\n\x07\n\x07\n\x07\n\x07\n\x07	\n\n\x07\n\n\x07\n\x07\n\x07\n\x07\n\x07\n\x07\n\n\x07\n\x07\n\x07\n\x07\n\x07\n\x07\n\x07\n\x07\n\x07\n\x07\n\x07\n\x07\n\x07\n\x07\n\x07\n\x07\n\x07\n\n\n\x07\n\x07\x07\n\x07\n\x07\n\x07\n\x07\n\x07\x07\n\x07\n	\n\x07\r\n\x07\n\x07\n\x07\n\x07\x07\n\x07\n\x07\n\x07\x07\x07\v\f\b\x07\x07\b\x07\x07\x07\x07\x07\x07\x07\x07\x07	\x07\x07\f\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\b\x07\x07\x07\r\n\v\n\n\n\n\n\n\n\n\n\n\n	\n\n%\n\n\n\n\n\n\n\n\n\n\b\n\n\n\n\n\n\n\n\n\n\n\n\n\n\x07\x07\x07\x07\x07\x07\x07\x07\f\x07\x07\x07\b\x07\x07\x07\x07\n\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\v\x07\x07\x07\x07\x07\n\x07\n\n\n\n\n\n\n\b\n\n\n\n\n\n\n\n\n\n\n	\n\n\n\n\b\f\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\x07	\n\n\n\n\n\n\n\n\n	\n\n\x07y\x07\x07\v\x07\x07\x07\x07\x07\x07\x07\x07\b\x07\x07\x07\x07\b\x07\x07\x07\x07\x07	\x07\x07\x07\x07\xD8vv 0\x07\x07\x07\x07\b\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\v\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\b\x07@\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07O	\x07\x07\x07\x07\x07\x07\xF2\xA8\b8(\v\b\b\v\b\b\f\b\b\x87\b\v\b\b\v\b\n\b\f\b\b\b	\b\b\b\n\b\x87\b\n\b\n	\x07\x07\x07\x07\f\x07\x07\x07\x07\n\x07\x07\x07\x07\x07\v\x07\x07\x07\x07\x07\x07\x07\b\v\n\n\b\b\b\b\v\bt\x07\n\f\b\b\f\n\n\n\v\n\n\n\n\n\b\x07\b\b\x07\b\x07 \x07 \b\x07\b\b\x07\b\x07\b\b\x07\b\x07\b\b\x07\x07\xA0\b\x070\b\x07\b\x07\x07\xF2p\n\xF2\v\n\x07\xF2p\x07\x07\x07\x07\nI	\v\v\v\v\xF2/7\x07\n\xF2,,   \x07\xA0\b\b \x07\b\b\n \x07$\x07\xF2\x88\n8\xF2\x07\x07\x07\x07\x07\x07\n\n\n0\b&\x07\xF2\xF2&\n\x07\n\x07\n	\n &\n\n\x07\xF2%\n\nj\v\n\xF2\0\x07\n\x07\n\x07\n\x07\n\x07\n\n\n\n\b\n\n\b\n\n\n\n\n\n\v\n\n\n!\f\n\v\v&	\f\n$L\xF2(\n\xF2<\xF2\0\x07\xF2\0&\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\xEE\n\xF2\n\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\v\xF2\0\xF2\0\v\xF2\0\xF2\0\xF2\0\xF2\0\b\xF2\0\xF2\0\xF2\0\b\xF2\0\xF2\0\xF2\0\xF3 <@\b\x80@ ( @@@ 77(\n\x07\b(\b7\b(t 7\b	\b	\x07\b\b\b\x07\b\b\b  \x80@	@@\x07\xC0@ 7  \b\b\x07@\nX\b	 \x07@@@\n@ ( & ` ( (  ('\n\n7\x07\v	&\x07(\x07\n\x077\x07	&(\n\x07\x07\v\x80\x80H7 7\x80\x80@\b \x80\xF2\0P\b\xA8 \b\xD8\x80\x80\xF2\0\xF2\0\xF2\0\x80\x80\xF2\b&\x07	(76\v\n\n7	2\xF2\0\xF2\0\x807\x80\xF2\0\x80\x80\xF2\0\xF2@\xC0\xF2\0\xF2\0\xF2\0\x80\xF2\x80\xF2\0\xF2\0\xF2\0\xC0\xF2@\x80\x80\xF2\0\xF2\0\xF2\0\x80\x80\x80\xF2\x80@\xC0\x80\xF2!'\v\v\x07\v'\x07\v\v\v\v\v\v\xBA\v\x1B\n\b\v\x07@\x07\v\n\x07\v\b\n		\b\v\x077\b&&\n\x07	(\b\b7\xF2D\f\n\xA0\v\v	\f\n\b\v\x070\xF2\xD8\n\xF2\x84\xF2\xF0\0\v \xC07	(	7\x07&\v\x07\n77&7\n\v7&\x077\x07(\n\x80\xC07\xF2\x82\xE5 \b\xF2\r\vCV7\v\xF2\xC7@\n\xF2\0\x88\v \v    \n\x80@@\v@@@ \n \x077\n\x07	\n7\n\v\x07	(B@@ \n @ \x07\b\b\x07(\x07 \x07\b\x07@\x80 \x07@ \x07X	\b 	\x80H\n\b\v\b\n\b \nx@(\xC0	@\x07@\n\x80\x80\x07\x80\n\x80@@\x807\x80	\x80\x80#	\x07\n\xF3\xE25((\b\x07t7\btt(\b\b\x07(\n\b \x07\n\x07\v - -\x07\b\x07\n\x07t7t\v \x073- \vM\x07\x07\x88\x07tM!\x07\vtM 0M30\x07\x89-\v  MM  0\x07\nt03 77\b@	\x077N0N@N\v \vM\n \x07 \b\x07\x07N\x077\x07\nt\x07\x07\n\x07P 7\x07#t \f t \f\b\b\x07\n\x077t  3-\x07 -\f	tM!\b \b&\b\v\v !$N\b\x073N3#4\b \x077\x07\b	t\b\x07\x0790\nM\x07\nM33\x07.\nJ\n\xF2\07\xF2\0y8\b\xF2\x80\n 7\xF2 7\v!\x07\n\fv	\x07!!0\x07N\b\b\v\f\b	!		\x07\x07\x07!\b\fM\x07\x07 \x07\b\bF\b-($\f 78M\x07t\vt \x07!\x07!$$\b*\b\f	\n	\x07( \f\x07\x87\v\b\f7N\v\b\v\n   '\b\x07(t \ft)0. \b t \b	\n!	\r\x07\n\x07Mv\b7! \v\v\x07\vM\x07\v\v\f3\x07\x077\f&0! \v 	\x07M\v\b!!v 7t\n\x07\v\f\n\b	\b\f\b8\x07\vt\x07v\x077\n8(\v3\x07\v\v\b\x07\x07\x07\x07\b\fM\b!N\n\x07$\n	\vT!\nM\b\x07N\b\x07v!\b!\bw! (	\x07\x07\v \n\b\b \x07\x07\b!\f\f!\b\n\b\v	\v\x07\b\x07\x07\n\n\nM	\x07\n\b\x07 7\f7	i \b \b	\v!\v\nt\n\x07!06\b\b\n\x07\f\b\b\x077	 \b\x07\x07\n30\bM\b!\n\n\v&v\n\x07\b\x077N\x07\n\x07$\nt!! - t	7$&!	\n	!\f  \b\n\b\n\b7	\x07\x07!!\x07\n\x07\x1B\\\n\v4&\f\x07\x07\nM \n\v -\x07\x07(M\b/\b\x07\b\f\v ! N5\x07$!!!\v\v3th\\\x07\"\v\x07w\x07\n\x07\n\vw\x07  w\x92\x07\b\v7	\b\x07\x07(7\b 7# \b\x073\x07 M	\x07&\n \x07	7\n\x077\x07?!%!\n3$t\x07\x07&0\n\vN7 	\f $!\b\v\f\n!!N\fN\x07\\\x073v$\x07\bt$\n\"\n	&6-\x07&R(\x07\x07\b \b7=M\n\n\x07\v\x07 0&$	\f\x07\b\x07M$M	$\v\b\v:\b\n\vK$\nN\x07\v\v\x07\b	\x07\v\x87	0\x07t 4\b\xF2 \f\n ;!\n 7\b!	\n\n7\f 7  v\x07./!\v\b	\n0 M !\n  \n\v\n\v\"\b\v@$\n\b   -\v\f\nM\v\b M\v\v	\v\x07\v \b7\"\v \v\v\n   -\v-- @\bJ\v 3P    8J	\x07	\xF2D\b(P7\xF2 `\b\f\xF2\xE47\f$\b#(#(@P7\f\v\f@7  7s\n7 7\xF28w!\x83\"\x8A\xF28\n \v\f\x80 \r\v	\x07@\n\xE0 \v\x80 \b\v\b\n\b@@\v\n\b`0@ h\v \v\x84\x07'\x07\n8\xF2(\xBF $ \b\b\n\b\nh\b\b\b\n\xF2`\b\nh H\n\xB6\xF2\0\b\n $7 $@ $\xF2\b7y\x077\v\f7777y7y\x8B777\x8Cy\x8D777\x07	7777777\f7\r7777/7\x8By777\x8B77y777777777777y77y\r777\f\r77\v7777\f/7777777777777777\r77777777\f77e777777777777777\f7\ry77y7777\r777\r\f777\ry7y77777\f77\x8E\f7y777y77777\r77y\f77777777\x8D7777?77y?7??\x7F?7??7?>7>????7>????????7???7?>?\x7F\x8F?}??>?\x90>y??7????7>?,0\x07\bt\x07-\x07\n\n\x07t(\f\x07\x07'\bt/M\\M#M\b M  $\v \n\x07(\\M	!$987 \ft(\n\x07\f!t	 \nt  t\x07\x07-\xA0 $ !	-\b4	\b!$-\b\x07\v \"\b\v \v &-L\f\x07\x07\x91\v\b$\x07  \b0!\x07\b\n\b \x07F\v	\x07\n\ny\x07\v\v\b\v\ft \x07\n\v\x07,	\f!\x07\x07\x07\x07&!\x07\v$\b\b 7M\b\x07\b\x07 \n\v	<\f\x07 - \b\x07\fM\x07 \n\v&	HW\fF3-\r	\b\x07M\x07$\v2 4M\x07\x07\ft	\x07\x07\x07	\x07\f\x07\b27sM\b\f\x07\x07   M&2\x07\v	\nt\x07\x07\b\v\b\v\x078 \b (  \x07\b	7\r\x07	&u( \x92($2(\x07 ( \ni\\\\\x93w\x07!(\\\x07\b6\\\x07 t M\n\x07\b\n\x07\x07	\x07\b @7$\n\f\f\f\v-\"\x07\x07	M\x07\v\n\x07 	$\x07\f\b\n\x07(	!-\x07\b\x07\f\x07\n\x07t t\b\x07\v\nv \b\x07\x07!\x07\b\x07	(\x07 \x07 \v\n\b\b\x07\b7N\nN3  #$\n\x07\f\x07\b@ \x07\b\x07&+\x07\x07(\v\b\x07\x07\x07\x07 !\x07\x07!$\\v\n\b	$M M\b(\x07$! Mv\x07\nM$ \bM\v\v\n $(!]!M\x07!:\x071	$\x07\x07&\f3N$($\v$$w3\\\x07M\v\n!tt( M N\f7\b<7t\v\x07\n\"\b\x078\x07\rt\x07\v\btt  8&#\f\x07v\b$v\b v@-  \fM\v\f7\x07\x07\b  4\bo0- \x07\xF2\r\v\v\xF2 7q#\xF2b7\xF2k9$;\xF2\07\xF2@7\xB0\x947\v\v\f\v\n\r7>71\\-7777\f7\"7\x9C\xF2\xF5\0 7C\v	\xF2\xE2\x07 \b;!#\xA07	\vtu\nt\ft9u&(uP\v\x07X7y7777\b\"8777\xE1M&\n 7 	\b\v\n\v$7\x977\xF2477'777v77v777\xF2\x80%\xF2\07\x907\xF2\xD0\xC0y\xF2\xC0\x80707@y\xE0 7 `7  7@y@@\x95` 7\xC0\x80707@ \x807`@y@@y  y@7\xF2\0\xF2\07\xF2\0\xF2\x90\b7\xF2\xB17n7@\xF2\0\f7\xF2@@7@@7\xF2\x90\x90\xF2 \b@7\xF2\0@7\xF2` 7\x80@7\xF2\x80\xF2\07\xF2\0\xF2\07\xF2\0\x07\xF2\07\xF2\xC077\xF2\xF2\0\xF2\0#\xF2\0\xF2\0U\xF2 `7@ 7 y\xC07@y 7 \xC0y\xE0\xF2`77\xF2 @7\xF2>\x807\xF2\x80\xF2\07\xF2\0(\x96s\x97N-ND\x80 7@7\xF2\xAC\x98\xF2c\x807y \xC07\xF2\xC0\r@y\xF2\0\xF2\07\x907 @7\xF2\0 \x95\xE0\x807\xF2\x80\xF2\07@ 7\xF2\xA0\x807\xF2\x80\xF2\07\xF2\x80\x807\x80\xF2\x807 y\xF2\xE0 \v\xA0P7 \x9507\x90\xF2\0-\xF2\x077\b\v 7 \xA07\xF2\07\xF2\xF0`77+\x95\x99\x95@7\xE07`7\xF2\xA0	\xF3\0\0\xF3\0\0\b\n \x07  |\b\x07\f\v\v\b\x07\b\x07}\vt\x07\f\x07v	\f\x07\xF2\0	\xF2\0\xF2\0\x07\xF2\0\xF2\0\x80\x850\x9A\f\n\r\n \b\b\x07\xF2\0	\xF2\0\f\xF2\0\x07\x07t\v\v\b\v\v\n\v  \x80\xF2\0\f@\n\b\bt}\b|\b \x07@\xF2\0\xF2\0\b\x07\xF2\0\xF2\b\x9B v\r\x07} \n@	  \f\xF2\0\x07\xC0\v0\x80\x80\x07\v\f\x87\n\x07\b\b@\f\xF2\x80	\xF2\0\xF2\0\n\xF2\0\f\x80\x07@\f\b\b \xF2\0\x07\xF2\0 \x07  \b\n\b\r\x80\x87@\v\b\bv\x80\b\rv\x85 t\b\x07\v\f 	 \v\v\"\v \n@\btt\b\b\x07\xF2\0	@0\b\x07\x80@\x9C@\n\x80\x80	\b\x07\b\n\x07\b\x07\x9D\r\xF2\xC0	\x07\x07\x07\xF2\0	\xF2\0\b\b\btv\x07\n\bt\b\b\x80\x9E\b\v~\v\b\n\x070\x80	\bt\bv\f\v\f\x07\v\f\v\f\b\v@\x07@\x82\n\v\f\n\f\x9F\x07t\v\v\x07\x07|\b\v	\v\v\f\v\f\v\r\f\v\b\b\vt\xF2\0	@\n\xA0\n\x07 \b@	P\b\v\f\v\v\v\xC00\xF2\0\xF2\0\bt| \b@@\b\x07\bt\xF2\0\f\xF2\0\xF2\0\xF2\0\b@\f@\x80|\xF2\0\f\xF2\0	\xF2\0,\xF2\0\xF2\0\b	\xF2\0\b\f\xF2\0\x07\xF2\0v\x80\x80\xF2\0@}@	\x80\x07\xF3\0\0\xF2\x80\x80K##\b$ A\b\b\b\bX\b\b\b!! 50\xF2\0\xF2\0+6$+$Y(A'!!#!,I,}W4\b\b# 5\x80\b\b'\b#\b\b\bK\b=K0K\b/XX4\v- W$\b\b\xF2\0$\xF2\0O$B$\n$Y\b\b@$\x9E\b\b\b9\b@X\x80\b\bX !! \x805\b\b!\b$ $!	\vv\x077\fM-t\x07\b$\b\b$\b\bE\b\b$!@4\b+++++U+++#\x07+#+M\v#K+\b+KK++O\b\x1BI	\b+\b\b\x1B#\f+#+\b\x1B+#	\b\b$\b !\b\b$\b\b\bV\b'\x80W\xF2\0\xF2\0\b77\b\b\b$\bD\b\b\bGG\b\x1B\x1B\b,\x80 \xF2\0$\b\b\b)\b$\b\b\b\b?!\b\bc\b\b\b\b\b\b\b\b\b\b\bA\b)\b>\bK\b5	\bK\b\b$\b\x07\b!\bE\bK\b\bK\b\b\bK\b=\b'\b\b\b#\b\f\b$\b\b$G$K\b$\b\xF2\0@$  $  5 $ 5 ]  ( \x80$\xF2\0 :\b\b\b$\b\b\b 5 \b!Ib$\b\bB \xF2\0\b\bK\b$\b5\b@H$\b5$@5$\b#I:$$\b4\b$\b5\b$5\b\b5\b$5\b$\b5$$\b\b\b5\b$\b\b$\b $ 5>$5 +555A$\xA455V5B555 $ 5\b$$D$I8\n$#!$\x80\x80;)+)+\xD0)	[)[ K\b'\bP$\b/\b!\b+\b \xF2\0\b\xF2\0K\xF2\0\xF2\0@  $@5 $ 5 $ 5 $\b 5$\b$\"$ 5 $ 5`$0$\bA\bK\b$\bc\b\b\b+\b$\b:+5\b+5\b$?>$05$+\b\b($A\b\b$\b'\n(!\b\b/B`$\b+\b0$\b\b\b\b+\f$5$\b5\b$$58\b$\b\b$@-\nh$ 5\bA5H$\b\b5\b $\b$@$@5\b5\b$\b@\bI $\xF2\0\xF2\0#\xF2\05\xF2\0#\xF2\0C\xF2\0;\x07$5\f$5$B5$5$5]	$\b$\r5@$!:5$B@$5\bO\b@5$5$5$@cC$5@$@5$@5$c5\xF2\0\xF2\0\xF2\0\xF2\0\x1B\xD0G!/G\xF2\08\xF2\0#\xF2\0\xF2\0\xF2\0$\xF2\0\xF2\0F\xF2\08 B\b\b\x07\b #\b\b\b3\x80\b\b\b>\b!\b$\bK AP\b\b$\b 5\b$\b\b$ \xA0Q\b\bD B\b$\bK)@$5$\f0\b$\b5\b,\b'\b $I\f\xF2\0$\xF2\0\x80#\x80[\b\bI\b\b\b\b\b\b\x1B $\b\b$\b\b\x80#\xF2\0\xF2\0$\xF2\0@@@K\b$''$$$$$\b\b  \b\b[\x80 #\b\b\b]$\b\b\b$\b\x1B\bZ\b $\bE\b 	@>'\b$\b\x80\xF2\0@C \b\b$@$!\b#\b!!\b$\b\b]\b\xA1\b\b\bO5\b\b\bK\b$\b\b\b\b\bI\b!\b\x07\b\b\b\b!\xF2\0\x80#@$\b$\b\b$\xF2\0\xF2\05\xF2\0h $$\v57\b\b!\b\b\b,$  $@\xA2\xF2\0\xF2\0# \b\f$\b#\b \x80$\x90!\r!!'\x9B!IGkkkV\b!\b@V\b)4)+#)\b`#\b\b$\b#\b$B8 $\b\n\b!\x80$ 4\b\b\b\b@!\xF2\0\x80h\vK\b\b\bK\xF2\0(\f\b!\b\b\b@G\b!\b,\b$\b[ ;\b!\b\x80;(\n \x1B\b'\b\bK\b\bh\b\b\b\xF2\0(!!!>\bI\b \v\b+\bE($3\x8C\x80\f\b\b\b$\bD0@\b \x80# [\fEB[\b5\b)\xF2\0 \xF2Y\v\xF2\xA2\x07P\x07\v\b\b\b\n\xF2\x9AH\b\fo\xA3M\x07-\v-\fM3/Nl\r\n\n\n\n7\b7\xF27\f\xF28\v\xF2\xA87\xF2o\x88777'7%7\x8B727\x827	7\v77\xF2]-\xF2\xD7\b\b\b	;4W)	'\x1B!\xF2\xF3!\x1B+W\xC5\b	\x07\x07\v\n\xF2\xF1[\xF2!\x9F\xF3P	\n\n\n7\n\xC0	b(\x9D\xF2\0\n\xF2\0\xF2\0\f\xF2\0\xF2\x80\xF2\x80\xC0\n@\xF2\0'\x80\x80\xF2\0\xF2\0\v\xF2\0\x07\xF2\0@7@b-\x80\x80\v\xF2\0\x8E\f\v		\b|\f\x07\b}\x07|\x07\rt\b\x91\n\rt\b\x91\n\fv~v~c'I\b$!'!\b7\bJ\bMoJMoJM\x86u&\xA44;6\x1B)8*hY,:\xA5 +FAW#5(@\x86u&\xA44;6\x1B)8*hY,:\xA5 +FA-z\f3Nw\x96\\x-z3Nw\x96\\\b7}\x07}\n\x80\x07t\n\n	\nt\n\bt\n\x07\n\xC0t\xF2\0\rt\b\x91\ncI$7\fMo\rx#W5(@\x86u&\xA44;6\x1B)8*hY,:\xA5 +FAW#5(@\x86u&\xA44;6\x1B)8*hY,:\xA5 +FAW#5(@&\xA4&\b\x077\b\b\v\b'\n\x07\x80\x80\x80\xF2\0\x80\x81\r\x07\n	\f\x07\x07	\f\v	\x07		\n\b\x07\x07\n\n\v\n\n\b\n\n\v	\x07\b\b\v\v\x07\b\n\n\x07\x07\x07\b\x07\x07\b\x07\b\f	\f\r\x07\x07		\x07\f	A@\x80\xF2\0\x80\xF2\x8C7\b\b\v\b'\n\x07\x86}A6*hF(\f\x80\n\xF2\b		\n\r\x80\n\x80\b\b\f\n	\x07\x071\xF2\xC7\b\xF2\0\f\xF2\0\xF2\0\x80\x80\x80\xF2\x80\xF2\0\x80\x80\xF2\0\x80\v\x80@\x80@@7\xF2\xC0W\xF2\xCD\xF22\n\xF2 ;M\xF2?\ft\x9F\xF2\0\b\xF2\0H\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\x800\f\n\xD0\n`\x80\f   \n\xF2\0@@  \f@\xC0 	\xF2` \x80\f\xF2\0\xF2\x80 \n @@\x80@\n@@\x80\x80\x80\x07 	\x07V\x80\f\xF2\0\x807R\n\f\v\b'\xF2\0\xF2\0\n\b`@@\f@\x80@\x07\xF2\0\xF2\0\xF2\0\x80@\n@\x80\x80@7@@\v@\x80	\x80@'@\x80\v\x07\x07\x07\x07\x80tA\v\b\n'\v\b\f\x077\n$ \x80\v@@\x80\f\xF2\0\xF2\0'\x80\x80\f\x80 P\xF2\0\x80\x80@\f@ \n\x077\f\x98\b\xA0@\f\xF2@\x80\x80\n@@\v\x80\n'\v\b\f\x077\n  @@\b\b\v(H\x80@\x07@\xF2\x80\x80\x80\x80@\n@\xF2\0\b\x85\xF2\xF8\xF2\0\xF2\0\xF2\0\b\xF2 \v@t\x80\r\xF2\0	\xF2\0\n\xF2\0\xF2\0\xF2\0\xF2\0\b\xF2\0 t\xF2\0\x80\xF2\0\f\xF2\0\b\xF2\0\xF2\0\x85\xF2\0 \x07}\b}|\v\x07|\b|\b\x07;\f\n\x07}\x9C\x07\n\x07\b\r\b\n\x07\x07\b\b\x07|\v\b\x07\n\v\x07\n}A\v\f\x07\x07\b\x07\b? \b\xA2\b\b\b!\b$P;\b!(IX$W,\r\b$\b\b\b\b\b'\b\b\b\b\b\xF2\0!\xF2\0\xF2\0\x1B\xF2\0\x80E[$ @$B\b$?$\v$c$0$\b$\b\bAG)G\b\b\b#\b)\b\b$\bK\n\v\n\v\n\v\n	K\b\b\b\v\xF2\x80  F\b\b\b$ '\x80F\x80c =)\bB\b*\b\b\b5\b!$$C$B$]$\xA6\bQC$#\b$B$#$\b^\b\b$\bU\b\b!W\b$\b\b'\b $\bW\b$K\b\bU8@\n$\n775 \xF2\0$\xF2\0 F\b8\b\b\b\b\bX\b^ 5\b\b\b\b\b\b\b\b@Q\bD\b\bD\b\bX\b!!!:\b8\b!\b/\b\b\b$\b\b\xF2\0\x80T\b\b $@ \x80$\x80\xF2\00K\b\bQ$\bK\x80\x1B\xF2\0' #\b\bE :\x80h\b\bU'\b++\bU\b\b'\b\b\x80\xF2\0h\xF2\0T\xF2\0F\b\b\b*\b$\b'\bK@c@$!\xA55\n\xF2\0c\b\b\b8$\b)\b\b\bB\bC,4U!\b$\bv\b !\x07\b\b(5\xF2\0@@`O\b\b;\b\b$\x80\bK\b@$\xA7\b!\xF2\0\xF2\05\xF2\0F\xF2\05A#;#\b\b$\b@\xDE:/\x07\b\b\b$\b\b\b8@\b;\b4\bE\b\b\b$\b\b\b$\n\x80QA\b$\bo8\b\b\b\xF2\0\x804\x80K\xF2\0\b \b\b5# $\b\b\b\b_\b\b\b$'?@\xF2\05%\xDA\b$\b#: H@:\bC\b*(*\b $\bE\b$\b\b\bK\b$\x80)@$ E F #\b=\b=\b\b$B\x07$\b\b\b\bU!H\f\b\b \xF2\0$\xF2\0\xF2@0\n+\x80\x80K'\b\b\xA8 $\b\x1B\b\b=\x07$\x80B@F\b\x1B\b\b\b$\xF2 \xF2\0F\xF2\0\xA0$ C\b\b\b@\b$\b\x80\x91@}@|\xF2\b$\b$F\n$\b\bH\b'\b @Q@K\xF2\05\xF2\0\x807+)\n4! U7+\n!A\b+7+\x07+\xA9+\xF2\0F\x80$\b\b#\b!\b8 \xA2\b\b\b#\b\b@# *\b#	\b@!\b\b\b$\b!\b\b\xF2\0F\x80\b\b\b\b\b\b\b\bQ+\xF2K@@#\b\b '$\bK\b\b\b4\b\x80L0\b\b $\bC\b#\xF2\0\xF2\0'\xF2\0K\xF2\0 \x07$?\b$$\v$\b\b$\b\r$5$\bD\b\b\b\b! 5\xCF$'$($\b\b#\b\b\xF2\0F\xF2\08\b$\b\b\b?\b)\b\b5$\b\b3'5\b\bK\bC+@4\xF2\0$\x80K\b\b\b\b\b\b>\b\b#\xAA\b\b\bK\xF2\0G\xF2\0B\b*\b\b!\bV#G# A  K@H$\b\b\b K'I+!+\b\x1B?+\b\x1BUK@\xF2\0#K+I+K++Z\bK++K=$KK+K+!K\bI++\fK+#KI\x07\b$\b\b\b\b@?\b\b4\bI\b, 4\b\b/\b\b$\b\b\xF2\0\xF2\0\xF2\0\f\xF2\0\b\xF2\0\bF 9@/\x80\xC9@$\b)\b \x80\xF2\0 \x80$\x80@) K \x80\xF2\0$\xF2\0!@$#\b$\b\b\b$\x80T\xF2\b\b$\b\b\b#\b@*\x80K 5>\b\b@[@\b\b$!'\b\b$\b\xF2\0$\b#\b\b$\b[\bV\b\b$\b $;\b=\b\xF2\x80 !\b[\bB\b\b$\b\b$\b\b\b$\x809\x80 \b\b4\b\b$\bP\xF2\09\xF2\0c\xF2\0F\x80@]G#\bGE\b(\b)\b\xF2\0' \b\bU\b$*)\b$\b$@)@K:A#$!4 5\b++\b\xA2\b$\b$B$B\b)\b\b!\b\xF2\0\xF2\0F\xF2\0\xF2\0@\bB\b$\b\b\b$\b<'KKK4@\xF2\050 \b\b#\b$\bW$$\xA67!\nI\b\v$'$\b\xA6$B$\xF2\0h\x80C\x80$@:!\b$\b'\b$\bH\x80C\xF2\0)\bK\b\bV3^\b\b$\b#\b\b\b\b\x80$\xF2\0=\xF2\0F @\x80;\xF2\0(\b#\b\x1B#$\f#\b\n\b\b\f !\b\b##\b\xF2\x80\xF2\0!\x800+\f\b+\b+$?!$\b$( /\b\x07\b\b \b\b\b\b\b\b/W\f	(A4\v3$\xF2\0\xF2\0K\xF2\x80\r@7\xF2Q\n7\"\b7\xF2\047\v7\x1B\n57777\xF2\x887\n\\7\xF2\n\n\n\b\n\n\n\n\n\xF2A 7 @7  7\xF27\xF2@\n\xA0\n\xF2\b7 7@7\xF2}\n\xF2\xF2\07577`7\xF2\x81@7  7@@7\xC0 M\xF2\b7\bM`7@\xF2d7Y777777777777777\b777\x87M\bMM\b\bM477\xF2\x91	7\b777\b77(\b\xF2	7\x0777777\f7\xF2\xE37\xF277777\b77\xF2\xCF7\xF2`ffJ 7\xA0o\r\xABJ\b78\x0777\x0777	7707>7\xF2\xF2e\x07\xF2\x7F7~\xABf\xAB	77777777777\n77\x8D7\xF2\xF3777777777\f7\x077\xF277\xF2\xFB\0777177M7!\xF2i777\xB177777777\xF2A777\x99777\x0777777\xE57\b777\b7\xD3777\x077\xF2.777\v77\xF2\077y7777777777777\b7777\xF2\xB4M\xED7\b777\b77\x947M777P7,7eM\x80MMM\xF2\xFCj777\xF2\x90\b77 7777\xF28777\xF2(7\b7b777\b7\xD7777777\xF2\xD27Y7v7\xF2#797\xE07_\n7\xF2u 7`7\xF24877\xF2\x80]7(7\xF2\xF2\xFE\0\xF2\0\f\xF2\0\xF2\0	\xF2\0\b\f\xF2\0	\xF2\0 }\xF2\0-G\v8\v\x80\n\xF2\0\xF2\0	\xF2\0@\xF2\0@t\xF2@\x07\xF2j@\nH \n(&\n	&&\n\xF2I  \xF2\0` 7@ 7\x07\xF2\xF2\0@P\xF2\xF5\v\v\b\v\v\v\xC2\b\x07	&'	\n\b\b\n\x90\b\b&\v\x077\x07	 '\b\b\b	\b7\b\x07\b \x078\b	\b(	7\v \x07P0 \x07\b\b&\n\f\b(&\b\b\b\v& 	 7 \bH@\v\xF2\x80\x900@7\xC0@7\x80 \v\n\b\b\f\x07\n\x07\xF2\x07 7`@ 	#	\v N8C\n \nT\x9C@\f7\f	\n\v\v\n'''\v\n	&\b\x07\n\x86(\n	\x07\n\v\n	\v@>\v\n\x8E77''''&\x07'v\x07(\n	\x07			\n\v\n\v	7	\n\v\v\n'''\v\n	&\b\x07\n\x84\n	\x07\b\n\v\n	\v\n	\v7\b7\n	\n\xF2\xC9\f\v\b	\b\n\v\b	\v\n\vN\x07\b\b7\bT\f\b''''\b\f'\b7\bd\b3\by\xD0''\b'	'''\v'\xF2\xC5'''&&7#\v\n\n	\v\n	\n\x07(1''\n'''\x07\n\v\x07	\v\n	\v\n	\b\x07\n\x07	\x86\x07	7	\x077\n7\n\v\n\v\v\n\xF2$\x07  \x80``\xC0\xC0  \x80\xF2\0 &\xE0\x80\xC0\b&\b(\b\b\b  (@\n(& @(\xF2\0\b00(&\xF2\0 (`\x80\x077\n\x07	\n7\n\v\x07	(@@((  &  7\x07\v\x80\xF2\0\x80\xF2\0 &\xF2\06\xF2@	&R\xAC\x86&\xADuR@&@\"\xF2\0u\xF2\00 S`RS&GSR&\x86kSR\xAE&\x86S\b\x86S&S\x86S\xF2\xF2\0&\xAE\v&\xAE&\xF2\0\xAF@S&&& \xB0 \xB1@\xB2\xF2\06@\xB3\x80&@\"@\xB4\xB3\b6(\xB3@u \xAD%\xAD\xF2\06\x80\xB5\x80\xB1\x80&^u\bu4\xAD((\xAD\xAD 6 S\b&&\"\x86&\x86&\x86&\x86&	\x86 \xB6u\xB3 & \xAD \xB7u\"@0 u\xB8\xB0\xB9\xAEa\"\xB3\f0\x860\xBA&\xBB\x1B&&\xB0\xAD\xB1\xAE \xB3\"\xBCu&\xB5&\x86 .u0 \xAD\b\xBD\b\xBE\b\x89\b\"\b&\xAD\b&u\b\xAD&\b\xAD\b&\b\xB3\b\xBD\bu\b\xB3\b\x86\b&\b\x86uuu &\b\xB3\b\xAE\bu\bS\b\xB5\b\xB0\b&\b\xBDu&u&\b\xAD\b.\b%\b\xAE&7\x8A7\x8A7\b\xAD\b\xBD\b6\bS\b&\b\xB3\bu\b\xAD\b\xBF\b\xAD\b&\xAD%\xAD\xB3k\b\xAD\bj!!!\b\xB3\xAD&\xAD\xB3\xB16\x86&\xAD&\xAD\xB3\b\xC0\xB5!6!0\xB3\xC1Ru\xC2u\xB3\xADu\xB3\xB4\xAD\xC3\xC4\"&\xB3\xC5&\xB36\xB3u\xB3&0u\b\xB3\b&\bk&\xADu&\xB5&u\b&\xB3\xB6&\xB5u\xB3u\x86\xB3\b&\xC6R\xAE&1\xC7\xADR<u0\f&\xB3\xB5&\"\xB3\b&\xB3u\xC6\xBA\xAD%&\xAE\xB3\xAD&u\f&\x86&u&0R&\xC1\xBFu&\xB8&1\x86k\xBCu\xBF&\xBD&\x86.\xF2\x86\xF2\0\xC8\x80& \x86 \xB3\f.\x86. j\xA0& \xB8 R & \xAC < \xAD & u 0 & \xB8 \xB5 \xB3 u\x86\xAD\x86&\x86\xAD&\xAD \x8A \xAE@&\xF2\06\xF2\0\x86\xF2\06\x80\x8A\x80%\x800!!!\x07!!!!!	!!!!!!!!!!!\x07!!!!!!!!!!\xB5\xF2\xFF\0\xBD\xF2\0\xB4\xF2u\r\xC9\xCA\xF2\x8A\xC9\xF2\0&\xF2\06\xF2\"&&d&\xF2_&\xF2\0\xAD\xF2\0\x8A \xAD \xC3\b&\b\xAE\b\xBB\xB8& \xC0 \xCB u\xAD.\xBD\x86@\"@\xB3\x80\x86\xF2\0\x8A\xF2\0\b&\xF2\06\xF2\0&\x80\"\x806\xF2\0&\xF2\0\xB6\xF2\0&\xF2\0S3&\x86\xCC&\xF2\06\xF2\0&\xF2\xFD6\xF2\0&\xF2\0\xB2\xF2\0&\xF2\0u(&\xAEL&\xAE&\xAE	&\xAE&&\xAE'&\xAE&\xAE\x07&\xAE	&\xAE\xF2\0\xBB\xF2\06@\xB0@\xCB@0@& u \xB3 &@\xB3 \" k\xCC\xC1\xCC u R\xAD\"\b\xADk\xB2\"\xB5 \xB2\n.&.&.&.&.\b&@\xB3%\xC3k\xB0\xB3\xAE6D\xB3\xAE\xB3\xBD.6\xB8&\xB3\"%\xAC\b\xB3S<$& \xAD\b\x86\b\x89\xB3\xAD\xAE\xBF\b\x86\bR\b\"\xC2\xAD\xF2\0&&u&\xC8&\x86&\xCD\xCE&\xBB&\xCE&\x86&&&u&k\x07&\xBC\"&c&\xC8\b&&\x07&\n&\n&\xF2&\xF2\06/\xBBk\xD0\xBB\b\b&0\xB2&\xB2\fS \x80&\xF2\06\xF2\0\xC9 \" &@\xB3 \xAD \xB4 % .&,&u\xB8u!u \xC3&\x89\xB7\x86\xC0< j \" % \xB0 0 \x86&&& u % \xB1 % 6 \xB2 \xB3 \x8A \xC2 u \x86 \xB3\xAD&\xAD\x86.&\xAD0\xAD\x86\xAD.\xAD\x86\n\xAD. 6&\x860\x86&0&\x86&6\x07&\x86&6\"&@\xB3 \xB0#\x86,	\x86\x861\x86k\f\x86 \xAD \xC5$\xB3\xAD\xB1&\xAD&\b0u\"@&@a@\xC8@&@\x86@\xB4@\xB3@6@\"@\xAD@.@\xB1 \" j \xAD %@\xB6@\xB3\x1B\x860\x07\x860\b\x860\x860<\x86\x80\xAD\x80&\x80d\x80\xC8\x80\x8A\x90\x86j\"S\xB3\xBA\b\xB3\b&6u\xBBk \xB3 \xB8 S\xBBR&\xC0u&$&\b\xAE\b0\x8A\xB5%\xB1\xB3\x80u % 6&\xB30u\xB3\xAD\xB5\x86\b6\b.\b&\b\xB3\b\xB98\xB4\xB2S\xB2\xB1u\xB1ku\xB1@6@\"@\xC8@\xB2@u@\xB3.R\xBD\xAD u<\x860\xC9\xBD0\xBD.\x86&\x86&\x86&\xC9 0\xBD\x86.\x86\v.\xB5\xB36Ru\xB7\xBA&\xBD0\x86u\"&\xC3k\xB9\xBC\xCB6&\xB1.&.\b\x86\bS\b\xAD\b&\bu\b&\b0\bu\xC6u\b\xB3\b0\b\xAD&&&^&\b\xC7\b&\b6\b&\bu\b&\b\x86\b6\b0\b\xB5\xB8k\xB1<u&k\xAD\b&\"\xB1\xAD\xBB\b\xB1\xB30&\xB3\xAD6&%\b&\xB1u\xBF6\x86&u\xB3\xAE\xAD\xB2.\xAD\xAD\xCB\xB1k\xC1T\xADS&S&\xBD\xAD\xC2Au\xAEu\x86\xBD\xB1\xB4\xB1\xB6&\xAD0\xC4\xB3\xAE6\xB4<\xB3\xBE<\xAD\xBB0\xC0\xC96&\xB8&\xF2\0\b\xAF\xF2\0\b6\xF2\0\xB4\b\x86\b\xADa\b\xAD\b& u&\xAD\xBF\xAD\xB0\"u\"\xCF\xADdk\xB3\"\xBB\b\xAD\b\xB9&\xB3@&\xF2\0k\xF2\0%\x80\xB3D\xADu;\xAD\xF2\0&\xF2\0\x8A\xF2\0a|\b @\f\xBC\b@\x80\xF2\0\v\xF2\0\xF2\0(	\xF2\0\f\xF2\0\n\xB0t\f@\xF2\0\xF2\0\f\xF2\0\xF2\0	@}\xF2\xA8\f@(\x07\xF2\x94\xF2\0\vt\v\b\v\n\b\v\x07\x07\x07\x07\x07\n\f\x07\x07\x07\x07\x1B\v\n\v\f\n\v\x1Bt\v\xF2\0\xF2\0\b\x07\xF2\0\b\xF2 \xDC\xF2\0\xF2\0\xF2\0\b\xF2\0\b \x91\xF2X\x80\xF2\0\b\xF2\0\b\xF2\0\v\x80\x80}\xF2\0'\xF2\0\xF2\0\x07\xF2\xFF\x7F@\v\x81\n\n\n\n \vt\n\"\v\n\v7\n0\v\n\v\n-\n\b\xB8\n\n6\n$\xBA\n\v\xF2\xFE\n\xF2\x008\xF2\0\xF2\0\x07\v\x07t\f	p\x91\v\b\v\b\x91\x87\v\x07	\f|vi\f\x07\b\v\x07\x07t\x07\x07\x9E\v\x07\b\v}\vv\b\x07\n\v\f\x07\v\vm\v\x07\vt\b\x07\x07}\v\v\b^\x07\b\vm\v|\n\v\f\x07\vt\x07(#\x07\vv|\x07 \x07\x07v\r\b\v\x07\\\vXv\x9C\b	\f \x91\b\x07\f\vL\f	\b\x07\ft $\x07\n\n\x07P\x07\v\b\x07i\x07\b\n\v\x9F\b\x07\n\bv\n\b	\x07\x07\v\x85\b|\n\v\f\x07\n(|\f\b	\v\x07|\vt\x07\v\v\v\b\x07\x07\n\b\x07\b\x07\f\vl\n\f\v\n\x07} \x07t|\v\b\x07\v\b\v\bt	t\xD0t\x87		\v\nt\f\x07\r\x07\b\b	\b\v}\n\x07s\v|t\x07\b\x07t\b\x07\b\v\x07\x07\v\n\x07\v\r\b\x07\vl\x9D|\x07	$\f\v\v|\x9C\f\x07}\r\b| \x9F\f\x07t\x070\v\v\fv\v\x85\x07\b\b\f\x07\b\x07\xF2\0\xF24\f\x07\v\x07|\b\x07\v\x07vv\nt\n\b\x07\b\f\x07\v\x07\x07\v\v\x07\bv\b\x07\b\x07\v\b\f\x07v\b\b\x07\b\v\b\f\vv\v\f\v\b\x07\ftq\v|\b\f\x81t\fD\bt\v(\b\x07\f\x07\b\x07	\v\f\x07\v\b\b	\x07l\b\x07t\b\v\f\xD1\x07\v\v$\b|\v\x07}\x07t	\f\x07\vt\x91\v\v}\n\f\v\b\x07\b\b\x07\v\x9F\x07v\b\v\x07\f\v\bv\f\v\b\x07\v\x85\v\n\v|t\bt\x9F\b\v\x07\vt\vv|\v\x07	\b\v\b\v\v\f$\xDB\b\x07}\x07\n\x07\b\r\b\x91\n\vv\x82\n\vv\x85\x07\x85\nt\n\x07\b\n\b|\b}\x07|\x07\x07\b\vv\ft|\v\nt\r}\x07\x9E\r\v\n|\x85v|t\v\nd\f\x07\n\v\b\x07\f\v\x07	\b\x07\b\b\v\b	\f|\b\v\f\b}\b\x07\b\x07\v\btt\x87\x07\bt\x07\b\x07q	\b}\n\x07\v\f\x07\b\b\x07\vv	D\v}\ft\b\x07\b\v\b\x07L\x07\xD2\f\v$t\x07\v\b\b\x07\v\n\v\v\n\n\v\v\n\x9D	\x07\v\b\x07v\b\v\x07\v\b\v\f\v\bt\v\xD3\f\x07\bv\vt\f\x87\x07\v\f\x07\b\v\n\v\n\v\f\f\x07\f\x85\f\vt|}\b\v\f\x07\x9F\x07\x9D\b	\x07\x07\v\b\v\n\nv\x07\f\r\vi\b\x07\b\v\b\b\v	\v\v\b\f\v\f	\x07\v\x07|\b\x07t\v\v\v	\x07m\v\b\v\b\x07v\v\n\n\r\x07\x07\v\b\f\x07\b\v\b\n\v}\x07ti\r\f\x07\b\v\b\v\x07\bvt\r\v\b\x07\x07t\b\x07\n\b\vt\x07t\v\bt\vt\f\x07\v\x07\v\b\b\x07t\v\bt\x07p\x07\xF2\0\f}\fv\b\x07\x07\x07\x7F\ft\bt\f|\b\x07\bt\x07\v\b\x07\f\x07\x07\v	\f|\v\v\v\n\x07\b\f\n\v\r\b\v\n\x07\x07\x84\n\vv\x07\b\f\v\vt\x07\f\x9E\b	\xF2,\b\xF2\xFC\v\xF2\xF7\xF2t\xF2g\x07\xF2\xE6\xF2/7\xF2\xDE\xF2\xFA\f\xF2i\x9F\xF2H\xF2\xF9\0\x80,i\x07h\xF2\xCD<\x8Cn7777\b7	777\n\v7F7\b	(.\xF2\0\xF2\0\xF2\0' !!\x07!*!!	\b!\b!!!!!!!|\x07\xF2p\x91n\x80\xF2\xFFP\xF2s\x1B=\x1B\f\x1Bn\xC8'\xF2\f0\xF2\x88\r\x07\v\b\b\v\xF2@\xE8\xF2\xD3\b	\x07\x07\x07\xF2\0\xF2\0;\xF2\xC8\xF24\x07+	+$+h\xF2\xE77\xF2\xF1\b$D5\xF2177T{\xF2\0C\xF2 7\xE03P\xD4w--z-\xD4\xD4\b-3w\b- \b-s\xA3z--\xD4M\\J\\\xD4\fM\x97\b3\b-\bNN\fN\xD5(\b-s\xD4\bM(--MD-\bw\b2M\fM\b---NMx@-3\xD4-[\n-#\v\b\vC+'8v$5$#$B$?$'$!$K'\n$)$$5C5C\b$\b\f\vH\v\b$K4$)$)\b$@5(K\b=)5$U$#$\v\b#$5)+$$#77\v4$\x1BD)\v\f$(W\b$#5$$#5L(9L\v'$#)$$/_(+!?\b\vI>?>$#$)!5$+$#5$)#+$$\nt#\b\b$:(7\f\x07!\f$+:Be+C\bI'>\v\n+)\v+5#5#+(+\n!)\b$\b5#['+8#)5!:)+'\b$+$\v!!+!UW)$5$\b\b$\b\b\x07/$\f(4\xABK!!:h5$:K$\xF2\b8\n\b\b!!!!!	\b\b\b\x96 y77\x94\xAA\xF2\xE07\n\x077p\b\f @  \x91\x07\x07\v\b7\b\v\x07@{\x07\x077	7\b7 \b7$7\f\xD67777\r7\x92\x8E7\b\x8C \v\f	\x07\v\f\v\f\f\n\b\xA0\xF2\x807\x80\xF2\x82\n\v\n\x07 \b7\b\x1B\x1B\v\x1B\x827(77(7!77' 7@@7/\b70@A\v\v\v8\v\v\b\v\v\b\v\v\b\x07\v7 \v\v7777\x807\v\b 7A7\x95@7\b\b!\n#!\b\b\x80\bt\f\x07\x87}\b\ftv\vv\v\v\n\v\x07\x07\bt\x07\v\x85v\r\n\b|\b		\x07\x85|\b	\x07}\f\x07v\x07\b\f\x07\b\vlt\nv\x07\v\b\x07^\b\x07\x9D4\v4F\xA1\b\b8\bK:I\bN\b-M\xD4\bN-w-N3s\\-oh$B<\x1B4A5A\b$)#$\x1B\f$\x1B\v'I)(Dt<45$$+\n$*74\n\b:5?\x07#)\b$\f5:$#$z\x97\b-3\xF2\xEC\b-w(w-- -\fN\bz-\b\bw-\xA7w\xA7\fw-N3\f\\w3\xD4-.-w$-\x93Nw\b-w-,w77777\x077\b7	77\xF2\07*7\n@ \r7\x07\n\vv!!\b\b77\xA07\x80\x80 \f\b!!	 !!\n\n\n\n!!!\"\b\b(!!\b\na 7 `7t7\x07\b\x07l\b!+\b++$D>!\b$\b8\xAB5\v\x1B$\\U+\v#G#\n\b\f\v\f$I$)$+\fYK7C\f$A\bI$\b\b#)57$5$#=$4'\b$\f\bI:5'7+I7=?![#)I+'\bK#'$<\v$I5\b($$,$\b\x07#88\x1B?+!?!$(\b \b4\f5:8Y4!$\v\b\v:$\b$#5P!8tG$$)4$5D)$!)5$K4$\v4#4'I\bA#$=DIK\\I$5\b$!\vJ\b\b;-$	^$M'#$K\b:5#UB\b!8+\b+	$'$>\x07K++MK;!I5)$I)+!$\b$\v>5I\b')$\v$5$$\v\v\b#G\v\n'$8)#)\v:$5$$5+\fI>)$P7\x07$$:\b:#$\f$55!\f(\bK++\v$$K\b$K#$}$$$KDE\b+#5$\n\v!$\vIC+$!7\n+$#:,)5IK$$\b\v@	\vM$#!\x1B!\x07 BK?\b+,\b$\fI$ )7\b$ $	\n\b$877[\v\b\v	+$I$K\b+$:DI!!##F$8#\v?\v$#5$\xAB$\f\b!\n$#	\n5\b5)K\xA8$(\bK$I7\v)\b$\b>:8\b$$$+75;75$\b77++#$5\b\xF2\06\x07\n\x07\v\b\x07\n\x07\r	\x07\n\x07v\x07|\ntt 	\nt\x07\b\x07	\x07\x91\x85\x07\x07\b\x07\v\x82\f\x07\b\x07\vv\v	\b	\b\x077\x07\x07\f\x07\b\v\v}\v|\x07\v\b\x07\f\b\v\x07\x07\x07t|\x07\b\n\v&\v\v\b\x07\v\x07\x07\b|\v\v\v\nt\n!\v		\x07\r\f\v\b\x07\n\x07\b\b\x077\x9E\v\f\x07\f\x07|	\vt\x07\v}\f\x07t\x7F\x07\r}\f\x07\b\x07|\x07\vt\x07\x07	\v\f\x07\r\b\x07\v\r\x85\b|\v\b\f\x07\v\v\x85\x07\b\v\x07\x07\b\v\x07\b\v\x07\n\b\x07\x07\x9D\v\n\v\x07t\b\v\f\v\b\f\b\x07\v\x07}\f\b|\f\x07	\x07\x9Fv\v\b\x07|\x07\x07\b}\x07\v}\f\x07\b\x07\n\v\x07\x85\b\x07\n\vr\n\x07\n\x07\x07\b\x07\b\b\x82\x07$\x07\x07||\x07\r \x07t\b\x07\v\x07\n\x07\n\x07v4\x07|\v \x07\b\x07\x07\f\x07\b\vv\x07\v\x07	\x07\b\n\b \x07\n\v\b\b\x07\x07\b\x07\f\v\x07\v\x07\x07|\x07\v(\b\b\x07\b	\x07	\v\x91\b\x07|\n|v\b\x07\b\x07\x07\n\v\v\x07\v\x07\b\v\x07}	(\v\b\b\v\x07\v\b\b\x07t\x07\v\x07\x85\bt\x07\f\v\f\x07\v\ni\b\x07\n\x07\v\b\x07	\x07\b\f&\n\x07\n\v\vt\x07\r<\x07\bt<\f\x07\b\v\x07\v\nt<\x07\v\x07\f|0\x07\b\x07\v##\b\f\x07\f\x07\vI	\v\x87v\x07\x85$\x07\v|\v\f\x07\b\v\v\b\f\x07\b\x07\v\b\x07\x07\v\x07\v|\b\x07\b\x07\v$\f\v\b\n\b\v\b\x07\v\b\x07\vI\v\x07t \x07\v\x07\b\x07\x07\v\vv\x07\v\v\b\n\f\x07\v|\x9D	v\x07\x07\b\v\x07\v\v\b\x07\f\x07\bt\n\b\x07|\vt\f\b\b\x07\vvt\x07\f\x07m\x07\f\x07t\x07\n\f\x07\vt\x07\f\x07\n\v\v\b\x07\v\x07\x9D\x07\v\n\v\b\b\f\x07\n\v\b\x07|\b\x07\x07\f\x07\v\n\v\x07\vt\x07m\b\r\v\n\v\v\x07t\b\x07\x07\b|4Y5:58	)88\b4\b=$\n\x1B$fgfK\v5>I>+$$5!&\n$c$?$+B\n$+NK\b7?+5|\f$?5AK#8Io+$$@$\b#!$\b$\n$\b\b5:#8\nh$H$J\vI7!!E\v7U	!$@$\v#\b$$\b]\n)5#\xA7P\v:\b$$7 $)$+#[/+$)\v\vN5\x07\v!#\xA7\b,\v\v\b$K$!$GB5)v$G$B\bK5I?\x07IO)$\b!\v$\nv$\bI$#!\f4$4/?\f++\v\f+\v7V	\b>$$\vB$$'\v<$$\b$!+?$!\b$I\bD?7!$\b$+\v$8\n8#E@!+)=$$$\b$I$T$\bF\vI$)'$5 ($\v#$+\n$\v$c5}KI\v\n\v#\v	$+\v?CB7$$#\b)\bAY$#!Q;?$5$#888$$+\v\v$$\b$8\b88$5$)$})\x077+$5A\v$(!4:\vI$!)J)C\b+\xA5$)\v#K!$$$@$\v:5A\v	\v$CW7K+$$$$\v$$+$K$$$\b$$\v$$$\x85\b#\x1B)#$!4$5$}:5?$I$\f$\v$V\b\b5\b:$$\x07$\bK)A\b<<\v\f$$]$!+	\v#54$)W8$79$$#4\vB+D88$$@\n\v!I\vP5\b\v?$\xA8\v544P!\v	\vK+*\n$:>:>$$7$$=5(\b\b$B$#/C\f$I5$5$A#4$/I+$B$:5$?K78$:$@$$$\v\b!K\v\b4$$)5$N$\b:$$B$+#I:+8P$\v$$?$$\xAB\f$$Q$8:$:77\f\n)E\b$$/$!v\v$\b?,\x07\b\b4$#\v$5$IA$WKA'$$##\xA7E\b7K$\b$IW5$I),$$$!$$\vI$@!7!v!I??\b\b=!z\v\b5!5\b$Kvx\v55\vK(L(W7!!B$5$\v\v:((A+\v!\v&5454$$7$5:5$$:!+KvY$$\b!:!:$$$(\b!$5\v$\b$$#$$=45$$\b'$$5\b\x07\v&::$=5#55B$\bA'\v$$\x075$!8$\x07$+I$A$$B$\b$@$+#!!4=!\v)(\v\x1B!$$5/\x07$5$\b#B!!!U '$4#C\v'5+5v&t$4$\bQ!!!$I\b$\v$#5\v$!$#P\b$!7K$\f$$#:\b$#?5#7\b''QA$5))XI\b\v\bK\fK$\b\vF\b+['W!=\v\vK'v\v,$$=C\b?5$\b\fKW#U84	\v\x07I5?W\vh)!K5#,)4\v\v$7\bh\v$W5\v$!!$\x1B#!\v\b/$B$5$K+88\b\bK!EPK$$Q$!$\x1B$33\f-\x96$3-4J-3\b-\b3\bx$-\f\xA3w\b3<\b3-\f- \b--3,\x96N8-\bwNN\xD4\xA3-\b--\r-N3--\b\x9633\bJ3>z-N--M-\n\bM-J-,\x96\x96\fw(-s-MM(w(MM\b\x97Ms-M\xA3-M4-3-\x96:-$\x973dx43--\b\xD4MM 3-$M\xA3-\xA3\bMJ-3<-MM-N-M\b-M3JM-\\NMD3\b-N@\xD4x-\\-J\f-\f\fM4\\\f-3\\\\oNwo\\-\x96xw3\v3\xD7-s(M\xD4-N\n-\f\xA3\xD4-w\\03\x96-x\fN\x96N-30-M-\b\xD5\xA3N\x07MM$-\b3\x97\bM-w-Nw\n-MwN\xD43-$\\\\-\b-8\bM\f-3-\bs-NN-N-N-\x96--	NN--N\x07-\xA3-N\\$w33\r-\b\x96-\b-x\\x\b-\x97\bw\f-x\v\b-M\b-M-\fM\fMM3M\fM--\bM-NM3N\xA3NM\bMN3x\rx-\xD4s- -N-\b-\x96-w,x\bM\fM\b-\b-\b-\"N\fs\x96-\bs\b-3\b- 3M3N-$NMs\f\x96\x97\x96\x97\\\bN\xA3\b\f--\b-3\bN\fw-\f-M-\f\\M-\x96---Nw\b\x96-\bN-M\b-M--3x--\\,--\fx&--\v--,w\b\x96Nx\x96\xA3\x97N(N-\bM\\oN3Nw\f-3-NN\x96\\\xA7w\fw--\x960M\xA3M\xA3MM\x97-ox3\xD4 3x-N-N\fNx-x-\xD4-\\NJ$--3w-\x96\bx\xD5-$--\xD5oN-N-\xD4 Nox\\-\x96$w\\\bw\f-\f-3z\bN\x97N-<3\xD4\xA3wx-\x96-Ms-\x96@w-xx\x88\xA3N\vJ\b<\boJox\vwx\\-\f-\f-Mws-\n-\f-8\x97\xA3\f-M--wx3,x-x(\\wx-MN-\b-x$-\fM8-\xA3$-\x07\x97-Mw\x97M\fM\fM\fMJM--M-\f-\b-Jw\b\bw\fo(xwM\f\\w\\N\fM\f-\b-\\\f-\f-\f-xNM\fM\r\xD4-3,\bMxNM\x96x$-x\\	M\xD4\x96sM$\bM\f3-N-$N3M-N\b-\x96\\3\b-(-o\b-\b\b-\\-N\b\x97\b@&@\v &`\v\xF2\0@&\xC0\v&\v	&u\x86\v&,\v&\v\v6\b\v&&	\v&F\v	&&&\n&\v&\f&\v@&@\v@&@\v@&`\v\xF2`&\x80\vK\v\n\v	\v\v\v	\v\f\v\v\vy\v\x86\v\v\v\v\v]V\r\b\v\x07\v\v`\x80\v@&@\v\x80&\xF2\xFF\0\v8@F@&\x07	&\v\xF2\0&\x7F\v\v\v\v\n\v\v\v\n@\v\xF2\0\"\xF2\0S\xF2\0\x8A0&0&\xAD\xBF\b&-\x80&\xADk\xAD&\b\xAD\"\xB5&\xB3\xC3\xB3!&u&\b.p&\b0& \xB80&\" &\bu&\x80\"\f\n<\v\x9A\b-\bw--(w\b-\bw-\f-\\\bw--N-\nJ-\xD4\xD4--\b-\xA73w-oozw3-w3-o\\-33-\\-N$--z-J\\-\bN-3-\x97\x96-Nw\b-N\b-\\\f\b-\b-\b33-N- -3-\b--3-J\f----o\xA7o-M\fw-\x962M\x07-8\x96\f-\xA7w-w-\n-w3\b-\b\x97w\b-\b-s-\x97-wo-\bN-	-w(\x973\nsJ\x96\b-3Nzo-$zJ3-J\b\b--3	N-3x3\b\b----$M(xM\\-\bsw\\$\\\bM3J\\\\sM$w-	M\fN\x07-M---\b\b-\f3\nz,3-\\\bJ3-\\-\b-s3\f\\\b-3(MN8\x97-Nww\fM-N>-2-x\x96-\xA7\x93\b- 3-\x88--(3-\xD4 w3N,--$\x96M\bwM$w\b-osM-x--\\ -3--w\fx\b3\b\xA7w\f3w\\3\b3z \\-\b\x96,-\x96s-\x88(\b3\\--o -(\f-3\xD5-w3(- \xD4N333NM-N\f-w--M\\3\b-\x963\b-JMM-N-3\x07-3-N-3\b-w,33$\xF2\0\b6\b\x07\x07\b\x07\n\b\f\x07\v	\f\x07\f\x077\b\x07\f|(\x07\v<}\x07\n\f\x07	\x07\v\n\x07|\x07(\x07	\x07|t\x07t\x07\v\x07\b|\x07\b\x07t4\n\x07\v\v\x91\b	\b\x07	\x07|\x07\r\x91\b\x07|t\x07\b\x07\x07|\x07\v\x07t\b\x07\b\v\x07\b|Z|\b\x07\v\f\x074\b|\v\x07`\x07\x07v,\fX vp\v\b\x8B\v\v\n\x91\xB8\v\b	v\f|\v\x07\v$t\b\xF2\0$\xF2\0#$\xEC$\xF2\0\xF2\0\xF2\xFC\0$\r$5$B$]5$B$5@$5:$t\v\b$	\f\b\f$$B\x07$\b\v\b5\v\v)$$B$\xF2\0\xF2\04\xF2\0H\xF2\0\x1B\xF2\0\xF2\0\xF2\0\b$$\b\xA6\b$\b\b\b\b\b$\b\b\b\b$\bU\b?\bI>\bG\bB\b\b\b\b$\b\b4\b\b\b$\b!\x07\b\b\b$\b\b\bP\b\b\b$'\b\bU\b#\b\bU\b\b!\b\b!\b'\b$\b\x07R5$B$]B\b5\b\bE\b\b\b\b\b\bQ\b\x07\b\b\b\bA\b\bF\b\b\b$\b\b\b\b\x07\bK\b\bW\b\b\b\bB\b\b\b$\b(\b8\b\b/\b\b$\b\b>\b\v\b$$\bP\b>8\n\bDUDUD\b\b#$P\r+\f##$\xA8E\bG$K!\v!\x07\r\n$=$$!TV!U????Q$W>\bQ*$'$\b\b\n\xF2\0\b\x07\b$\b\b\b\b\b>\b5\bK\b\b$\bc\b\b\b\b$\bE\b!\bV\b\b\bG\b\b5\b\b\b)\b$\b#\bA\b$\b#\b\b\b\b\b\b$\bF\b\b\b$\b\b5\b)\b$\bX\b,\b\b$\b\b$\b\b\b$\b'\x07\b\b\b\b$\b\b\b\b\b\b\b\b\b'\b\b\b$\b5\b\b#\b\b\b\b\b=\b\b$\b\b\b$\b\b\b\b\b#\b\b\b8\b\b#\b\b\b;\b#\b$\b\b)\b\b^\b\b\b_\b K  $ *  Q E@ 5\x07    \xA2 5  ## K$B$B\f$ K B A   b  [ 4 ) 5 $  IK/ B [\f\f\b?   \"\f $  5 @$ F $ K   @$ 5 ! ?   $@U@4@O@T@@$@@K@$@L@$@B@@E@\x80$@F@@@$@@#\x80$@5@$@@$@4@\xF2@$\x80C\x80F\x80 \x80$\x80KP\b\n \x80F\x80$\x80O\x80c\x80H\x80W\x80:\x804\xF2\0c\x80\x80O'/'?'\x80O\x80!\x80\x80E\x80\xF2\x80$\x80K\x805\x80$\xF2\0\xF2\0\xF2\0\xF2\0/\xF2\0$\xF2\0\xF2\0\xF2L\n\xF2\xB0\x07\xF2\05\xF2\0+\xF2\05\xF2\0U\xF2\0KD\xA0`++#_+K+\b+++K+ \b+	+\v+\xF2\0\x1B\xF2\0#\xB0N\xF2\0#)+\xDF)4)$6BF\xF2\0>\xF2\0\xF2\0$\xF2\0\xF2\0\xF2\08\xF2\05\xF2\08\xF2\0W\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0/\xF2\0?\xF2\0'\xF2\05\xF2\0\xF2\0\xF2\0\xC0@\n\xF2\0$\xF2\0)\xF2\0\xF2\0\xCA5\x80K@F\f\fK\bK\xF2\0\xF2\0$5K$ $55555$ 5@$F$5$5=$'$$$$5$5\v$ 5 W@5@$ A0$\b\b$+5\bA\b$\b\b5\b$\b\b$\bU\b\b5\b$\b\b$\b5\b\b5\b\bF\b\b+\bW\b$\b5\xF2\0F\xF2\0#\xF2\0\xF2@$@5\x82$$$\f$$\n$$@\xA2@$\b=\bO\v b@5@!@@/;,W[;W;[W;U[\b@$@'@W@K@5\x80$@\x80@:@$ I@$@@$ K @\xF2\0@$ 5 $ 5 $ 5 \xA4@$p5$$'+\b\b$\b\b\b$\b\b5\b$\bU$\b5\b;\v\v\b+\b\b55\b$\b+\b\b5\b5\b$\bA$\b5$\b\b\b5\b\b$\b$\b5\x07\b5\bc\b\b5 $5\xF2\0\x1B\xF2\0\xF2\0$\b\b\b$\bK\b\bc\b\b#\b\b5\b\b\b\b'\x07\b$\b\b'\b/\b\bV\b\b!\b\b\bW\b\b$\b\b\x1B\b!\b\b\b''\b$\b\b\b\bD\b$\b\b\b$\b\b$;X\b\b>\b\b\x80F\x80L\x805\x80*\x80\x80h\x80$\x80\x80$\x80;\x80\x80 \x80\x1B\n\vd\x80c\x80$\xF2\xE0\xF2\0!\xF2\0#\x80G\x80\x1B\xF2\0G\xF2\05\xF2\0\xF2\0\xF2\0_KQ\xA0K\xF2\08\xF2\05\xF2\0\xF2\0O\xF2\0+\xF2\0\xF2\0c\xF2\0X\xF2\0\xF2\05\xF2\0\xF2\0#\xF2\0\xF2\0\xF2\0K\b\b\b\b\b$\b\b\b\b$,\b\b\b\b?\b!!\b$\b\b\b^\b\x1B\b\b]\b$\b\b$\b\b\b\b\b$\b\b\x1B!\b\b\b\xA9\b@\b\b5\b\b$$\b\bA\bB\b\b\b$\b\b\b\b\bP$$ $'QA05$$$$4$A;\x80F(X!\b\b\b\b\b\b\b\b\b\bA\b\b\b\b\b\b\b\b\b$\b\b\b'\b\b$\b\b5\b\f\x80\b\b4\b$\b\x077\b\b\b$+\b$\b\b5\b$@4 7@@$ #  ;   @\x07\b#\b\b\v\v\b\b$\b\b$]K$\bB\bF\bU)\n\b\b_\b\b6'\b$\b\b\b$\bL\b$\x07\b!\b\b$@@!@$@@$@4@@@4@@f@@[@!@?V\x80F\x80U\x80$\x80/\x80$\x80\b\b$\b=\b\b\b\b$\bA\b\b+\b\x8A!\xA6$c$c$\f5!7$7D77\v$} Ev\v\x80\x80K\b$\b\x1B\b\b!\b#\b$\b\b\b\b\b\b\n!'!!'!'!!!	!!\x80\x1B\x807   \n\x07\v-7$ K W )\r  *  $ 4K\v\bK ) I   5@$ 5 $ \b \b)U) I $ G F  ]\n	!\r!\x07D4 \f#G#$$\b,,5$4 EA!\bW!$\b#\bW\b\b\b$$\b'\b\b\b\b4\b\bW\b\b$\b\b\b'\b$\b\b\b$\bZ\b\b\b\b\b5\x07\bTT\b@\b\b\b\b$\b	GG\b\b$\bD\b\b\b\b\b'\b\bI\bK\b\bB\b\b\xF2\0\b\xF2\0\x07\xF2\0\xF2\0\x07\xF2\0\xF2\0\x07\xF2\0\r\xF2\0\x07\xF2\0\xF2\0\v\xF2\0\xF2\07\xF2\0\v\xF2\0\xF2\0\b\xF2\0v\xF2\0@@\x80\n\xF2\0\v\xF2\x80\f\ny\n\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\f$\n!\v\b\x07\nt\n\n\v\x07t&	\x85\x80\v\x80    (\x80\v\xF2\0$\xF2\0k\xF2\0\v\xF2\0\n\xF2\0\v@@\n\x80\n$\v&\bt\v\x07\v\bT	h\b\v\f\n\v!\v\x07F\n	\v\n2\v\x8D\v\xF2\0\x07\xF2\0\xF2\0\b\xF2\x80\x80\xF2\x80@@\b\xF3\0t|\b\btv |@@\x9F@\n\xF2\0	\xF2\0\xF2\0\xF2\0	\f'\b/\xF2H\xF2\0\x07\xF2\0	\xF2\0\x07\xF2\0	\bt\b0	@\x07@	(v\bv 7\n7(70P\xF2\0\xF2\0\b	\xF2\0 \xF2\0\xF2\0\f\xF2\0\b\xF2\0\x85\xF2\0|\n \n \v\bq\x07\f \x07t 	 \xF2\0\xF2\0\v\xF2\0\xF2\0\x07\xF2\0\xF2\xE0	v\v\n\b\x07\xF2\0\b\xF2\0\r\ft\b\r\xD8\bt`\x07`\xF2\0\xF2\0\f\xF2\0	\xF2\0\xF2\0\b\x07\xF2\0\xF2\0\v\b\n\b\v @\xF2\x80\f\xF2\0\xF2\0v\xF2\0\xF2\0@\x80	\b\x85\bt\xF2\0  \x07\xC0	@@@	@\xF2\0\xF2\0\x85\xF2\0\n\x80	`\v\v\xF2\0	\xF2\0\x07\xF2\0\xF2\0	Kv\xB4\xF2D\xF2\xA5\v! '4'\v\n\bM\f\n\f5\v\n\xF2\x80\r7707\xF2\xA8\b7\xF2O\b\x07\xF2\0\xF2\0F\xF2\0\xF2\0	7\xF2\0\xF2\x807 7\xF2P\xF2\07\xF2\xDD{\xF2\"\x1B$$\xF25\n>7\xF2\xC0\x807\xF2\0\xF2\0F\xF2\0\x88\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\xC0@\xF2\0\xA0\xF2`\x80\x80\xF2\0\xF2\0\xF2\0\r\xF2\0\xF2\0\xF2\0F\xF2\0@ \x07\b	`\xF2\0F\xF2\0\xF2\0\xF2\0\x07\xF2\0	\xE2\xF2\x07\x80  \xF2\0\xF2\0\xF2\0\xF2\0\xF2\0  \b\n%	'\xF2\0 \n\n\b .1\xF2\0\x807\x80\n\xF2\0i\b' 	\xF2\0\x80\x80\xF2\0a7<77\xF2\0\v\x80@  @\x80\x98\b\xA0\xF2\0\xB0\b\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xC0@\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\x80@\xC0(  \xF2\0\xF2\xA0 \xF2@\x80\x80\xF2\0\x80\x80\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x80\x80\xF2\0\xF2\0\x807\xF2\0@@\n\b ~`\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0,\xBD\x80\x80\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0T,\n6\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xA9\xF2\0F\xF2\0\xF2\0\xF2\0\xF2\0F\xF2\0\xF2\0\xF2\07\xF2\0F\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0F\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0F*	@W7077&Y\xF2\0\xF2\0\xF2\0\b\xF2\0\xF2\0\xF2\0	\b&\x07'\x07&!\x07!	(4\f\f L\b!!\f\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\0\n\xF2\0	\xF2\0\x07\x07\b\v\x07\f\n	\b\b\x86\b)\b4\f\b4\v\b	\v		\f!\n\f\n	&4+&&&&'&t&\b7)47'\x07)\x07\n\b\b\x1B\x86)\v&	\x86&\x1B\x07	\x07!&\xF2(\b\f\b\xB47\n\x07&\nL7\x07\f	\f\vT			\n7\x07!&t 7\n 7\b\b\b\b>\n$\x07	\b7\v!L&t&\x077	\n\b\v!L&t\n\x077	47r	7H3.\r0'&\r\n\x07\b	\n\v\n	\b\n	\b\n\x07\x07\v\n\v\n\v\v\n\n\v\x07\n\b\v\n\v\n\n\x07\b\n\b\n\n\b\x07\x07	\xF2=	'''|7\n	&\v	\n\x07	\n(\v\b\x07\nd6\v\nv\x9B\v\n^\v\n^\v\nF\b7\b\x077777	7\b\x07\n7\x07\xA5&K \x07\n(\x07\v\n	\v\x07\n\n\n\x07\xF2-\b\v7\x07	&\b\n(\x07\v7\x07	&\n(\x07\x07'\b(\n&	\x077\n(\n\f&	\x077\n\b$\b	\f\x07\b\b7\b\v\n\b&(\xF2	(7\v	&\n\x07\x07(7\x07\x077\f7\n\x07\n\n	\f(\b\n\v\n\x07\v\n\x07\x07\x07	\n	\x07	\x07\x07\v\n\v\n\v\n	\n\x07\b\b(\x07 \b\v\b\n\b\b\x07\b\x07\b	\v\n\x07\f\n\f\b\b&$\b7\n\f\n&&((\f\n\x07\v0\v\n	\f\xF2\x7F7t \n	\n\b\b\vL\x86\b\b\b\n\n\v \b\b\b\b&\f(\v\x07\n	\xF2R\b7\f77\b77@7!\x07\x07\v	\x07\x07\n\f7!\x07	(\n\f\f(\n\x07!\x8B\xF2\x8Ay\xC4 \v\v7	777\ny\xC0\xF2\0\xF2\b\b\x077\x07\n7 \x07@@\x80\xC0@7@\x80\x807@\v@\n\xC0\x07@@	\xF2\0@@\x80@@\n(&\n(87$ p\r\x07\xF2\x9B\x80@  	\xC0@\n@@@@\xF2\xC0@\xF2\x80 7   \x80 7 ` @@\xC0\x80 \xA0 \x07\xF2\xA0\xF2\0\n\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0\x80\v@\xF2@\x80\x80\xF2\x80@\x07@\x80\v\xF2\0@\xF2@\xC0\n@\xF2\xC0@\xF2\0\xF2\0\b\xF2\0\b\xF2\xF8\xF2\x07\xF2\0\x80\x80\f\f\n\n	\x070\f\n	\x07\nP\xF2\0\n\x80\b\b/\v\v\v\v\v\x07\v\v\xC0\b\xF2(\x807\xC0@7\x80\v\x80\n\x80\xF2\0	\x80\b7\b	\va@7@\x80\xF2\0@7\xC0\x80\x80@7@\n@@\xF2\x80\v\n\x07'\x077\n\x07\v\n&(\n\xF2@7\xE0 @\xF2\x90\b\b7\v\b\x07\n\x07\x07	\b	\b\xF2\0\v\b\b7 \xF2\x80 \x07\xF2\xF0\n !	\x07\x077\xF2T \xC0\xF2~\\!\xF2\b\v\x07\xF2p\x98\xF2\0$%\f77$\b\b\b\b\b\b4\b\b\x07\b\b\b8\b\b0\f\b \b\x07\b \xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0\f\x80\x80\xF2\0\xF2\0\xF2\0\xF2\x006\xF2\0\x80\x80\n\xF2\x80\x80\xF2\0\xF2\0\f\xF2\0\xF2\0\n\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\0	\b\x07\x84\v	\b	\n\x077\x07\x07	\xF2\0	\x1B\x86t\b\v7		\f	!\x07tt\n\x07\x867\b\x07	v\x07t\x07\f\fv+v\b\b\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\b\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\b\b\x07\x077	\v\x07\f\v\x07!&\b\n	+\b		\b\f	\x07+\x07\x88  (\xF2\0\xF2\0\xF2\0\b\f\f	\v\x07\x07	\x07\f\f	\x07\x1B+\r\x07\v \b\v\x077$\x07\n\v\x1B'	\n\f\n\r\v\xF2\b\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\0\n\xF3\x07\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\xF2\r\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xF2\r\v\n\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v	\v\v\v\v\v\v\v\v\v\v\v\v\v\xF2\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\b\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v	\v	\v\v\v	\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x80\x80\x80    ,\xC0M\xF20\x80 v\x9E\x82\x81\x84\xD1\xD9~\x80\xDA\xDB\xD2\xD0\xDC\xDB\xD2\xD0\x82\xDA~\xD1\x80\x84\xD9\x81\x9E\x90@\v\x91|\rpi\x9C\v \x07\x80\x80\n\b\bmt\b \f	\x85l\x9F\xDD\b	 \v@\x97\xD4\xD5oJ\xA3\xA7\x99e\x88\xDEy\x95\x8C\xDF\xAA\x8Ds\x90\x8E\x94\x92 - 3N\\w\x962xz\xE0\xE1\xD7x \\wz\x962\xD7\b\xE1\b\xE0\x97\xA7\xD4\xD5\xA3oJ\x80M\xF2\0\x807\x80  @\x80  !Y\xA4\xA1\xA5\bYG\n\b\xA1\b\xE2\b\xA4\b\xA5\xF2\0 &\x8A\xC9\xAF\xC9k\xBC\xB1S\xC4\xB9\xC7\xB6\xE3\xB8\xBD\x89\xAEjR\xB5\xB2\xAE\xAD\xB0<\xCD\b\xC0\x860.\xE4\xE5\xCC1\xBB\bu\"\xC8%\xB8\xC5\xC3\xC0\xB7\xAC\xC2\xBF\xE6\xBE\xBA\xCB\xC4\xB9\xCDk\xBC\xCC6\b8\b*\bP\b\xE5\xE4(\b\"\bL\bh\bT\b9\bF\xB3\x86\x89\xACa\xB0\b\xB5\b\xB7\xCB$\xAD\x8A\xBD\xB2\xC3u\xBB\xE3\xC8<\xC2\xC1\xB4j0\xBE\xC5\xAF.SRu\v\v\v\b\v\v\v\v\v\v\v\v\v\x07\v\v\v\b\v\b\v\v\v\v\v\v\v	\v\v\v\v\v $ 'V\f  !?I>cP!\x80$?>I!!!!5c!!!!!!!/QL6CK=8*hPT9FO\x9A(b\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\b\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\vD \b4[\xA2W;\b[\x1B\b)\b5:X}BC/Q\x9A@]\xA8:+\bU\b\xA2AW#\x8D\x94\xDF \x99\x92\xAAe\x8C\x90\x8E\x95\x88y\b\xDE\x9D|lm\x91\r\x07tB]p\x9C\x9F\x85}i\xA8@\xA0\v `#p\v\v\v\v\v\v\v\v	\v\f\v\v\v\v\v\v\v\v	\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\n\v\b\v\x07\v\x07\v\v\b\v\v\x07\v\x07\v\v\v\b\x07\b\v\b\n(\v\v \xC0\b\b30\x80  !\b\b\bLuL&\x83\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\f\v\v\v\v	\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v	\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\n\n\n\b\v\v\v\v\v\v\v\v\n\v\v\v\v\v\v\v\b\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\b\v\b\v\v\v\f\v\v\v\v\v\v\v\v\v\v\v\b\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\n\v\b\v\xF2\0\v\v\v\v\v\v\v\v\v\r\v\v\v\b\v\v\v\v\v\v\v\b\v\v\v\v\v\v	\v\v	\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\b\v\v\v\v\v\x07\v\v\v\v\r\v\v\v\v\x07\v\v\v	\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\b\v\v\v\v\v\x07\v\v\v\v\v\v\x07\v\v\n\v\v\v\v\v\v\v\v\v\r\v\v\v	\v\b\v\v\v\v\v\v\v\v\v\v\v\v\v\v	\v\v\v	\v\v\v\v\v\v\v\b\v\v\v\v\v\v\v\v\v\v\v\v\r\v	\v\v\v\v\v\v\v\v\v\v\v\n\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\f\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\b\v\v\v\v\b\v\x07\v\b\v\v\v\v\v\v\v\v\v\v\v	\v	\v\v\v\v\v\v\v\v\v\v\v\v\v\v\n\v\v\v\x07\v\b\v\v\v\v\v\v\v\b\v\b\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\r\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\b\v\v\v\v	\v\v\v\v\v\v\x07\v\v\v\v\v\v\b\v\v\v\v\f\v\v\v	\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v	\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\b\v\v\v\v\v\v\v\v\v\v\n\v\v\v\v\b\v\v\v\v\v\v\v	\v	\v\v\v\v\v\v\v\v\v\v\v\v\f\v\x07\v\v\v\v\v\v\x07\v\b\v\v\v\xF2\0L*P(6&F$7\v\x07\v\v\n\x07\xF2\xC0\xF2\xF0\0<\n|\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xF2\0\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\b\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v	\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\xF2\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\n\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\b\v\v\v\v\v\v\v\v\v\v\v\v\xF2\0\v	\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v	\b\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xF2\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\b\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xF2\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v	\v\v\xF2\v\v\x07\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v	\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\b\v\v\x07\v\v\v\v\v\v\v\n\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\b\v\v\v\v\v\x07\v\v\n	\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\b\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\b\v\v\v\v\v\v\b\v\v\v\xF2\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xF2\xE5\v\v\v\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\x07\v\v\v\v\v\v\v\v\v\v\v\n\v\v\v\v\n\v\v\v\v\v\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\f\xF2V\b(\b\x80}\xF2\0v\xF2\0	\xF2\0\"\x80\x80\v \n @	`}\b|\b\bt\b\xF2\0\x80\x07\x80\xF2\0\xF2\0\x80\x80\b\xF2\0\b	\xF2\0\x80@\v\v\v\v\f\v\xF2\0\v\b\x07\b\b\x07}|v\b	v\v\b\x07\xA0v\xF2\xF2\0\f 	@\xF2\x80\b\xA0 \v@\no\n\b\b|m (\r\b\n\xF2\0\x80\f\xF2\x80\xF2\0	\xF2\0\b\xF2\0\xF2\0\f\xF2\0\xF2\0\b	\xF2\0\b\xF2\0\xC0@	\xF2\0\b\xF2\0	\xF2\0\x80	 \b\bt\b\b|!\n\v\n\n\np \x07@\n@	\x80 \x9D\b\b|\b	\bt@\xF2\0	\xF2\0\v\xF2\0\xF2\0\xF2\b\v\v\xF2\xF7\xF2\0\v\xF2\0\xF2@	  }\x80\xF2\0\n\xF2\0\xF2\0	\xF2\0\n\xF2\0\xF2\0\xF2\0 \xF2\0	\xF2\0\xF2\0 	\xF2d2\n\n\n\n\n\n\n\xF2\x80\xF2\xA0v\b@	\xF2\0\xF2\0\f\x07\xF2\x80\x80\f\xF2\0}\xF2\0\f\xF2\0\xF2\0\xF2\0\f\xF2\0\xF2\0\x07\xF2\0\xF2\0\v\xF2\0	\x80\v \n	v\f@	|\x07\v\f\b\f\v\b\x07|\x07|\b\x07@	@\v\x07|vt\b|\x07	\f\v\nt\x9F\x91\x07|\n\x91\x9F\x07\x9Dt\x7F\v\v\b\v\v \v|,\xF2\0\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\n\x07\xF2\0	\xF2\0\v\xF2\0\n\xF2\0\x80@(\b\v\v\xF2\0`\xF2\0\xF2\0\x07\b\xF2\0\xF2\0\x07\xF2\0\xF2\0`\xF2\0 \xF2\0\xF2\0\xF2\0	\xF2\0\f\xF2\0\xF2\0\b\xF2\0\xF2\0v\xF2\0\xF2\0\xF2\0\xF2\0\x07\xF2\x80\f\x80\xF2\0\x87\xF2\0\xF2\0\f\xF2\0`	 t\x80\x80\x07	\x07\v\vR\xF2\0\xF2\0\x07@\v\x91\b\n\v\f\v0@	\x80t } 	\x9D\x9E \xC0\b@m\x80\x80 \b\n\f\v\v\n\v\f\n\v\n\vt  \x077@\n\x80\x80\xF2\0\v\x80\x07P\b \x80\x07\x80\xF2\0\n\v\b\n\f& \n \v\v\f\v\n\n\f\v\f\v\f\v\f\f\f\f\b\v\x07	\f\x07\b\bt\xF2\v\x80\n\xF2\x80\x07\xF2\0\v\xF2\0\xF2\0\f\xF2\0\x07\x80@\n\b\nv(\n( \x80p\b\v\v\v\x91t\v\xF2\0\f\xF2\0\f	\xF2\x80@ \b\n\xF2	\n\x07\b\b\b@@	\xF2\0\b\xF2&\f\v\xF2\xD9	\f\xF2\0\xF2\0\f\xF2\0	\xF2\x90\v\n@\xF2\0\xF2\0\xF2\0\xF2\0\v\xF2\0t\x80\x80\x07\xF2P	\xF2\x98	\b\xE0		\b\xF2\xF0	\xF2 	\xF2	0P	0	\xF2\xE1\xF2\0\xF2\xF2\0@\xF2\xA2\xF2\b\xF2d\xF2\xA9	$\xF2\0\f\xF2\0\xF2\0\v\xF2\0\xF2\0\v\x80 i	  	\xF2\0\x07@t`	\f| 	 \x07\xB0	 	xD	@\xF2@	 					0`	0	\f	\xF2\xA0	\xF2\08\xF2\0\x1B\xF2\0@@ ! @  \xA2\b	\f]C/5)\x9DB\v\x80\x80\x80$\xF2\0  \x860\x86.\x86.\b\x86.\x07\x860\x86 \x80\xF2\0\xF2\0 \xB5G$G\xB4\b\x866\x80\x80!  \n\xF2  5 $EO $\x80d\b\r>\xF2\0\xF2\0!\x80\x80\xF2\0\r/\n\v    \x86\x80@@\v\n;\v\xF2\0\xF2\0 \x80#\x80\xF2\0 $\x07CcKK==$B$ \x80\xF2\0$\xF2\0\xF2\0\xF2\0\x1B\xF2\0  \x07 \x80\b\xAA\xF2\0    4@@'\xF2\0\xF2\0    \x80 \xF2\0 	  @\xF2\0\xF2\0\x89k	kuu\b\xBCk.\x07S\xC6u\xC6.8\xF2\0`c\xCF*\x80 K\vK\vK\vK\vK\vK\vK\vK\v\nK\vK\vK\v0K $ 	'6'  T@d\x80\x80@@$@>@! $ @5\x80M\x07!M!M!\n!! ?@!  A@?\xF2\0\f\x07x4\f\b  a \x1B [ $\nZ_\fZ^\f 6 $`\b\b\b\b'@\xF2\0\xF2\0'*\x07 \b,,  5  '  '@4$\v@\xF2A\x1BD=\x1B\f\r\x07\xE8$$  @)\xA7)\bX\b)\bI @)  $$\xA0'\xF2\0@)A)))A)A\x07 ' 5 ! I\xF2\0 > B P $  \r!!!!W\b\b5\x80> \xF2`\x80\x80\x80\x80! / @  $\xA8,$\xF2\xFC\x008\xAC8\xF2\0\xF2\0  XXX\bXXX \x07\n	\xF2\07!MG!\xA9\xAE&@``\xF2\0\x80\x80@   $\x07Mv )  !@U[ @\b\b,K\b!\b   \xF2\0\x1B\xF2\0@$@ $ @@'  $\x80\xF2\0   # U\b  !  $\x07!!'!@  $@\xF2\0\x80\x8077,\v@ $ \n )  [`$  '@\xF2\06!!!!!!\r\n\x07!!!!!!!!!!!!!'!!!\n!'I!!\x80@  !  6@$\x80P$\xAF$\xF2\0!\xF2\0F  '@+  @\b5\x07\b>'\b\b$5I\b$\b5\b$\b\xA8\b$\b5\b\b$\b\b$\b5\n$5\b\b$\xF2\0Y\ri-8\b\xF2\x87\xF2\0!  8 $$?!?!!\x07?!$!\v\b\b    @  @\xF2\0\xF2\xE7 +KB\n$!$4$@  $@\xD0	\n\b\b\x806\x80\xF2\0 H\b	\f@\xF2\06\r @6'\x07 \f$5$  @$  @\xF2\0'\xF2 \b\b@ V '@\xF2\0\xF2\0 $   ' $  ' $ 5 @F\x80\xF2\0h\xB0\bH G@$  $ A\xF2\xE8\xF2\xE8\xF2[\xB5\xF2\0\xF2\0X\xF2\0M\vJM\x80@$@@'@)F\xB8\xF2\0@@A ! C  $  @   A@\x1B\xF2\0\x80@B\xF2\xFD\0 H u@ $ @\xF2\0 $ '@4  A    $@\x80\xF2\0\b\b\\\x86\xF2\0  $@!  H!\b$\b\b$#\b$\b\b5\b$\b5\b$:\b\b4\b5$\bU\b5\b\b,\b$\b\b!\b\b\b\x80$\x80'\f	!\b&\b&\b !\x07!\x07&\b	)!\x07\b\x07&\b&&)!\f\r\x07!)	\b	&\b&&& \f&\n\n&\b&\x07&\v\b!\x07'P1\xF2S!\v!!\xA6\xA2[  $\f\x1B44$\b''?\bI\n\v  $ K @6 U \xB3@\xF2\0\xF2\0  @ '@A\xF2\0\x075555\x1B5\x1B\x1B555&555555\x0755'55555'5&55555&55&\x0755'5555555555555 !@)  @=\xF2\0 '    4     \x1B@ 5 $@>\xF2\0\xF2\0\f\xE7\xE7\b \n\n	LhLh\n@ @\x07!'!@\xF2\0\xF2  C     I Q\x80$ @\xF2\0\xF2\0h  5\b++\b\v '6\n@ \x07 @\x1B Q $@+\xF2\0\xF2\08  $  K  ! X '\v 5@: 4  \f\xF2\xFC\0\xF2\0\xF2\0\xF2\0G  \v  \b,\b\v@\v\v!\xF2\xF0\0 $ @+  $@T\xF2\0  @\x80\xF2\0\xF2\0\xF2\0'\xF2\0\xF2\0 U a ' 6\x07\b\b\b     @ 6 @'\xF2\0@5@  @#  $@\xF2\x80\xF2\0!\x80#\x80'   @ $ @\xF2\x80\x80\x8A\xF2\0\xF2\xD0\v\xF2.\xF2\0\xF2\fz\xF2\x87\xF2\x83}sq\xF2\xA477\xF2-\xF2Ne\xEC\xF2\vy\xF2G\x07\xA8\xF2\x8By\xDBM\xAAw:\xD6\xC7y\x97\xF2\x96y\xF2\x9D7\xF2Iy\v\xF2\xAD0\xF2\xD9y\xE0.\"\xACFuu\xF20	\xF2rw\\ww\xA8\x07Pu\x7FMAM\xC2\xC2\xC2\xC2\xC2\xF2H}\xF2~	\xC2\xC2\xF2z/!\f \b\xE7\xF2\xF7\0y\xF2\xD0\xF2  7(\b[7Dyp\b\x8F\xF2<7\xF2K\v\n\f\v\xF27\x077\x8D2	\v7	\x907\x90\fe\x94e\x8Be\x8De\x8De\x8De\xF2R7\xB87\xF2\xFC\n\xF29\xF2\xF1\x9C(7\xC4\xD4\xA6\b\xD4Ay\\\xF2%N\x82w%y\f\xD4\xF2Gy\xF2\xF0b\xF2\x9A\x94\xCCb\\7\xF2,b\xF2\bNw\xB8\x94y&\xD4\xF2\xE0 \x07\xD6sn7\xF2I\v\f P\n\v,\v\n\x1B\n\v\f\n\vUD\v\v\v	\f\f\v\f!!\v\x99\f\v\v	\x07M\n\b\x1B\vt\b\v	\v\v\n\n\x99\x07	\v\f\f\v\v\x07\x07\xA9\x99\xF2\xBC7\x80\v\f\x1B\f\v4N\\35\vt\b\n\nM\r(6&\x86\v\v&_ \v\xF2\x87\xC2\xF2X\xF2\xF2\0\xC2\x95\xC2\x1B\xC2\x9D\xC2\xF2\x9DA71 y\xF2\xB1\xF2F\x07\xF2J77777O77u777K\x8B7\x077\b7'\xF2\b\v\xD4\xD5sy\xD5\x92	\x93\b\x94\x92M\x93N\x92\f\bNyyy\bN\x07y\f\x95X77\x95!\xF2@\x07\xF2P78  7\xF2\n\x8FI\xF29\b' 7\x90\xCF	77777\xC07\xB0 7R\xF2\xE3\n\n\x07\v7#7\xD37u77E797\xF2\x99(] 70 7->\b7\f77@\b@ F\xF2` 7  7\xF2\f\xF2`	\xF270 7\xC0@7\xF2\xF6\0{F `\x88`7\xF2x\xF2\x8A7@s\x80@\xC0\r7\b777	77777777!7<	7\xA77777(7\b8\xF2\xE7\xD6\xF20\f\xBC\x0759 7D7V 707&\n7\xF2\x90\b7(@7@+!+\b+\b @}|\xC2777777k77R@7,\xF27m7\xF2\xA607\xF2U7\b7\x84\n\xF2\xD8 7\x077\f 7p\x897\x9E7\xF2P@7G\xF2\xEC\xE8\nyH@\xEFI	\nII\" 7@@7@F\x80\x957\x9C07\xF2\xD07\rM#<7]\xF2\xC5M7\xE0 7\xF2\f\v\xD0\xF2-\\-\nN\\wx\f\\\fN\\\b3\b\\\bN\b-\b\\(3\\3\bN\bw\b\\\bN\fw\f7\n7777\f77777\b77777	7\xF2f7\xF2$ 7\xC577\b\x8B\xDB\xAC7R7\n677\xAA7w7r\xDB\b7\n77\x07777}7}\b7\xD47\x0777S7\bJN7\r77\b@\xC07\xE2	y\xB0y\x907\xF2\xF07\xCA\x8F\x8F\x8F\xADr[\x80@\x8F\xF2\x8E77P7\f07@7P7@7\xF2  \xF2,\n \n\xF2\xBCLLL\r\rLL6\xE9&@7R7\n7\xA477el<7v\xCB\xF2\07\xF2\x80x	xo\f\bo3\r33\b3--yyy\vy\ryZ338\bo@7\xC0 7\x9F@ 7@\x947x\v\n\n\n\v\xF2B\n\xF2@\xF2\xD07\r7\xF2\x907\xAEI\x07 7 @F\b\n\xF2X7\x80\x807\xF2\xF1\x07\xF2\xE8\xF2\xF4\xD6\x907\xF2\xC0@\x95\xC0@7g\n\xF2'7\xF2\xF0 7 yy\xF2\xF0\07 \xF2\07\xF2\xC0 7\xE0 y*7y\xF2\xF0\0@7,,7477B\b	\xF2\xFA7z77$07\xACN\nM\xF2\x90r\xF2\xA4\x07 7`@7\xB07\xA0 7\xF2n7\b\x9D7)ZD\v7CM\b\xDB\v\n\v\v\v,\b\x94\xF2x\xF2\xF9\07$yo\bo\xA0 y\xF2\\\n\bo 7&-\xF28\b?7 07\x9D877H\x07\b\b7@07 7@ 7 @7  @\xF2@7%#\xF2z\xD07i1\x07\n27P 7\n\v\n\x07\v\n\vP\xF2.\x80y\xD27-\x807b7\b7a\xF22\x07 7y\xF2\xA07\xE0 7\xEE\b\x07\n\v7\x077\x07\v\x07\x07 \x077N\n\x07` @ 7` 7@\vf\b777\xF2\0\xF2\0\x07\xF2\0\x07	\n<\x07\r\nV,\n!\x07!\x07!!\x07!!\x07\n!\xF2\xB0\b\x91@\v\n\nG\xBC7\xCE\x80=\xF2\0'\xF2\x81s>@y\xF2 7 7` y @7  777\v7\v7\v#7777\v77\xF2\x80\b\x94\x92\x8E	\x94\x8B\x94\x90\x94\x92\b\x94\x90\x8B\b\x94\x8E\x94\x8E\x94yJ\v\v\v\b7@7\xF2P0  \v \b\b(\xF2\x07\b\f\"y(h\b\x07\n\xF2\xDF7\x85@7\xF2@\r@\x95@\xF2\0\f 7\x1B7\xF2\xE4\xF2\07\xF2 7\n\x85@7\xF2$@@!F\xC2\xF2c\xC2\xCE\xC2\xF2\xC6 7\x80@7\xB07\xF2\xF4\0{\xF2\xF8\xF2\x85\xF2\xAC\x07\xF2?\xC2\x7F\xC2\xF2\xFF\f7 \v\xB17\xF27\x927\xF2\x8C\xF2fy\xA7b\xF2I7\x90\xD4\xB8\b\xD4\xF2X<\b\x948NN\xD4N\xF2i\xD4:\xD4w\xF2\xD6A\x93r\x94\xD4\xF2\bz\xF2\xE0\x077 \v\xA0\x07\xD4\xA3\xD4\xE0e\xF2\vw\xF2F\v\xF2Z\b\x95\xD0\bwDN\n\xF2\xC77\xDDM\xDE\"w+3\v3\xF2^\bN\xF2x\xF2uHw\xF2\xE2\v\xF2&\xC2\xF2\by\xF2\xA3!\xF2?w\xF2\0\x07\x07	7!\n3\x07M\v\xF2\xC0\r\x95N\xF2RwN NwN\xF2H \x07\xC0\x07\x07\b\xEAp7 7\xF2XyFy\xF2\x9D7\xF2\0 7\xA0\x80&\xF2\xA07 7007\xF2\xC17\xBE &`@7\xF2\xA07\xF2\xF0\0 \b\xF2@	\x807\xF2\x90777\n7\xF2@7 7$k\xB5\b7\xF2\xABp7M7\f7\xF2777\x077\b7777777\x0777772J77!7\xF2 7\x07\xC97\xF2!7\x9E\xB07\bH7\xF277\n777\n7777777777777777\xF2\0\x807\xF2\0y\b7H077@7\xF2p\be\x8FeLx\x07*\xD6\xF2\0@7@@-\xF2@\n\x807\xF2\x077\b\b\b@7\xE0 K` 7\xF2\xA0 \x8B\xF2pHH^4^\xA3\x95	7\r\x077777\xA07\xF2\x8Fyy#y\xF2~\xF2\xC973\x97\\\\ox\vx\x977\x80 \n t7- 77'7\x07\xD67H`s\xF2\xB177\xF2* 7 7o  7\x80 7\xF2 77(7\b\fe%\xB107p7 7@\xF2\07\xB07\xF277\xF2m@@@F H\xD4M\x97\by\xA3 7\n\v 7\xF2`\b- 7\xF2  7y7@\xF2\07\x80\x807+\v\xF2\0 7\xF2\0\v 7\xF2\x8C77\xDB7\xF2& 7\xF2\xA0\b7\v7777777\b77\xF2\0 7\x80777@	\n\x91\f\v|\x07t\b\nv~'!4;\xA1y#7}\xF2\x86\xB5 7 7p7\xF2\xF0 7\xF2\xB077h\b7 7\f\f\f77\xF2\xB48\xF2\x89#Pu\xE1xx\b\x86\x07F\fwu\xD5F0\r7x\x86\xAC\xF207&77e7\x90\x8B\x8B\xC3 \x9F\xF2@\xF2\07\xF2 {77` 7` 7l773\v`7@\n\xF2\xC9\xF2_7\xF2\xF6\07\xF2\xE6OO\b7777	7\v\x07\fw\b\x07777\b\np7P777	7\x077777\x07777\xF2\xE0\xA3-3@7\xF2p3\n,\v@7\xF2%7o\x95oM\x88M G\x807\b7\x0777\xE0 7 ? 7@ 7\xF2P7p7\xF2Vey\x90  F  7 ^\x8B\xA7\x07\xA7\xF2!\x07\x9377\xF2\xB0\xB87F7\xF2\047\v7:z7. 7 \x95\xB6\x89\n\xF2\x97\x07\x07\x99:yDwN\bwPy4yy\x07yyy\v,7\xF2\xC0 7\x80\n\xF2\xD0@7\xC07\xD07\xF270@7\xE0 7\xF2\xC8\b\xDE\xD0 {\x07y]\r=e\x94\x8De\x94e\x8Fe \xA3\by\x96\xF2\xA0@&s$\xB77\x91-\xEE 72\xF2Y7\xF2p\xC2\xF2{	\xF26x\xF2f7\x0777 @7 07\b7\x077P7\xF2\xF3\xC2B\xC2\xC8\xC2\xC8\xC2\x07\xC2\x07\xC2\xC2H7R7P7\xF2\v@7\xF2\x80 7\xF2 	\xF2\07\f\n\xF2p\\\bN\\3\\\bN \\NJ\xF2\x9C7\bq\xF2\x9A1\xF2\xEF	7\x07\b77z7\xF2\xFB\0\x92\b7\xF2 !\xF2\07\xF2\x88\n\n\v\x9A\xF2E@7\xE07077#\b\x98@y\xC0@7@@7\xF2@@yA\n\b[71\n77777\xF2H B`7B077 7`\v^^\x8B^^^7@7 {@ 7\xE007e3\b\xF2\"7 7\f\n\v7&	yv 7 7P 7\xF2\x9977 bs%717>7!7^7]7\n17P7\xF2\xA007 7M\x9D7\f7\x80y\x807\xF2\0P7\n7 777&\x07MM\v\xF2\x90 \x970eyyyy	 7p7\xB07\xF2\xC85y\xF2\\y\xF2\xCE\"\x8B\n\f@7\xC0 7\xC07\xF2\07` 7 7\xB07 \x07057\n7\xB47\xF2\v\x07@\xF2?\xF2\xAB\xF2\0\b7\xF2p7\xF2\xC07\x90 7\xF2\0\x07\x807\xF2\x80\xF2\07\x07P\n7\n\x07\xF2@0 7$\n7\xF2@77\xB77\xF2\xC0C7<7\xF2\xFD\0$\xF2\xA2\x95 7@\xC0 G H\xF2\xA07\xF2@77\xF27\x077@7\x807\xA07D77\x99\xF2L\xC3@7 \xD6 7\xF2\xE0 7\xF207\x80y6J-\xE6	\v 7\xF2\0 7\xD27P777\v777\v7777777\xF2$7e77`7\xF2` 7\xF2\xA1\x07\x07:+++\x837`7\f7#sN<7\xF2(\v\xE0r\xB4M\xD6 7\fM\f\n 7\xF2` 7!7\xDE\x8DP 76!\xC0@7E\xF2\xA83\xF2\07\xF2\07\xC07\x8D\xE9\x8D\x8B\x90\x8D\x90\x8B\xE9\x8D\x90\xE9\x8C\x90\x8B\x99\x8D\xE9\x8D\xE9\x8B\x8D\x8C\f7D7\xF2\xD07\x90 7\xF2  7jh37s\v7q\x94ww\xF2h7&p 7\xF2@\xF2\07@ 7\xBE7\b7\b\v\xF2h\x94\x92\x94\x8E\x94\x92\x94\x92\x94\x8E\x92\n\x94\xF2\xA0 7\xF2Ey	y\b\x93s\x95(\b\x97\x07y\b\x97\x95\x93\x95y:e0\x94\"\x90\n\x99\x92\x94\x8E\x94\xA17\f7\xF2\xC0\b9\xD1|||7T\x88yyyy7\xB6\f777\x0777\x8B77	77777\n7\b777777\b77\f7777\v77777\b77\xF27\x9C\x9C\b\b\bG\xF2\x80=\xF2\07 \x91@ e!7\b\v\xD0 7 \f7\xF2\x937\xA7777\b7f7MB7 \x8077P7\xF2\0@7*%\v6>\x81\xF2X\v\f77@7:E \v 377\x077\b7\x077\b\b7\n7  7@7\f\na(7!\v\xF2$ 7\xF2\xF2\v4\x07\b\v07\bM\b\b\n\b)\v\v7\xF20 7@K \v\xF2\"Ns 7  7 @7\xF2\0\"@\x80@\xF2\0@\x80@\xF2@,\xF2\0\b7\x85 \xF2/7777<\x07\n\xF2AyuJNN\b7\x077 7 n\f7\xF2Fy\b\x07\fP\x807\xF27J\x8D\b747\xF2Y7\xF2\xE4\xF2\0y\xF2\0\xF2\0\b7\xF2\0\b\xF2\07\xF2R8\xF2\xAE(\n\x07\x07\f	\x07\xF2y%\xF2\xA6>\xF2\x807\xF2\0	\xF2\07\xF2\0\x807  7/7\xF2p\f\xC2\x90\xC2\xC2\xC2\xC2\xF2\xB8b\x80\xF2\0@\x80@\xF2\xC1\x07\x07\f	\x07\x07\v\x07\x07\v\x077\x07\n\n	\xF2\xC0g7p 77\xC0 7 @7\xF2Y\xF2ly\xF2\x98 7\xC007\xEC 7\xA07@7\xE0 7\xA2\x907+7\r>7P7\xF2\xA0 \xB87\xF2\xF47\xF2l\n\x94\x8E\x94\x92\x8B\x94\x92\x94\xF2 @7\xD9\n \xE0e` 7\xF2\x80 7\xF2\xF0\bt\v\xF2\x8E\\7\n7M\xF2\07\xF2\xF2 @7\x984\f70y\fyFN\xF2\x80y\x80777\x0777	77\x94\x92\x94\x95\x8E\x94\x92\x8E \x94\x8E\x92\x8B\x80\v\f!\n!!\n!	!\bt\vt)\x90\xA07 @7\xF2\x80@7\xF2@P\xF2\0\b7\xF2'  X\b\xF2\xF5y\xF2j 7 7\xF2\xC0\x1B{\xF2\x9F-\x07\v\v78\vNM\x07-\btt	\b\f8\x07\f\x07N-\b\x07	M\b-!\n\x07\n\n\v\x07\n\bMt#7tt\b\n\x07\v73\xF2\xD07\x07\by\xF2\v\x97y\b\xEB\be \x97\x97	e\x95Me\x07e\x07e\x07e'e\xF2@}\xA0 \v\xF2}_y\xF2\x9By\xF2f\x87@7\xF2@\b\xF2\07\xF2\0 \xF2 7\x80 7\b\x91\b70 7\xF2\xC0\xF2\07\xF2\xCBD\f	\v\x07\xF2i\xF2\xF4\07y\xF2]8t\xF2\xE8\b7+7\b707\b77(\b\xAB7\b77,\b7\x8BD\b7P\x07\b7t\b77\b7\f77\x90\b7\xD6.74\b{@\b7y7\f7#\r\x07e f\xAB7<\b7\f7D\b77\x92\b\x8F7\x8B%\b\x8F\b7$7\f7\x9D7\vx77y2\b\b71 \b7\v@7\by7\b7(\f`7\n47T7$\b7$$7<7 \b\x92\n\b7H\b777$y77\b \b2\xF2V\f''''\f\r\n\f\x07\bh 70\xF2\0@7\xF2\0F\xF2\07\x8F#p 7\xF2m\xF2 7777\x8A 7\xF2^\x87x\xF2\07\xF2@@y  7\xC0 7\"\xF2=\xF2\07\x8D7P8\xF21A\x07\v6 7P7g7\xB2 \x8F\xF2\xB0\x83777h707\xF2h\xF2@ 7& 7\xF2\x077\xF2\xFA\xF2\0\b7P\xC2\xC2\xC2\xC2\xC2\xC2p\xC2\xC2\v\xC2\xF2(g\xD6@7\x805 7\x8077\xA0@7@\x807\xF2\x804\xF2\0\b7\xF2\xF0\0y\xF2-7#7>	77777\n7777777777777H\x807 77\x0777\x8FP 7 \x8D\x8B\x8C\x8B\xE9\x8C\x8DD\x8D\x90\x8Dy` 7\xF2\x927\xF2\xAB\x90\x07	\x07	\x07\x07\xF2\xF3\x07\xF2M\xF2\0\xF2\0\xF2\x80\x80H\xF2\0\xF2\0X\xF2\0F\x80`\xF2\0\xF2\0$$+:+\n\x80Kp($T$\x80W\x80>\x80$\x80\x80$\x80\xF2\0$\x80K\x80P\x80\x80$\x80\x80O\x80\x80$\x80\x80U\x805\b5@5\b5\x82AXA\"\xF2\0\x1B\xF2\0$\xF2\05\xF2\0!\xF2\0 r @\xF2\0\xF2\0\x80F\x80\xF2\0\x80\x80$7\f\x80c\x80\x80\x80\x1B\x80L\x804,\xC0,,,k\xC6,,,\b \x804\x80H\b\b4\b\b\b'\b\b\b\b\b!\b\b\b$\b\b$\b\b\b#\b\b\b\b\b!\x07,$\b$>V\b\b$\b\b$\b\b\b$\bWGG\b\bB\b$\b\b\buF(h\b\b\b#\b\b$\b\b\b$\b\b$\bc\bC\b\b\bB\b$\b\b\b\b\b\b\b!\b\b\b\b'$\b)\b\b\b[\b\b\bU$\b#\bI\x07\b\b\bP\b\b\b\b\b$\b5\b$\b\b$\b\b\b\b#\b\b\b\b@4@@4@@4@K	4444	4G		@[@4@ 4 @[@I@#@$@\x80\x80+++!+K\b+\bQ\n+^\bK+\x07:++++\b+\bK++MK+	\f+!+ K\b\bQ\xF2$$$$+$?5\v$T\x07$$$L$5V5:D$7\x07\b55?4#5\b\b8'+\xF2\0\xF2\04\x80U'!'!\x07'!'!	'\b\bI\bF\b5\b\b\b$\b\b$\b+\b$\b\b$\b\b\b5\b\b$\b\b\b5$\b\b\b$'$$c$''\b$'$@@ 55@@@@:@@I:\b::::::@F@0$,$@E\b$\b '!'!'\b!\b$	\b #  @# L  C > 5	 $  +  $BIPI\xC6PIcII\bc  $ W@$\b\b\xA8\b$'$\b\b\b\b]\b\b\b$\b\b!\b\b\b$\b\b'\b\b\b\b\b/\b\b$\bFKF\b4\b'\b\xF2\0\b@@K\x07\n\n\n\n\n4@@U8'\b\x82@$@!\x80$@@$@!\x80@@@$@@$@5$\n$$\n$$@'@!@F@)@@W\x80)\b\b\n!4\xF2\0\xF2\085$\xD25$5 $\xF2\xA05 $\xF2\08\xF2\0	\xC48<\xF2\08\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0;	!;\xF2\xF4\0! >\xE0;\xB2\x86 $F\b@$774]$B$\b$  [)) I F $  $  \xA2 $  $ 5@   '@$## \n\f\b F\xF2\0\b@$ ! F($\b\bF\b$++\b+  $ ??  @$  $\b\b\b ) ' W  $ A ]   : P  $ ! @$  F 4  $   K ;  K >I  ! 4\b$K $8 [ $ [  [\b  5.$$$$$$'B!FF $!?>\bI $$>\fI $DC$)\xA1($UH$JJ $!)$!$5$Q\xA8$4$!*B$#$ $K \bR&\xAERSP$$'4$\b\b$(!5 F\b\bDU?$$\b\b$\bU\b$\b5\bA$\bD\xF2\0\xF2\0\xF2\0;\xF2\0\xF2(\xF2\xD7\xF2\0\xF2\xF6\0e\xF2	\xF2\0\b$\b\b\b$\b\b$?\b$\b)5\x1B5h5\b$$\bU\b\b\b\b\b\b$\b\b\b$\b)\b?\b\b^$\b\b\b@5\x80$@@@\x805@@'\x805@@?@[>!\">\x80$@ @@@@U@5\b$\b,\b$\b\b\b\b\b+\b\b$\b\b\b$\b\b\b\b+$+!\b\b5$I5I!\b$\b$\bIK)\b$7\xF2\0\xF2!!\xDE\xF2\0$\xF2\0K\bX\b\b$\b\b!\b\n\b$\b\bCB$\b\b4X4\bP\b$\b\b\b\b$\b#\bV\b_\b\b$\bP\b\b\b$\b\b\b\b\b\b\b\bA\b$\b$\b\b\b\b\b\b!\b\xF2\0\xF2\0\xF2\0\n\xF2\0\bI\xF2\0!\xF2\0\xF2\0$\xF2\0!\xF2\04\xF2\0>\xF2\0$\xF2\0\xF2\0\x1B\xF2\0\xF2\0h\xF2\04\xF2\0\xF2\0)\xF2\0F\xF2\0\xF2\0F\xF2\0+\xF2\0A\xF2\09\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0$!)\x1B\x1B\x1B\b\x1B! $\nP\v\xA7$ 45$\bQ/U $B K=FH?$L!OK$$K5TQ$#P\n$5_5$\xF2\0w4P\x074\x80\x80\x80\x80 \x804\x80)\x80\x80\x80$\x80H\x80\x80\x80;@G@#\x80@@@$#$\b\b\b$\b@5 b\b\b$<@ I+7v\v75777 \f\n\x07@$@F@)@$@C\x80$@@$B $@@A@,!\r!!!!! \x074	4\n4\xA7\"40N)#$\b$@@@ E\xF2\b\b      5@ $ W  )	$5$$5\f$    4 K   > 5@h  \xA2 O  @$       \b! $ X K I 4\b  $ I8\b  G K $   5  444444 h  $\xF2\0 #\xF2\0@\xF2\0@\xF2\0\xF2\0\xF2\0\xF2\0\b\b$\b\bI\b\b\bc\b\b\b\b\b$\b\b4\bD\b(\b#\b$\b\b\b\fM8$\b$\b\b5\b$\b!\b\b$\b\b\b\b$\bX\bC\b\b$\b\b\b\b\b\b'\b\b!\b#\b\b\b\b\b$\b!\b$\bC\xF2\04\xF2\0U\xF2\0!\xF2\0\x1B\xF2\0$IDD	D	DD\x1BD DD\bD\x07D0D\xF2\0\x1B\xF2\05+5+5+55	$545U\b!\b$\xF2$\xF2\0+\xF2\0\xF2\0+\x80$\xF2\0)\x80\x80)\x80$\x80\x80#44544\xA74 \x805\x80\x80X\x80$\x80X\x80K\x80\xF2\0\x1B 4  > $  IK=K  \xEC\v$$$5&\b$8,9$\bB  I $B4 $ ' * 4 $VV   $  >  5 $\x80!\x80$2\n*$B$BL$\xF2\0!F\b)\bF\bF\b\x80$5$ $\n\x1B$\xA2:B$,==\f $X'7\v!$O[$B4!\r$B$I$[5!!$B\b$5#\v$K\b\xA2[$\xF2\0\xF2\0\x80@\xF2@\xF2\0$\xF2\0\x1B\xF2\0 \bF\b\b!\b$\b^\b\bF\b\b\bc\x07U\bF\b\b$$\b#\b\b\xA8\b\b/\b\b\b:\b\b\b\b\b$\b#\b\b\bD\b\b\b\b\b\bV\b\b$\b5)\b\b\b\b$\b\b\b\b\b$'\bL\b!\x80$@F@)@@$@@*7$\vD@$ \b\b\bK\b\b\b$@@$@U@K@\xF2\0\b8\xF2\0\b\xF2\0@\xF2\0\bd<d,dd\xCF\xCF\xF2# *\b *d!\b*\b*\xF2\xB0qd\x1Bdddd\xF2\xE5P\b\xF2\0\b\xF2\0\xF2\0\b\xF2@@\xF2\xC0@\xF2\x80\xF2\0\xF2\0\xF2\0\xF2\0'$)5$,$H\b\vB\b$ [ [!8!^  B$5\xDB$5$\b$$'K\vYY?\x07!\b!\n\xA7$$\x07	\xAD\n\f!!$ $0$ ! $\x07Q  $'$d\r!!> 5$\b\bO8!0$U 7H HK $'$$!$Y 4\x86$] $5$! $ $!$\v\xE7\b(F 8 U ' K\b\b $'$ 6\x07\x07\x07)\x07)$t$$ $$!9$  $6\v66}6\v65C!	$!)\xA9X$PH! 5D $ $!4$:$?P!$$[;!\xA4\xA4 $ 4U$@  >\b P '$A\xC2\vA $$  $5'P \n! C\b$! $\n!0$\b(4((\n!4\b5  \vG\x1BG)\fH!$$$!\x07 +\r/A ! \"$$$A[&.S\x86u\xB1u&\xC9$ ! ' L$ \b\b>\n $!P$$$$$>$$>$$ ,$D$*$\f5$$ D 5$\x1B!!'!!!0$\fG ,$\b!!$C\bBG\v$5\n$$5H$# UA:$v\xA5c!c:&4$ ) ' LW\xF28+:\xC4+\xF2\0)\xF2\0\xF2\0\xF2\0\xF2\0\x1B\xF2\0\xF2\0\xF2\xC0 $ \xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\xAEA\xF2\x81`\xAC:\xF2]\xF2\f\xF2\xC9A\xB17\x85\xF2U\xF2\0\b\xF2!#\n\b#\b!\xF2\0!\xF2\0\xF2\0 \x80\x80 \xF2\0\xF2\0\xF2\08\xF2\0\xF2\0h\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0\xF2\xF1\0K\x8DK\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x80@,\b\b\bI\b\b'\x80@ I@K  \x80K\x80? \xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0(\xF2\0\xF2\0\xF2\08,a\v\f#07\b	,7 \xC9\xCD\xBF+\x86F$/\x07	\x80\x80>\x80\x80>\x80$\x80\x80?\x80\x80\x80\x80$\v\v\v\vP@@\x80\x80!!!'!!!I$I(!!!I!I!I $F\v$$G7$!$\bU \x86$$B!!!!B\b\b\x07\x07Y\b\bLC CK'\nA'A0$5\f$[@B $I $ \b\f$57UG$ !) 8!\b$0:)\v5$5$5$ \x1BH!$\xC9\f$D> $,8 ' $W$$ $0u\x9D\x86u\x86tuuu0u$ 'uV$$ '!$'Y!'B\xC9cKV$$;$\x07B\b$\bB) $\b\b5 \x8A> $?8 $K $A #$0$   !!$$) $ !!5 $4\r K;b$\f##5$$H $ >!\b!$\xBC5$ $,$ >@@)@@@@\xC0$@\x1B \x1B@@@@$@@@@G@$@8@$@@@@#@@@@I@\n \x80#\x80!\x80$\x80\x806\x80\x80\x80\x80K\x80+\x80$\x80\x80\x80\x80V\x80/\b:'$K(\v	$!)$IC$Q \b5$\x075$B)'!'!\v'WUW;UX\xA2[BU +0$ \xA9 $!'$\x07 !] ,$ ?$Z$' 5GFQ\x0766\b\b#!D?\b??$L=$?$ \xB3#F5+')$\b)'$5 $@$;t+$ $F$5\bU\b$$?$$!	=P6=!\xA9C5?  \b\b&$ $5$5$\b\bD0!$ ^$$8$ K* $$$\xA2I0666 $9@K $c$50$ #A(\v	'  K\b\bKK\xF2\0\xF2\x82*	\xA3\x07\v\bf\b\b*\n\xF2\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0 \b5&!e&aPP\xF2\0!\f$\f$AB^]$  +A$$!$/$= '?K$\n$5!\b\bb $#'\x07# K\f\b	B$c\xB8\f \x1B\v!!!K!\x07,,,\b\bA  [ !\x07)\v[ $\r !  $!)`HH>) $=$C5$@\xF2\0\xF2\0\xF2\0 \x80\x80)\f+ $\b+Y+A $$\f$@$K48$5A 5@\b(5\bK\b8$\b>\b$\b5$5@$\b5 $\xF2\0\xF2\0\x80\x80\x80\x80\x80\x80!#\b!M!7\v		\n\x80\x80\x80!8$$\b\bB!!:\x80\x80@@\x80'\xF2\0$\xF2\0@+:+:\xF2\xAA+\xF2\0)\xF2\0\xF2\0\xE0\x1B!\xF2\0h!^\xF2\0\xF2\0\xF2\0\xF2\0\x8A\xF2\0 \xF2\0\xF2\0$\xB9+F+\xF2\0'\xF2\0>u\x86uku.\b&\x07ukt\xB9.8888u\xC3.$u\xAC\x07uS%u\bu	88 $$$$!$$$$\n	\x07!$\xF2\0\xF2\0^\xE2!\x80\x80'\x07\r\f\x80\x80\x80$\x80B\xF2\0#!M0!!'\xC0!\xF2\0\xF2\08\xF2\0\xF2\0\xF2\0\xF2\0$\xF2\0\xF2\0!\xF2\0\bgfgfgf\f\xD7\xD7\b\xD7ffgfgfgfgfgff\fffdd\bd\xF2p*x*\xF2\0\xF2\xD8\xF2'.\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0+\xF2\08\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0!>!@@@$%\x807$7$$,-$OK@@@+!T!@@K@@!8O\b@@@4@u@! ! \b4\n`G@8@E@@4\b @'\xF2\0\xF2\0@$ V Z\bP4$   \xA5	  @   $\fG8GDUDU@$ b  $\b B   ! !(8('$ @$ !Ohh\vh  G ' Y $# !  $ U54[5!! :$\f$ F '4H444\xA7\r4   4 A $  A\xF2\0\b\x80\x80'77=777S\x806@'@\x80\x80?\x80)\x80;\xF2\0\x80'\x80\x80\x80\x80I@@@!@@+@4@$OP!O@$\x077' Ky''\r\x07@@@@\x80@$@I@$@@'@)@@@@$@@@@@   $   ) 5      ! \b\b\b #\r44 $    P    @$ 4 ? F  $  V 9@   W    $  $AA ) #,\v\n\v\n\n   &  \xCB $ #  $\xF2 \xF2\0 \xF2\0\xF2\0\xF2\0\xF2\0\xF2\xF4\0$B\v$ \b8EE\b\b888\bE!	\bE88\xF2\0	{\x07-\xF2\08\xF2\0F\xF2\xC0\x07\xF28\xF2\0\xF2\0T\xF2\0$  @@@K\xF2\0'\xF2\0!\xF2\0\b\x1B W \b\b  @ > 5 $ ! ;  Q L    $ @$      '  $ ! $ !   ' F  \x07	   !IPIPIP=$I=IP!PI\xC6IPI     $      $\v \xEC/= '\x80$\x80B\x80\x806\x80\x80$\x80\x80'\x80\x80$\x80E\x07\x9DF\n\x9D\bF(\x07H=(h(\x9Da(a(\x9D(\x9D(((F{\x86k1uk	(	\xC8\xB3\x8B\x1B\"\b0\x805\x80@@$@+@U@@$@!@c@@@+8\r\b\x07\v@@C@@@*@@@E@\x80@!\fW;W[UX\nU\b;\b[\bXWU@0\b\b@@@@@'\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xA4V!YV\xF2\0#\xC09\xF2\0 \xF2\0 \xF2\0 \xF2\0\xF2\0#\xF2\0  $   h  ! $ @$ @`$\xF2\0\xF2\0\xF2\0\xF2\0\b\xF2\0\b\x80h\x80\b$\b++\b4\x1B\b\b4\b\b\b\b\b$\b\x80\x80F9\x80,\x80>\x80'\x80\x80\x80F\x80'\x80$\x80\x80+\xF2\0\xF2\0\xF2\0(\xF2\0\xF2\0\x80@ \b@\xC0\xF2\0K\xF2		\n\b\bp\b\xF2\xF8\xF2\0\xF2\0\xF2\08\xF2\0;\xF2\0 \v\v R\b\xF2\0\xF2\0\b(\x1B(\b\b$\b\b\bL\b\b\b6\b$\b\b\b>#\b\b\b\b\b\b\b\nB5\b$\b!\b\b\b\b\b$\b\b\n\b5\b\b\b\b\b\b)\b\b\b\b\b\b\x9C\b\b$\b\b\x07\bZ\b\b\b\b$@@@@/@;@$@\xF2\xFF\0!A\r@\x80\b!\b$\b4\b5\b\b\b'\b\b\b\b5\b\b\b\b\b$ \x07\b5\b\b\b5\b\bH\b\bu\b\b\xAE\b$\b\b$\b'$:\b\b'\b4$\b\b4\b$\b\b\b4\b\b$\b5\b\b'\b\b5\b4@@@ @!'!!@@	'!6'@@$\x80' @@K<\x1B<$\b<\x1B77@@4@@'$\xA80$@@@$@@'@!KO5#u\v$\x8B\b$,,	\b\b\n@9\xF2\0\xF2\xF7\0\b\xF2\0\xF2\0\xF2\0\xF2\0 ! ?  $   +@$ @$    @G@@A@!\b\v@@@$@R\r@5@I@$@P\x97=$,!$$#=$\xA8\x86@!4\b@@V@@@@ @!\f\x1B @$@@@@ ?\x80;`I\x80; >`! ;!I?,!;>(!B.!;\x80I ? !@; ?`;\b!\b;\xA0!\b;I!@I !I\f!I@;\xF2 ! ;\xC0!\x80;\x80! ;!>~!\b;\xC8!\x80;!  ! I?!?0!?I! I@!@I ;`!@I(I@!@I\xE0! I`;`!@?\xF2\0d\xEAd\xF2\0	\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\x1B\xF2\0\xF2\0\xF2\0 '  !   @$   ,  $4+\x07 ^  !    : 5 $  \b $  !$ @$   $ @$@   @ $  $ ,<$ 4PP4 $  !  ! >     \xF2\0\xF2\0!\x804\x80777$B$777\b\n77887u\x86777\b\n\x80$\x80\xF2\0\v\n4\b\x07\xF2\0\xF2\0!\xF2\0$\xF2\0\x1B\xF2\0\xF2\0$\xF2\0\xF2\0$\x80\x80 \x80>\x80!   $\x80$\b\b,\b\b!\b$\b\b>\b\b\f\x80\x80E\xCA\x1B\x80'+p\x80$\x80\x80\xF2\0\b!\xF2,)46)+\n)+()4)+B)+\r)\b4 )+)+)4\xF2\xB5)\xF2\0\xF2\0\xF2\0-\x86(\"\x86H\b\x86P\x86\x07\xF2\0\n\b`=)I?^I\b>0I>\fI> I A   $\n,   $!\v\n\v #    ! $ @* $ `     !@    D 	'!' \x07 W )  $  5$) 4 $ 4 U  $  $ F  $  F !    \xF2\0\b\xF2\0I\n\xEF\xF2\0'\xF2\0\xF2\06\x07\n1\x07$\v\b >\x07\b>$4  0\x07\b\b$\b\b\b\x07OW\b\b$(\b	@4\x80hW[W[W+WX[W4W\x80\x80$\x80\x80\x804\x80#\x80L\xA4\x80\x80I\x80A$5$\n$\v$5$\x07$@K\xF2\0\xF2\0?@#@$@ $ @?@$@W\x80@\\\x07@$#\b$#$$$$$$@@@4@$@I@!@@\xF2\0\b\xF2\0\b\xF2\0\xF2\0\xF2\0\b\xF2\0\xF2\0 \xF2\0\xF2\08\xF2\0\b\xF2\0\xF2\08\xF2\f\f!!5:+\r\bA	)\f7++%+\n+y+\xF2\0\xF2\0\b\xF2\0@\xF2\0\b\x87\n\x8Cb@$4c$\xF2\0\xF2\0\xF2\0$    6  @\x1B\xF2\0)\xAC	\x07	\xF2\0\b\xF2\0!\xF2\0\xF2\0)\xF2\0\xF2\08\xF2\0'\x80\x80+\x806!)A40+:'$5\x80`F\bLF\x80\x80)\x80\x80$\x80>\x80\x804*++++	+ \x80'@I@'@@B@K@\x80\b$\bTE@@4@$@!@+@@@$@@@! !@A@@>@\b\bh\b\b!\b;\b\x07\x07\b\b!\b\b\b\b \b^\b\b\b\b_\b+++++\n+#++A+1@\xF2\0'@4$$# \x87|8;*\b$B $@@@$@@'@\x1B \xB1@\xC0\xB8\xB3\xAE\"\xC4\xBC\xE5R\xE4\xB6\xBE\xBF\xC7\xE6\xB3\xAC\x89,\xB0\xB5\xBD\xB2u\xBB\xC1\f@$@H@@L@W\xF2\0\b@!@\b#\f#:!\v$@@+@K@\xA8$?#$\x07\b+>$>$?$>0W;  ,  \v+@!@@4@!\b\b\f@@@$@@@@@4@@@@K\x80$@>\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0$\xF2\0\xF2\0'\x80\x80!!	\f		$$\b\f\b\x80\x80$\x80\x800$@@@$@#@'@B@?@!@X@!@$ $=$\b \b>\b\r$#$\b\b\b\bY\b\b$\b  \xF2\0\xF2\xDF\v\xF2 \xF2\08\xF2\0)\xF2\0\xF2\0\xF2\0\x1B\xF2\0'\xF2\0\xF2\0      \b  $    ? ! $        $  ) 5\b \f \f$$\b$$ 4  $  $  $I:$?B@ [  $\b\n\b  $  , @$ ; \xA2 [ \xA4  ,B44444 @$ ####\xF2\0#\n# $ P $  !   ] $  E $  $  $ ; $ E  $ 5 C #&(8\b' ( > ` $$? $   V $      C $ B @!$#((\b d 4 C\b\b$\b\b\b\b$\b\b4\b!\b\b\b$\b\b\b\b)\v\b#\b\v&\x07\b#\b$\b\b\b\b\b\bH\b!!\b$\b\b\b\b\b\b\b\b\b\b\b\xAC+,\xF2\x1B+\xF26+\xF2\0\x84zt\b\x80F\x804\x808\x80'\x80\x80Q@ GG\x80\x80K\x80'\x80\x80\x80A\xF2\0\xF2\0 \xF2\0$\xF2\0\x07\xF2\0\xF2\0#?#?#?#	?#?#??#+\"?#?\x80#\xF2\0T\xF2\0\xF2\0'\b\b\b\b[\b\b$\b\b\b>\b\b$\b#\b\bL\bQ\b\b\b$+$@\b\b+++\b\b\b$\b\b5\b\b\bB$\b)\b#\b\bAK$:\b`\b\b\b8\b\b\b\f\b\b*\b$\b\b\b\xF2fA\x99\xF2\0\xF2\0\xF2\0$\xF2\0\b$!	 E H!H@\b^\bFE\xF2\0K\xF2\0+4\x1B4\bD4 `4@'\x80!\xF2@@\f @I>I	\b\x07\xF2\0@$@@$@@\f$>$ B @@!@F@!'=?''\b=@!@@F%@F@@4@?d@!@V@K@$@5@@\x80@\xF2\0\xF2\0$ \xA7$$PU$$$@?'Q $vv\x07v@\x80+++}++\v+\b+\x1B+_+I+K+K+K++++++K+_+_+\b+\b:\b+_++\bK+++++=\b,6(\b\xF2\xF0\0I\x07\fI\xF2\0',\b\b+!F\v`$#!$'\bI:	\n7!W#P$$=\bK$'\b\b;5\b4$C['5	$c\v#'$4$$8,\x1B8D\v\xF2\0\xF2\x80\x80A\x80'54\b44\n444\b\v$4\x80\x80\x80\x80\x80V\x80\x80\xF2\0\n\b U\b\b\xA0\x805\xF2\0\b!    $ I ; H @ $  $  @$  $  > ?\b ! $$[)  @$  $  !\bH\b\b $@ $ &\x07 F #a## A  C ) 5\b\n\f  ! \nh\nhh$\f$\f$\f  4  K \xF2\0\b \xF2\0A\xF2\0$\xF2\08\xF2\0\xF2\0\xF2\0?G>I>I		>I>>>>>I>I>IV>\v8I>I+44\b5\b$\xF2\0 \xF2\0;\xF2\0+\xF2\09\xF2\0I\xF2\xFE\0\xF2\0\b\xF2\0\xF2\0\xF2\0'\xF2\0F\xF2\0\xF2\0\xF2\0K\x80\x80\x80K\x80c\x80Wt\b\x80\x80)\x80F\x80']W;!W\x80@$\b$45$$)\v@$@@9@` > \xF2 \xF2\0\xF2\0(\xF2\0I\xF2\0)\xF2\0$\xF2\0++7+_+#4+:+K!_+\x1B7 K\b\x1B+++\b!\bE\b+\n+:+:\b!+++++K+++_+++\b+\bK\b\b:+\b:\b+\f+\b!\b+K++++:+:\v+\x1B+#+#+\x1B+:\x07+++$+++7\x1B+\b+#K++ +\b+)+#+74+$!++#)\x07+++K\b:++\b!++#++\bK\b+0:KE+\n+\b+B+!++++:+\x07+K+I!\v++\b\bBK\b:+K\n+#+B\bK+\f+\x80*\x80#\n\b\b K )    $  $ ? $ @$ A $  5 \b=\b\b\bF\b'\b\b\b\b\b\xF2\0\xF2\0'\xF2\x1BM\\\n\xF2r\xF2\xF9+\xF2\x86+\xF2_+ \xF2\0@\xF2\xD7.\xF2(\xF2\0 \xF2\0\xF2\0\xF2\0\xF2\08\xF2\0\xF2\0$ B@F\x805\xF2\0\xF2\0\b\xF2\0\xF2\0'\x80\x80!\x80)\x804?\x1B?\b?1?i\x07\x07@ > \x80!\x80\x80' 77)\x80F\x80\x80\x80 \x80$\xF2\0\xF2\0\xF2\0\xF2\0K\xF2\0'\xF2\0F\xE9>I>\xF2\0\xF2\0@@4@U@@$\b\b@$@@@@4@$@\n\n444	44\f44 W ? $\n4844454\x1B44+494\bF@44L444\xA7\v4A48\b4\b 4F\b7454\bF4\xF2\0\x80\xF2\x80\xF2\04\xF2\0\xF2\0@\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0 \xF2\0A\xF2\0\xF2\0\xF2\0(\xF2\0\x1B\xF2\0\xF2\0\b\xF2\0\b\x80\xF2\0$\x80\x80>\x80$\x80!\x804\x80$\x80G\x80)\x80$$\f\f\v\v\b\x80F\xF2\0\x86y\xF2\0\xF2\0\xF2\0\b$\bG\b$\bL\b\b$\b!\b\b\b\bh\b\bL\b\b'\b\b'\b\b$\b\bKK(\b\b'\b*\b\b\b\b\b\bV\nV\b$\b\b\b+\b$\b\bZ\b$\b\b!\b\b\bL\bU\b!\v(\x1BF(\b@ (\b\b\b$\b\b*\b\b5\b\b\b\b\bD\b\b\b$\b\b$\b\b$\b\v\bA\b\b\bI\b\b\b$\bI\b'\b\b\b$\b4\bB\b\b\b\b\b\x1B\b+!8@$@@$@,@@!@/@$@)@$\x80\b+8B4\x1B:4@@@$.Z_Z@5@A@@@$$$$'55$$55$I$5'!$\x074 4=4@@>@@B@I$[$$5$\b\rK \b\b\b\b4   \bKKK\x07K\rK :\b!\v##`$\nu   !`$ U  [ 	4$'\n$#\f#\f# $7:$5$$1$ K $ !    \nLE\bL ; 4	\n c $ C !    $\b\b   ^ , $ 4 ' \xA5 $\b :&\x86	&\x86  ! B $\xF2\0 \xF2\0 \xF2\0 ! $ 04+4\n4	!!!\x07!\b A F $   _  $ 5   $ Y  $   \xA6 !  !  $   	, F\x07\b  $ !  \xA9  X '@$ F O ! $  '  $  4!	!\f! $     )\xF2\0\b\xF2L \x80%P*\xF2\0\xF2\0\b\xF2\0'\xF2\0\xF2\xA1I\x07I\x07\x07PI\xF2\0\b\xF2\0\xF2\0!\xF2\0\x98!M!\bM*!!M!\xF2\0)\x90\f\xF2d$I$I$I$IK$KV55 > @5\xF2\0\b\xF2\0\xF2\0\x80\x80$\x80\x80'\x80V\x80\x80\x88\b\b\b\b\b\bV\b)\b\b\b\b$\b)$\b\b\b\b\b\b\b!\bB\b$\bQ\b$\b\b\b\b$\xF2\0\xF2\05\xF2\0\xF2\0 \xF2\0+\xF2\0\xF2\0 \xF2\0'\xF2\0?\x80\x1B\x80\xF2\0\xF2\0\x80W\x80$\x80L\x80$%\x86.&\xBC\xB3%\"\x1B\xB1\x07\xC0\x1B\xB8k\x86\x1B\b.\xE5\xE4\x1B\xB6\xAEk!%\x86S\xBEa\xAF#\b8888\f\x80H\x804($\bP$\x80Be,#\xF2\0$\x80!\x80;\x80,	2)@@@@\xA5@F@)@$@ #\v@C\x80@@@A@\f @$\x80F@ 44\x07'5D<5$#@5@ $$\f@@@$@\xC8I\b0I\xF2\0+!Y5\n:M	$\b$+,$\v8+#UP\vI$5$5\b$88G\b$$B$\xF2\0\xF2\0$!! !!i$!$\b\b8\b\b4$!\bx\f&\xF2\0I\xF2\0 #\xF2\0\xF2\0\xF2\0F\xF2\0\xF2\0\xF2\0\bg\xAB $  $   \r ; $ ' P V    + ;  ! $  > ' #\v$\v  5 @$ 0$B\f$ @$    \b5\f5  $  \b$\b$\b\b5+$\f$  @$\b+\b5\b\b$ #@$ U\x80$ \xF2\0\x804\x80\x80\x80 \x80'\x80\x80:\bB\b\b\b\b$\b\b\b\b$\b5\b\b*\b\b\b\b$\x80\x80\x07\x07\v\v(\r	P \b\b\b$+\b$\b\b\b\b\b$\b$\b\b\b\bX\b\b\b\x1B\b$\bL\b\bv!$\b \b$\b! K\b!++\b\b:\b\b!\b\bK\b#7:#\b:\b+\b:\b+++K+#++#+_\b\x1B\b+:\bK:++_K\b+8	+B+\b+\bO=\n+++K+B	+}+:\b!\b\b++\f++}B\bO+}+K++++U+\b+K+ K\b:++7\b+}+}+++\b: K+O}+I+#}++\b!\b:K+:\b+#+\b+:+\b!\bK++\b:\b+4+++\b:'+#++}+(K:+++_:77++K+I5+K\b#}+++}IK\n+K:+++++F\n+\v+B\b\b+K+\b+\bK\b+:+7+\b++K\b+++\f+:+B\n+K+K+7B\b+K+	\f+K+K\bQB+}\bQ+}:\n+7_\f++K:+\x07+++\fK\f+K\b!++K\b,K+KB+++K+\bK+8:\b\b+#+:#+:K+K+\x1B+\b	\x07+++B\b+\bK\b+K\bU\n+!++}K+K+0++:+:++\b:+\b:+I++\b\bU+#	++}\f++K++\b+++I++}+++B_++#+++K++}\r+K}}+#+++\bK:++/+\b+B\x07+++++:++KQK+#+}+K'+}+@:\b+O+\b!\f+K KA\bK\b,\b++U\f+++}#++'K+7K+B:K\b:+\bK:+_+\b:++K!++K+9_+_:\bK+K+BK+\b+:K+++K+B+#K+#++_++\x1B+#K#+K\b+\b:)\b+\bK\f+B:_\b+K\x1BK+++}+\bK\b!+\b!+B+\x1B++:+:\b\x1B\v+#_+}+}+\bK	+}+:\x1B+\b,\bK+K	+}+\v+'\v+\b\x1B+K+(\b!:\v#+	+\b+:+K+4}\b+K++K++#+\bK\x1B+KO\b+\bK+++\b+!+}\b!\b++\b!\b++B++}\f+K!(!(+K+\b++++U+\b\b\b+:\b+\bE\bK\b\b=\b+K+\b	+:+\x1B++++\v+#+7U+7\x1B+++K\bO++ + K\nII+\b!+\bK+7\x07+_+_+\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xB6\n\xCFn\xF2\0  @$ V  @\b   $ \x07 5 # '  4\b\b\b\b\b\b$\b\b\b$\b,\b\b\b\bB\b\b$\b^\b\b$\b\b\b\b\b\b$\b\bB\b$5$\bA\b\b\b\b\b$!\b#\b\b\b)@F@$@P@@$@ \xF2\0$@@U@>@@$@[\xF2\0$\xF2\0 \xF2\0I\xF2\0\xF2\0+\xF2\0\xF2\0\xF2\0)\xF2\0+\xF2\08\xF2\0\xF2\xF0W;\fW@@F@K@@!9 $\b\b#@@@@@[-@F8))@T@Q@L@)@@$@+@:	!7\vEC\xA4 \x80@!@@@$@\xF2\0 \xF2\0\x80!\x80V\xF2\0\x80\x805\x80$\x80\xF2\0;\x80K\x80+\x80'\xF2\0\x07\f\xF2\xF2\0$\xF2\0\xF2\0\xF2\0;\xF2\0A\xF2\0\xF2\0$\xF2\0\xF2\0$\xF2\0 \xF2\0 $  5    A $ 5 \f$\v$ \n\v  X   \xA1  )  \b\b4\b\b $ 5 :4 \n\r\f\bP   \xA2\b $  $ @$  b`$ ! F '1\x07 II  4 $  \n >@!$$$$$\xF2\0\xF2\0K\xF2\0\xF2\0K\x80\b\b$\b\b'\b\b#\b\b5++\b5\x80>\x80;\x1B\x07\vA!()!\b\x80h\x80\x80$ `\x80X\x80@@X ,#!!\b$\b\b$\b$\bCCC\b\b\b\v\b,\b\xA2\b\b\b$\b>\b\b8,$\b8;$B$\b8,$8$\xF2\05\xF2\0\x1B\xF2\09\xF2\0W\xF2\0\xF2\0 \xF2\04\xF2\0U\xF2\0\xF2\0B BQ@K?Q???\fQQ?Q@K\xF2\0$\x1B\x1B$?K> $$!!	!\x80\xF2\xF0\0$\bB\b$\x80)\xF2\0\xF2\0@C\xC0$@ \b\bW@@!@@@@@@K@$@?@!@'@@@@$@8@F@]@@1+*+A\f+ E@@$@\xF2\0\xF2\0\b\b>$Y $$$$$$N@\x07I;$ $\b\b/P@$'B $ $vv5)$h$ $@5@$@#@4@$@!@4@$\x80@>@$@@$@\b!\xF2\0\xF2\0f\xF2ff\xAB\xAB%\xAB\b\xAB\xD7\xD7\xD7\xD7\rg	gfg\xF2f0f\xF2\xB0\x1B\xF2\0A\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF21 * \v\v\v6\b+\b+\n\xF2\0	\xF2\0\xF2\0+\xF2\0\n\xF2\0\xF2\0@>@!\x80 I!!!!N!	!\f!\x07!!!\\!I\f!?\n!\b?0! >\b?!\bI!>S!\x07!I\b! I@! > I@;\x82!\\! ;@!\x80>@! > ! I!!\xC0;\xF2\0I\xF2\0!\x80I!?!;!$; I!\xF2I`> !\x80>\xF2\0IH!7>\xF2\xF4\0!@!\bI\b! Ip!@I\xA0!;\x07!\\(! \x80!\xF2\0\xF2\0\xF2\0\xF2\0F\xF2\0\xF2\0$\x80\x80\x80\x80O\x80$\x804\x80\x80$\x80c$$\b\x90$\x80W\xF2\0#\xF2\0 A\xF2\xE0\x07\xF2\0\xF2\0\xF2\0$\xF2\0?\xF2\0 \xF2\0!\xF2\0\xF2\0D\xF2\0\xF2\0(\xF2\0$\xF2\0\xF2\0)\xF2\0\xF2\0\xF2\0\xF2\0\b5\b!\b$\b\b'\b\b\b\b\b\b\b\b\xA6Y^o8 45$\b:B\x07$@$c >\xF2\0\x1B+54\v44\n44\n44 4K\x074K4G\x07K4\x07K4G44\x07KKK4KFK44\fK+KK4KK4\xF2\0#\xF2\0\xF2\0!\xF2\0\xF2\0K\xF2\0\b\b\bF\bh,h8\b\b$\b\b\b\b(\b\b\bh\b$\b#\bU\b5\b\b\b$\b\b$\bU\bh\b\b\b\n\b/\x07\b\b/$\bH\bIBI5\b\b$\b\b\b$\b\b$\b\b/$I\xF2\0)\x80>H$>5\b!\b\b\b$\b\b'\b\b = K*\b$H\b!\b$GG#I\b\b$H$\b\b$\b$$$\x80K$\b\nQ	$\x8D$#t\x8D$$@ K\b\b$	\v\v\b\b\b $\b\bK\b\b $\b\b\b\b$#G\b\x9D\b$\r\xF2\n\xF2\0\xF2\0\xF2\0\xF2\0)\xF2\0\xF2\0$+$ >$'5 \v!!\xF2\05\xF2\0\xF2\xF0\0\xF2\0A !`;\xE0! ?\xF2\x80!\x80I@;@?+\x1B$\b\v!4TW[:=\f$+\x1B!\x1B5\b!D!5$Q''$W:$]$ $ @\x80K\x1Bu\x1B	\n\x1B\v\n> \x07\v>8)$B$Q\x80\xF2\0\x80)\x80\x80\x1B\x80\x804\x80\x1B\x80h\x80\x80>=P(\b$!,$$;$#$5@$0$U8@O@)@$@@!@'@@5@$ ?\b\b@)@@$K0B@F0)\bU\b)@A@U484\n\b !@$@c<	\x07@'@U` 	$ #C\b(F $P\xF2\0\b'\xF2\0\xF2\0\b   K C   G$\f$ B@$ U K\b W $    $ +K##\x07 *   \xA4@U I    >   @ $#$J$PP$#$+$\n$G4#\b\b(\b!\b$\b\b\b\b$\b\b\b\b$\b\b5\b\b\b5\b$\bL\b\b\b\b$\b  >$\bK\x07$\b!\b\b\b_\b\b$\b)\b'\b\b,\b\b$@[@A!#$$$@$Q44 $=C#$!5$]\b$$$\b$5!\f5+$\f5\b$P\b5$5\b5X4\b$!7U+5$8\x1B>5\b5$\v$\b5$$45$5$$545$\b$5!KC$7$$'!!++5!5+5#5$$!55U5+h$8$h5$5$5 $> $!$5	$$'U$+5';$5$5+5+$,$4+$!U;+5$+55!+5F55+$$5\n$$#+W$\x1B!58$5U$+5+$$!5+!B55?5$/5$\b$/+554$@5$5)545$\b5$\n5>55\b5\bP45$$!$5$5$5!GP5$5$58$5$5'$8$$$\b55\b\b$5\f$5\b$$'$\b55+$W558)5$I(5$55$5$ #5W$GX#FB$8$$5$ >!!W$5F$/W54'#,$8$)45h!55$5$>++!$4 \x1B$W!)!8?$$$W$;$[$!$$55: 55F\v$\x1BK$5$UKBW$K5KA5$55/PTG;;5$;+)8$IHW$!$!8)#;;$^$>$58\x1B8+F\xA5#$$58W>4W+V$5W5$'$4$)$$WIII$I$$AAF5$#A5$W\x8B$5A+G+5$/$X$W4!+$5$5\x1B$\b\b5\x075A5$>555$+5+5+58#$!\b5$$5H55\xA85\b$55I$($>$$A\b5\b$!5$\b+$!C5\b$U5554\b5$5+Q5\b$B+5$5$	5\b$5$5$$$5\x8BW$5$$+\b$\b5'\b5$5$!5$8\b\b$$$\b5\b$\x9A5$F\b$5$5B5?$!$55$>\b$5$55$\x07\f5$!5$@\b$\f$\b$$B\f$\b$!\b5\f$\b57U$5>$I$55$55$5$\b$4$\f$/5$54	\b$@$\b$5$5$#=$]$!5[$\b $!$\f/$8$5$5$\b$$/$5$5$= \b$$5\b$,$5++$$$(I$++B$$I5$$K5$$IF4$++5-8!5\x1B+$5+5$5$5$$5$$B$;$5]$8$55$5U5$!$58$5+5$!$5+5+Y$$K$I5I+$\nC54585+55\x1B$85$5$!F?$V$5?W$$$)$A$\x1B545#+/!$8WU+5P5;W!58$U$+W$8$$58+C58$5F$:K$W$!+$:$$!5:5#Wh$:$+$8!+W5$v+\v$\v$$[!+4$5 $W+5';5/+\x1BW55$+5$:$$$$$$$$++8)5$$+$5$CW;5W4$W575+h\x1B#5KWKKW+5+5A5WA55A;$A7!$5W5!+KAE5WF+\b$55$\f5/$$!+$4$5$5$\b5!$D\b5$!+\b$4$B5A$4$\x1B$$\f5$$$5\b$\x1B$$$:\f$5\b$5$$4\b5\b$\b5\f$!\b5\b$4$:5$5$\b$4$I*P[$h!4UK45+W;h5+4+;$$(5$+$+>$+F$U+/+85$$@D$+E+A8$$@5#\x07$W$+G$+$5$+F$$55#$@!8+5$W$5!W!C5$$C$+!+I44$+?+;5)WK5+!#$5)+4$+F+$5@5+$$)?$B$\x1B++55 $+W;+$W5'+$>$$5$$W+$$$W5)K5K$'$$K$K58!:5$55=$F5F\x1B5]$W$#!B@$!#+55\b$B,5$$$\b5!$8;5\x07$<5$\f5\b$h5'$B$\b5$$:$5$\b$5$\b55\b$5$\b$\f55$\b$!B\b$$5$'B$54\b$c\b$4\b$$$5$!>$K!:5!+5!$:$+$W$)5!!$$)4$W+\x1B++$?W#54$:#5W!$ #$$$$55'7+A$#)+H+5I$5:$\v#W54$5+B\x1B:$hB5$+#$\x1B$G$\v$B8#++5+555584V$5D$5U$$+A$$$$5$K5$D$'$5$+5W5$$5'WW$+\v$\xA2$5#4>\x1B$/$$5)P$5$!5$=!+!$#$\xCF$5\xCF$+4\xCF!'$48$W\xCF$$v#?\x1B5G''5W+/$\b5#$\b5$5>Q#54$5$5$5\f$$E+\xA8\xA8U$/5\b!5$$\b$+$$#$5$$5$5$$5)$F\b$$A$\b5$\f$5'\b$\b$5\b$\v!5\b$5)\b$5$5$$+$!I8+)$$$G>$!+#W$!I5$+#$++$WK5$C+$Q5$:X+!55W\x1B$V$KI!W$+5/\x1B$$$VH5:$+!5$$W55$$+$\x1B)?5\x1B$#+\x1B\xA2$4 !8W*55$:\x1BI$W$$W!$5+$5\x1BAW'#K)c)5!5$A5H5$>F$$$3$$5$$>5'$$5+$5$$$$AK5h5U5$5$$5W$5$F?$5$$F5U5h/5'K$$55U\b54$\b555\b5\b\b5BA5$$5\f5$$55'KFK$$5$$$\f5#$#8$$5;$W'$;5$$$W\x1BW$+!5W+!585$;4$A$$5W55$!$<5$,\x1B$8'$55WW'+$$55$\x1B5$+55$+#+\vUG>W[$AW$5$5$W+$W+W$W$+5GAF5P5$!\xA1)5$$5W!5[;W$$?$C$;$$>5'5>$5$K$55$!+A5+$$55$G$5'I5$$$K5$$I$$5$'$5#5WK5$?$5$+$5'$W\v!U5,5+$B$+5$\b5K5'\b$5\b5W$I5$\b5$G$\f5\b$5\b$\b5F\f$5$$+5;$5X$5!!5$+5\b$[$[W)$$\xA7W$A$!$$5$5$!\b$$$B;$$C!$5$5$5$5$5D$K$/U;8W=$5#$@$F$F$$5W$!$$58$K+$ >\x1BW$:+$)\n$5$$8+$$5Q:!'$'$$5!$\bA$$K5C\b$#UK$+$+4B$$$$5$\b$I!$$:$+$5$8FK$++5$$8A#9\b$KB!$$W$)5$B$5$5$A$8+$U#+$+$+A+F#A#K$$$(5W$5$)$5$5!5$554'!$+B$#@5$+#$$$5$$*K5F$]5$$5E'4$I$$5$5K$ (A8$$$$$#!8#$#W$5$$>$!U	+F\x07!$$$#$$$$4$5+$h:$G$X5$$4++8W+$+$D+5+$H($5F5@!$>5I5U$5\b$\n5\n$+$$5!U5$5$5$$58$/5+$ $$+5+\x07$5\b\xA85\n$+5C5$$\n+!K$K$,$+PU$$5$$5$7$+'5$$#5++$$5U$4+$A$+Y$WU5W5$'$++$C5)U$4;\b$5!$K$\v#$$5$\b5+5'+5'5+$5F$5\x07W\b$5F$I$+++$>\b$$$\n$A\b5$$45555;$+$$\b5$\x1B54$$$!+\bU5$$$$$+$$$$$U5I$'B5+\xA1@+$5C?Q!+$+V$5\n\b$\xA8$+5A#$5$$W\f$$5$#$$+$5$5$8$(4+$;$B$\b$5$$'$5$$WC$4W$$$$!$5;??+$+$\bA\x1B++$A$5$\b$!5$$55$5$4$$5($K+5$!$5>:$$!!$+5?+5++$P+$+$5$5$F5F$W$5>+E$45!$$!+$!$>4|\x07!55\n5+W!5$$'5\b$5A!$5$$!$+$5$$#,$$5\b5+$58$KC5U5$:5$5$$+$+!	U$5$$K:$54$F$$$5$$5$$$+$54$\v4$+$$5$4$4$:+4K$$$$$45$&:$$+$5\b5$$$5W$B$5K$4'=;$+$+$5$D K5U$5+$+$+$!:$BW+G#CK$!8\x07+I$5I$45#\b++UB@$I$#CI$#$U$5WK!PI($P$5+$5$#$\n$\n5$5E++$$D$G$K++5!$$W$$$$8+:5o>!4 $$$K$,\v$$#;$>$55$$K\x1BH5\b5$H5 Q\f$K+5\b@:$A\b$$\b5\b5$+5  5$$<$$\n$\n$,$:?$$$#$AU$K K5$? 5 $@5$5$B$#5K5!5$$\b\v#$$#+$ ($\b5\b 5 $+4W>\x1BB\b+$5U5G5$K+\xA7+P\n7\v$54h\n$$ B\b$ 5\b$+++\b+8$5 W$$4<5\fF\b]K$>5$5.$\f$ $5$5\b$\b+$$\xF2\0@5\x07\b\f\b\b\b\b@ !K :+\x1B+\xF2\0K\xF2\0\xF2\0 \xF2!'\xF2\xE0!\x80$\x80[\x80W\x86$\b$@$5\b@$5@$5$5@c$\x07$5$ @$	$\n#,$$,	,	,#\n$,$!!:$Q$\x07$^ $\r\xF2\0$\b$\b#5\bK\b\b\b!\b\b$\b\b\b\b\b$\b\b!\b$\b\b,\b\b$\b\b\b\bU\b$C!\b\b\b!\b\b\b\b\b5\b\b\b\b\b\b\b/\b\b$K$\bF\b\b$\bV\b)\b_\b\b\b\b\b\xF2\0#\xF2\0B@F@@@@>@@$@B@@\xB0$\b(\b:@C\b\b\r\b@@A@@5@)@X@$@W \b$\b!\b\b@@$@@C@$@X + B@\xF2\0DAWWW$ 5U#$I\b$\b )!\r!\bKQKQKQ8$]?$I$P4#W$>$$$@)\xF2\x07\b\b, !'A#\x9C\xF2\0\b\xF2\0\b+\xF2\0\b\xF2\0(\xF2\0$\xF2\0\xF2\0\xF2\0\xF2\05#+B\bK+#+\bEK++_K+++#+++\xF2\x80:\xF2\0'<P)++7$D5\b$: #$$$5$\v>4+I\x07$)oe\\\x8A\v\v\b$(5#5	\f\b\bK=KW#\b,)7$$$\n5+$$$55$D5@\x07\xF2<\b\n\b\b\xA8\f(8\f\b!>8\b\b\vt\xBF<!N((\b( \b!+-\x1B+\b(!(&8!N\xF2\0$\xF2\0`d `d\xF2 \v\x80\xD7@\xCF\xF2@\xF2\0g\xF2\0\x1B\xF2\0\xF2\0\xF2\0\xF2\0\x80+@@A\xA0:\xF2`\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\0\b \n\v \b\bP\xF2\xE0\xF2\0\xF2\0\f\xF2\0,1	B\f$,$$\n\n,\n$@$$,$$,\vM,$	\n$$,$	\v$\n$,\v$\n,$,$$,$\n$\x80\xF2\0\b\xF2\0@ ) \x80\xF2  [ > $vv\b' $$\v$($ A $ * C $ [ $\b!\b^$ $ 5$$P4KQK ;  @$  $   !  W 5 U  ! $ A $ ) ]   A   @\b:: $K\b$K@$ \xF2\04\x80\x85$$$G6\x8B\bUK#@5\x80)\x80 ,,,,,\b,,\b\b,,,,,\x80H\x80\x80\x80$\x80*@$\b@$5$5$\bO$5$5\x80\x80!\xF2\0$\xF2\0 \xF2\0(\xF2\xA05 $\xF2@5\xF2\0$\xF2\0\xF2\0c\xF2\0U$$5\nK$Q $ $)$##)$5#$'\v\f\v& $!\x07@$ #\b'!$$'=$\b!\b\b\b\b$5\xA7\x95\b\b)\b$\b$\b\b\b$\b\b\b$\b\b\b$\b$\b\b$\b\bU\b\b4\b\b#\b\b\v),),\bI\b\b`H\b$\b\b\b\b\b$\b*\b\bD$\b\b\bU\b \b\b8#8\b=\b \b\b\b\b\b\b\b\b\b\b4$\b\b!\b$\b\b#\b\b!\b/\b\b$\b\b#\b\bL\b\b$\b\b\x07X4\bV\b\b\b$\b\b\b\b\b$\b$\b#\b5\b$\b*\bV\b\bB\b\xF2\0\xF2\0F^A\xA1\xF2\0$\xF2\0\xF2\0 \xF2\0W\xF2\0\xF2\0\xF2\0'\xF2\0\xF2\0 \xF2\0G\xF2\0K\xF2\0\xF2\0F+++!++#\b:\b\b:#+:#+5+#:\b:\x1B&++/+\b\b+:O\x07+\b+\b\b+++:+\x1B+K+:+U++K+++++\r++++\bK+#+#$+\b+8\n+++^++\x1B\b\bO\b+\b++#+(+++#I7+!\bI++45\b+\x07+\xA7\b+#\b+++++\b+\bK\b\b:\bK+\b!+?++K+++\xF2\0:0K:#+\f: K\b:+\f:+:+K@ ++#+O+PK:\bK:@+@K\b:+:+++\b:+\f:+\b:\n++\b++\f:K+\f:+++++\n+ \x80$\x80	f\xD7f\xD7fgf\xD7f\xD7\x07fgf\xD7\ffgfg\"f\xD7fg\x07fg\x80\x80+4#Z44\xF2\0$\x80Fc9c\x80@K@5\x80P\x805\xF2\x80\b\xF2};\xF2\x82;\xF2\0\b\x80f44\x80\x80$\x80\x80\x80#\x804\xF2\0\b\b5\b$\b\b$\b$@$\b8\b\b\b$\b\b\b$\b$\bB$#\b[$\b$\b\b]$$\x1B#!!$'\x07$$$c$\b$$@ ; @\bD\b\b\n$8$\b\xF2\0\b\xF2\0F5$5$5$]$G$5$5\b[$5$c$c5B5$5$55\b[\b55$5$5$5!$5$B$\b$5$5$5$\x075$5$c5@@5$5$]$c5$5$@5$5@\b$c;\b$c$@$5\b$$$\bB@]5$$c5$55$\b@5B5!5c$5$5$\x9A$5$5$5$@\f$5$c$5@5$5]5$@5@$@$5$5$55\xF2\08\b\b\b\b\b\b,$\b\b$\b\b\b\b$\b\x1B\b$\b\b\b\b+\b\bA\b\b'\b\b$4\b\b$\n\n $ 8P!054@@@@@$\v!#c($@C@>@F@$@@5  !$5$\b\b$\b$\v@@@$\b\b\b\b [)#\b$\b[ 5\b= 5@@@\x80$@#@!@@\n@$@4@5EAU#$Q$/BP$$$ $5P? $U$##\n\x1BC$\b_\b\b\b\b=\b\b\b\b#\b$\b\b\b$\b\b\b$\v4\x07\b_\b$\b/\b$\b\b#\b\b\bU\b\b!\bC\b$\b\b5\b$\b\b\b\b\b@\b\b\b\b\b$\b\b$4$\b\b\b\b$\bL$\b$\b\b\b\b\b\b$\b\b$$\b$\b\bF\b\b)+\b\b\b$\b\b_\b\b\b\bF\b$\b\b$\bc\b\b!\b$\b)\b#\b$\bK\b5\b\b\b\b\b'\b$\b\b\b\b\b+\b\bU\b\b$\b!\b$\b\b#\b$\bB\b\b\r$$\b\b\b$\bh\b$\b\b\bc\bF=\b'\b\b\b\b\b>\b*\b```\bZ\b\bB\b!\b\b\xF2\0@\xF2\03U #$\x07\x80\xF2\0H\xF2\0\xF2\0$\xF2\0Q\xF2\0)\xF2\0'A\b\b\bXK+\n\b+\x07\b\x07+K+\xF2\x80$444\f44444\n4\x074`4`4`4`4`4`E@$ b $\x805\x80)\xF2\x80$\x80h\x80\x80>\n\r\n\b@\x80$\xF2\0\b\xF2\0\xF2\0$\xF2\0\xF2\0C\xF2\0) $\x805$$$($ \b#! \f \b#! \r!\b ! !\v \bGc\bGG!! !\xF2\0O\xF2\0F$\xF2\xEE$\xF2\0+\xF2\0#\xF2\0(\xF2\0 \xF2\0\b\x1B@$@4P$4@ E @@#@$@M\n\v\b\b\v@K@@$@@$\v\b	@L@5@@\xC0$@F@@#@\x80$@#@@L\xF2\x8E\b?\xF2q\x07\xF2\0F>	UDU$X $5C\x07'!'!'!'$#$:KK K4>K#$#\bO$#O$$\xA2:\v$#>W\v$!,$\xF2\0\b\xF2\0\xF2\0\xF2\0\xF2\xF8\0\xF2\0#\b\b\b\b\b\b\b\b\bJ\b$\b\b\b\bAg\xCFd5$$\b$\bg\b$\b\b$$\b\b\b$H^HH\b\b$$4\b\bD\b5\b\b\bG\b	 \b)\b$\b\b,\b\b\b9\b\b$\b)\b\b\b\b5\b\b\b\b\b\x07!\b$\b\b\b\b\b \b$\b'\b ,\b\b\b$\b!\b\b\b\bU\b\b\bW\b!\b\b\b\b$8\b\b$\b\b\b\b\b$\b$\b$\b*\b$\b\b$\xF2\0h\v\x9F!5E5 \x1B @5\xF2\0 \xF2\0   !\v A  $ H$$ ! C`$    $  # H \b  $ : K 4$7G\v ! W>U\r>! $ @$  $ @ $  $ OB$B$$*h* \\$#\b$\b\bV\b\b\v\b\b\b\b\b!\b\b\b\b\b $\b\b\b\b\b\b\bO!\b$\b\b$\b\b$\b\b\x1B\b\b]\b\b\b\bF\b\b$\b\xF2\0\b\xCC0\xF2\05@'\b5\x07#5\b\b $\b\bU<-?DC/$@5\xF244?4,44U)444\xF2\0$I?45@F5 $5$5$B\xA7$B:\x80$\x808\xF2\0\b\xF2\0\xF2\0\xF2\0++\bKT\bK++A:A++++++\b+\b++++++I5\b+++\b!\bI+++A7?+++>+#+\bK\b+\b,+++#+Y$++++\b@\b\f\b\xF2\05\xF2\0$\xF2\0K@T\b\b\b!\b \x80 ?\b!\b>!8>\b!w\b\x80P\x80h\x80$	8C888\v\n\v\v8\x80\x80U\x80$4\b4\x8B_^``\f?7#4`\b \v\b74\x808!\b\b!8\xF2\0\b$U\b$\b\b$\nV$\b\b!\b\b\b\b\b$\b\b\b$\b\b\b\b\bgfg\b\b$\b\b\b$\b$\b\b$\b\b\xA8\b\b#\b\b)\b'$\b\b#\b$\b'\bK\f\b\b\b\b)\b\b\b#\b\b$\f\b\b\xF2\0\b(\xF2\0\b\xF2\0\b\xF2\0/A$$$\fU$$A	$U0$$8 $$U5@$$55@$5#P\x1B:=( $$$@?:$\b$\b5\b\x1B\b$\b\b$\b\xA1\bI$\b\bK\b5\b$\b\b$\b5\b\bI\f$O\xF2\0$\xF2\0!\xF2\0#\x80\x804'\n'\b\b'\b\n'\b''\x80$\xF2\0@@$@5@C@$@$<\bK<\bK#\r$<\x80$@@$@,@$@:\x80$@5@I@5@@!!\b@$@@(!'!!@@?\b\b\b$\b\b\b\b\b$\bB\b\b\b)\b\b$\b\b$\bB\b\b\b\b\b!\b\b\b\bU\b$\b\b5\b$@5@8)\bU()\bU)\x80*\x80\x80[@; VV\x88$\x80\x80,\x80O\x80$\x80;\x80!\x80\x80$\x80!\xF2\0#\xF2\0\b\xF2\0	$\xF2\0\xF2\0\xF2\08\xF2\0\xF2\0$\xF2\0K\xF2\0\xF2\0\xF2\04\xF2\0$5$5$$c$@$]c@$\b@$5$@$@5$5$5$B\r$5$5$B]5\xA85c$5$5@\b$\b$c\b$\bBc\f $B$\r$5\x9AB5c#$5$5\r5$@5\n5$$5$5$5$@]$;5$5]$5?$$B$\x07$5]$?@\n$5$5$5\xF2\0\xF2\0$\xF2\0B\xF2\0\x80K\x80$\x80:\x80#\x80h\x80$\x805\x80$\x80>\x80$\x80 \x805\x80$\x80#\xF2\0$\xF2\0\xF2\0+\xF2\0$@!@$@K@  @K@@$@K@B@\xF2\0$$\x1B@$@L\x80$@\n,+\x075\v\n#\n$5$B, \x9A@U@@X@8@Q@$@4 ]\n\r\b\b@W@4\xF2\0\xF2\0 \xF2\0!6$N- & $(!-'8\n&+8!#!3(3\b!6$!!8&!!\xF2\0A\x80C\xF2\0$\x80A\xF2\x80$\x80D\x80$'8$'($\b!v!\x805\x80$\x80\x804 5 \b\n'\b\xF2 \b\xF2\0\b\b\b\b\b\b\b\b\b#\bc\b\b\b\b\b\b!,,,\b\b$\b\b\b$++\b$\bX\x07\b\b$\b;\b$\b\bP\bF\b\b8H\b\x1B\b\b$\b\b$\b\b$\b\b\b$\b$\b\b?\b\b\b\b\b$\b\b\b\b\b'\b>\b\b\bK\b!\b\bc\bE\b\b\b$\b\b\b\b\b#\b$,\b\b\b\b\b\bK\b$\b\b$\b\b\b)\b\b\b$\b\b$\b\b>\b\bA\b\b$\b\b$``\b\b!\b$\b\b$HH\b\b\xF2\05\x80 \x80\x80$\x80C\x80g@\b)\b\xF2 $$)!$OU$F!/4!$\x07#P  B  $*$h888\b$$$\xA8\n&\n&\n7\n#$K $$W$!$\xF2\0\b@$@@@@?@:\x80$@\x80$@@\xA2@@@!@X@$@[\v \bK@ \x80@5@+4X4@$@O@=@$@W\xF2\0@$$`$B\b$B$B$\xF2\0K\x91$B$\b$$0$G5850505\xF2\0$\xF2\0\xF2\0$ @) ; A 4   @$ 4X4 @ `$ = A $  )     $  $\x07@$   *  # I   $ #  #  \b\b($   $   8 h '    $\x80\x80W\x80\x80F\b\bF\b\b(F\b\b\x80;\x80$!!\x07!!!!\f!!!!\n!!!!\n!\x80U\x80X\x94$\v$\x07$$$\b$\x8A\xA59FCx\x95i$B\b,$$5$\bB$B$\x808($@$\x80#\xF2\0F\xF2\0$\xF2\0!\xF2\0\x90!\x07$!\b5\xBF\xC7\xE6!'8'V&\xAC)A\x1B\x89,u\xB0\xB5\xBD\xB2\xC6 \xBB0\n\b\b\b\xBCk\xB3\"\xB3.\xC8\xC5S%\x86u&0.\xB4 \b\xF2\0\xF2\0O\xF2\0$$5\xED+5\b$'4##4$)+:\b\b	\v	\bYU@P\b\n55:$5+$!\f$5!5$$$5\b$5$\b5$E?$I\b$5K5!K\b$\b\b$5+5$$]\b$#'!'!'!'!'!'!'!'!\f''\b''''!''!''''\b''!\f'!'!\xF2\b'\xF2\0F\xF2\0$\xF2\0\xF2\0 \xF2\0\xF2\07\xF2!\f\b\x07\n\n\n#\x07v\x07 \\Nt!t\v\x87(\b7v\b\f~\xC1 \r 7 T\b\v\n\n7\xF2!\b\b7\b	\v\n !\v\v\b\b\f'\b3&\v\n\x07\b'\x07\x07i-\x07\n\x07\v\x07!\xF2\0\xF2\07\xF2@@@7	!\xF2\xD0\f e770`7@P7\xB07P 7\x807\xE07@\xF2\0\b7\xF2\0\x07@7@07\xF2\xD0=77,77D7\xF2s@7\xF22\xC0M\xF2\xCC\n@7\x80 7\xF2P7p77\xF2\07\xF3\0\f@7E\v(\xF2B\xF2\0!\xF2\xF0\r7@077@77\xF207\x8B\b\x8B\x8B7$8W.73e}II77\xF2\xAD\x1BN!	\v\n\x07L&7\nU\x85&\v\b	\b\b\x07L\x07t\xF2\07\xF2\0\x80L\x07	\n7	\x8C\b\x07\f\v\x9B \xF2`	\x07	\x07\x077\b	\x07	\x07		\b\x07	\x07		\x07	\x07\n\x07\xF2\xEC>\b\b	\b\b\b\b\b!\b\b\b\v\b\b&\b\x07\xC8\b\b\b\b\b\b\n\b\b\b7\b\x07\b	\xF2\xA8\b\xF2\xA8\n\x807\xF2\x80\xF2\07\xF2y>y>y8y\xF2>\xF2\x0007\xF2*7\xD87` 7\xF2\x80\xF2\0@\xF2\0\x80t\b\v \x07@\x80\f\v\b	\x8F 	\xC0\x80\x07 \b|i@\xF2\0\f\xF2\0\xF2\0\b\f\xF2\0P\v\x07\nH\n0\v\n	\x073\n\n\v\n\n	\x07$	\n\f\v\xF2\xE0\b\v	\f\v\xF2\x80\rt\bt@}\x80\xF2\0\xF2\0@ 	 \x07  v }\xF2\0\x80	`\b\xF2\0\b\xF2\bp\b @\n\x80\v\xF2\0	\xF2\f @\x80  \xC0\xF2\0v@ \b \x80q\xA0v`\n@\x9E \f\x80	@ \f\x80\xF2\0\xF2\0\xF2\0@0v\f\xF2\x80\xF2\0\b\xF2\0\x07\xF2\0\n8@t\x80\xF2\0\x07\xF2\0\f\xF2\0\xF2\0\xF2\xB0\x07\v\n\f\v\f\n\f\xF2 \xF2\xC6\xF28\xF2\0	T*(t@\xF2\0\xF2\0\x07\xF2\0\n@\n\b4\nvh\xF2\0	\xF2\0\xF2\0	\x85\xF2\xF8\xF2\0t\xF2\0\b\x86\xF2\0\b6\xF2\0\xB0 \"4&u\b&u\xB3\xC2\x86&@\xBB&\b\x86\bu\b\xAC\xC6&@\xC0u\xC6\xB9\b&u\x86u\xAD\b\x86\"kS&uj\x86\xC2&u2&0aS&\xF2\0\b\xAF\xF2\0&\xF2\0.\xF2\0d&\x86|&\xADu\xC8&k\xB5\xBD\xC8u\b&u\xC0k&ukj&\"\xACd&\xC6\b.\xB1ut\x86&\x89\xAD\x8D&&\f&1&&\r&&&&\b&& \xAD&\xC1&uD& \xB8 \"94\xF2\0&\xF2\0\b6\xF2\0\b\x8A\xF2\0\b6\xC6\x8Au\b\" &\bu&6\xC6\xB1\xAD0\xAD0\xC6k\b\xB1&\x86\xAD\r&u&\xBC\xC6\x80\xC5\xF2\0&0u\f&k & \xC0&j\x8A\x86&\xB2S&\xB3k\xC0\f&\xBD@\xB3\b&\x8A&\xC1\x866\xAD\b&\b\xC0\b&j&\bk0&u0&\x86&\"u\x86\n&u&\xC0\bu\b\x86&.\xC0u\xAD\baSu\x86&\b\xC1k\f&u.\xB7&\xBC\xC0@\xB0\x80a&u\xAD6\xBA\xC0&\xC8S\xC80\f&k&\xB2&\"\f\x86&\x86u&\"\b&\xF2\0\xB5\xF2\0\b\x8A\xF2\0\b.u\xF2\xFE\x07u\xF2\0\b\x8A\xF2\0\b\xAF\xF2\0\b\xAD\xF2\0\b\xB4@\xAF\bk\xADu8\xADR0&\b\xC1&8\b&\b6&\xAD@u &\xB6u&\xBC &	u\n7 \v\n}+\fu&\b\xBB\f&u\xAD\xBD\b\xB1&\"uS\xB5\x86uX& \xB1\b\xB3\xB7\f&\b\xB4&\"\xAD&\xAD&6u\b\xB1\b\xAD\xB9&\xC0u&%@&\x86&uk&\xE4&\xB6\xBE.1&\"0\xB0\xB5\xBF\x8Ak\xC0\xF2\x90&\x07u\x86&\xB6,&\xAD&\xAE\b&1u\r&\x86\"&\xAE\f.\b&\xAEP&0\"u&\x07\x86\b<\x86D&\xB6\b\x86\bk\xAD\"%&\xB3 u	d	&\x8A&\xF2\0\xB3\f\x86\x86\v&\"&u\"&&&&&\bu\b\xAD\b&\bS \xBE&\xAD\x860\x860\x860\x86@\xBC0&\b\xAEL&\xC1&\xAF&u\xC7\xAD&\xAD&u&<&\xF2\0\xB6\x80\xC2\x80\xB4\xF2\0\bS\xF2\0\b\xAF\xF2\0\xAD &\bu\xB7u\x86\v\x86 &\ba\b&\xAF6&.&6\"\xB6@\xC8&\xAE\b&\xB8\xC5&\xB9%\xB9\x8A\b\xC7u&\xAE}&\x86&uu&\v\v\f&&\v\x86u\"&\xB7R\b&u \xAE&u&\x8A\xB10@&\xF2\0\x86\xF2\0\b\xAF\x80\"\n\xAD\xBF\xC0\x86u&\x86\xAD\xC2\xAD0&\bu\xBD\xB5&\"H&R\xAD\b0\xAD%\xAD\x86\"\b&\xB1&.uS&&\xAD(&\r&\xAD2&@R\xF2\0\xC0\x07\xB4&\xB4&\xC1\xB4 \xAD\xF2\0&\xF2\0\xAD\xF2\0\b6\xF2\xAD\xC3\xAD&\x86\xC1u\xAD&k\f&0&.u\xAD&\"&\x86\xAD\x86\f\xAD&\xADa\b&\xB4.Su\xBA\x86u&\x860u\xB1\xB9.\xAD&u\b\xAD&\x86&\x86&\xAD&\xC2\xB5\x86\f&a&u0\xAD\"\x86\b&u\xAD\xB1a&\xBE6&\x86&u\b&\bu&k\x86&\x86\xB1&u60&\x86\xAF\f\xAD&u\xB3\xB5&\xAD\bu&\xB1&\xADu&\x86&a\"&uS&\x86\xAE&\xB1&\"\xAD&0\b&\xC6&\x86\xAE&\xC0k\xC6&\xC6&.u&.&\xB30\xBD\xB1u&\xAD\b&u\xC0\b&j&\xBA\x86&.&\"\xAE\"\x8A&\"\xB7&\x8A\x8A\xB8\x86&k.&\"&\x86&au&0u&\xB1&%0&0\"\xC7\xB3\x86u\b&\xB9u&\x86&\xB7\xC8\f&\x86.\"6\xB5&\"u\xC0&0&\"a&<\xCD&k&.&6&\xAD\xC2a\xB3&\xC26\"\xC0k\f\xAD\xB9\b&\x86\xADk&.\xBC&6\xBB.\xB36&\xB3\"u\xF2\0\xAD\xF2\0\xAF\xF2\0%\xF2\0\b&\x07\xF2\n\x07\b\v\bp\v	\n\v\b\x07\n\x85r\x07\b\x07\b\x07\b\n\b\b\v\b\ni\x82\f\x07\b\f\vpX	\x07	\x80	\b\nv\b\x07t\bi\f\n\x9E\f\f\f\b\x07\v\b\v\x07	\x07t\bt\nt\bt<\f\n\b\n~\n\b\f\f\n\x07\btt|\x07vq\ft\b\b\v\v\f\n\b	t|\xD3\b\b}\v\f\n\v\n|v\nv\b|	vtt\b	m\n\x07t\x07\x07\n\x07t\v\b\x07\b\n\v\x07v\f\ft\v\x07v\x07\vv\x07\f\f\btv\x07\b\r	\x07\b	t\x85\nv\x9D\b\b\x07\x9D\v\n\x07\bt\vv\x85\v\r|\b\n\x07\vt\x07\v\r\x07v\x07t\bt\vt\v		\v\x07\x07	\nt	\v\x07\b\vv\n\v\x07\b\x07\x07\n`	\vt\x07\v\b\btvt\b\b\vt\x07\v\nt\r\v	\b\bt\v}\x07\b}\x07tvq\x9D\x07|\n\x07\r\x07\x07\b\vvttt\x07t	\x81\b\n\f\x07t\v	|l\ft}v\r\r\b\n\f\x07t\x9F\x07tvtv\bt	\f}\x07\n|t\x07\bv\b\x07\n\b\x07\b\b\x07\v\b\n}\x07t	}vt\vt\x07v\b\x07t}	tvt\x80\b\x07\f\x9F\x07\x07\n|vt|\ft	\b|t\b	|}t|\r\vv|\x07|\x07~t\xD1\x07\b\v\f\f\x07\v\x9F\x07\x85\v\b|t\nt\x07\bt	t\nt\x07t\x07t\nt\x07t\bt\b\b\x07t\v\x07t\x07\v\f\x07	\n\x07t\x07v\x07\v\b\x07t}\x07t	ti\f\v	\n	}}\vt\b\x07\b\vt\vt\v\x07v	t|\n\nt\n\x07\ntvtt\n\x9F\n\r}t\x07\v\x07\vv\v	t\x07\n	ttt\x07t}|\v}\b|\vt|t\x9Dt\x07}\x07\x07\b\b\v\b\x07\rt|t\x07\b|\x07}m\n\vt||tt\x07|\b	\x07}\x07v\b\x91tv\x07\v	\x9D\b\bp\x07\f\x07v\b\n|\x07||	\n\v\x07t\x07t\x07	||\v\x07\v\b\x07vt|\b\v\x9Ft\x07v|t\b	\v\n~\x07+t|t\b\v\b\x07|\bv\v\x07\x07\b\n\x07t|t\x07\v|\x07\nv\vt\x07\n\n\r\b\v\n\vt|\x07\x07v\x07\v\b\n\v\b\v~\v\x07v\v\b|tv\x07|t\x07\x07\v\b\v\v\b\v|t\x07\n\x9Dt|\x07t\x07\x07\x07\x81\nv|\v\b\x07\b\x07t\x07\x07\r\x07|\x07t\f\b\x07\n\x07tmtt\b\x07|~\x07v\x07v\b\vt\x07t\x07t\x07t\vt\b\f\n\v\x07\f\xD1\x07\bm\v|\x9E\x07tt\x9D|\vt\bt\b\x07\v\n	\f\f\x07\x9F\x07q\v\b\x07\n\x07t\x9D\bt|t\bt\x07\n}\b\r\f\ft\b\b}t}\bt\b\bvv\f\x07t|\b\bt\x07}tv\x07\ftv\x07t\x07t\x07\x9D\b\x07m|t\vtv\b\x07tt\x07}\b\x07v\nv\x07\n\v|t\v\x07\b\x07t\ft\n\x07vt	\x07|\f\x07\b\x07\x07t\bt\v\b\x07\bt\x07\x07\b\x07t\v\x07|}\btm\x07\v\v\ft|\x07	\n\v\x07~\r|t\n\b\x07t	\n\xD0\x07}|\b\x9F\x07\vt\n\v\f|\bt\vt\x07\n\x07\v\b\x81\n\vv\v\v\x07\x07\n\b|\b\x07\x07\f\n\x07|\x07\n\x07t\bt\b\b\x07\b\b\b\x07iv\b\x07v\f	t\btt\x80\b\x07\x80\b`\n\bt\x07\b\f\bt\n\x07\x07\vt\f	tv\x07tvtvt\x07\x07t|t\x9D|\v\b\x9F\x9Ev\n\b	\b\vt\ft\x07\x07\b\r\x07tv\x07t\b\v\vtt\b\vt|\nv\r\x07\b\vtt\x07t\v\n	t\v\x07v\r\x07v\x07tt\x07t\n\b\x07\v}\ft\x07\x9E\x07\b\x07\bvt\v\n\n\x07\x07\x07\x07\vt\v\v\v\b\x07\x91	\x07\nt\v\n\v\b\v\x91|\x07\r\vtv|\f\x07}\xDC|\x07t\b\x07\vvt\n\x07tt\x07\x81\x07\b\f\x91v|\vt\x07tv\b\n\b\f\x07\x07\b\b}\v\x7F\x07tp\b\x07|\v\nt|7\v\b\b\x07\b}\x9F\b\x07\x07\bt\x07\n\x07\x07|\b\v\x07t\x07\x07}\btv\n\x07v\b\b\n\x07v\b\v\b\x91\x07v\v	\x07	\b\x07\v\f\v\bt\vvv\n\x07t\r\btt\b\b\vt\nt\b	t\vt\x85\v\btt\x07t|\x9D\x07\vt\v}\x07t\bt\vt\x07\bt\f\n\nt\f\x07\r\x07\n\v\n\x07t\v\n\x07v\b\x07\x07\b\v\x91\v\x07|\n\x07t|\f\v\x9Ft\x9E\x07}tttt\x07\b\x9F\b\x07t\x07lt\x07\bv\x07t\v\x07\v|\n\v\f\v\vt\x07\v\v\x07\ft\v	\x7F\x07\nt\b\f\x9D\x07t\x07\b	|t\x07t|\r	\n\v\b\nt\x07\vt\xDA\x07\b\v\n\bt\btt\v}\x9C}\v\b}|t\b\rt\v\x07|tt\n|	\v\x07\ft|\x07\vt\ntt|\xF24\x07\n\x07\v\v\vv\x07\n\x07|\x07\v\x07\x07\bt\x07\b\b\v|5\x07|\v\n\v\b\x07\f\n\b}\x07t\b\x07t\b\x07\n\v\btt\vtt\b\x07\v\ft\x07\f\x07\v\n|\x07\v\f\b\x07v\b\x81\x07\vtX\x07\v\b\x07\b\f\v\b\b\x07\n\v\n\b\f\v t\b\x07\v\n\x07vtt\v\bt\f\x07\x07|t	\v\x07\b\x07\b\v\x07\n\v\x07\v\bt\b\r\b\x07\v\f$\n\b\vv\v\x07\n\x07\b\x85\b\x07\b\f\x07\b\v\x07\b\n\x07tv\v\x07	\v\nvt\x07\v\b\v}\b\fv\x07\b\b\x07\x07\b\b\v\x07 $\x07\b\x07\x07\xD2\b\v$\x07t\f\x07t\x07\v\x07v|t\vt\vt\b\v\v\x07\b\v\f\f\x07\v\v| \v\x9D\x07\n\v\x07\v\x07\v\b\v\x07\b\x07\vt|t\v\n\v\x07\b\bt\x07t\x85\f\bt\x07\ft|\x07\x07|t\x9D\x07\v\vt\b\x07\b\x07\v\v\x07\bt\x07\v\b\f|\b\x07\x07\b\v	\x07v\v\b\x07t\bm\v\x91\b\x07t\x07\v\v\v\v\x07\x07t\f|\b	\x07t	p\x07\v|\f\x87\x07\n\x07\x9F	t~|\x07\x9E\v\x85\v\b\v\b\x07\xEEv\v\b\x07|\x07\n\v\v\x07\x07\n\x07\x07\vt\vtv\b\x07\b\v\ny|\x07t\v\x07\b\vv\n\x07\b\v\b\x07t|\x07\vv\x07 \b\n\x07v}\n\vT\b\v\x9C\fv\b\x80|\v\b\f| \f\x07\x07\x07\x9D\xD3\vv\f\x07\bv\b\x07\v\f\v\n\x07\b\x07\b\x07t\v\f\x07\n\x07\v\x07\x07\v\b\x07t\b\n\v\v\x07\b\n\x07\v\x91\x07\x07\v\n\x07\v\nt\n\x07\n\v\b\b\vvt|\v}\vt\v\x07\x07\v\x07\x07\f\x85\x07\x07\x9Fv|\x07t\v\v\v\n\f\x07\b\x07\x07 \x07\v\bt\nt\r\r	\b\x07\v\x07}\b\v\v\bt\x07\v\x07\v\f\v}\x07\x07\b\v|v\xD0\b\ft|\x07v\x07~\bt\x07t\x07\x07\v\x07\n\x07\v\n\vt\x07	 \b\x07\v\n\v\x9Ct\f\x07\x07}\x07\b| \x9F\b\x07t\x07 \v\x07|\x07\v\x85\x07\b\bt\b\x07\x9F\b\x07\b\x07v\x07t\v\x07\rt\b\x07\f\v\b\x07vt\n\f		\x07\x07}\x07|\b\x07	\x07tt\x07\x91t\b\x85\x07t\b\x07\bt\bt\x82\f\bt\x07|\x07|t\vv\bt\b\x07\v\n\b	v\x07t\v7\b\x07\x91\f\f\x07t\n\v\x07\x9Dt\x07v\x9D\b\b\x07}\v\x07\x07\b\x07t\x07|\x07\n\x07	v\v\b\x07\n~t\b\bt\n\f\v\v\x07\b\x07t\v\x07\b|\v\v\x07	\bt\f\x07\b\r\b\v	\x07\vt\x07\x07\x07|$\n\bt\x07\x07\x07\v\b\x07\bt\x07vt\x07\x07\b\x91\x91\vt\b\nB\vt	t\x07\x7F\vt\b\x07}\x07\b\x07\x07\v\n\v}}\nt|t\b\x07v\b\x07	\b\v\b\x07t\vt\x07\f|\b\v\x07\b\x07\v\v\n\v\b\x07t\b\b\x07\b\b\v\x07\n\vt\x07\r	\x07t\v\x07t|\v\f\x07t\x07t\x07|\vt|\b\b	\x07!	\x07\v\x9F\v|\x07\x07\x07\x07|}\n\x07}\x07\bt\v\x85\b\x07\x07\vr\x07\n	\x07\v(\x07\b\x82\x07t \x07|\x07|\x07\bt|\nt\n\b\x07\x07\x85t\b\x07t\f\x07\v\v\b\x07\f\x07v\b\rv7\x07|	\v\f\vp\x07	\x07\v\x07\x07	\v\n\x07\x07\v\x07	\r|\x07 \x07\f	\x07|t\x07\vt\n\x07\b\x07\x07\b\x07\v\n\v\x07\bv\x07\v\b\x07\b	\x07	\x07	\v\x07||\x07t\x07	\x07\b\x07\n\x07\v\v\x07\v\v\x91\x07\v\r\v\x07\vt\b\b\x07\x07t\x07\r\x07\b\x07t\b\x07\f\v\x07\f\x07\v\b\x07\n\n\x07\v\x07\vt\x07\n\f\x07\x07\n\v\x07\v\nv\x07\x07(\x07|\x07(t\x07t	}\x07\n\b\x07\b\v\x07\xD1\x07<vt\x07\v\f\b\x07\b\v\b\x07|p\r\bt|\v\n\v\bt\n\x91h\v\b|\x07\r\x07\n\v\v0t\v \b	\n\b\b\x07\x85\x07t\v\b\x07\x07tvv\x07|	t\x07\x07t\v|t\x07t\x07\x07\v\x07\f\x07v\x07\f\x07\x07|\v\r\b	t\f\x07\v\x07\x07\x07\b\x07p\x9C\x07\x07\b<4\x07|\n\nt\x07\x07\ft\x07t\v\f\x07\x07t\x07\vt|\x07\b\x07\x07\x07v\b\v\n	|\x9F	\xA7\x07|v\n8\nt\f\b	\b\v\x07\v\x07\v\x07v\x07\n\x07\x07\x91v\r\f\x07\v\x07\x07\n\r \x07\x07}\x07\x85\v\n\v\n\v\x07|\v|\x07\bt\b\x07\b\x07t\f\b\f\x07vtv\b\x07\x91\nt\nv\x07\n\x07\f\x07\v\x07\nt\x07\v\x07t\x07}v.\x07v\x07|\x07\x07|\v\x07\x07\v\x91\b|\x07\x91}\bt\v\b\x07\v\n\b\v|t|\x07\x9C\b\x9D\b\x07\b\x07\f\x07\f\n	\f\b\vt\b\x07\v\b\x07t\x07\b\x82\x07\f\x07t\v\vt\x85\n\x91\vt}\x07,\x07|}\x81\b\b\x07|t\x07\v\v\x07\v\b\v\x07\x07\n\x07\x07v\b\x07@\x07|||t\v\bt\xDC\v\x07\v}|\b\bt\x07\b\x07\v\r\x07\x07\x07\v|\b\x07\x07|v\n}t\x91\f\v\n\v	\x07tt\x85\x07}\v\x07\b\x07\b\x07|\f\x07\b\x07\f\v\x07t\x07\ft\x07t\v\x07\b\v\x07I\fvt\x07\x07\x07|\x07\x07\v\v\b\b\v\x81t\x07\v\n\x85t\f\x07\f\x07\b\bt\f\vv\x07\x07\x85t\n\f\x07t\x07\n\f\b\b\x07t\n\x07\vt\nt|\v}\x07\x9C}\b\x07t}\n\v\n|t\b\x07\b\x07\v\b\x07\n\x07\n\b\v\b\n\x07t\b\x07vt|\x82v\x07\bt\x91\x91\x07|tv\n\x07\f\b\x07|v\f\x07v}v\x07|\x07~\x07\x07t\b|it	\b\x07|t\x07\n\x07\x07\n\x07\n\x07t\f\f\x07\vt\x07|\v\x07\x91t\f\x07\x82t\x07\f\x07t|\n\x07t\f\x07t\x07\bt\vt\x07\b|tt\f\vt\x07tltl\x07\r	}\x07\nt\x07\x07\x07|\b\x07\b\x07|tt\b\x07\ft\x07|t\x07\b\v\x07\b|\x07\x07}\x07v\b\x07\f\x07\bt\nt\x07t\x07\x07|\x07\v	\b\nt\x07\f\x07\v|\v|\x07|v\x07\b\x07|\x07\v\x07\b\x07\x91\x07\x07\n|vtt\ftl\b\x07\v\x07	\v\x07t\x07\x07\ft\x07v\x9F\v\b\bt\x07\v\x07\b\x07\b\x07\b\x07\b\x07\bt|\x07\b\b\x07t|\x07\x07\x91\x07\f^\n\vt\x85\x07t\x07(	\x07\b\n\v|\x07\v\f\x07t||\b\x07ttv\n\x07\b\x07tt\x07\vt|t\v\x07\x07p\x07\f\x07\b\x07}\x07t\v	\b\x07\v\b\x07tt\v|\x07t\b\x07\b\x07\v\n\b\x07\b\x91tt~}\x07t\x07|\v\x9D}~\x91t\x07\b\x07\x07\x07\nt\n\b\x07t\n\x07\x07t\x07\x07\x07\n\x07|\b\b\bt\x07\x91\x07\x07|~t\x07|\x07\x85\v||\f\x07\bt\v|\v}\x07\x07\x07\b\v\x07\x9D\b\v\ntF\x07\x9C|\x9C\v\bt}\v\n|i\x07\x07\x07\b\x07tt\x07t\x07\n\v\bt\b\x07|t\x07|vt\x07t\x07\b\vv|\x07\b\b\bt\v\x07	\x07t\b\x07\x91\b|t\x07t\x07}(}\x07t}\x07v\b|\b\v\f|\b\x07\v\n|t\x07\f|\v\b\x07}\f\x07t\x07\b}\x07	}\x85\v\b\v	t\x07\ntt\x07|\x9D\b}\x07t\x07\x07\b\x07\f|<\vit\b\x07|t\x07t\x07t\x9Ft\ft\x9D\x07\x07\b\x07\v|	\x07v\x07i\x07|\x07t\vt}\f\x07t\x9C\n}t\x07t\x07|t\x07|v\v\b|\x07\x9F\x07|\x07\b\x07\n\x91\x07\x07\b\x07\b\x07\v\bv\f\x07|\x07|\b\r\x07\rt\n\x07\b\v\x9Dt\r\x07tv|\b\x07t\x07\x07v\n\f|t\x07\x07\x91\x07\v\x07t\ft\v\x07\vt\n\v\x9Dt\x85\x07t\x07\b\x910\x07|t\x07t\x07|\x07}t|vt\b\x07\x07\v\vt\b\x07\vv\x07\v\x85\x07$\v\x85\r\b\x07\vv\x07v\x07\bt\x07\v\x07	t|\b\x07	\ft\vt\x07t\bt\x07|^^\x07\b\x07t\x07|~\x07\x07\x07\n\v\x07|\x07|\v\v\x07v\x07\x07\bv\b\x07\x07\b|\b\b\x07\b\x07}\ft\b\x07$|\v\n\x07t\f\x07\v\x8B\v\b||\x07 \n\x07|t\b|tt|\x07\x07}\x07\x07\n\x07\v\x07\btt\v\x07\x07|\x9D\x07}\f\x07\b\x07|\x85\v\bt\x07\nv\bt\n\b\x07\bt\f\x07}\x07t}\btt\x07t\x07\n\x9D\n\ft\x9D\x07\x91\x07\x07\x91\v\b\x07vt}\f\x07\bt|t|\x07\x91\v\v\x85t\x07t\x07\v}\x07t\x07|\x07t\v|\x85\n\v\x07t\x07}|\x85t\x07\x85p\b\x07\b|t\f\x07t\x07\vv\b\n\b\x07\b|\x07t\v\x07|\n\ft\x07\x07\b\x07\x07\n|\n\f\x07\b\x07\n\x07\x85|\f\x07\x87|\v\rv|\f\x07|\nvttvt\f\v\x07~\x07\vD\x07\x07\x91\x9D|\x07\b\x85\b\x07\vt$|\x07\fv\nt\v\x07\f\x07t\x07\x07\x91t\b|\v\x07\n\b\b\b}\f|\x07}\v\b\x07\b\vt\x07|\x07\x07\x07\b\n\x07t\v\v\n\f\v\x07t\b\x07\f~\x07\n\x07t\x07|\x9F\f\v\x07\b\x07t|\x07\v\n\vtt\x85\n|\f\b\x07\bt\x07\b|\x07\bt\n\x07|\b\x07\vt\x7F\x91\b\x07\x07\x82\n\v\x07\v\vt\f\x07\ni\x07\x9F\x07t\b|\x07\x07\x7F\x07~||\x07\x07	t\x07\f\b|\x07\x81\f\x07vt\x07\b\f\v\b\b\x07tv|tv}v\x07\v\f\bt\v\v\x07\b\v\f\x07ttv}tt\b\x07}\b\v\f\x07|\b|t\b\vt\v\n\x91t\x07\v\x85v\x07\bt|\x07\x07t\x07\r\x07t\x07t\f\x07\x07\x07t\bt\r\x07\x07\b	\x81t|\n	\n\r\x07\v\bt}\x07\x85\nt\x82\b\v|\x85|\bt\x07t\x07|\x07\v\x85}}|\v\n\vv\x07t\f\x07\b\x07\x07\x07vt\x07\x07\b|t\x07t\x07\bt}t\bt|\b|\x9D\f\x07\n|\b\x07|t\x07|\x07|\x07\b\bt\x07t|v}v\b\x07t\v\x9C\b\f|\x07v|\b}\x07\v\x07|\f\x07t\x07t\n\b\x07\b\x07\x07tt~t\x91\x07\b\x07\x07v\x07\x07|\n\vt\vt\x85t\b\x07\v\x07t\x07\r\x07\b\n\x07}}\x07}\nt\v\b\x07\b\x07t\bt|t\x9D\f}\n\v\vt\v\x07|}\n\x85\v\x07t\x07}|\v\x07\x07\r\n\x07\x85|\v\x85\f\r\bv\ft\f\x07t\v\bt\x07|\bt|\x07t\x07t\x07t\x07tt\f\x07\bvt\n\b\x07\b	\nv\x91\x07\b\x07t\x9Ett\b}t\x07\x07t|~\b\b\x07\x07|\f\f|vt\nt\x9F\x07}v\x07vt\n|\b\x07	t\x85\b\x07t|t\x07\x9D\x07|\x07\x07|\r\nt\b\b\x07\b|\v\b\bt\v\x07\v\x07t\b\x07\b\x07||\n\x07\n\v\x07tt|t\b\f\x07t\v\x07tt|\x07|t\x07t\x07t~|\b\x07\x07|t\b\nt|\vtt\x07\v\x07\vt\n\x07t\v\x07\x07\x07|\b\x07\x07t|v\x07\x91	|\x07t\x07t\b|t\v\x07|\b\x07t\bvtv\v	t\x07t\bt\x07\n\r\x07|\bt\v\nt\v\x07\x07t\x07\b|	\r\x07\n\x07\b|\v\x07pt}vt\n\x07\x07\n\x07\x07t\b\x07tt\x07|\f\x07\x85|\x07vt\x07t|\x07t\f\x07~\x07\x9C\x07t\x07}\x9D|\v|\b\x07tt|\x07t|\v\x07\x07\x9C|t|~	\x07\b\x07\b|\f\x07t\x07|\x07\x91\x07\x07\x07\b|\x91\x07t|\r\x07\b|\x07t|\x07\f\x07\x07t\n6B\x9F\x07\bvt}t|t\b\x07||\vt|\b\x07t}t|\x07\v t\x07t|\x07\ft\n\x07t\x07\x07\x7F\vt\x07\f|\v\b\v\nt\x07\b\v~\x07\r\b\v|\x07t|tt\x07|}|\x07t\b|\x9Dtptt|\v\b\x07t\x07t\x07t\x07|\rt	\x07\x07t\v\b\b|\vt\x07t\x07t\x07v\n\bt\v\v\b\x07\bt\x91\v\x07}\x07|\x07t\b\x07|\x07|\v\x07\x07\n\vt|\b\n\x07\f|v|\x07t\r\x07|\x07\b\f\x07t\b\x07\v|\x07t\x07|\x85\x07t\b|\vt|\x07|	\x07\b\ft\r\b|t	\x9D\v\f\v\f	tp\x07t|t|\b|\vt\x07v\x07\x07\b\x07\x07\bt\x07\x07\x07\x91\x9D\x07\x91|t\nt |\n\x80|\x85\x07\nt|\vt\x07\n|\b\x07|\x87\v\x07\v|t\x85\n\b\rt\x07v\bq\x07}\x07\x07\x07\x91\bt\x07v|\n|\f\x91t\x07\x07\x9D\n\x07\v\x85||\x91\x07\v\f\v\x07|\f\btt|\n	t\b\x07\x82\x07\x91\x07|tt\x07|v\x91\x07tt\vt\f\x07t\x91\v}t	\ft\x07|\x07\b\x07\v\x07\b\x07\f\x07\n\x07\b\x07l\bt\x85\v\f|\f\v\x07\v\x07\n\v\b|\v|\x07t\x07}v\xCA\n\x07t\x07|\x07t\f\x07\f|\b\x07\bt\n|\x07t\b\x07\x07|\v\b\f\x07\v\v\r\v\x07v|\nt\x07|t\b\x07tt\x07|\b\x07	\x07t\x07t\x07 t\bt\b|\x9D\b\x07\bt\bt\x07\bt|\x07\x9C\x07\x9F|\r|\v	Q\x07tt\x07\v}l\v\v\nt\n\r\b\x07v\b\v\f\x07t\x07\f\x07\x07	\nt\b\x9D\x07\x07|\v\x07\b|\x07|\x07\x07t}\v\x07\b\x07\v|\x07}\rt\x07v\r\bt|\f\x07t\b|\bt\x07\b\x07||\nt\x07\vt|\v\bt\x07\nt\n\n\f\x07\b|\bt\xD0\x07}tv|}|t\x07t|\x91\b\x07|t\bt|t\b\x07}t\b\bt|t\b\x07\x91t\bt\x85\x07|\ft\r\x07|\bt\x07it\b|\b\x91\x07t\x07ttt\x07t\x07\f\x07|t\x07v||\n\x07t\b\x07\bt~|t\x07\b\x07|\vt|\bt\f\vt\f\b\x07|\b\ft\x07}\b\b\x07\x07	\f\f\x07t\f\f\f\b\x07\f\v\v\b|\f|~\rt\x07\v\v|\x07t\f\x07\bt\x07}\x07t\x07\bt\ftv\x07}t\f\f\ft\x07tv\vv|\f\f\b\x07t\x9E\x07t\n\b\f\bt\ft\x07\x07\f|\x07\ft|\bt\f\b\x07t\x85	\x07|\bt\x07\v\nvt\x07t\f\x07\v\x07\x91t\f\x07\f|\x84tt\x07\bt|t\b|\x07t|\b\ft|\x85|\n\btt\x07|t}\x07\f}\n\x07\n\b|\vt	\x07\vt|\x07|}\x07\f\x07t}t\x9D\b\x07t\bt\nvt\b\f\v}|\x9D\x07t||t\x07||t|\x07	\b\x07|\nt\f\v|\x9F\b|tv\f\n\f|\f\f\x07t\f|\v\f\v\f\x07t\x07\v\v|\x07|vt\v\x07|\x07\v\n\x85\f\b|\nt\x07\v\b\x07}|\x85\bt|\x07\x85t|\x07\x07\v|~\x07|\x07\r\x07\x9D	\vt\x07\b\f\x07t\x07\f\nt\x07\x07\x07t\x07t~~\b|\b\x07	\b\x07\f\v\x07l\x07\xF2\0\x07t\x07\v\bt\b|t|tt\x07l\x07t\x07\x91\ft\x07t\x07|\n\xD3v\x85\f}\ft|\x07\f\f\b\f	\x07|\x07t\x07	|\bt\x07t\x07|\f|t\v\ft\x07|\b \f\bt\x07v\x07|v\b\f\x07\f\f\x07\x07|\b\ftt\rK\b\b}t\b|t\x07t|t\v\x07\n\x07t\x85tt\b\f\bt}t\x07t\n\v\v\x07tv\x07t\xD1\n\f||\x07tttvt\ft\f\f\b||\n	\f\v|\x07\n\f\nv\v}t\btt\f\x07\x85\rt\x07t\b\x07\b	\ft\vt\x07\n	|\x9D\ft\x07\f\nt	\x07|\f\b\x07\n|\x07|\n\x07t\x07\b\f|\x07tv\x07\vt\b\x07|\x07t|\x07t\x07t\x07|t\x07\f\x07t\x07t\x07t\v\x9D|\x9D\b\v\f\x07t\x07v\b\x07\b|\v\n|\bt\ft\x07|\x07|\v\x07|\v\b\f||\x07l\x07t\x07|	\x91\x07|}\b\x07t\b|\b|\x07tt\b|t|\x85t\x07t\f|t\vt|\r\b\x07t\n\x07\x84\f|\b\x07\b\v\v\n\f\x07\b|\r\x07\bt||\x91|t\x85t|t}|t\x07|\bt\x07t\b\ft\v\x07\x91\x07\n}\x07t\x07\n\x07\ft\x07t||\x07t\x07t\v\x07\n\v\r\b\x07\b|\b\vt\f\x07|t\x07\b\x07\r|t\x91\bt\x07|\b\v\b|t\b\bt\r\bt\n\x07$\x07\nvt\f|\x07|\x07t\x07\n	\x07||\v\r\n\x91\x07\b\v|tt\x07\vt\v\x07\v\b|\x07\f\x07t\n\f~||\x07t\x07|\n\f\v\x9F|\x07|t\x85\x07\x07\x07}\f}\x07t\x07t|\vt\x07|\x07\f|}||t\x07\x91\x07p\x07\b\f\x07\b|t\x07\bt\x82v\x07t|t\x07\v\x07|\x07\f\b\x07t\v\x07|\x07\x85\n\x07\x07\b\x07v\f\x07vt\x07\x07t}t\x07|\x07|\v\x07t\x07t}\r\vt\x07t\bt\vt\n\x07	\r\f\x07t\x07\x07\f\bt\n|\x07tv\x07\x07pt|\n	|v\x07||\x85}|t\b|i\n|v\x07\x07|\r\f\x07|t\x07|t}\r|	t\b\x07v|\x91\f\x07|t\r|\rtt\x07t\nt\b\x07}\x07\v\x07t\x07t	\n\x07\vtt\x91vmt\n\x07	t}}\x07\n|\r}\v\n|\x9F|\x85\x07t|t\x07t}|\x07t\bvt\x07t\x07\x91\x07|\v\x91\x91\x07		\x07\x07|\x07\f\x07t\x07|\x85\x077\b\v\x9F	\x07t\x07|\x07}t\x07	\x07\x85t\bv\b|t\v\x07\bt|\x07|t|v|t\x07t\f\b|7\n}\x07\v\x07t\x85\x07\b\x07v\n\v\b\v\x07\v|\x07v\x07|\x07\f\v\x07|\x80|\x07t\x07\nt\x07vt|t	|}\x07	t\v\x07\f|\r\v\x07p\x07\x07\v|}||\v	t\x07\v\x07t\x07}vt\b\x07|t|\v|\vt\f\x07\f\b\b\x07\x9C\x07vt|t\x07\x07\v|\b\x07\v|\x07|\n\btt}t\r\x07\b|tv\vt\x07t\x07|\x07|\x07\x07\vtv\x07t}tt\x07\vt\x07t\x07\x9F\x07tt\r\v\x07t\x07	t\x07t|\v\x91\f\v|i\x07\btt\x07|\x07\x9F\x07|\v\bt\x80\v\r\x07vt\x07\x91\x07\v\x07\n|\x91\vv\x07\fv\x07\x07\x07|\x07\ftt|t\x85\x07tt\rt\x9Dt\nt\x07\n\n<\nt\x9F\vt\nt|t\x07t\x07\vtt\v	|\x07\x9F|\x07|\n\x07t\ft\nt	\v\x07^$|\n|\x87\rt\x07tt|\v|t|\x07|\xD1|t\x07\vv\x07\x7F\x07t\x07	\n\x07|\x07\ft\x91\x9D\x85\x07t\bt\x07\vt|\v\n\x07t\x91\v\x9C|\vt\x91}\vt\x07\v	\f\x07t\v|t|\b\x07t\x07\vi\b\b|	t|t\x07\vt|\x85\x07\x07\n\x07vt\ntt\b\vt|\v|t\x07t7t\bt\x07t\x07t\x85\v|\v\b\nt|\x07\vt\x91t\x07|\x9D\v\vt\v\x07|?t\x07\b\x07\v\f~t|t\x07|tp~\x07t\x07|\n\v|t|\v|t\v\v\x07\vt\x07t|\v	t\x07|\f\n|\x91\bt|\r|t\vt\v\b}t|\x9D\b\x07\x07t}\x91v\nt||t	\b	t\n\x07}|\x9Ft|\x07\x07|\x07\v|\v|\x07t\x07t|\x07\x07|\r\x07\x91\v|tt\x91|tt|\v\f\n\v|\x07|\n$\x07\v\r\x07\x9Dt\x07\x91v\x07t\x07tt}\v\x9D\x85|\x07\v\f~\x07t\x07\v	\ntvt\x9Dt~t	\f\x07\x85|\x07\b\x07\x07\x07t\x07\f\x07t\x07t\b\v\f|\x07|t\x07t\x07|}\vtt|\f\x07\x85t\x07tt}\x07t\x07\x07t\x07|\x9D|\x07t\x07\x07\f\x07t\x07\nt\x07t\x07t\x07|t|$\v\x07\x07||\x07\x82\n\v\x07t\x07t\v\x85t|t\x9D\vt\x07vt|t\x07t\vt\x07t\xDC\x07|t\x07\x85t|t\x07\v\x07|!\x07t|\x82\v\x07\f\x9D\f|t|tvt}|\x07|t|\x91\b\v|\x07t|\v\x07\v\n}v\v\x07\f\x07\v\f|\v\x07}\x07\x07}\b\x07||\x07\x7F\vt\v\x07t\b|\v\x07\v\r\x07\vtt\f\nvt\v\x07|t|\x07\v}\x07\nt\x07t\x07t\n\v\v}t\x07}\v\nt\v\x91\x07t|\x07|\v\f\x07t|\x07t\v\n\r\v\x07\v\x07|\x07tt\x07\x07\v|\v\x07t||\x07\v\xDA\v\x07t\x07t\x07|\x07t\v|	\n\x07\vt\x85tt}ttt\x07t}\v\b\nt|}\nt|t|\v\x07t\f||}t\n|\x07\v|\x91t	||\x07\n\x80\x91t}\nt\x07\bt\v}\nt\vt\x07t\x07\n\x07t\x07}\bt	\n	|tvtt\vt\v\x07\b\bt\v	}\vt\x07ttv\f\n|}}\vt|\b\b\x91|t\x07t\v|t\x07}}v|\bt\n\x07tp\x07\x9Dt\x07t\nt\n|\x07t\x07\n\r|7\x07|\v\x07	t\v\x07\nt\x07\vt\x07|\v	\ftv|\x07|v\x07tt|\x07\v\b\v\x07\vt|t\vtt\x07l\x07}\bt|\v|t\x07t~|\b(\n|\x07t|\x9E\vt\x07}\x07tt\x07\n\x07t\x07t\x07\vt\nt\r(}|t\x07t\x07\n}tv|\v\x07\nt|\x85t|t\f|\x07\b\v\x07\x9C9v\x07(\x07v\vv\x07\f\vv\v||\v!|t|\x07t\f}\x07t	\x07\x91}\v\x07t|t\x07t}t	\b||\n\x07t|\f\x9D\x07t\b\x07\x07tv\x07|~|\n}v\vt|tt\x07\x9F\x07vt\x07|\x07~\v\n\x07t|\b|\f\x07t|\bt\x85|\f\x91\x07|\n\x07t|\x85|t\nt\x07\x07\x07\b\x85\b|\r\x07t\x07\x9D\x07v\x85|\x07t\x07\x07}vt\x07t\x84|\x07\v\x07}t\x85t|\vtt\v\x07}|\x07\xD1}\xD1\b\x07t\b\x07|\x07\x91\v\x07	\x07}\v\x91\x07\v\n}\x85\vt|t\x07\x07|\ntt\n\v|\x07\x07\v\vt\x07\x85|\x07\x07\v\v\b\x07||\vt\x07~t\x07t|\vt\n\x07\b\x07\x07\vt}\x07\v|t\vtt\x07|\b|\b\x85|t\x07t\x07t\f\x07\x85\b\x07|\x07t\x07t\x07\b\x07v\vtt|\vt\x07\n\x85\f\x07|\n|t\x07|t\v\bt\x07t\x85\x07\x07|tt\ft\x07|tt\x07}\x07t\x07t\f}\x91tt\x07|\v|\x07\f\x07|\x9Dvv|\v\x07t\x07|t\x07|tvt\x07|t\f}t\nt\x91\x07t\n\x07\x07t\vt\x85|\x07|}\f\x85t\x07tt\ft}\x07|\x07\bt\x9D\f}\x85|tv\x07\rt\x07\v\f\x07t\x07\n\f\x07|t\x07\x07}	\f\x07\r\b\x07\x9F\x07t\x07\n\b\n}|\x07	}}\x07\n|\x07\r}\nv|||}\n\x07	t\v\x07\xA3}\v|\v\x07\x07t|\x07\bt\b\f|\x07\f\x07\bt\x07v\x85\x07\b\f\x07t|t\x07|\f\x07\x07t\x07\vvt\x07|\vt\bt\b\x07v\x07\x07\ft\vt\x85\v\x07|t|\n\x07\x07\ft\r\x07\x07|t\x07||\b\x07\nt}\xDA\x07|\n\x07t\n\x07\n|}\x07t}|\x07\f\x07t\x07t|t\f|\b\x07\v\x07t\v\x07	\x07\x9D\x07|\f\x07\f\b\x07|\v\x07t\x07t\f\x07\f\x07t\x07|t\x07\bt\x07|\f|tt|t|t\x85\b\x07tt\v\x07\x07\v\x91t\n\x07t\x07\nt\x07t\x85\f|t\x07\n\x07\n\x07t\x07t\x07\x07t|t\f\x07t\x07t\x07|vt\x07t\x07\b\b\x07t\ft\x07\x07t\vt\x07t\x07t\f\x07\f\x07\f\x07t\f||\x07	\b\f\x85	\x07\v\f\x07t|}\b\x07\x07t\x07|t\x07t\n\ft\x07t|\f\x07\x07|tt\ntt\btvt\x07t\x07t|}\x9D\vt\b|\f|t\x07	t\x07t\x07t|\x07\x07\v|t\x07\x9Dt\x9F\nltt\x85\x07\x85\v\x07\x85t\bt}t\x07v|	t|t\x07t\x07t	\x07m\x91\f|t}tvt|t\x07v\x07t\x07(\x07t\x07}\v\x07t\nt}t\f\x07t\x07\v\bv\x07	\x07t|\x07\vt\x07|\b\x07t\x07|t\x85t\x85|\x07\nt\n\bt\x07t\x07\bt|t\x07}|\nt\x07\x85|\x07\nv\nt\x07\x07|\f\x07\v\x07t\x07t|\x07t\x07\vt\x85t\b\x07\v\x07\x91t\r\n\x07|vt\x07\x85t\x07v\v|\b\n\b\x07t\x07|}t\x07|\x07\v}\x07\x07}\bt\x07t\x07|\x07t\x07}|\r\x8B\nt\v\b\x07t\x07	t\vt|p|\x07t\ft\x07\x91t\x07\x85\b|\x07|t\x07t\x07\v\x07t\x07t\x07\x07\b\b\x07\ft\vt|\bt|\x07\x07t|t\x07\v\f\x07\ft\x9F|\rt\x07\x07\b\x07\v\vt\x07|\x07\x07\n\x07\v\x07t\ft|\x07|\b\v\x07}v\x07\x85|\x9D0t\x85t\bt\x07\x85|tt|lt|t|\x07t\x07\xD3\x07|t\n\f\b\v|t\r\v\x80\x85\xF2\x9A \x07\b\v\x87\f\b\x07\x07\x85 \x07v|\v\x07\n\rv\v\x07\f\x07\vv\b\x07\x07\nvv}t\f\x07\v\x07v\b\x07\v\x07\x07 \x07t\v\n\v\vvv\b\v\b\x07|\v\r\v\b\b\x07\r \v\v\x07\b\b\x07\x07\v\x87\v\x07\x07\x07\n\b\x07}\x07\b\v	v	\x07\x07\x07t\x07\v\f\x07\x07t\x9F\x07\v\x07\v\f\x07\n\x07\v\x07\v\x07	|\vv\x07t\b\x07t\n\f\x07\v|t\x07t\b\x07\v\v\b\x07\v|t\b\btt\x07\v\n\v\b\x07|\x07\b\f\x07\b\x07t\v\vv\b\x07\vt\v\x07\v\x07v\v\f\vv\x07\nt\x07\n\v\x07\n\x07}\f\x07\b\b\x07\f\x07|\b\b\n\v\b\v\f\x07}|\x07v\bv\v\x07\x07tt\n\x07\x07\x075|\x9C\v\v\flt\v\v\x91|\v\b\x07\b\x07|\n\v|\x85\x07\b\v\x07	\x07\x07\v\b\v\b\b\n\x07\v\x07\bt\b\x07v\nt\x07t\b|\b\n\x91\x07|\x07\x7Fv\x07\v\v\b\v\v|vtLv|\b\x07\x07\b\v|\x07t\f\x07\x07\x07\f\n\v\n|\b\x07|\f\x07\b\x07\x07\b\x07|t\x07\v\b\f\n\vt\bt\b\v\n\n|\f\x07\x07\b\x07|\n\b\x07\x07\v\vt\x91<}\n\v\n\x07\n<\v(\v0\x07\x07\x98\v|\\\xDB8\v|t8\n}\v\n\b\x07\x07t\b\x07t|$\x91\x07\x07\v\nt\b\x07|\x07vt\x07\b\v\n\b\b\x07\x07\b\b\x91\x07\b\x07\f\x07\x07\v\b|\x07\x91t	\x07|\x07\x07\n\v\f\x07|\x07|\x07\x85v\x07\b|v\b\v\x07p\v\r\bv\bt\v\n\x07|\f\n\nt\x07\x07\f\x07\n\b\x07|\x07\f\v\x07\v\x07}|\n\b\b\x07\x07|\v\x07\f\x07\n\x07\v\nv\v\n\x07	\v\x07	\x07\v\b\x07\f\n\v\x07\x9F\v	\x07t\x07\x91\n\x07|t\v\x9F\r\x07\b\b\x07|\v\bt\x07t\x07v\b\v\b\b\x07\b\x07\x07\n\v\n\bv\x85}\vt\x07\n\r\v\v \x07|\n\v\v\x07 \x07\bt\f\x07\f\v\n\v\b\x07t\v\x7F\f\f\x07\x07\fvtt\x07|tv\x07\x07\x07t\b\x07\n|\b\v\f\x07\x07t\x07\x07\x07\n\nttv|\x07|\x07\v\x07\v}~\b\x07|}\x07t\x07t\x07\v\b\x07\nt\b\x07\b\b\n\b\x07t\nv\nv|\x07\x07v|\v\x07t\v}\x85p\r|\v\x07t\x07\b|\x07\x07\x07\b\x07\x07t\x07\x07\bt\x07\b\x07$t\f\x07vv\n\vt\v\x07\x07v|\v\b\x07t\f\x07\n\v\x07t\b\x07\v\v\v\b\x07\nv\v\f\x07t|\x85\x07\v\x07|\x07\v\x07\v\b\x07\b\v\n\vt\v\b\v\r\v\b\x07q\x07\v~\bt\bv\v\n\x85\b\v|\b\x07\v\f\x9F\x07v	\x07\f\x07\x07\n\bv\b\x07t\x07	t\x07t\b	\x07|\x91\x85\b\x07<\x9D\b}t\x85t<\x07\x07\x07\x91\x07\b|\v\n\v\b\v	\v\vt\v\b\x07v	v\x07\x85\x07|	|tvvt\x07t\x07\b\v\r|\f\v\x07t\x07\v\b|v|t\x07t\b\n\f\vt\ntt\f\v\b\x07t\b\v\x07\f\b\v\x07\b	\x07\x07\b\x07t\b\v\x91\x07\x9D\vKQK\x07\x07\x07,\r\x07|KQ\x07\b\x07\n\x07t\b\x07\x07\v	\v}v}\f\x07\x07\x9D\x1B\x07tv\n\v\x07	\b\x07\x07\v\v\v\n\b\b\x07P\n\x07\x07\bv|\b|(\x07\x91\vt}t\x07t\x07\x07\x07\v\v\v|D\x070\x07\b	|t\f\x07\b|\n\x07\v\x07t\f\x07\n\x07\v\x07t7\v\v\v\x91tv|\b\b	\f\x07|\x07\x91|\x07|\v\vt\x07\x07\x07|\b\x07\x07t\x07t\x07\b\v\n\x07\x07t\b\v\x07\x07t(\x07,|\b\x07\x07\r\x07D\b|\b\x07x\x07\x07\n\x07}\x07||\xD4\b\nt\b\ft\b\x07h\v\f,H\x07}\v(\x07\r\b\x07\b\x07\x07\x07\vt\x07\v\bmt\x07v\x07\n\n\n\x9Dv\ft\x07v\nt\x07\b\x07\f\b\b\f\x9D\x07\f\x07\v\fv\v\x07\v\b\x07\x07\x07}\b\x07\nt\x07$\r\v\vt|t	\x07\x07\f\x07t\ft\x07t\x07t\x07\v\x07tv\v}\x07|t\x85\x07\v\x07\b\x07\x07\x07\x81\x07vvt\x07t\bv\b	\b\x07\v	\fv\n|\vt\f\x07\v\b\x07\nt\x07\b\x07\f\x07\f}t\b\x07t\b\x07\nv\x07\ntv\x9D\f\f\x07\b\x07\x07\x07\f\v\n\x07\v\x07\x07\v\b\b	t\n\x07\nv\r\n\v\x07t\f\x07tit|t\x07t\v\x07\b\x07|\n\x07\b\b\b\v\x07t\v\x07\v\np\v	\x07t|\v|\b\x07\x07\x07}\v\x07\v\x07\x07\n|\b\f\x07|\b\rt\x07p\x07\x07\nt\f\x07\x07\v\b|\f\x07\b\b\vt\x07\b|\nv\f\b\v\x9F\v\n\x07v\f\x07\v	\bt\x9F\v\n\bt\v	\v\v\f\v\v\x07v\x07|\n|\x07\v\x07\v\x07t\n\x07\b\b|m\nvt\x07	t\x07|\v	\v\b\v\xA7\bI\v\b\x07\v\x07|t\v\f|\v\b\x07\v\n\v\n\n\x9D\f\x07\v\b\v\n\v\x07\b\x07\f\n\v\r\b\x07t\vv\x91\n\x07\v\bt\x07t\x07	\x07|K\v\vv|\vt\v|\b\n\bt\f\x07\n\x07\b|\x07\n\b\b\v\x07\v\x07\btt\v\n\b\ft\vp\b\x07\v\b|\bv\x07\b\x07\v\x07\x85v\x07v\x07\rv\n\b\v\x07}v\x85\b\x07t\x07t\x07\b\b\v\nv\x07\b\x85v\x07\f\x07\x07\n\x07t\x07\vt\x07tt\b\x07|\x07v\x07t\bt\b\v\x07\n\b\x85\x9D\v\x87\x91\x07v\v\n\x07	\n\v\n	\v\v|\b\f~\v\b\x07\v\b\f\n\x07\v\b\n\x07tv\x07\v}\n\x07\x07\x07|\n\x07|t|\ft\x07t\v\b\f\b\x07t\x07\v\x07\vt\x07	\bt\v\bt\x07t}\b\f\n\v\x07t\xA0\x07t\x07\x07\b\v\x9D\x85\n\x07\b\v\x88\v\f\n\x07\n\x07}\vt\b\x07t\b\x07t\x07\n\x07t\b\x07\v\b\x07 	\bt|v5\r\x07\b\v|\n\x9D\x87\b\b\x07	\x87\v\nt\x07t\n\b\x07v\n\x07\x07X\b\x07,v\x07|v\f\f\x07\x7F\b\v\vt\b\b\xCA\x07 \x07vt\b\x07\v\x07\x07	\b|v\v\x07\x07\r\x07\f\v\x07\x07\vv	\b\x07\b\b\f\x07\b\x84t\x07\ft\b\b\nv\x07\b	\b|\b\x07	\x07|	v\v\x07\v\x07\v\f\x07t\r\nv\x07\v\x07\vv\v\x07\v\x07\b\vv\x07\b\v\x07}\n\b\x07p|t\x07\v\x07t\x07i\bv\x07\v}v\n\f\v	\x07vv\b\nB\f\x07$\fv\b\f\x07\b\x9D\v\x07t\x07\b\bt\x07\v\x07\f\x07\f\x07\v\r\b|vv\x9Fv\x9D\r\x07v\v\n\bt\x07\n\x91\vt\v\b\x07t\x84\v\x07\v\v\b\x07~\ft\b\x07\x07t|\x07v\x07t\x07v\v\x07\n\f\x07\f\v\x07t\f\x07\x07\b|\x07v\vv\vt	\x07\v\x07|\x07\bv\v\nt\v\x07\n\b	\b\n\x07\b\x07t\f\v\x07\n|\b\x07t	\x07vt\v\vt\n	\v\b\x07(|\x9D\v\x07\vt|\x07\b}v|\x07\b\btv\x82\x07t\n\r\x07\v\b\x07t\x07\v\x07\b\x07\b\x07t\x07\r\b\n|\b\x07|\x07\bt\b}t|\n\x07\x07\x84v\ntt\x07\x07\v}\b\x07|\vv\ntl\ft\b	\n\v\n\x07v	\bt\v\x07\b\n\b\x07t}\vt\bt\v\n\r\n\b\vt\x07	\vt\x07\b\x07\v\n\b\f\x07\b\f\x07\r	\x07\v\x07\vt\bttt|i\x07v}v\b\v\x07t\x07\n\ftt}t\n\v\b\v\x07v\f\v\f\ntvt\x9D\n\n\x07tt	t\v	|t\x07v\v|\v\v\x07t\b\x07\v\r\x07t\x07\x07\x07\v\b\x07\v\x07\n	\v\f\x07\n\f\n\v\nt\f\x07\b\x07v\b\vtv\x07|\x07t\x07|\x07t\v|\x07\b\x07\x07	\v\f\x07q|tvt+\v\b\x07\b\x07\b\x07\b\v\b\x07\x07}p\n\f\x07\r\b\v\x07\bt\x07\x07t}\f\x07\x07\xDC\v\v\x07\x07\x07\v|\x07v\v\n\n|>\x07v\b\x07v\x85\x07\n\x07\v\x07\x07vtv}\bv\x07\b\bt\x07\vt\x07t\x07\x07\n\n\x07\b\x07\v\x07\x07	\n\v|\b\xDA\x07\x07tv\x9Dt\b\x07\n\v\b\x07|\v|\x07\x07t\vt\x07\x07\x07\nt\x07\x07\f\v}ltt\x07\n\x07\b\f\v\f\x07\x07\x07\vt\b\x07\x07t\f\n\b\b\x07|	\x07\v\f\x07vt\v\b\b\n\n\x07|\vI\v|v\x07\f\x07\ft\x07\nt7\x07\bt\btv\vt\x07\x07v\v\n\b\x07}|\n\x07\r\fv\x07\x07t\b\v	\vv\bt|	\x07\ntt\b\x07\b\v	\v\x07||t\b\x07t\v\v\x9Ft\x07v\b\v\nv\x07\x9D|t\x07\b\x85\x07v\b\x07\v\v\xD3v\x07v\xD3\f\x07	\n}\x07ttvt|\n\x07\vt\b\v\f\x07\b\b\x07\x07\rt\x85\v}\b\x07}t\x07\b\x07\b\x91\v\x07\x07\b\b\x07\x07\x07t\n\v\xF2\b$\b7T7\f777\b\b77*ey(\x07\f7\b\b\b77777 7\n\b7 7\xF2\x8C\x80@@  @\xF2\0\x80\n\x8C\x07\x1B7\x07	\v\n\x07\x07\v\v\b\nI\x07\v\b\b\b	R0\x88\b\b\v  @  '''&\v\n	7\v\n(\b\x07	\v\n\v\n\b\v\n	\n@7\r\x07\xF24    h &  7 \x07  \x07  \x07\x07\x07 \b\v #\b! \f  0  @  @ t    \b7\b \x07    \n!   !	8 \v\x07\x07\x078&\v8,\v \n\v\b\x07\"\n \x07\n (7NMD\b   - !  \x07! M\v!&8Lx	! 	$!iH\vN &&!	 !\"	$\f\v\x07\x07tt8\b\f\x1B$+ \b$ \x87\b\n		i\f7M!'\x07v-3Nw8$   0\b \"	FM \v $M8 8$\x07\b$B!\b\b \x07$\n0\n M\x07tB\f\xB4L\f@ &v  \v!\n@\v\b+  \v@\x07\n! \v\b !. 7\x07J!M\b-\f     $\n\b $\x077 '\f t  \v\x07\n&\v \x07  \x07\v\b\x07\b-H\nB\x07\n  \x07\x07\x07\v\v &NN\x07(&  &N  N \f\v\x07!7$t t &7t t\"\x07\b \f&\x07$-\b3M  M\b@\xAA\x07v\n  v\x07A  \"v\v\r\x07\x07/\x07\f9\x07\b2J \"\x07\x07 H\x0747  	F}!\ft, L	\vQ@\n\x07\b \"\b\b@\b\n\x07\v\n,! P D\v7H'(0)\x1B- $-\x07B\x07 \\\\\\\b @   ,0\\  \\ tf\f \f\n\\\x1B-\bN! 00\b\b\x07 J\x07&v  $\x07!!$!!!!!!!!!!\"\b	( \"\b\v D$1\b t`P\vX\x07&0\x070 2Mv\x07 M v$\x07(@\x07\b \x07 \x07\b3\b F 3 F\v\x07\x078\b\x07\b9\b\f D\f\n\n\x07 <O\f(N\x97\n+3P\b \b\x07!N 3(t  t&!DNw\b\x07\x07\x07\x07\x07 \b\n  (\n N  \x07 \x07 \x07\n \x07$\x07\b  5\x07 $ $\x07 \x07\b\n\b(*\x07\x07 \x0790\x1B\x07\x1B\x07\x07 \b	!	7!\v\x07\b\b\b \b\x07(7\r\x07\x07\f M	7\"\f\n\x07*\b \f \"\f\x07 \x07R \x07\b\x07@\x07  p  @&@ \xB07K'7`\"777(7\xF2\n\"\x07u!\v8I8$-\x07t7$(7 v\\\x07\b\n\b7t\f	\n\x07N\x1B#7'\x077-73)\f\x073 \x07\f\x07A\f\" \x07\f\f 8 6  \b8\x07\n+\b(	\n\b\v' 9/8\xED \xF2\xB9\xF2C\x807\xA4\v\v\v#\v	h8G77\f\x0777\v77	=797\xD9!7\x90\b\v\n	\v\xF2\x80\b7\x947X77\b7\f7$7\f7\be(777D\b\x94\b77,7 \x99\xF2\x80@0\fP70 - \xF27h7\x827	\n7\xA1$777\f777\xF2\xF0\0\x07\xF2\b\xF2\07\xD9&5)lC\x950 (\f$#\xF2\07\b7\b7+77\n77)7,!\x07\xF2\xE177`77\b7\v\xF2.\b7777\x07\f77\b777\b\b{\b777\b7\b77\b77$7\xE9\b\b7777\v7\b$7@77+!\x07\v\xAA\x807\xF2P\x80@.p\f\f72\b\v7\x9477\f7\xF2\xBA\b\xA0\xF2\07\f7\xAE0Y\v\xEC@\v\xC0 \v\n\xCF@f\n\x07D\xC0\x07D\v\xF2/  \v@@@\x80\n\xA20Hd\xA57\b\b7777$\b\xD6\x8C\f7\x90y\b7\b\x8Ey(\x8B7\f77\b7\b7\f7\xF2\x807\xF2\xF0\07\v7 p\xBF77\b7\b77\n7 7\xCB\x07&\"7\xF2\xB477\n77\b77\b7777(777777\b\xF2\n777\x88\b7\ba@F\n/!\xF2\07\xF2P\b^%#\f&M\nT\by$y\xF2\x96@7@\xF2\07P 7`\x0777MH7	 \v\b7\b,dy777\be\f7\b\b7&\x92\f7\x8B\x92\b77\bg77 7\x997\x9C\x807\x07+7y	7\n ` 7  \n7\n \vU77g@7\x1B\xABf\xAB\xAA\b\v\f\b\v\n\v 7	\n\"\x07U7,QMM!!  7&7\n\x077 $\v\v\xF2\x1B77\f7\b\b7\x8B\b\x8B\b\b\by7\f7\x07\n8777\b77\n\b78\b`\b7\xE9y7\v\b\x8E\x90\xF2\0&\xAD\x86\xCC0\xBD&L\xAD\x86\b\xCC\b0\b\xBD&\b\b\xE8\xAD\b\b!\b0\xAD \x86\xCC0\xBD@&\xA0\xAD&\xF2 \xAD!p\xAD@\x86 . \xBB \xCC 0 \x86 \xBD`&  \xF2@\xAD &\xA0\xAD &\xA0\xAD  &\x80\xAD \x07  ! \x80\xAD ( \x86\xAD\x86.\xAD\xCC\b\xAD&\xAD&\x86&\xAD\f&\xAD\n&\"\x86.\xBB\xCC 0\xBD0&\xA0\xAD &0\xAD&\x860\xAD&\xAD&\xAD& \xAD\x07!@\xAD(&\xC0\xAD & \xAD\xF2\xC4\n6\n\xF2;6\xF2\0\x86\xF2\0\x8A\xF2\06\xF2\0\xC9u\xF2\xFEu\xF2\0 \x8A\xF2\0\b\x86\xF2\0\b\xB1\xF2\0\xAC\xF2\0&\x80\xBB\x80\xAD \xBB\xE0\xAD\xF2\06\xF2\0&\xF2\0\x8A\xF2\06\xF2\0&\xF2\0\x86\xF2\0\xB2\xF2\0&\xF2\0\xB5\x80\xB3\xC9\xAD&\xC0u\b\xC6\b\xBD\xC7\xAE\xF2\0&\xF2\0\xB4\xF2\0&\f\x07t|\x07|@\x80\xF2\0\f\xF2\0\b\x80	\x80\n\xF2\0(\xF2\0\x07\xF2\0\f\xF2\0\f\xF2\0\x07\xF2\0\xF2\0\xF2\xC1\v>\xF2\0\x07\xF2\0\xF2\0\b	\xF2\0\f\xF2\0\xF2\0@\xF2\0 \x07\xF2\0\xF2\0	\xF2\077777-7\r77770\n\f\b\xF2\"\x8E!4W\xD37!#\n\b\v	%#\b#8( 7\xF2P7	\"77\x0777#77)N6\xA8\v!\v$7\b-\b\f\v9	&\f\b\v\x07\f\x07\vt\v\v\v$\n(t\n\v\b	\f\x07t		\x07		\x07$\n\f(\v\x07\f7 \v\n!\xF2[ \xF2\07D/\x8B77\x0777(77\xF2wS\xF2[\"\xF2\xBA\f37\b7\b':7\xE3	\xF2\x807\x8A	8\xF28?88 88$8\xB5?\xF2h\xF2\00\xABf\xAB\xAF\x9C\x807\x887\xB46\n7\x077\xF2B ,\bX,\x80\xF2\xC0\xC07\xAE7\x8Bf\xF2`{7\xB0 7\x80 7  \x95`7 \x077\b\xF2\0\xF2\07\xF2\0@\xF2\0\b\xF2\0t\xF2707\x94\r@7 7@7 7\x90\x8077\v	7\x85@7\xF2\xE4\b\b\b$\b\b\b7\b\b\b\xF2\0\x807\xF2\0@7*\x07M 7 7\n\v&\r\x07`\xF2\077+737\n77\xA07 7P7\xF2~\xC87\xF2\b@\x80\xF2\07\xF2\0J\xF2\0 \xF2\0\b\xF2\0\b\xF2\0 \xF2\0\xF2\0\x80;\x80$\x80)\x80$E\xAB:\x80$\x80L\x80$\xF2\08\b$\b\b\b5	S&\b$\b\b\b\b\b$\b/\b'\b$\b\x1B\b\b\b$\b\b$\b$\b\xA8	\x07'\bD\b$\b'\bX\b\x8B\b\b$\b\b\b\b\b)\b'\b\bD\b\b$\b\b\b\b\b\b,\b\b\b$\b\b^\b\bi\b\b\b554\b\b\b\b\b'\b\b'\b$\b\b\b\b\bK\b\b$\b\b$\bB\b \b\b\bA\b\b\b\b\b\b,\b\b$\b$\b\b\b]\b\b$#'U$\xA25$\x07B$\b5K0$$>+\x07\v$\n\nE!!b)\xA8 $A$$\b(\bK/\xA8P $5!'!\v'$\xF2\0\xF2\0\xF2\0F\xF2\0\xF2\05\xF2\0\xF2\0\xF2\0U $  $\bU[U4UK $?$U\b+\b$\b5$\fK$\b$\b$\b8\b$\x07\b$\b$\b\b\b$\xF2\0\b+ ! @ D 5 4  )  $!!\n!$\r,/ $ [ GC'$I    $  $U\b   4   $  * ' $ 5   K  5 \nKQK  @$  > $ 5 P )QKQKQKQKQKQKQ , G $KK $ \xA4@$  U\xF2\0\b@$,,\b@$@4 `U4\f4\bXX4@5@U@\bKQKQKQKQKK@W/@$@\x80$@!@$@@@K@@$@@c@$@Q@=@$@W\xF2\0\xF2\0\x804\x808\x80$\x80L\x805\x80K\x80@[\bB\b\b'\b$\f+\b$\b'\x80\x80\x80$\x80[ F++ B(F\x80+\x80\x80$\x80\x80$6\b  \xF2\0$\x80\x80$FF-F\fF\nFFFFF\x07F\x80$\x80C\x80$\x80\x80$\x80\x80[8\xF2G\xF2\0(\xF2\0\x1B\xF2\0\xF2\0\xF2\0W\xF2\0\xF2\0$\xF2\0:\xF2\08\xF2\0$\xF2\0\xF2\0\xF2\0$\xF2\0\xF2\0$$ $$$D$$5 $ \b!$\b$\b$\b+\b$\b\b0$!$5\b\b\b$\b>\b5\b$\b+\b\b$ U @$ `$  ) \n\n\n\n 4   4  H @$ b  5 K B@$  ] $ 5@$ `^`\bW  $ \f  \b, @K $\bg\x80\x80'\b\b\b\b(\b[\bC\b\b\b\b\b$\b+\b'\b\b=\b>\b$\b\bQ\b\b\b\b\b\bQ\b!\b\bI$A\b$ B 5 F U $  \vK$U8$5++ $5+$@\xF2\0@=@\x80@$@!@K@$@8@$@@$@;@5@@$@@\xA2@!@# 5\x80$ B > $@A0K=@$\x07!	?\n@@@@\bK\b\b\b\b\b\b\b\b\b\b'\b\b$\b\b\b\b4\b&\b$\b\b)\b\b#\b\b\b\b$\b\b\bP\x07$\b\xA1\b\bB\b\x074\b\b$\bU\b:$B	$\b$\b\b\b$\b8	$\x07\b\x07\b\b\b\bC\b\b$\b\b\b$\b\b\b\b\v\bD\b'\b\b\b5\b\b$\b\b\b\b\bI\b\b\b$\b\xA1\b\b\b\b\b\b$\b!\b\b$\bQ!$\b?\b#D#\x07$$A\b\v@$\b[5\b$5$$Q$*\v*$  $!OBK5C$KQB \x07$!$$W$\xF2\0'\xF2\0\xF2\0\x1B\xF2\0\xF2\0\xD3U\xA2,U\xF2\0\xF2\0\b$B@$\fB\n$\v$K$B\v$5!>\bB0$B$5$@$B$\xF2\0\xF2\0\xF2\05\xF2\0$\xF2\08\xF2\05\xF2\xFD\0\xF2\0 \v\b\b\b@	\xC0\b\b\x07t\xD1\b\x80	\xF2\0\xF2\0\b	\xF2\0\xF2\0\xF2\0\b\f\xF2\0 \x85\b}\bv\x07\f\x07\v\x07@	\n\n @	\bt\b\x82\xA0	\xF2\0}\xF2\0\x07\x077\x07v\b 	 \f\x07|\x85\b\bt\b\b\xF2@	\xF2\0\xF2\0\b\b \x07\bt(@\f \xF2\0\x80\xF2\x80\xF2\0\n\xF2\0\xF2\0	\xF2\0\x80@\b \r \xF2@@	|	\bt\x07\v\xC0\xDEp\xA0\xF2\0\v\xF2\0\fv	\b \vt\v \n\x80	\bt\b\b	  P	@}\xF2\0\"\xF2\0\b\xF2\0t\xF2\0\f\xF2\0\xF2\0\xF2\0\b\xF2\0\xF2\0 	\v\f\v@	\x80\xF2\0\xF2\0\b\x07\b\x07\b$	@\x07p\v@ v\x07 \xF2\0\xF2\x000\xF2\0\x07\xF2\0   t	\f\bv\v\x07}0\b\b\x07\xF2\0\n\n\b\b\n\v\b@	@,\n\n\n\b\x80\v@\x07\r\x07\r\xF2\0  b\b3&\x86&\x86&\x86M\n\b\n\x07\n@ \xF2\xF0\0	 \xF2\xBC.\xF2\xFC\0\xF2D \xF2\0\x80\n@	 v\xF2\0 \b\f t\rP0	\v\b\bt  }t\x808v\xC7v\xF2\0\f\xF2\0\b\xF2\0\f\xF2\0\xF2\0\xF2\0\xF2\0}\xF2\x80\b\v\b\b\b\x07\r\v\r\v\r\v\r\v\r@\n\x80\x07@	 \b\x07\v\x80\x07 }tq\v	 \n\v\r\b\xF2\0\x07\xF2\xF6t\n	t\xF2\0\xF2\0\x80	 \r\x07\b\b\x07\x07\b\b\x07\v	 \x85` }@\x07\xF2\0@@\b\f\b\x07\b\b\x9D @\x07\xF2\0*\xF2\0\xF2\0\x80	\x80\xF2\0\f\xF2\0\f\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0\b|\f\n\n\v\b	t\n\b\b\v\n\v \n\v\n\v\n\xF2\x80\x07\f\x07 @\n@i \n	t\xF2\0\b\xF2@\f\x07 \b\n\b\x07\v$@\f\xF2\0\xF2\0\f\xF2\xBA\xF2\xFE\0\xF2D#\xF2\0\x9F0	@\x80	\xF2\0\xF2\0	\ft \f\bt\b\f@t  \n\xF2\0\x07\xF2\0\xF2\0\f\xF2\0	\bt\b 	v\b \x07\x80\xF2\0\x07\xF2\0\x07\xF2\0\v 	\f\x07@\f  \v@	\xF2\0\v\xC0	@\x07\xF2\0i\x80\x80	|\v\v\bH\b\b	\xF2\x88@		\bt\b\b\n\x07@	\xF2\0\xF2\0\xF2\x000	\xF2\0\xC0\x07 	 \xF2\0\xF2\x80\x80\n\xF2\0\f\xF2 	\b\bv\f\v \v\x80\xF2\0	\xF2\0t\xF2\0\b	\xF2\0*@	@\n2\v	M\v\x80| t\n\bt\b \b\x07\b\b\x81\b\n\xF2\0\x07\xF2\0\x07\x07\vt \x9E \x82 \v\bt\f\v\f\n\n` 	\x07\f \x9E \n \f \vv|\b\b\b\xF2\x80\x80\b\xF2\0\xF2\0\v\v\nW\v\n\n\f\b\v P	\b\b\n\v	\b\n\b\r\v\x80	\x80\x07\xF2\0\xF2\0\f\xF2\0\b @\x87\v\b	t\n  	\b\xF2\0\xF2\x80@	 i\bt\v\xF2 	 (	\x80\f\xF2\0D@ 	v\r\xF2\x80	\xF2\0\f\xF2\0\xF2\0 @@	\x80\xF2\0\x07\xF2\0\xF2\0\f\b\n\b\b}\bv\xD3\b	v\bt\v\b\x80\xF2\x80	\x80\x85\xF2\0\x80K@@}\xF2\0@\n\x07\v}\v\b\n\xF2\xA0\xF2\0\b@\nt\f\b\x07\b|t \bt\b\b\b@\v\x80\x80\xF2\0\xF2\0	\xF2\0\"\xF2\0\v\xF2)t\n\xF2\xD6\vt\xF2\0\x07\xF2\0v\xF2\0\f\xF2\0\xA0	  \n\x07\b\f\x07\v 	\f	\b\b\x07t \x80	 | 	\b\b\b\b	@\x07v\b\x07\bt\b\x07\xF2\0\f\xF2\0\xF2\0	\xF2\0\xF2\0t\xF2\0	\xB00\x9E \x07\xF2\0	\xF2\0\x07@t@\x80\x07\xF2\0\xC0	@\xF2\0\bt\b	vv\bt@\x80	  	@  @	\vl\v]\n\v\v\xC0\v-\v\v\xF2\x80\n\n\n\n\n\n\n\n\n	\n\b\b\n@\xF2\0\bt\xF2\0\b\b|\bt\bp\n@	@@	\xF2\0|\xF2\0\xF2\0\xF2\0\bv\f\x07$t\v\v\b|@v\b\r@\xF2\0\xF2\0\f\xF2\0\xF2\0\f 	\b\b	t\bt\b\bt\b\xD3\b@v\r\b\n\b 	\x88\b\x07\v\x07\bt@q\xF2\0\x07\xF2\x004\xF2\0\x80  \f(F}h6h6\bt\b@	\b\v\f\v\f\v0t\xF2\x80\b	\xF2\x000\xF2\0	\xF2\0  @\f\xC0\b\b 	@  \n\xF2\0\xF2\0\xF2\0	 \x07|\v}\f\b\f\b\x80\n\xF2\0\f\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\0	@\x07 	 \x07 v\b|\bt\x07\xF2\0\xF2\0	\xF2\0\b\xF2\0\f@@p \x9C\b	\b\b\b ` t \b(\v\b\f 	@\xF2\0	\xF2\0\xF2\0\b	\xF2\0\x07\xF2\0\b\xF2\0\f\x07\xF2\0\b\x07 t \x07\xF2\x80\x80\v\bv \x9E@	\xE0| \xF2\0\xF2\0\b\xF2\0\n	@ \b\b\n\b\xF2\x80\xF2\0\f\x80	@\v@\x07\xF2\0	\xF2\0\xF2\0\b\xA0\b\b\b	\b@\f@ \x07t\nt\x07p }}#}\b}7}7 }\x80\xF2\0\b\xF2\0\f\v\n\b\r	\bt\b 	\b\x07\b\b\x88t\xF2\0\xF2\0\xF2\0\x07\xC0}@ \x07\b	\x9F v\x80\xF2\0v\xF2\x002\xF2\0\x07\bt\b\b\b }\n\n\v\f\n\v\n	F\n\v\n\x07\n\n\n\v\n \b\x80\xF2\0\v \b|\bt\b\n\bv@i\x80\n\xF2\0\xF2\0\n\xF2\0\xF2\0	\xF2\0\v7\bt\f\b\x07\v\x07\nvA\x07\x80\xF2\0\n\xF2\0\x80}0\bt\b| \xF2\0\f\xF2\0\xF2\0\x80\n\x07\x07\x07\n	\b\v\x07\x85\x07\x85\bt\v\b\b\v\bv\b\x80	\x80 q 	@\x07\b\bt\b\b|\b\x85\b\bt\b	\b\x07\bt\xF2\x80\x80\xF2\0}\xF2\0\x07\xF2\0+t\xF2\xC6\xF2\0	\xF2\0\xF2\x80\n\f 	 v\v@\b\vv }vt\b\bt\b	\x85\x07\xF2\0\v\v\x07\v\vq\v\v2@\vB\v=v`	\xF2\0\xF2\0\xF2\0\xF2\0\x80@\f0\xF2\0\x07\xF2\0\b	\xF2\0A\b\n\b\x870	 \x07\bv	\b\v\x07\v\n\vt\bt\b| \xF2\0\x80\b\bt\b\b\x07}\b\b\v\x07\v\v\v\x07\v@\n\xF2\xA0\b	\b\x07\bt\bv\xF2\0		\n\v\f\x07\x07\v		$\x95:\x80tv|\b|\v\x9D}	\x07\v\v\x07\b\x07\vi|\x07|\x9D\vt|\xF2\0\v\ft\ri\nt\b|\v\b|}\f\n\v\x9F}|\v\x07\x07\v\v|\x91}\x07v}!vi\b|t\x07\n\vt\x07\fti\b|\xF2\0 	 \b\bt\f\bt\b|\v \r\b\x07||@\bt}\b\vt\xC0\f\b\b\r0\x07\n\x07\n\x07\v\n\x07\n\xF2\x80\xF2\0\xF2\0\xF2\0\xF2\0\f\xF2\0\b\xF2@?Lv\v\n\b\v\f\b\b\x81\x07\v\f\v\xF2\0`\bt\bt\x80@@	\x80\xF2\0\b\xF2\0\b\xF2\0	\v\bt\b\n\v\n\n\v\n\v\b\b \v`\v\x91\b}\xF2\0\f}\b\xA0\n\nt\b\b	\b\r\bq@\n@	\xF2\0\xF2\0\xF2\0\xF2\0\n	\r\b\x07\x07\x80\xF2\0	(}t@	\bt\bv@	\xF2\0t\x80@	\x9D\b\x07\x91\r\xF2\0\f\xF2\x80	 \n \b|\b\xF2\0@ t\xF2\x80\xF2\0\x07\xF2\0@}@t \bt80t\bt\bt\b\b|\b\xDB\ft\n\v\x07\v\b\bt\x07\b@\xA0\b\b\bv|\v\x07\f t\b\x9D\b\x07\xF2\0\n\xF2\0\xF2\0\xF2\0	\xF2\0\b\b\n	\n\v\x07\n\b\r\bv\b\b\x07\v\xF2\x88\bt\x85\b\nv8\n\n\x80\x80\xF2\0	\xF2\0D\xF2\0@\x07\xF2\0\xF2$\v@\n \v`\x80\n\b2\n  \xF2\0\xF2\0 	\xF2\0@0@	\bv\b\r| \x07\xF2\0\xF2\0\n tP\x80v\xF2\07\v\xF2\xC8\xF2\0\b\x07\b\xF2\xE0\xF2\0v\x80	t	\x85\x07 \bt\b\x07\xF2\0v\xF2\0\x07\xF2\0t\f\v\f2\v@t\x80\f\xF2\0\b\b\b\v@\x80\x07\x88\bl\v\x07\n 	}\v\v\bm\xF2\0 \v\b\n\b\v	@}\b\b	\v\f\v	\b \b\b\v\f\b\n\v\xF2\0\xF2\0\x80  \xF2@	\xF2\0\xF2\0t\xF2\xA0 \n@	\xF2\0\v\xF2\0\xF2\0v\xF2\0\f\xD0\x07tt\xF2 \b\xF2\0\f\f\xF2\0\xF2\0	\xF2\0\xF2\0\xE0| \x9E\xF2\0H\v\v$\v\f\v\x80\xF2\0\x07\xF2\0\xF2\0\n\xF2\r\v$(\v,\v \v!\x07\v\v\v\xF2 \n\n\n\v\v\b\f	\v\n\n\v\v \x80\v\xE4\n\b	\f\xF2\0\xF2\0\n\xF2\0\xF2\0\xF2\0	\b\x07i	\b\x07\x07\n\v\v\n	v\v\x07 \f\b\b\v\b\b	\b\b\b\n\bv\b\b\b\b\x07\x07\x07\x07 @\xF2\0\b	\xF2\0\x07\xF2\0\f\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2 \bt\b t l\xF2\x80M0\v- \v3 \n\\\b\b\n\b\v&-\n@@\v@@\v\x80\v\b\b|\btH\x802tLt\x80\n\n\n @&\n&\n\v \n@\xF2\0\f v vv\f\r\bt\b\b\b| @\f\xF2\0 	 @	@@0\x07@	\b|\bt\b\b\xF2 \xF22\n\v\xC0`\v\n\v	D\v\b	\x07\v\v/\v\v\v\r\v\v\v\v\v-\v3\v\v\b\b\f|@}@	@\x80 \x07\n\x07\x07\v\n\x07\v\x07\f \b\n	\xF2\xD9\xF2v|\b\x9F\b\b\xF2\xA0|t\b\x07\v@\b\v\b\x07 	 \n \xF2\0\x07\xF2\0\xF2\0P\b\v\btv\x80\xF2\0\b\x80\n\x80	\xF2\0@	\b\b\v\b\x9D\b \xF2\x80  \v}8\xF2 \b	\xF2\0\x80}\xF2\xC0\n\x80	\n\f\xF2\0` 	\x80\f\xF2\0\x80\n@\v \n \v\b 	@\x07\b8t\b\r\xF2\0\xF2\0\b\xF2\0\xF2\0\b\xF2\0\xF2\0@\bt\b\bt@\b@\xF2\0\xF2\0$@|$|\b0	 @\xF2\0	\xF2\0\xB8\x07\x07\x07@\xF2\x80\b}@m\b\x07\b\bv\v(\f 	@\x07\n\xF2\x88\xF2\0\b\xF2\0\xF2\0 	\x90v`\xF2\0\xF2\0\x07\xF2\0\xF2\0\xF2\0\nit\bv\b\v\x07(\x82@	t\b	\bt\xF2\0\v\xF2\0\b\xF2\0\v\xF2\0   \b\bt\xD2\bt\b\v\x07t \x07~\xF2\xF2\0\b\xF2\0\xF2\0@@	\b\bt \v\n\x07q\x07\v\x07\x07\n\v\x07\x07\n\bt\b\x07\xF2\0 |\n\b`	\b|\b\xF2@\xF2\0\xF2\0\b\x07\xF2\0\b \b\b\x07 \x80\xF2\0	\xF2\0\xF2\0\f\b\b\x07p\x07@\v@|\v\b\x07\bv\bt \x85\x80\xF2\0\xF2\0\xF2\0\xF2\0 \f\xF2\0\b\bv\b\b\b\r\v\rvv@	@@\x80\x80\x07v\n\x07\v\n\v\v	\b \x07@1\x07t\x07\xF2\0\b\xF2\0	\x80 `	\xF2\0\xF2\0 t\xF2\0@\b\b\xC0	@@	\xF2\x80\xF2\0\xF2\0\n\xF2\0$\xF2\0@}|\v$\x07\x07\xF2\x80\x07\x07\b	\bt@	t\b\f\v\f  	\xF2\0\x90t} \b\b\n0\xF2\0	\x80 \v\x91\b\v\b\v@	@\x80	@q\xF2\x80\b \b\x07\b\bt@B\r\xE1\v\xF2\0\xF2\0	\xF2\0\xF2\0v\xF2\0\xF2\0	\x80@@v\xF2\0\b\xF2\0	\xF2\0\xF2\0v  }\bX0\xF2\0\xF2\0\xF2\0v\bt\bt\n\b\x9D\b@	\xC0@\bt\b\x07\b\b\v\b\x9F\bt	 	\xF2\0\xF2\0\b\xF2\0	  \x9D\x80	  \v\xF2\0@	\xF2\0\b0\f\x07|@	@\b\b\b\b\n\xF2\0\xF2\0\v\xF2\0\xF2\0\xF2\0\xF2\0\b\x07\xF2\0\xF2@	@\f\x80	\xF2\0\b\b	\b 	\xC0\xF2\0\xF2\0\xF2\00\vP0\v \v \v\v-\v	0\v\b\x07\b\v \x07\x07\f\x07t\x07\v\x07\x91|\x07}|\x07\x80\x80\n\xF2\0\xF2\0\x07\xF2\0\xF2\0	\xF2@@	@\b\b\bt}t\b9\n6\x80\x07\xF2\0\xF2\0\xF2\0\bv\xF2\0\"\xF2\0\x07@\f \b|\b\f\x07\x80	 @\f\x80\x87\xF2\0	\b\b\x07\b|t\b \fv=\b\xF2\x80\xF2\0\b\xF2L\v\xB0\xF2\0\f\xF2\0\xF2\0\b\ft0	\b\f\b\v\v\v\b\b\x80	@ }t\b\b  t\b	\b	\xF2\0\xF2\0\b\bt\b|\b\x07\b \f@\x80\xF2\0\xF2\0\f\xF2\00\b|( 	\v\f\n\v\n\n\v\v\v\b\v\v\v@\xF2\0	\xF2\0\xF2\0\xF2\0\x07\xF2\0\b\xF2\0\xF2\0@\xC0	t\b\x07\b\b\b\bt\b@\v\b\bt\b\fvH\b\x9F(\v\v\v@\x80\f 	  \xF2\x80	\xF2\0\xF2\0\xF2\0|\b\v\bt  \x91\n\n\v\x07\x07\n	v\x07\n\v\x07\f\n\x07@\n\xF2\0\b\n\b\b@	\b\x07\x07\b\bv\f\b\r\bv 	 \x07\xF2\0@\f\f}\v\f\x85\v\b\f\v\x80	@i\b\x07\f \b\x80	| \f@@@\f\x80\x80\v\xF2\0\xF2\0\f\xF2\0\xF2\0	\xF2\0@|@\n\x80  \f@\xD3  @\x80\x80\f\xF2\xC0$t\f	\v\x07\f\v\xF2 \xE0\v\v\xF2\0\xF2\0\x07\xF2\x80\"@	 @\f@	\xA0 @v  	 \b\nt\n\n\n\xF2\0\xF2\0\x80@ \v\xF2\0\x07\v\x07\bt	 \x07t\n\x07\v\x07|}\bt\v\bv\b 	\b\b\x07\b\x07\b\b|\b\r\xF2\0	\xF2\0\f\xF2\0	\xF2\0\v\b\x07\b| \b\n\b \b\x80\x07\xF2\0\xF2\0	\xF2\0  \x9C\x07\b|\b\b\xD1\b\v\b\b\bt\x80\xF2\0\xF2\0\f\xF2\0\xF2\0\x80	\x80 | @	\x80\xF2\0\x07\xF2\0\v\xF2\x97\fh\f\xF2\0\xF2\0\xF2\0	\xF2\0\f\xF2\0	\xF2\0\x80i\x80t\xF2\0\xF2\0\x07\xF2\0\f\x80@\b\b\b\v\b\x07\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0	\x80\f\x80\x07|t\b\x07\x91\vt\b|\vv|\bt\n}|\v^\v\x85\x07t|\fv\x07|\b\x07\v	v\x07\b|\x87\x07v|\f|\v\x91t\x07\ft@ 	\b\b\v\x80	@v@\vH\bt\b\f\b\x07\xF2\0	\xF2\0\x07\xF2\0	 \f\v\f\v\b\n\b\n@@ v|i\xF2\0\x07\xF2\0\f\xF2\0\b\xF2\0\xF2\0\x80\x80\xF2\0\xF2\0\xC0	\xC0@\f@}\xF2\0\x07\xF2\0\xF2p\bp\x07\bt\xC0@\x85\xF2\0\xF2\0i\xF2\0\xF2\0	@@@@\xF2\0	\xF2\x80 \n\bt\b\x07		 \xF2\xF0\xF2\f\v\xF2\0	\xF2\0t\xF2\0\b\x80\xF2\x80\xF2\0\b\xF2\0\b\xF2\0\r\b\x07\b\x82\b\b\b\r\n\v\n\v\v\f\v\f\v\f\vP\f@\f^\b\xD2\rt\b }\b\b|\f\xF2\x80\xF2\0	\xF2\0\b\xF2\0\xF2\0\x07\xF2\0\n\xF2\0	\xF2\0@	\xF2@\x80\xF2\x80\b\f\x07\bvP\xF2\0@t@\x07\x80	\xF2\x80@\f \nvp\x07`\v\n @@v\x80\b\x07 @\x9F@t \v \b\xF2\0\xF2\0\b\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0	\x80t\b 	 \x9C 	\xF2\0@v@\n`	 \b\x80	\x80v@	0\f\r\x80	\xF2\0\b\xF2\0\b\xF2\0	\x80@\v 	 \b\xF2\x80\f\x80\xF2\xC0 ~\xF2 \xF2\0\x80	@@\xF2\0\v\xF2\0@@\n\xF2@@\x07\x80v \r@\v\xF2\0\xF2\0\xF2\0\x07@@\x80	\xF2\0\xF2\0\xF2\0\x80\x80	\xF2\0\b\xF2\0\x07\nq\x07\n\xF2\x8A\x07\xF2\0\xF2\0@\x87@@	\xF2@\xF2\xB0\b	\v\n\v\n\x07\n\xF2\0	@@\x80\xF2\0\v`	 \x80\x80	\xC3\v\b\x07}tx\x07\b	\f @\x07\x80\xF2\0#\xF2\0\x07\xF2\0\xF2\0\xF2\0 	\xF2\0\bt\xDEv \xF2\0\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0@@	@t\x80	@}@@	\xF2\0\x80\x80\x80 t  \x9D @    i@\v@@\x80\v\xF2\0\b\xF2\0\n\f\xF2\0\xF2\0v\xF2@\f	\f\n\b\f\f\f\b\n\v\n\f\v\v\n\n\vUv\n\v\n\b\b\x07\x07p\v\x9D\x9D\b\vY\v4D\x80\xF2\0\xF3\0\0\xF3\0\0+)\b\b\b$+++G\b+++$\xA6\b5$G\n	\v\v$\f\b$\b5\b8G \f\n	\f\n\n$\f$\f$\b$&(\n\v\f\x07\n	\n\x07\n\v\n\f\n\x07\ftu\x07\vt	\b\v\v\v\f\x07t&\f\n\b%\nM\x07\x07\f\f\n	\n(\xF2\0\xF2\0\xF2\xD4\f\f$t\f\b\b\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\x80\x80\x9D\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0\v@c \b\b[\b\b$\b\b K\b\b  \xF2\0\xF2\0\b$\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0!\xF2\0\v	\v\nV!	\x07\v	\n\x87\v8\x07F9L	\v\f\x87	\n\v(o-JNM7\fo-JNM7\f8\x07$!,'4 #+5I>WAYY#\b\f\b\v\x07\x87\f \xF2\xF2\0\xF2\0\n\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\n\xF2\0\xF2\0\xF2\x80\x07\x80\xF2\xE8\xF2\xF2\05\xF2\0\b\b\b\b\b\b(\b$!,+$\b\b#\b!@F\xF2\0X7\b\xA07\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\08\x80K\b\x1B$4\b$\b\b\b\b+\bVc\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\07\xF2	\x07 \xC0\n\xF2\0\f-\r(-\xD7-s3\f-\bJ\fw-43\b-\xF2\0\x80$  $\b\bF\xF2\0	\xF2\0'\xF2\0\xF2\0\xF2\07\xF2\0F\xF2\0\xF2\0\n,\xBE\xF22\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0%\xF2\0\n\xF2\0\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0u\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\b\f		\x07\b\n	$7EP07\xF2v\xF2\xFA\0\x80\xC9\x80\xC0\xF2\0\n\xF2\0u\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0	\xF2\0\xF2\0\xF2\0x\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\07\xF2\0\xF2\0\xAAU\xF2\0\xF2\0@\"  d\x80\xB1\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\x07\x07\n#J\xBF	Ut7	t\xF2b\xF2\0\xF2\0\xF2\0\xB5\xF2\0\xF2\0\xF2\0\xF2\x80\x07\b	3\b\b\x07\b\n\b\b	\b( \b\b\b3\b\b(\b\b&\b\b!\b\b\b\b\b8\xF2\xA0\b\b\x07  3 ( & !  \xF2 @(\xF2\\\b\xF2\xD0\b\x07\b@ 8  \x07\xF2\0	\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\x8E @\xF2\0\xF2\0\xF2\xD0\xF2.\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0 .0& u@&@\xAE\xF2\0\xF2\0\xF2\0F\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\b\b\n\b\v \x07 \v\n0\v\n \v \n \v	\x07t\f\v\f\v\f \n\x07\x07\b\x07\b0\v\x07\x07\x07\v\"\x07}\v}\v\b\b\x07	\v\x07\xF2\xB0t\b\xB16\f\xF2\0\x80\x89\b&&&)&&-&&&\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0<5\xF2<\x07\x07L\xF2\0	\xF2\0\b\bQ\b\bD 5\b\b\b @\b\b!\b\b$\b\b5O\xF2\0\v\xF2\07\xF2\0\xF2\07\xF2\xF4\x07\xF2\x07\xF2\0\xF2\0\x07\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\0p\b\xF2\x88\xF2\0\xF2\0\x80\x1B@@)\xD17\xF2:\b7\fP7 747\xF2\f\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xC0@)H\n\xB7\xF2\0\b77\xF2\xEA\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\057+f7\xF2\xF2\0\xF2\0\xF2\0v\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0Q\xA9\xF2\0\n\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0@6\xF2\n\x80F\xF2\0\v8L\b	\x07\x07\x07\v-	!)\x86v\x1B;\x07\x07M\n\x07	\v7	\x07t7'7&\b!v8\x07&R\xF2\0\xF2\07\x80@O\b\b5 U\xF2\0\xF2\0\xF2\0@\b\bK\b \b\b\r\b\bM\b.4	444H\xF2\0\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0\b\b($\b\b\b\b\b/\x80=\xF2\0 v\bv\x80\n\bv\bvv\xF2\0\v)\b\xF2\0\xF2\04\xF2\0\x9ENa\xF2\0\xF2\0V\xF2\0\xF20@\x80\f\xF2\x80PF\fF($\xF2\xF2\0v\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0!\xF2\0'\xF2F	!>!>\x96!;!!\xF2\0\xF2\0\xF27+&:!\n\x07\v	\x07\xF2\x80\xF2\0^;E\x07\xF2A 7\xA0\b=\b$ $\bE\b\b$\b=\b\b\b\b5\b\b\b!\b\bF\b@Kz03J-3\b-N\x93N3z\f2-M\xE84\xF2\0F-\x96-(-\x88 \x93--\bx -\xD4M\boM\b3-\f\xF2\0\xF2\0!\xF2\0\xF2\0MNM3\x88\bN\f--\b--\xA3\x88-\x96\fz4\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0-o\bo\fJ--\b-8-N\x96\f3\xD4s\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0!\x80Q\bb\b\b!\b\b\b\b\b$ =\xF2[s\xF2\v\xF2 \xF2\0\xF2\0\xF2\0\xF2\0\n7\xF2\0\xF2\0\xF2\0\xF2\0(U\n\n\xB3\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0!4\xD4M\xD4\xEB-\b\\,\xA7--\f3w\b\b-M\x96\xF2\07\xF2\0\xF2\0,\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\xF3\0\xF2\0'\xF2\0M\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07-\bw\f\xA3\x97o\xD5-\fw\b--wM3--\x96\f\bN\fM\xF2\0\xF2\07\xF2\0v\xF2\0\xF2\0!\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0-s\xD4-o\x883N-,x\x93\\\b3X\xF2\0\xF2\0\xF2\b\b7&\x077@\x80\xF2\0\b'\x07'	\x07\x07\x07	\x07\x07\x07'\b\x07\x07\x07\v\x07\b'%'\b\b\r\x07	\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\b\v\\\x07\x07	-\x07\xF2\0--\xD5\xA7-(x\\(-\b\\,--\xF2\0@\xF2\08\xF2\0BP	7` \xF2\0@4\n\v\n\xF2\x80\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x07\xF2\0'\xF2\07\xF2\0\\\xF2\0\x07\xF2\0\xF2\0Y'!\xA6'\xF2\xAA\xF2M\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0v\xF2\0\xF2\0\xF2\0\\\xF2\0\xF2\0\xF2\0\xF2\0\\\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\07\b	h\b\b\b	\x07\b\b	\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0	Ps\n((\n\v'\v\n\n'\r\n\v\xF2\07\xF2\0M\xF2\0\xE0\\ z\xF2\0\xF2\0\xF2\0M\\\b-\bN,3(-\bM\x96 --\xA3\f-\b3\xF2\0\x82\xF2\xFC}\b\b\b\b D\f\b$\b\x80T\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0c\xF2\0\x80\b$\bA$\b\b\b\b#Q C\xF2\0\xF2\0\xF2\07\xF2\f7\xA27L\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0b\xF2\0\xF2\0'\xF2\0\xF2\07\xE0\v\n\n\v\xF2\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2(\b\f\f7	\xF2\x9C\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\x80C\b[\b($\b$\b \xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\v\bm\b0	\xF2 7 9\nF\xF2\0  \xC0\xF2\0\xF2\0\xF2\0\x07\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\xF0\0}\nIp=(r*#!\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\v\v\x07\v\b\v\n\x07\v\v\nv\f\v\f\v\v\f\v\fv\v\f\x07\v\f\v\n\v\v\v\n\v\v\vv\x07\fvv\vv\x07\f\n\v\x07\v\vv	\x07\v\b\v\n(\v\n	\xF2\0\xF2c3\xF2\x9B\xF2\0@	\b\n\b\v\b\b\v\v\"\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xDC\n\b8\xF2 777<7\b7\b	7\b7\b777y7\xF2\0\xF2\0\xF2\07\xF2D,y\byPy\xF2\0\xD0\n\n\xF2\xF2\0\xF2\0\xF2\0\f0\n\b\x07 \xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\x80\f\x07$\xF2D\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\b\xF2\0\xF2\0\f\v\x07|}\x07t\b\r\n\x91v~'c$$!Ih*\xA4\x1BA+)6&:(\f#&5u W,\x86\xA5FY4@8;7\x96N-w\\z3\fMoJ7=\xF2\0F\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\05\xF2\0\x80) $\b\r\xF2\07\xF2\0\v\xF2\07\xF2\xD9\n\xF2&\xF2\07\xF2\0\xF2\07\xF2<7077\b7\b\b777\b\x87\x07\xF2\0\x071\v\b\xF2\"(W\x80\xF2\xE0\xF2\xF2\0\n\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0;\xF2 \x07\\\xAD\x86\xAD\x86\b\x07\n\x07\n\\\xF2\x83x\x80\f73{\f7 \n7\n$\n\nQF\b@\x80\xF2\0y\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0!\xF2\0\xF2\0\x80>\x80$\xF2\0\xF2\0\xF2\0\xF2\0,\xF2(\b77\x077777\x07\b7\b77y\xF2	\xF2\0\x07\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0!M\xF2\n\vM7	7b \r\x91\n7	'\b!4\n(#&N7\x07-\n77\xF2\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07Ei@!!!	!\xF2\x80\n\xF2\0+\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0!\x07|\x85t\b\v|\x07\f\x07\x07t\x07\b\x07\v\b\x9Dt\x07}\v|\x07t\x07\b\x07|\n}\b\x07\b\v}\v\b\x07\xF2\0!\xF2\0G<78<\x80.\xF2\0\xB5\xF2\0\xF2\0	\xF2\0\xF2\0\b'$m\v\xF2\0\xF2\0\xF2\0\xF2\07\v\v]777\x077f\n77\vf7\x07	$\n\v(&\bM7\b7xw\xA4c\x07&8}Y\xA5\n\xF2\b\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0!\xF2\0\x07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xB5\x80 \n\v  \x80\x80\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\n'!\xE8\xF2\x80\x80\xF2\0\xF2\0\xF2\0\b\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0&\xF2\0\xF2\0'\xF2\0\xF2\0\xF2)\xF2\xD5\xF2\0\xF2\0\xF2\0\b\b\b\b\b\b# !4\x84\x80\x807\xF2#\n\xF2\xDC\b\xF2\07\xF2\0\xF2\0\v\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xE0\b\xF2\0\xB5\xF2\xCF\f\n\x07&\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0&\xF2\0\xF2\0\xF2\0\xF2\077\b @\x07\n\v>\n9\b @\xF2\x80\xF2\0\xF2\0\xF2\0\xF2\0\xF2\x98	\xF2f\v\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xB8\b-N\f-N\f-\bN3\b--(\xD4\b\f\b\b000\xF2\0\xC48\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0!\xF2\0\xF2\0\v\xB9F\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\x95L\b\n\xF2\0\xF2\07\xF2\0-s-\bN\bz\f-$\\-M@-\f-\f3\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0&\x07\x07A)'\fA\vC\x8FL\v$7\x8F\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\x07-x2JJ\x88$\\(wx\fJ-\x96\b-\xD4\x96-\b\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2@4@\f\xF20\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\n\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\b \n\xF2\xC0N\b-(J<\xD4M\x97D\x88\xA3\xE1\x97\xF2\0\xF2\08NN8\xA3\f\xA7\xD5M-- -\bs\xF2\0\xA3-\xD424\x96\xA7-ooM-\\\xA3-3\x93\xA7-3\bs\xF2\0\xF2\0\xF2\0\xF2\0\xE4\x07\n\xF2\0\xF2\0!\xF2\0\xF2\0	\xD5-N-3-N\b\xD4\bN-\f-N\x973-\\N-\x97 M-\b-J\x97-\bo-\bJ(x\f-$\xF2\07\xF2\0NN<-3\b-3-\b-\fJ\fN-33N-\b-xJDM\bw-\fM\b-\x96M-NM-\fJM\xF2\0\x80\b>\b!@\xF2&77	77\x077\x077,\x07#\xF2$\xF2\0\xF2\0\xF2\0\xF2\0\xF2\08\xF2\x002M\b3\f\xD5\xA3\xD5 x\b\xA7-\xD5-\\w-<-\xEF\fMJ\bx3oNM\x96M\b\\\bo\bM3\fMN\\\b--\fx\bN\bM\b--\xA3-\xF2\0\xF2\0\xF2\0\xF2\0\xF2\x8007:\xF2\0\n+!7\n\v\vT \xF2\x8F\f\x941\xF2\0\xF2\0\b-\\-@o(\f-M\b\xD4M\b-\b3N\f-\xF2\0(\v\v]\v5\v#\n\xF2\0\xF2\0v\xF2\0\xF2\0\xF2\07\xF2\0!\xF2\0'\xF2\0\xF2\07\b-\x96\xA3-M-\f3-\b-$\x93\f\xA3-\b$\b-\b3-\f-\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0!\xF2\07@7\x077\xF2\x80\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0v\xF2\0\nW\n\f\n\nv*\n\x07-\n\n\f\n\xF2\0\xF2\0\xF2\0\xF2\00@\x80\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0<M---N33\fM \xA3\f-Ls\xDE\x93\xDE\xF2\0t\xF2\0 \x07\x07\x07t\b\x07\b\x07\b\x857\b\x07|\v}v|q\x07\btpv\b\v\vm\x07\x07\v\f\x9F\x07	\x07\b\x07\xF2\0\xF2\0\xF2\0\xF2P\f\n\xF2\0\x07\xF2\xAE\xF2\0d\xF2\0V#+U#D$#5@#$\b#\b)+\v$')#7$!#>\xF2\0\xF2\0\x80 \n\n(\b$\xF2\0\xA0`\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0&\xF2\0\xF2\0\xF2\07\xF2\0!`\x07 \n  \n\b\f(\n7\\7(\x95(7y\b\x07\xF24\xF2\0\x80F7<\n77\b\n\b7\xF2\b\xC0\f!\n!!!\xF2\xC8\x07\xF27\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0v(t\fsp\b\f!evNt\b\\'\b\b\b\b\v\b3z-iw\r\xF2\0\xF2\0 \xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x1B55\v55555555555	!55	555\x075\b5\x07555555555555555555555555\x0755!555\xF2\0\v\xEC\xF2\0!\xF2\0'\xF2\0\x80\nD\n8\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xD0! !\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0  }\xC0\xF2\x80 G\x07\n\x07)	\xF2\xF2\0h\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0@\n@@@\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\f\xF2\0\xB0\b\b\n\b78@\b \x80\xF2\0#7\b\x07\f7\"@v\n7\n\x07\x078Q8$8\xF2`\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0}}}' }@ \b}} @\b\b0\xF2\0t\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\f\xF2\0\xF2\0\xF2\0\xF2\0t\xF2\0\xF2\0\xF2\0\xF2\0t\xF2\0J\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\b\b\f\x84\b\f(t\x07\nv	0\xF2\0\xF2\0\n\b	9H\xF27	\x9C\b,\xF2\0\f\xF2\0\xF2\0\xF2\0\f\xF2\0\xF2\0\x88\n@\xF2\0\xF2\0\xF2\0\xF2\0\f\xF2\0\xF2\0\xF2\0\xF2\0M\xF2\0\xF2\0!\xF2\0'\xF2\0\x07\xF2\0\xF2\0\xF2\07\xF2\0\xF2\047\xCB\xF2\0!\xF2\07\xF2\xFC\0v\xF2\xF2\xFB\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0-\xF2\0\xF2\07\xF2\0\xF2\0v\xF2\0\xF2\0\n6\b\xAA\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0t\xF2\0\n\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0 	 @ 7\b\x07\b\f\x07\x07\xF2\0\xF2\0\xF2\n\v\v\r7\x07\v\xA0\n\n\x07\n\x07\x07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\b*	\b P\b\b$\b\b\b \xF2\0\x07\x80H\b$'$'$	$B$c\v$\v$\bD\bC\b\b\xF2\xF2\0\xF2\0\xA4W(GW(W\xF2\xFF/\xF2\0\xF2\0!\xF2\0\xF2\0+\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\bII$#I*!oU\b5\b#tDV5$#D>'#\v	!E)!\xF2\0 5\f	3NA$>C\xA8$+U\n,	\x1BA\b:(Q$\xF2\0\xF2\0t\xF2\0\b $\b*\b$\bP\b\b5\b\b(\xB1\bTP\xF2\0\xF2\0\xF2\07\xF2\0\x80\n P\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\xF2D.\xF2S\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\b>\bXIIIII\bA\b /\b$\b\x80;\xF2\0!@;\b\b 5\b\b\b\bP!!\b \xF2\0\xC00\bl(>\x80\xF2\0\xF2\0!\xF2\0v\xF2\xFA\0\xF2\xFB\f\xF2\0\"	\x07p\x80F\xF2\0\xF2\0\xF2\0\x80@[\b\b 5\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0F\xF2\0\x07\xF2\0\xF2\0\x80'~'77\x077\b\x9537\b\v$777\x1B7\xF2\0\b8 \x80\xF2\0#\n\xF2\xE6\xF2\0\xF2\0\xF2\0\xF2\0\xF2\x91\xF2n\xF2\0'\xF2\0\xF2\0	\xC0@\xF2\0T8	8\v4\f8\x07888P88\n\v8\x07\xF2\xFC\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x1B\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x80\x1B \b\b\b\b!@W 77\b7@7@e\xF27\xC0 7 \xF2\07\xF2\0\xF2@ 7@\xF2\x80	7\x8B7\x80\b\xD6\xEA0\xF2\x807@\xF2@\b7\xA0 @\xF2\07\xF2\0\xF2\07777\b!77	777o7&7\n77\xF2\07'77E7n7\xF2\07\xE0 \x07\xF2\07\xF2\0\xF2\07\b\b#7D\b`\xF2\07 07 \x07\xF2\0\v7\xF2\0\xF2\07\xF2\0\xF2\07\xF2\0\xF2\xB27N\x807\x80\xF2\07\xF2\0\xF2\0\n7!7777777777{\x98\x807\x80\xF2\07\x80F`\xF2 #7\xF2\0\xF2\07\xF2\0\xF2\07\xF2\0\xF2\07\f7\x077\b7 7\b7\ff77n7\b777\b777\n7\r7(\xF2777e7\xF2\\	7a7\x9E\xF2	7\xF2\xFC\b7 \b\xD8\xF2\0\f7\xF2\0F\xF2\0<f\xF2C\xF2\07\xF2\x80\x80y \xEF-\b\b-\bNx-zN\xA3N0J-\x88!\xD4-\\\xF2p\f\xF2hD\n\xF2\xE8\n\xF2^\n\xF2\xF7?\xF2<\xF2\0\xF2\x80\x80\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0'\xF2\0\xF2\0\x90\b\xF2p	\v\xF2\xEA\xF2\0\n\xF2\0\xF2\0\xF2\0\v\xF2\0\xF2\0  \v.\n\n\x80F\xF2\0\xF2\0\xF2\0\xF2\0v\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2`  \x077\x07\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\0\xE4t\xF2\0\xF2\0\xF2\0&\xF2\0\xF2\0\xC0@\xF2\0\xF2\07-\xD54s\fN\bMz\\J\f\xD4\x88 \xD4\f-\b\xF2\0\xF2\0\xF2\0&\xB1NX\xA7\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2}\xF2\x82\xF2\0\xF2\0\xF2@(\b\bt\b\b<\bF(`\b\n\xF2\x80\xF2\0\xF2 7 \n` \n\xF2\xF2\0\f3\f--(M\b--$-3-oMJ-\xD4-M\x96(\xD5\xF2\07	&&(\x07) \x07\x07\xF2\0\xF2\0\xD4-\b-3\x97N@\\sJ\b\x97H\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0	\xF2\xFC\07\xEB\b\xF2\0\xF2\0\xF2\0\x07\xF2\0\x1B\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2 \n\b+\xAE\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0\xF2\03J\xD4-M\fMx3-\x96\b-o3Dw\xF2\0\xF2\0  @\n\b=\x07\b\xF2\0\xF2\0';\xC2\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0@9\x07\bx\xF2\0\xF2\0J\xF2\0\xF2\0\x07\xF2\0\xF2F\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0|\v\n\vt\b\v\b	\b\x07\v\v\b\x07v|	|	\n\f|}\v\b}\r\v\b||\x07\x07\b\f\v\f\v\x07\r\n\v\x07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0 ! \f!\xAD!!\xF2\0\xF2\0!\xF2\0 \xF2\0\xF2\0v\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x80F7778\xF2\0\xF2@@0\xF2P$\b\b\b\v\xA8\xF2\0\xF2\0\xF2\0\xF2\0\v\xF2\0\xF2\0\b\xF2\0\xF2\0\x82\xF2\0\xF2\0#\xF2\0\xF2\0\xF2\xC0\n\x07\xF2\0\xF2\0\x80\xF2p\n\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2.7a\x07777777\b7v\f\n7\f\b7\xF2I07\x807\xF2\0\xF2\0\xF2\0\n\n\n\b\b\b\n(\b\b@ \xF2\0\xF2\0\v\xF2\0\xF2\07\xF2\0\xF2\0\b\xF2\0\xF2s\xF2\x85\xF2\0\xF2\0\xF2\0$\xF2\0@77\x07P\x077\b7M#\x07-\"Q$$\x90\xF2\xC6\xF29\xF2\0\xF2\0\v\xF2\0\xF2\07\xF2\0\xF2-\v\x07	+\x07\v\x07\v\x07\x07!	\x07\n!\n\n\n!\x07\xF2&77\xF2(\xF2\xF2\0\xF2\0\xF2\0\xF2\0\xF2\x80\x80\xF2\f\fW ?\bW\b\x07\b!$#c !\b\r \b\b\xF2\0\xF2\0\xF2\0\b\xF2\0\xF2\xE3\xF233X\b\b\xF2`\xC9\n2\xF2! \n\n\f		7\n@@\xF2\0\xF2\xF8\0\xF2\0\xF2\0\xF2\0\b\xF2\0\xF2\0\b\x07\b\xE1\xF2\0< \xA0\xF2\0\xF2\0F\xF2\0\x87\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0B\x96\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0!.)+)4\b)4\xAF)\xF2\0\xF2\0\b\b	\b^\xA0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x1Bd|\xF2\0'\xF2\0`O\b+$\x88B\xF2\0\xF2\0!\xF2\0\xF2\00$\b\b@T\b\b$A B 4\b\b$\b\b$\bD\b\b,B\b\b\b5\b @,B\f, \xF2\0\xF2\0\xF2\0,\xF2\0\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0\xF2\0!\xF2&7u\xB1B\x80\n\n\n\n\n\fBB\v&t\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xC0@\xF2\0\xF2\0'\xD2\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0&\xF2\0\b\b$\bB\b' \n\n\n\f\bK\b\b,!,0$+\b\b!\xF2\0\xF2\0\b+;NJ3}t\b!(!7\n\n\xDD+\b\b7D\x077(\xA0\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0'\x85Ox\xF2\03\xF2\0\xF2\0\x07	\x91	\b t\bv\x87\b\x87\x077\b\b\r\b\xF2\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0|\x81\xF2\0\xF2\0\xF2\0\xC8\b0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0)\xF2\0\x07(&\n!7\v\n7\v\v7\b7\v!+&\n\v\n\x07\x07\n(\x077\n\v(!\x0777\v7&(\x07\n+(\x077\n7&\v\xF2\xF2\0\xF2\0\xF2\0\xF2\0'\b$[$c@$5\x07\bc$55$B$5$5$5@\b$5\v$5c$\x075$5$5$5$\b@$5B\b$]5$5$5$5\x1B5@5$5]$5$\xF2\xB2\xF24\xF2\0\x1B\xF2\0\xF2\07\xF2\0|\x80\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0&\xF2\0\xF2\0\xF2P\xF2\x80\xF2\03\xF2\0$\b@B@5$5$B5$B0$\x80\xF2\0\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0v\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0&\xF2\0\b\b!\bP\b\b8  @$$$8\f$$$$55\xF2\0|L.\x07\xF2\0\xF2\0\xF2\0\xF2\0 \f\x07\xC0\xF2 \b\x07t\x07|\v\x07\b\vt\bt\b\x07\x80\xBE\xF2\0\xF2\0\xF27\xF2\xC0\x07\xF2\0\xF2\0'\xF2\0W\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0P,\x98,;\x07,\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0{\xF2\0\xF2\0\xF2\0\xF2\0&\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\xCA\b$\b\b\bW\b$4^\b\b\b!\b\b!!\v!\v\v\v\v!\v\v\v\v#!\v!!\xF2\0\xF2\0\xF2\0\xF2\0Ft\n\n \b7\b\b*J7\b;G6\x1B\x97)V^8!\n7273!\xF2\xCC!\b\b X\b\b\n [\b\b\b?\b $ C\xF2\0\xF2\0	\xF2\0)\xF2\0\v\xF2\0\xF2\0\xF2\0    \x80\xF2\0!\xF2\0\f\xF2\0\x1BV? ! x\xF2\0\xF2\0B\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0\xF2\0	\xF2\0'\xF2\0$\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\0\x1B`7\x80\xF2\0\xF2\0\n\xEA\xF2\0\xF2\0\xF2\0\xF2\0,\xF2\0\xF2\0\xF2 \x07\v\n7N\f,8	\x07&78\xF2\0\xF2\0785$:\bP+\bA$4'\bI5>IV(4;\v!DA$I?$$ [\x1BW!\xF2\0\xF2\0F\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0U \v7\by(\x80\xF2\0\xF2\0\xF2\0\x1B\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x1B\xF2(\b\n\b\b(\bFF\bp\b0\xF2\0\xF2\0&\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xC0\b##\x07#3\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2-71\r\r	&@\b\xF2\xA0\x80\x07\x80t\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\0\xF2\x80X\b \xF2\0\xF2\0\xF2\0\xF2\0\b\xF27&7@\x077{8#\b8\b \v@(&>\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0A\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0!\xF2\0\xF2H4\fEH,\xF2\0\xF2\0\xF2\0.7&\xCF7\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0A\xF2\0!\xF2\0\xF2\0\xF2\0!\xF2\0\x07\xF2\0\xF2\0A\xF28\xF2\xFC8\xF2\0\v\x07\v\x07	\v\bt\x07\n\x07\n\v	\b!'!' +8\vM\x07 '7:\xF2\xC8\n7\xF2\0\xF2\0\xF2\0\xC07\xF2@\xF2\0s\xF2\0\xF2\0!\xF2\0\xF2L\n\x07\xA2\xF2\0)\xF2\0\n\xF2\xE8\b\x07\b7\xF2,\xF2\0\xF2\0\xF2\0\xF2$777\n!77\b777\f7777\n7777\f\xF2\0\xF2\0\xF2\0 \v\x07\n\x07\x07\x07&\xAB 7\xF2\xA0 \v\b\b7\v@\xD3 \nQ7\n7\xF2\0\xF2\0 \xF2\0\xF2\0 ,\n(\b\n`\f\n2\n\xF2\xE0 8\xF2s!'\x88\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\f\xF2\0s\x80\\\x80\xAA\xF2\0s\xF2\x80 e\n\b\n\n%\n\n\xF2\xB0\xF2\0,\xF2\0F\xF2\0\xF2\07\xF2\0\xF2\0\v\xF2\0!\xF2\0\xF2\0!\xF2\0\xF2\0\xF2A	\xA2\x7F3\x80\xF2\0\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0T\xF2\b\v\f\x07\n\x07\b\n\n\x07\xF2L\xF2\0!\xF2\0\xF2\xB4#3\xF2 \xF2\0\x80@7\xF2@\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\xF1\0\n\xF2\f\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\x9CMw\xF2\fMw\xF2HM\xF2\0\b\x071@\x90\b @`\xF2 \xF2\0s\xF2\0#\xF2\0\x80C\b\bPV<#F\x1B\b:@B\xF2	\b\x07\x07\r+\x07;;;W\f?\n\n'\f'A;+W',45\r\x07\x074\v !)?5\x07\b\b \x07\f;\f\rP	\bA\rB\xF2\xADZ75\x1B!	!\x1B'	+\r\x07\x07,\x07 	\b \r\f44\r\v,,	A\r7:\b\nI\b\f	#\r5	>$		\x07\xF2\x80\x90v(	867+\b73\xF2\xF0\0M3\f\\\xF20@\xC6\n\x07\x1B7\xF2\xC0\xF2\0B:% @5\xF2\xE2\v,$\f\xF2\xC0\b7''\x98 \xF2\0\xF2\xFE\xF2\0\xF2\0\x07\xF2\08\xF2\0\x80\x9D\x80\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0 $:;\b$\b@W\b\b\b$\b@4\xF2\0\xF2(\x07\b\b \b\b\v \b\b\b!\b\xF2\0\xF2\0\xF2\0\xF2\08\xF2O\n\b\r\x07\xF2@   \b'\xF2\0\xF2\08\xF2\0\xF2\0 H\x072\x07\xF2\x81\x927\xF2	\xF2\07	\b\x80\f\xF2\xA8\x87 \xF2`\v\xF2\xF0\0\xF2\0t\xF2\0F\xF2\0t\x07\xEA7\x07^\x07\b7j\xF2\0t\xF2hd7\xF2 \n\b\b\b$\b)\b\b	\bV\bE\b$\bQ W\b\b$\b'\b@$\xF2\0	\b\n\b\n\b\f \n@\v@\x07@t\xF2\0\xF2\0\xF2\0\xAD\vP\xF2\0\xF2X\xF2\xA6\xF2\0\xF2\0#\xF2 `\x80\xF2\0\xF2\0\xF2\0\xF2\0h\xF2\0\xF2\0\xF2\0@\b$\b\b\b\b$\b'$\b@\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0'\xF22\x07\n\x9A\x80)\x80*\xF2\0\x8Ao\xF2\0\xF2\0\x80\x1B\x80\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\xF8$\xF2\x07\b\bx8\n\x07\x07@\xF2\0\xF2\0\xF2\0\xF2\0\x0777!!7!	87 `7\xF2\0\xF2\0\xF2\0\xF2\0 $\x07\b\b\b \b$\b5$\bQ\b$\b\bY\b@=\xF2\0\xF2^\f \n\b\xF2\x80\xF2\0\xF2\07	7777\x077\b777'7\v7\x07A7\xF2\0\v\r\x07\f\x07v\x07\v\b|\f\f	\b\b	\x07t\x85t\f\x07\b\n\ft\x07t\n\bv\x07\nv\x07\x85\f\x07#\x07\bt\x07\xF2\0 \n0\v\b	\x07\n \v\n\v 0	\xF2\0\xF2\0\xF2\0\f\xF2\0\xF2\0\xF2\xE1\xF2\0\x07}|t\x07\r\b\x07\v\f\v\f\x07t\b\x07\b\f\b\v\x07\f$\x07\x9F\b\x07\v\x07t\x07\bt\f\x07\v\x07\v|	\f\x07@\n8\v\xF2P\xF2\0!\xF2\0\xF2\0\xF2\0\x1B\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\v\x07\xF2\xD3\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0x\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0v\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2L5\n\x07&\n7\x07\v\x07	!\v\v;!\x07\n\x07\x07\x07\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0\xF2\0\f\x07\vv\x07\b\x07\b\f|\x7F\f\vv	\x07	\x07\x07\b\f\f\x07\v\v\v\v\x07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\v\n\xF2\xFA\0\xF2\xE2\xF2\0\xF2\0'5?\f5?\b5@)\xF2\0\x80\xF2\0M79r.\xF2\0\xF2  \xC0\xF2\0'@ \n\v\v\x07\v  0\xF2\b\x80\x80\xF2\0\xF2\0\xF2\0	\xB1<\xF2\0\xF2\0\xF2@\xF2\xC0\xF2\0\xF2\0\xF2\0#\xF2\0\xF2 	7\v!&	4!\xF2A\xF2\0\n\xB8\b\xF2@\xF2\0\n\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\v\xF2\0\xF2\0\xF2\0\xF2\0F\xF2\0h\x97\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\x80\x80v\xF2\0\xF2\0\xF2\xFD\x07\xF2\0\b\xF2\0K\vV @$  =\bB\b!AX844@4\b4B\b\b$'\b \b\b\b$\b\xF2\0\nK\b!\b\b\b\b++h$\x80P\b!\b5\b\x80c\xF2\0#\xF2\04\b\b\b\b!\b $\bE\b$\b@!4\b;\b ;\xF2\0(\xF2\0F\xF2\0s\xF2@8\v	ut\x07\x07\f\b\v$(	\f\v\b\v\n\v$\f\v	\v\xF2\xC0 \x9D`@\xF2\x80\x80\xF2\x80\n\xF2\0\x07\xF2\0\xF2\0\x07\xF2\x887\xF2w\x80\x80\xF2\0) \x07     \x07 	\xF2  \b\b\x07\bH  \xF2\0\xF2\0\xF2\0\xF2\03\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0&KA5#EK5$\x1B7$KEU+5\b$\bW\xE3\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0\v\n\f\v\n\f\v\v\f\v\n\f\x07\v\b\v\f	\v\n\v\n\v\n\n\v\v\n\v\n\v\n\v&\"\v\f\v\v\n0\v\xF2\0\n\xF2\x80\v\x80\xF2\0\xF2\0&\xF2\0\xF2\0&\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0t\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\03\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\0v\xF2\0\xF2\02\xF27\n)A4\x1B  #54\v\n\v\n\v\n\n\xF2	\xF2\0\xF2\0s\xF2\0-\xF2\03\xF2TN\xB0\xF2\xFA\xF2\0N\xF2\0\xDF\xF2\0\xF2\0\n\xF2\x80p\xF2\0\xF2\03\xD4\b-\bN\xD5-@3\x80J\xF2\0\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0W\xF2\xED\x07\xF2\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\0\r\xF2\0\xB8\v\v\r\n\xF2\xF2\0\xF2\x82\\\xF2\0)\xF2\0!\xF2\n\bt\v\f7\v\v,!\b! V' ,	\x1B>>I>\f \xF2,\b`@F\xF2\x80\x80\x80\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0v\x80!B!\b!!\n!!\xF2\0\xF2\0\xF2P\x86\xF2\xA7&\b\xAE\b\xB3 \xB6@\xAD.\b\xB3\b0&\xB6@\xB2\xF2\b77@7\b7\b\b7\b8\xF2\xF2\07\x077\xF2x\x07\b\v 7@0@\v\x80\xC2(\xF2\0	\xF2\07  77!7\b7Y?\bM 7\x80\b\b\n\f\b\r\n ',,\x07\rP.\bM&&\n7\f7\v	R\v3\b$\bA!477%77\n\v\n-7\x1B-\v\x87\b\vP \v\xE0\xF2\07\f\n!\n\n\v\b7\n	\b7\x07|q\n\n\n\n\n\n\n\n\n\n\n\n\n\n\x07\n\n\n\n\n\n\n\n\n\b\n\n\xF2\xA1G\xF2% 7\xC9\b7\xF2c7\xF2D\x80j\x95\f\x07\b\x07\b	\b	@	\b\v\b\x07 \xF2\xDF \x7F\x86\b\xF25\xBABT\b?\x1B;!!4 4\xC27 Xk\xB1 \x07\b;\b	7 J2\"' \b+\xA08\b\b\b\x07\n\v#D\x9E\xBE\x07:x\n@\n\n\n\n\n\n\n:##\xF2Y4\xBE\xF2G\b*\n\"0\x1B\f\x1B\x1B::  } &@>	%:\b	!\xA05& \f(\x07\x07\x07\x07\n\b\b\"\v\f \fU\bU8L.- \x1BG\b\xF24!y.&u\xAD&\"u\"\xAC\xB8\x07\xC8&\xAD&F\v\n\xAD&\xB3\xAD & \"\x80\xB1@u&\xB1\xAD\b&\xB3\xAD\xB1\x89&\xB3\b\xB5\xB8&\xC0$&\xB3.\xC30\xAD\b\xB6\x86&0&\xCC\x86\b&\xF2\0d@\xB3@\xBB \xB9 &@u\xF2\0&@\x86\"\xAD\xC5 %&\b\xAE&. <\xB71\b\x8A0& \xAD`\xB3\x80\xB1\xB3\b&\xE3\xAC\xAD0\xC1\xAD\bu\x86&\x86&(\xC1k\b& 0&\xB8@% .\xAF\x86&\xAD&u\xAD&k\xC1a&\xAE1\xC1\xC0\xC3\xC0a\xC7\xE60&\xADR\xAE\xC6\xC9&\xB31a\xB9\xAD&\xC1\ba\b&\b\xAD\b&\b\xB90\xC8\xAD&\b\xAD&\b\xADS\xAD\b&&\xF2\00\xF2\0\x86\x80&\x80\v\b\v &@\v` \v  &\xC0\n\x07\x85\v\v6 @\v\x81\f\v$@\v8888888888\f&&&\b\v\v\v \n }\v9\x80\v\x9B\v\nb\v\xF2	@\v@&\xF2@\v&\v&\v	@\vC&	&\v&\v\v&&&\v@&&&&\v&k\v\xE8\v&\f\v\v&\v\v \xC0\v&\v\f\n\v &@\vh&&\f\n!\b\b&!!\v &\x80\v\xF2\0\b\xB4\xF2\0\b\xAF\xF2\0\xB6\xF2\0u\x80&\x80\"\x7F&\xC8& \x86@\xC1\x80\xB6\x80\xB1@\xAD@u@&@1\x80u@\xB7 \xB1\b0\b\xAD\xC1&\xAD& 10&R j\xB3\xAD & \xB6 &@\"@u@\xB0&\x86.\xBBkSR\xAE0\bS R\xF2\0\xC9\xF2\0\x86\xF2\0\xC8\x80\xB0@%&\xAE\b&@0\xB8&&&a\xC3\xAD&\x80\xB1\xF2\06\xF2\0\b\x8A\xF2\0\b\x86\xF2\0\"\xF2\06\xF2\x80&&&&&7\x07&&	&&&	\xF2\0\vt\f\v&&\x07&\b&(&&\x07&&&	&'&\v\n\v\n\v\n\v\n\v\n\v\n\v\n\n\v\n\v\n\v\n\v\n4\v\n\v\v@&\"\v \v\xF2 \v&\x86(\v}&\v\v\v&\b&&&&A&&&&&&\x07&\x07&&@\xF2\0&\n\f\b\v\v\v &)&&\x80\vt\v&\x7F\nt@\v@&\xF2\x80\vu\b\n\b$&\v&&&\r&&&&&&&\b&&&\x07&\x07&&&\v&&&\x07&\x07	\xF2\0\v\x91&\v\v&\v&\n\v&\v&\xD5\v\xCC\v\v\x1B\v\xF2\v\fB\v	\v	\x83\v\x07 &\xF2\xC0\v\r &\xBF\v\f\f\v	\xF2\xF0\v\xF2\0\v\f\xE2\v\f\fFF &\x80\v&*&\xF2\0\v\xF2\v	\v\n\b}\vE\v\xF2\0\b.\xF2\0\xB3\xF2	6\xF2\xF66\xF2\0\xC9\xF2\0S\xF2\0\xF2\07\xF2\0!\xF2\0\xF2\07\xF2\06\x800@6  \"\xF2\0\xF2\07\xF2\0\xF2\0v\xF2 \n\xB2\xF2	\xF2\0\n\xF2\xDC\x07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0v\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xB1\xF2\0\x80u\x80&\xD0\xF2,\n\xF2\0\xF2\b\n\xA6\xF2N\xF2\0\xF2\0o@ >I,!\v3\\!\xF2\xF2\0\b\f\b! @@\v@@@F77!!!7!777!7\xF2`P\f \x80\xF2\0\xF2\0\xF2\0\xF2\0\f\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07+\x07+++!+(&\v\n+\x07\b+&M>+&M9+&M9++\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xB4\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x1B\xEF\xF2\0\xF2\0\xF2\0\xF2\0\v\xF2\0#\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0\xF2&\vB&\v5&\v&\v\xC9&\xF2\xB8&\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xBE\xF2\0\xF2\07\f\n 777,\v	\b7,!7\f77\f7\b7\f\xF2\0@\x89\r&&\"k&=&&=&&\b=& \"&&k\xB3&\xB8&\x86\"&&u&\xB1u\xF2\0\x07\xF2\0&\xF2\0\xF2\0'\xF2\xF0\x007\f7\xF2\0Fv\n\xB8v\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\v\xF2\xE0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0m\xF2\0\xF2\07\xF2\0\xF2\0&\xAE\b\xBB\xAE a \xC5 \"1&&&&&A&\xF2\0:\xC5\xF2\07\xF2\xF2\xFE\0\xF2\0\xF2\0!\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0v\xF2\0>I>\b\b5\b0@\n\n\n\n\n\xF2\0\xF2\0v\xF2\0\r\xF2\0\xF2\0\r\xF2\03\xF2\0\b\xF2\0L\"\x07\v\xF2\x9C\xF2\xDD\xEA\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0,\xF2\0\xF2\0\xA7X\xF2\0\xF2\0n''\xF2 A\v\n\n\xC0\xF2\0	\xF2\0\xD0v}vv\xF2\0\xF2@\n\v\n\v!\v\n\nm\xF2\0&\xF2\00\xF2\0@6\xF2\0\v\v\n\v\x96\v\v\v,\v4\v\n\xA8\v\b\f7\b\v\xF2\0&\n&	\xC1\v\n\xF2\xFE\0\v%F&&&&&&\n&\n>&\v&\vI&\v &\f\v\v\v\x07\v	\v	 &\x80\v\v\n\v~&&&F&&&\xF2\0\v \v\v.\v\x80\v\x077\x85)\v\f\b \v\x81\x07\b\b\xE0\v\v\x07F\r`\v&\x07&&&&&&\r\v$\v\v>@\v\b\xB4\v\xF2\xA4\v\x86\f&#&\n\b&&&&\n&\v\n\v\n\v\n\v\n\v\n\v\n\v\n\v\n\x07\v\n\v\v\n\v\n\v\n\v\n\v\v\n\v\n\v\n\v\n\v\n\v\n\v\n\v\n\v\n\v\n>F&F&[F\x1B\n$@&@\v\x80&3\xF2\xFF\0\v5\xE8\x07\v\v&\vFFFFF\v\x07\v\v\v\x07&&&&&&&&&&&&&&&&&&&&&&&\f&&&\xF2\b\n\v\v\v&\v\v\v\v&\v&\v\vA&&&&&&\v\v&\v&&&&&&&&&&&&&&\v&&&&&&\v\v\xF2\xF4\0\v	&&&&&&&\b&&2\vO&\n\x07(\v&\n&\n&\n&\n&\n\v&\n\v\n\v\n\v\n\f\v\n\v\n\v\n\v\n\v\n\v\n\v\n\v\b\r\v2&\v\fx\vv&		&\xF2\0\v\xF2\xFF\0\v\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xC8\x07\v\n	\xF2\0'\xF2\0\xF2\0p\xF2\x8E\xF2\0\xF2\0\x07 7\xF2\xE0\b4t\x82\x07\b\n!\b\b	\r\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0&\xC1\xF2\0\xF2\0-\xF2\0\xF2\0'\xF2\b\f\b\b\b\b\b\b\f4 V\x07\bG\b\b!@\xF2\0\xF2\0\xF2\0w\xF2\0\f\v\x07\b	v\x07|tv\v\x91\f\x07\v\r\v\b\x07\v\f\x07$\x07\x07p|K\b\x07t\b\x07\v|\b\xA0 \n \b\v\n\v\n\v	\n\xF2\0\xF2\0\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0'\xF2\0$ 7\b\bF\b(\bF\n\b\b$\b\xF2\b\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0V\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xB6\xF2\0\xF2\0\xF2\xD8\b \x078\xA7Jw\xA3\x97\xD4z3\xD7\xE1\x96\\\xE02x	m\r\x7Fp\bt\x91\x87\x9F\f~\x82\xD3VI!c?>$5`Z 7D[4;G\x1B)X:\xA2+UAW/QbL|l6C=*BhP\x9C\x85T}9Fi,\xC9\xB1\xE4\"\xB3\x86\xACH\xAD\xA5\x8Au\xA1\xAF\xA4\xE9\xDE\x95\x94\xD6\x8B\x8F\x93s\xAAey\x8C\x88{\xA6#(\x07&\n\b\b\x07\x1B\b@\xF2\0\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\0L\xF2\0\xF2\0\xF2\0\xF2\0\x80<!\f!!\xF2\0)\xF2\xB2\v\v@\xF2\0$\xF2\0\xF2\0\xAFP\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0\xF2@\xBC@7\xF2\xC0\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\n7 @\n,\n\xF2\0\xF2\0\xF2\0\xF2\0\xF2\x80?\n&\n\x07N\n4\b\n\n\x07\x07M\x07tM|\x9D(F8\x91~\x07\x07\x07!\\\x07\v't\v \n7\xF2\0\xF2\0\xF2\07\f\n\x07 \n \n\xF20\xF2\0\xF2\0\xF2\0@\xC0\xF2\0\xF2\0N\xF2\0\xF2\0\xF2\0\xF2\xFF\b7\b\b7\n-\x07\xE1\b\b\bu/\b\n\b	\x07\b\x07\xF2\xE1\f\xF2\xF0\b\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0\x80$\x07F\b	\f#$8/\xA8I#+\b\x07 $\xF2\0\xF2\0\xF2\0 \v\xAE\n7$7$7777)7V7\b7777\xF2\b\xF2\0\xF2\0\x80K\b$\b\b\b\b\b\b\bK@4\xF2\0\xF2\0\xF2\0\x80\xF2\x80\xF2\0,\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\xF2@@7\xF2\x80\xF2\0\xF2\0'\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\0M\xF2\0\xF2\0\xF2@      F\xF2\0\xF2\0\xF2\0!@8777`7\xF2\b\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\xE4(v\bxN\n\v d\xF2\x9B\xF2\0\xF2\0\xF2\0\xF2\0!\xA0'<''\xF2\07\xF2\0I\xF2\0\xF2\0'\xF2\0\v\xF2\0\xF2E @E \n t v\xF2\0\xF2\0\xF2\0\x07\xF2\x80\xF2p\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\0x\xF2\0m\xF2\0 \xF2\07\xF2\0\xF2\0,\xF2\03\xF2\0\xF2\0\xF2\0\xF2\0!`\v,\x07\xAF\x07\n\r\fs\v\b\r	\f\x07\r\b\x84\xF2\x80 ]Q	& \x80]\xF2\0\v\xF2\0\x07\xF2\0\xF2\0A\xF2\0\xF2\0A\xF2\0\xF2\0A\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2 \xAB>\b7\x90\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0$7\x07\xB1\x07\xF2\xF2\0\xF2\0\xF2\0\xF2\xF3\0'\n'\xF2\0\xF2<\f7	~@	\x80\x80\xF2\0)\xF2\0$\xF2\03\xF2\0\b$\bA\b\b\b$\b>\b\b\b$\b @$\v\b!\b\b\b\bA\xF2\0F\xF2\0\xF2\07\xF2\0\xF2\07\xF2\0!@@@@\xF2\0\xC0\n0\xF2\0\xF2\0\xF2\0\xF2\0M\xF2\0\xF2\07\xF2\0\b\b\b[\bH  #K\b#\b\x80@7J7vp7\xF2\0\b\r\x07\b\xF2\0\xF2\0\xF2\0\xF2\0@\xC0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0!\xF2\0\x07\xF2\0\xF2\0\b\xF2\xC0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\vt7\xF2T\n\n\x07 \b\xF2(9'#i	\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0 @7 \x07\n \xF2\0x\xF2\0\xF2\0\xF2\0$\xF2\0\xF2\0\xF2\0 #@ !&\x07	\f\v \xD0\b(\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\x07(v\b \f\bv\f\b\nt\x07 \bv\b\f\nv\b \v\xF2\0@@@@\xF2\b\x07\xF2\xF7\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\x80@\xF2@L\v\nM \n\b3\b\n \v&(\x07}N$\b\b$ \xF2\0\xF2\0\xF2\0\x80#\x805\xF2\0{>I\f>'w>\xF2\0\xF2\0@@@\v@\xF2\0';8'\r\b\x07M77!\b\b+\n\x07	%\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\05\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0#7\v'\b\n37v\n\"\n\n\xF2\0\xF2\0\xF2\07\xF2\0\xF2\07\xF2\0\xF2\0@	  \b\n\by\x07 \xF2H\b(\b\xF2\x80\x07\xF2\0!\xF2\0\xF2\0\xF2\0!!\x07!!\xCB\xF2\0\x80\xF2\x80\xF2\0!\xF2\0@7\xF2\xC0\xF2\0\xF2\07\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\x8Cr\xF2\0\xF2\0\xF2\0\xF2\0\n\n\x9E\n\xCD'\n\x07\v\xF2\v\xF2\05\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\b\b @c\xF2\r\n\xBD\xF2\0\xF2\0\xF2\0\b\b\b?!!# \b#\b\b\bA\b$$\b\b$\b\b\b!\b\b\b\xF2\0 $\b\bG @$ \b=\b\b '\x80\xAD@\xC8 & \xB8\xF2\0\xF2\0v\xF2\0\xF2\0  \xF2\xC0\xF2\0\xF2\0\b}\b&\v\f\bt\ba &\b\xC2\b&\xBD&3\f\x07t&\x07\x07\x07\n\b&\f\v\b|-\b3!#\xC2\b$\v$wM\f3\xB3V\xB3x\xB3tz\xB3\no-U\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\xC0 7^\n\f\n\xF2\b\xF2\0\xF2\0\xF2\0\x1B\xF2\0\xF2\0\b\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\f\n\xF2\xF0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0#\xF2\0\xF2\0\x8A\xF2\0\xF2\0\xF2\0\xF2\0#\fF(\n \b\x07\b\n\b\b\b\b\b\b#\xF2H\xF2\0\xF2\0\xF2\0\xF2\0\x8A\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\0\xF2\0U\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x8A\xF2\07\xF2\0\xF2\0\xBC\xF2\0)\xF2\0&8\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b8\v7\xF2@&\b&\n&\b\xC0\b&\"\b\xBD&u\b\xBF\b&\xB8.&\xBD \xB6&u&\"j&k\x86&\xB1\x86u\b&\xF2\0\xB3\xF2\0\xF2\0\xF2&\n&\n&\n&\nn&\n\x07&\n&\n&\n&\n&\n&\xF2\0\x1B\xF2\0u`$\f\b\b\b\f\xF2\0\xB3\xF2\0\xAF\xF2\0\x8A\xF2\0\xA0 \v@\xF2\0\xBE\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\b\n\b\x07!Q\r\x07t\v\b\x07\v@|\n|\b\x07	\b	 \x07,\xF2\0\xF2\0\x80f\xF2\0\xF2\0V\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xB1\x80u2&\xB3\"&\xC0@&\xF2\0\xF2\0\xF2@@\n\x074\xF2@\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0|\n\xB3|\v\x07&\xB3\xB3\vU-\b\x07v\v\b\x07$H\xB3\b?P5\b\xA7-\f\x96-3x3\xF2\0\xB2\xB1\xB2\xBD\xB2&\xB2&\b\xB2\xAE \xB2@.@\xC5\xF2\0\x07\xF2\0\xF2\0\xF2\0\xF2\0  \xD5-\b-\xEF\x93\b\x88\b2\xAA\b\x883\b-\b3 \xD4 \x88\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2@@T@@\xF2\0#\xF2\0N\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0N\xF2\07\xF2\0\xF2\0 -\bx\bo\x93\b@\xD7\x80z\xF2\0\xF2\0\xF2\03\xF2\0\xF2\0\xF2\0\xF2\0v*\b\x07\xF2\0\xF2\00 \xF2\b\xF2\b77\b77@87y\xF2\f\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xBC(\xF2\0\b\xD5\xF2\0!\xAC;[S;\xF2\0!\xF2\0\xF2\0z\xF2\0\x80\xF2\x80\xF2\0\xF2\0\xF2\0\x87\xF2\0v\xF2\0\x80\b\xF2\xFC\0\bh\xF2\0F `\x80\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\v\x80\x80\xF2\xE0 \xF2\xF0\xF2\0\xF2\0@~\xF2B\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0	FF	87\v!@8\v4\xF2\0\xB5\n\x07J\n\xF27\f\f87\b\b7777 77\xF2\n\xF2\03\xF2\0\\\xF2\0\xF2\0z\xF2\0\b\xF2\0x\xF2\07\xF2\0\b\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\x07\x07\x07\b	\xF2\xF2\0\xF2$\n\xF2\xD4\xF2\07\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0-\xF2\0\xF2\0x\xF27\fd\x8F7\x07\x9577\x8B7\xF2\0\xF2\0 \n \v`!\n\n\n\n\n\n\n\n\xF2 \xF2\0\xF2\0\xF2\0x\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\n\xF2\0\n\xF2\0 \xF2\0\xF2\0x\xF2\0\xF2\03\xF2\0\x07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0F\xF2\0h\xF2\0\xF2\0x\x9B7\x90\\\b7\xF2\0\xF2\0\xF2\0\xF2\0\xC4--}|\by\b\x07\b\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xA0\xF2]\n\xF2\0\xF2\0\x80@\xF2\xF2\b\xF2\07\xF2\0\xF2\0\xF2\0\x07\xF2\00$ $;\n$$\n+\n\xF2\0\x07\xF2\07\xF2\0\xF2\07\xF2\0\fB\xBD\xF2\x94\n\xF2k\x07\xF2\0\xF2\07\xF2\0\xF2\0v\xF2\0	\xF2\0x\xF2@\n\r\b\xF2p\xF2\07\xF2K7&7\b7\x80F\xF2\0\xF2\0\xF2\0\b\xF2\079\x97h+\bT\x07\x86t\f\x07(hEJ(37\\\x9C7\x96\xAFC\b\n\v!	\x07h-\x07}d|4\x91\x913\x07\x07'\f5#\xF2177\v\b777\b7\x807\xF2\b77y7\b\x8BV\x8E\x8B\x90\x8B\b7\f7(7&7T77\b7\x8F,7\b7\b\b7\f7\f7\r7\xEA\x94\x8D\x947(\b77\b7,\by \b7\x90\x8E\b77\f\b7@\b7777\x99<\xF2C7$7(77\x07\be\b7D7\b77\xA8\f7,\b7\b7>AC'487\x807\f\b\v\b\b7\f7\b\n\vt\x91\r\v5777\f7\b7\b7\xD67747377\by \x94\x8B\x94,7\f7$\n7	7(\b77!y\v\b\b7\xD6 \b7 \b77\x8Dy\b\b7\b77\b\b7\f6\x8B\b7$\b707\f7777\n\b0\b7\xF2\xD67Qy\b7\f7'77\x1By$777\b7<7\x90\v\x917\x92$\f\b77e\b7$70\b\x9477\fy\bG\b\v\f7\b{7477(70\x8F\b7 7\b7y\b7(\b7\f7\b7\b7\f7*77,\b7 \b\x8F7H777x\b7\f\f7707\f\b \b7\x07\x8BDy \b7MR7$7\b7\f707\x8B\x8D\x90\x8D\b77\b7\b7\b777\x997\b7{7,\b7(7).7$\b7!)<\v787\x8B7+7B\b\xD67\b7\xF2\0\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0\xF2\0v\xF2\0\xF2\0\xF2\0-\xF2\0\xF2\0\f\xF2\0\xF2\0\xF2\0\x07\xF2`  \n \xF24\n\rv\b|\v\r\f7\b|\b\bvvv\fv\b\x07|\x85\x07|\x9Dv\r\n\bv\b\bv\b\x07v\x9Ev\x9E\xF2\0\xF2\0\v\x85\r \x074||\b	\x07|tt\r\x07\v\b\b\x07\x87\x07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\x80\x80\xF2\x80\x80\xF2\0\xF2\0\xF2\x80\v\x07\n	2>\xF2\x807\n7\vM-N&(!8\n\nv\x07\x07\v	\x07-N3\\\xF2\0\xF2\0\xF2\0` 7\x80\xF2\06\xF2\0\x07\xA87\f7777\n\b7\xF2\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\f\xF2\0\xF2\0\x07\xF2\0\xF2\0	\xF2\0\xF2\07\xF2\0\xF2\0!\xF2\0\xF2\0W\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xC0@\xF2\0\xF2\0\xF2@Y$f\xD0\xF2 \xF2\0\xF2\0\xF2\0\xF2\0\xF2\0J\xF2\0\xF2\0	$\r\x07t\b	\x07t\v\n\v\nt(\bp\v\xF2c7\x1B@7\xF2\0\xF2\0\xF2\0\xF2F&!&!&!)&!;&!&!&!&!&\xC4$7\xF2\0&\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0k_\n\xF2\0\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\xB4\x07\x07\x07;\xF2	\xF2\03\xF2\0\xF2\03\xF2\0\xF2\0	\xF2\0B\xF2\0\xF2\0\xF2\0!\xF2\0'\xF2\0\xF2\0\xF2\0W\xF2\0!\xF2\0\xF2\0'\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0!	\vU\b\x07	\b:\xF2\0\x80B\b\nF\bA\b!44\b[\b\b\bX\xF2\0\xF2\0y\xF2\0\xF2\0\x07\x07	\x07		\n\n\x07\x07\v\xF2\xF2\0!\xF2\0\n\v\f\b\v\f\v\n\v\v\n\v	\v\n\b	\b\v\n\n\v\x07\v\n\v\n\v\n\v\n\v\f\x07@ \x07 \xF2\0\xF2\0\xF2\0\xF2\xEB\x88TQ\xF2j \x80\xF2\0\xF2\0\xF2\02\xF2\0\xF2\0\xF2\0\xB73\\F3\xF2\0\n\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2@\b\v\x07\v\n\v\n\x07\x07\n\v\n\x07\v  $\xF2\x8C\x7F\xF2\0\xF2\03\xF2\0\xF2\03\xF2\0\xF2\0\x07\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\b\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\0\xF2:DO\xF2\0\xF2\0\xF2\0!\xF2\0$\bK\b\b$\bB\b\b\b\r$$\b8@K\b\b4\b\b=\b\b\xF2\0\xF2\0\xF2\0'\xF2\0\xF2\xF8\0\xE8\n\xF2\xF2\0&\xF2\xB47\xF2K\xAF.\xAC\xBC\b&\xB3&\xB3&k&&6\xCF\f&\xC7\b&\xB36\xB2\f&u\"\xCD\xB8a\b&\b.\b\b&\xE4\bud\"\xF2\0\bo-w-\f\xD433--ww\\-M--\\o\b\xF2\0\x07\xF2\0\xF2\07\xF2\0\n\x80 \b$\b@c\xF2\07\xF2\0$ G\b'\bF\b$\bK $\bQ\b\x80K\xF2\0(\xF2\0&\xA0\x07\nL&	NMo}\r\b'Ic\x1B:5;8*:&	MwxNMov~	\x07}\x07'I!\f7\xF2\00&!&!&\xF2\x90&\xF2\0\xF2\0&\xF2\0\xF2\0\xF2\0\xF2\0\x80a@&\b0\b&\xC0 &\xF2\0\xF2\0\xF2\0\n\n \n@\x077\n\xF2\xE8\xF2\xF2\0\xF2\0\n\xF2\0\x07\xF2\0\xF2\0&\xF2\0\xAF\xF2\0\xF2\0\bS\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\x84&j\b&% & u\f&\xC2&&&&\xF2\0\xF2\0\xF2\0\xF2\0+\xF2\0\x80v@\v\x077\n\v\f\n\v\x07\xF2\0\xF2\0\b\v#7\v\n\n\v\"?\"\xF2\x86.	\x86.\x86 & \xBD \xBA@d&\xB7&u\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xD5\xF2\0\xF2\xF2\xFC\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0\xF2\0\xF2\xB2\n\x07\xF2)\xF2\0	\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0\x07&\xF2\0\b\v\x07\v(\xF2\xF2\0\v\xF2\0\n\xF2\0&\xF2\0\xF2\0d\xF2\0@\n\x7F\xF2@\x88&&&\n&\bv\b&7&7&7C&&\xF2\0\xF2x3-J\\\x833\xF2\0\xF2\07\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\x96\x07\x1B8'\xF2\0	\xF2\xD8\xF2 \xF2\0\v\xF2M#7\b\b	\f\x07\nr6v7\xC9v\xF2\0\xF2\0\xF2\0%\xF2\0\xF2\0	\xF2\xA4\xF2X\xF2\0\xF2\0\xF2\0\xF2\f7$!$\f\x07\n\v\x07B!7M\x07	\n\v\xF2.7P00\b\xF2\0\xF2\0	\xF2\0'!\f'''\b'\v'''	''!'!'!!'!''?	'\v?\x1B''#'\x07'\x07  \n\x07@\xF2\xF0\0&\x86&\v&\xF2\0\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0	\xF2\x07\x8C\x1B\xF2\0&\xF2\0\f\xF2\0\xF2\0 \xE477\x80!)!!'!!'!!'\x07\xF2\0\f\n\n\f\n`\x807\xCC\f&\xF2\0\xF2\0v\xF2\nL7g7\xF2\r\xF2\03\xF2\0\xF2\0	\xF2\0\n\v\v\n\b\x07\v\n\b\x07\v\v\xD9\v\xF2\0\xF2\0v\xF2\0\xF2\0&\xF2\0\xF2\0F\xF2\0\f\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\03\xF2\0\xF2\0\xF2\0z\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\0	\xF2\0\x82\xF2\0N\xF2\0\n\xF2\07\xF2\0\xF2\07\xF2\0\n\xF2\03\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\b2\xF2\0\x07 00 \n\x07\xF2\xF2\07\xF2\0\xF2\0\xF2B>\x80F\xF2\0 77,77 7\xF2@\xF2\07\xF2\0\xF2\0\b\n\n  79 7\v\x80F\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\0\xF2\02\xF2\0\xF2\0F\xF2\0\xE07 \xF2\0\xF2\02\xF2\0\xF2\0\xF2\0\xF2\07\xF2\0\xF2\07\xF2\0\xF2\0\xF2\0x\xF2\0\xF2\0\xF2\0\x07\xF2\07\xF2\0	\xF2\0z\xF2=v(\f'7\xF2\xA8\xF2\0\xF2`\b \b\b<\b\b\b\b\n\xF2\0\xF2\0\xF2\n \n0 \xF2@\xF2\0\xF2\0\rv\x07\r\x07v\x07v\x07\r\x07v\x07\f\r\v@@\rv\b\vv	\bv \xF2\0	\xF2\0\xF2\xFD\xF2\xC2\n  \xF2\0\xF2\0\xF2\0t,\xF2\xD3\xF2\0\xF2\x8C\x07\xF2\x9D\x07\xC9&\x8F8\n\x07\x07\xF2\b\xF2\07\xF2\0\n\xDE\xF2\0\xF2\0@@\xF2\xC1	7\x9D\xF2\xBF 7@\b\\\b\xA33xN--<MH\b-\xA7\f- \x97M\x97M-\x96\bxx3Mo-N\b3-\bw\bJ3\xD4\\-\xD4\x97-\xF2\0\xF2\0-\xF2\0\f\\(-\xEB`-\f\b-MN\b\x844		\n\xF28;\b0\xF2\x80 8\n \v	\v \n \v \n\xF2\0\xF2\0\v\xF2\0\xF2\0&\xF2\0o\xF2\0	\xF2\0$v\x07&\x07&\x07I4&\x07&\b4&\x07\b&\b&\f&&&\f&&&\b&&&tt\bt\b<<<<\x07<$$<\x07<<<<&\n<\f<\f<\f<<<<\b\b\f\n\b\x07<\xF2\0\xF2\0-\xF2\0\xF2\0&\b-N4M-\b-x\b\xA3-3-\f\x96\xD43\bM\b\xA7-777\b\b7 \xF2\x86\xF2\0\f\xF2\0-\xF2\x80 \n  7 \xF2\0-\xF2#\xC2\xF2\xDC\xF2\0\v\xF2\0\b\xF2\0	\xF2\0\b'0:\xF2\0 \b-\b\\-M3\xE0-\bo42\b-\\\f\\M\f\xF2\0\xF2\0q\xF2\0\xF2\0	\xF2\b\b\b\b\b\n&&\bv&\b7&&`&&&\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\0\xF2\0\xF2\0   7\b\x07  \n  \xF2\0#\xF2\0\xF2\0\xF2\0&\xF2\xFE\0\xF2\0\x80F'\r+'\n	\f7\x07v\x07(\x07\nt+7\xF27777\f\rH\v\xF2\x07\na\x90\xF2\0	\xF2\0&\xF2\0\xF2\0`\vf\vM\x07x\x07\xF2\xF2\0&\xF2\0M\xF2\0\xF2\0\xAE\x80\xF2\x80\xF2\0&\xF2\0\xF2\0N\xF2\0\b\\\f--\xD4-M\b-M\xD4$J\f--\b-\x80\x80 \xF2\0\xF2\0\xF2\0h\xF2\0	\xF2\0M--\x97\fM\b\\x-w\\\b-\f33-\b-\f-\x960-\f\x07-y\xA7--\x88J34-\f\bM\b\xE0\x96---L-\bs\f-\f-3\f3--\b\xD4--(M\b-N3J\xAA\xEB\b\bMJ-\xD4\f\x97o\b-\xA7-z-\xF2\0\xF2\0\xF2\0\xF2\0-Mo4J-z\b-\b\\\xD4-30\xF2\0\xF2\0&\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0	\x80 @ \x07\xF2\0\xF2\0-N-\f\xA3-\bMM-N\x97\b-8-$N-,\xD4JM-0N\fNz\b-,\xD4-s\f3\xF2\0\xF2\03J3\xA3\b\xA3\x97\b-\x96\f-s-\xE13\xD4L-\xF2\0\xF2\0\x97\x907@7\xF2\x07\xF2\0\xA3\xF2\x8077\n\n7\x0777\xF2\0\xF2\0	\xF2\0\xF2\0 \xAC\fR(R &\xC9\bu\b&@d&\bu\xAD&\xAD \xB5\xF2\0\xF2\0M\xF2\0&\xF2\0\xF2\0@\x80\x07@\xF2\0\xF2\0\xF2\0\xF2 7\n77\x81	\n\b\x07\n\x07\b\x07	\x80$7777\r\n\b\f\f\xF2\0@	\v\x07\f\f@\x07	\b\xF2\0\xA0 7\x80@7\xF2\0@7]\x07	\b							\v\v\f\v\b									@{MM\x80\xF2@@7\xBC!\b\xF2\x07\b\xF2QA\xB8&D&\xF2@\n\v\v$	\v|\x07\v\n\v\x07$\n| \n\xF2@\xF2\0\n\xF2\0\xF2\0	\xF2\xF4\xF2\xC8\n\xF20\x80F\x07i\xF2\0\x07\xF2\0\b\xF2\0\xDF@\xB6@u@&\b&&k &\xF2`%$\b$\ny7777y\xF2D\xF2\0\xF2\0&\xF2\0\xF2\0	\x80=\xF2\x800\b&\xBAu&R&\xB16%&u\b&\xB3&k\xB1&&a\xC4\xB7\xBD\xB1\xC7a\xB9&&\xB1\xC8\b\xB6&k\x86&\x86\b&&\bu\xC2v&k&\bu&\xC2\"\x86\xF2\0\xF2\0&%\x86&\xB3&\xC6\f&u&0\xB5\"u&k\xAF\xAF\xBC&\xAE\xB3\xB1 \xB1\f\x86a0&\xBCu&\xBD\xC6&\xB6\xB9\xB3\xAD\f&\x8Au0k\b&ku\b&u\b&u&NM\xEB<\\--P\xA3\xA7,M\\\b\x88\b\xF2p	Z7N 7\xF2\xF6\xF2~\v\x07\xEC\x803333\xD53\xF2\0\xF2\0M\xF2\x07\n\v\v\v\v\b\b\n\v\n\v\n\b\n\v\n\x98\n\xF2\xCB1\xF2\0\b77\x077\x8B7\f77\f\x8C\x07777\x8D7707y7\n77\xF2P\b0\v\xF2p8\x962\x962\b\x96-\x96-\x96-\x96@-\b\x96\n-2-2-\b\x96 -@@7\xF2\x80\xF2\0\xF2\0\xF2\0\xEC\xF2\xF2\0\xF2\0\xF2\0M\xF2\xA07\xD07E7)7\xF2(N-\bN\f-\f--3\b-\b-,-NM---3-\\3,N\b3o\fMs -03-\bN\xD5\x97\xA3-M(3\fJ-N\b---\xD4\b-s-\bM\xAA\fs\fN3JD\v-Mx0\f-\f-\b\\\bNs\b\xD4N6\\\fw\f3\f\x96\bw3\x88\x88\\zo\f-J---Nx-\xD4-0\f\xAAw-\b\b\x96\x88 -<J\f\b-\xD5x-\x96\fM\f-3-\f-#-J\xF2\0\n\xF2\0\xF2\x80\x80F\x80\x80!\xF2\0\xF2\0\xB2\n4\n\xF2\xAC\xF2S@@F` 7\xF2\xBE*\v\f\v\b-M\f\x97-\b-\bJ--x-33\b-3M\xD4\f-8\xF2\0\xF2\0-\xF2\0\xF2\0\xF2\0\x07\xF2\0\n\xF2\0\xF2\0M\xF2\0\xF2\07\xF2\xF2\0M\xF2\x9C\x07l\xF2\0\xF2 \xF2\xDF\xA07L77P\xF2\xF8@\xF2\xA0\n\xF2\xD4\xF2\0-\xF2\0$-\f\xD4\f--\\(-\b--\\--Mo\b\xF2\0-$-\xD7---\\3-\f3\f-\x96\f-\xF2\0\xB4\xA7#\xA0w-\x96-33-N-(\xD4\f-(Nw3-\fMN\bN\b-M\f\xAA\f\b-\f-\x9733-\b\\z-M3N\bs\b--3\fw\xA3-\b\xF2\0(\xD4-x-sx\fM\b\bM-\f\b\xD4\bJ\f\b-w\xD4\f\x93xz3\xD4M(\x96Ns-\f\bM--J -\f\b--\xD4\xD4\b-x-xw-xJ\bN J\xD5J\x88\b33\b-$o-\bN4--\xD4-3--\bM3-\boz32\bM\bM\f3x3\xA7\bM\x07	\x07\x07\x07Z\x07\f\x07\x07` 7\b\b\b7\b \xF2\x8A\x07\b\x07\b\x07\f\x07\x07\v\x07\x07\x07\x07\f\x07\x07\xF27@  7\x80N\f\xA7\bwo\b-sM- ---x-\b\x96\bN\\\xF2\0\xF2\0\n\xF2\0\xF2\0\xF2\0\b\xF2\0\xF2\0\nL|\xF2\0)5\xC8\xF2\0I[K#!A	\v\nDI$#8\v,$$I? ( \xF2\0\xE4\x80 !$\b5$)\x07$$$5$>h$5$\xF2\0\xF2\0\xF2\0\xF2\0)\xF2\0!@@\b\b\b \b\b\v\f$\xF2\0\xF2\0\x07\xF2\0\xF2\0\xF2\0\xF2\0\x07\xF2\0\xF2\0\b\xF2\0\xF2.\xF2\xF6\x85\n?	\n\x9C\n%\n!\xF2\x88\n\n\n\xF2\x86\n\xF2\xEE\xF2\0\n\xF2\0\xF2\0 \xF2\0\xF2\0\xF2 |\xF2\xD0\" \b$Q\xBD\x86\x07\xB1\b\x1B\nQRioF 3\x93/\x07\xCCG\xE0\nUt\x07\x07\x8A\x07|7Gw!&\bi\ri\x85\b;\\;)5$\b\vM$u\\\xC8\xD4\xAC\x96\b!	*}\x1B\x9F0\x1B\f\x87\x85|\rP\xAD\v=\x07\x1B}&#F8\n?V+7\x92|\xB0iM\v\r#I>#:N7m|l,}\bpL!\v3}\x9Fu\xBB\xAA\xF2\x80\n\x80K7\f77>\v\n\b\v0\b7\b@7\f7$7\x907\x0777\b7\b\f7777 7 7D7Qy7A\x1B\n\bt!@{P\b7\fy7\xC1777\b70\x0777\b7X7\xF2\xA2y7y\b7777%\v7\v\x07 !\n7C\n\x07\n7'\x077\n#\b,7v	\n'\v$74VD7\v\x7F\n\xF27\b7#\x07\x07u(y\b7\x077H\b7 \b77\f7\x807@7777777377	747\b\f7f7\f\b77y7777\f77\xF2\x8B\f7`$0\x07{78\f7\b! \x807  \n@  \n\n\x07  7 \x07 7\n\n\r 4\b\x07\xF2^6	\x07		\xF2G7	'7\v77\n77\b(@@\xAE)+7!774\vMJ$\v7\x077?v	\v\n7\x95\v)7\n!t\n\xF2\n\xF2\0\xF2\0D\xF2\0\b\xF2\n\x07\x07\f7\n])9\xF2\07\xF2\xD8.@D\b \xF2T7\xF2\xEB\b\b ,\f\b\b\f\x80\b\v\xF2\xDE&t\bd\b,\xF2\xDD\v!\x8C\n\x07	\v\x07\xF2	 \n77 \b0,\b,1\x93v 7\xF2 \xF2\07\xF2@\x07)\x07\x07\x07`\x07\x07\xF2\xF1\b\b\n\x86p777~7\"77\b77777  78:\b7\xF2\xE4D\x80y\xF2\0<\xF2\0\b7\xF2\xFC\b\n\xF2\f\f\b\v\f'\n\b\f	17!7777\xF2\xD07$\b\xF2\xD5!\xF2\xC17\r7\x077\fbGB\xF2\07\xF2  7007N7\x91\x8077\b+7\b\v@y\x80\x807@\xF2\x8070\x07\x077\xB8\x80y\xF2\b\b\x07 \x077i\v\n\n\b\f74M43\b\b3\b\x87\x07\v\b	\f\x07	v\x07D@7P 7\xD0\x8F	e\x8De\x94e\xEAe\xF2\xC0@y\xF2\xA0 7\xA0 7\xF2\"!\xF2n\x07O\b\b\xF2\x884\xF2 7P7\xF27\x80@7IIIM	7\r7	<I7\xAE7`77\x077077\xF2.77@ y	77077Oy7I\x077777B %7\x9E\b\x1B\r\n	$ 7  7 7\x80 7@ 707\xF2\0 \v@` @\x807\xF2\x80@7/!7&77\xF2T7 76\nZ_,\b7`\xF2\0\b7\xF2\xE5777\x84\x807\xF2\x004\xF2\0\b7\xF2\0\xF2\0\b7\xF2E\x07\xF2c\xF2\xCA\n\xF2\xF87@@\xC0\x0777777\n@7\x077\v  7\b\n\v\xF2@Fp7\v\f\xF2\xF2\07\xF2\0q\xF2\0\r\n\b	@\n\x80\v\f\v7\v\v-\v|	\v\v\b|\f\v(|#\v\v\xF2\0\xF2\0\b\xF2\0\x07	\v\b|\f@@\n@\xF2\0@\vH\b\b	\b\xDD\x07\bt@	\xF2\x002\xF2\0\f\x80\r$\x07\v\v\b\x07\v0\xF2\0\x07\xF2\0 t@\xF2\x80t\b \x9D@	\x80@}@	@@}\xF2\0@b#\b}\b}\b}7\b}\x80F}	 \ftv\n\ft\b\x07 \x07\x07@\f\xF2\0	\xF2\0\b\xF2\0\n\b\xF2\0\n\xF2\0\n\xF2\0i 	 t \x07\v\b@\x9E@\xF2\0\v\xF2\0\x80	\b\x84\v\bt\n\v\n\v\x07\vv\v	\x9D\v\n\v\n\v\xF2\0\xF2\0\xF2\0\xF2\0\f\x80@ t\b\ft\x07\xF2\0\x07\xF2\0@	\xF2\0\b\xF2\05\xF2\0 \bV\bA\b\b+\b \x80!\xF2\0@4K\b\b\b$\x1B\xF2\x808\xF2\0$\xF2\0F\xF2\0\xF2\0\v\b$\b=\bQ(\xF2\x80*\xF2\0#v7Q5\b$\b\b\b \b\b $$\b/\b)F\b\b$\xF2\0#@\xC0\xF2\0\xF2\05\xF2\0#\xF2\0F\x80? K @\xF2\0F\xF2\x80$ W\v\v\b#+\b\b\b\b\x80#$9$\b$#\b$$$\xA7$@$\xF2\0# $\b\b$\b@K\x07G ! *\b\b>5[\b$\b!W2	U\b!\b$V\b\b\b\b $E\b+ \x80\x1B\xF2\0$\xF2\0c\x80\b\b \b; @A0;@$\b\b\bK\b$\b\b\b\b$$\xF2\0)\xF2\0B E $\b\b, $`K\xF2\0 5>\b$\bEK+A\b E \b\b U\b\b4\b$\b)\xF2\0!\xE0'!'!'!'!'!'!'\xF2\0C\b\b$\b\b\b(\b@C  \x07!\b$\b\b \xF2\0\xF2\0W\x80$\x80)\xF2\0 \xF2\0\b\xF2\0#\xC8\x1B8G\xF2\0'\xF2\0 $\b\b+\b$\b5\b$\b+ 555\b\b\b$ $5C$5\b$5$@$B$\b5\b$\b\b5\n(\b$5\b$\bG $ \b\b 5Fh#5\x07$\b 5 $\b$BB\f$FH\b($ 5\x80$ 5\b\b\bB\b5@$  5\b\b$$5K$\b\b($\b\bA\b$ 5 $@5$\bA\b+ \b$\b 5 K 55\b $\b5' $>5U5\b+\b@5 \b5\bU\b0$\b5\b\b5 $A:5U5!F5 5\v5$=W\b5$\b\b8> $\b>\b\b\bU $>\bA 5\b8($A5+\b$\b5\b$\b \b$\b58$ 5U\b$\b[ B 5\b\b($\b5 $\b+\b5$\b5 $\b\bA@$\b\bU$\b\x985 $F5+$h$B$8$\b+ $\b\b$545\x075$5\b$\b 0+7$G5\b$55\b$ 5($\b+$\b\b5$?$Ah$7\v!\x1B8$77$4+\b+$$/	$\xA8 5+\b@5$5\b$\b+ $\r\xA5x$\b 0$\b\b$\b5@$\b\b\b $\b+ \b+\b$ 5A\b+\b$45($\b5\b$+H$I 5\b#\b0$ 5D$?$\b5\bB$\bA$\b\b5\bc$?L+$I$\b+0$\v55\b$\b5 @5:)$$$7$$ )$'+!8P\x1B:Y$+[=\bB\b5\b$\bE$\b\b$ 5 $5\b \b\bP$\n5$5\xA75\b$\b+$$\b\b5\b\b\b\b+@$5$05$$$$$$$\bB(5@\b$UK\"	$\f:b$$;@KP$\bU$5 ]$$$+K\b+B\b/\b+\f$\b5$5$!$+$ $!$\f5?$!   5\xA0$\xC9\xA2H($%$\x1B$5!\x07!	  5!5]+\n+++++\b++7\b+\b+\xF2\0\xF2\0@\xF2\0$\xF2\0\xF2\0\xF2\09\xF2\0(\xF2\0\xF2\0\b$\xF2\0#$K\b \b\b\bK\bU\b!\b \x80C4\b$\b;$$=  !@B$\b\b$\b\b$A+8+\bB\bK\b+B++\b+I#+++\b#B++@\xF2\0F\x80)\x80$\x80#	\b$ GJ5\b\xF2\08\xF2\0	#@)\b*\b=\b$\b58\b 5\bL\bF($\b\b\b\xF2\0\xF2\0\b\xF2\xBD\n-\xF2M|3|-\xF2\xA4\n-\xF2\xA0\r\b-\xF25-\xF2{\rs\x9A-\\4w\xF2\xF2 \r\\\xF2\x9DN-8\\\"\\dN`-N\xF2\x92\n \xF2(w\xF2k-\xF2\xFC\b\\\xF2\0 J N\xF2U\b\xF2\xF2M\x94NwM\b\\-\xF283V\\\xF2\x88\x07-\xF2\xD8M\xF2$ -w\xF2\x8A-s\xF2\x9C3\\\x8C z  z\xF2\x80\xF2\x80\nM-\b0@w\xF2\0\xF2\0M\xF2\0\x96\xF2\0N\xF2\0^>I5 4\r$B$'!U= ;$: $\b$:A$# $IV  \xA9 $\bT\b\b$\b\b\b\b\b\b\b\x1B\b$\b\bF\b5\bU\b\b$**\b\bU\v\b\b#\b$\b\b\b\b$\b\b$\b\bK\b)\b\b$!\b\b\b\b\b+\b\b\b\b\bK\b\x1B\b\b\b'\b\b\b\b\b?\b\b#\b'\b\b=$\b\b\bK\b\b$\b\b\b\bK\b\b\b\bB\b\b\b$\b!\b\bU\b)\b\b\b\b$\b\b9\b\b\b\b\b\b+\b\x1B\b\bA\b\b\b?\b\b\b5\b$\b\b\b\b\b\b\b\b\b\b$\b\b\b\xF2\0\xF2\0!0x\bP\b\b\b#\rG7\x98$\b5$5\xF2@$\xF2\0\xF2\0\xF2\0A\xF2\0\xF2\0$\xF2\0)\xF2\0$\xF2\0\xF2\0O\xF2\0h\xF2\05\xF2\0'\xF2\0A$C=$@@$\xF2\0W\xF2\0\x1B\xF2\0\xF2\0h\x80\x80\xF2\0\xF2\0\b$!\b\b! @$@/@@@F@!!!!'!'\b!@\x80$@5\x80$@'@4@Q@:@@$@[\b\v\b@*@@$@@/@!@U@W@8!#(8!\b\b\xF2\0F\xF2\0\xF2\0\xF2\0F\xF2\0B\xF2\05\xF2\0\xF2\0\xF2\0\xF2\0\bc\n\n0\n\b\b\n7\xF2@$@b$0E@F\xF2\0K\b\bL\b#\b\b\b!\b4\b\b$\bP:\b\b$\b\bD\b\b!\xF2\05\xF2\0C\xF2\0P\xF2\05\xF2\0+\xF2\0\xF2\0$\xF2\0\xF2\0A\xF2\0\xF2\0\x1B\xF2\0U\xF2\05\xF2\09\x80c$'\n$'$'\f$'\xC8$\x80\x80\x80K\b#+++@$@\xF2\05$#$5$c$++++++\f$\v555	5 5\bc\b$\x80;\x80/\x80h\xF2\0$@@\x80$\x80c\x80\x80)\x805|\x80 \xF2\0$\x80\x80:\x80c K`$\x804\x80\xA6G\x07\xA6\b#\xA6$#\r$\x07\xA6$\x07\xA6$B$B$'$\b\n\b\f#@$+?]Q#$#$c#>\x9AM$\f5\b	8#M#C##\f\x80O\x80W\x80c\x80$`K\v\x80\x80!\x80D\x80:\xF2\0$\xF2\0\xF2\0$\xF2\0\xF2\0\b\xF2\0\xF2\0$  $\x07$  $\n8  ` $ [  5 $  \xA0$  5 # 5 ) $ # @5 $  \bB\b$\b\b$\b+\b5\b\b$\bU5\b\b\b$\b \b$\b+\b5++\b$\b\b5$>\b5 $\b\b>\b\b\n$\b5\b$\b\b/\b\b$\b\b\b5\b+\b5$\b\b$\b'$  $ E  @5 $@K@$$ 5E$(5\b\b5\b\bW$\b\b\b$\b\b\x075\b@\b\b$5\f$\b\b!\b\b]\b$5\bK\b$\bU\b\b$\b($\b4^$\b\b$\b'\b\b$\b]\b$5\b\b$\x1B#\b\b@$50$+!$;F5\b@$!OU$/50$5$5$K5\xF2\0U\xF2\0\b\xF2\0\xF2\0#\xF2\0$\xF2\0$K\b\vC![K$:\x07:>I?I$$$#!$Q \b $U$\xA7$B$ *K) +\x1B\x07\n\x07 4K\x07''4U\f4\xF2\0\b#\b$\b\bV\b!\b\bK\b\b$\b\b$\b\b\b\b\x07\b\b\b?\b\b\b\b\b\b)\b\b\b\b$\b\b\b\b\bC\b\b>\b\b$\b\b\b\bX\b\b$\b!\b\b\b4\bh\b\b,\b\b\b\b$\b\b\b\b\b\bI\b\bYY\b\b\b\b#\b\b\b\b\b\bU\b\b$\b\b+\b\b\b\b\b$\b(\b\b\b\b\b#\b\b'\b\b\b\b\b$\b5\b\b!\b$',\b\b\b\bK\b$\b\b\b!\b@@$@K@$\b<$<K<K<K<K$<\bK<\x07$	<@O@A@U@@,+U\xA2U@4\b?'8?`_\b\b\b+\b\b\b\b\b!\b$\b\b\b\b\b\b5\b\b$\b\b\b\b$\b\b$-3-3N-\xA3-N3J-\x96N\x88Nz\xD4\bw4\\Mw-N-\x96-3\\N32\b-\x97-oMoJ-wNJ -HN\xB7N\xF2\03\xF2\0\xA3\xF2\0\\\xF2\03\xF2\0\xF2\0N\xF2\0\xF2\0N\xF2\0x\xF2\0\b2\xF2\0N\xF2\0\xF2\0-6--Nz\nN@\f-N-@\xA7N<-\\w\\-\bN-@@s\xF2\0x\"\\T-25J-@w\b\\\b-\b-\b\xD4\b-\\N-w3\f\bN-3\x80N\x80J@\xA3s- N\bw\\ws\f\\3-\xE1\xAA\xD4-\b-\xA7\xF2\0s\xF2\0\xF2\03\xF2\0z -Nw 3-z\bwo!oxo\xA73\b-\bJ\b-\b\b---\\-\x88\b-\x97\f-Nw-3\\Ns \xDE -3N	03$7773\x07\xF2\0-J\vJpJo\bJ'J\bo-\b\xA7\f3-3-\xD4\xF2d-\x96\xF2\x8CO\xE5\x96\xF2$-\xF2\xFC@\xF2\0@\xF2\0\b	\xF2\0\b\xF2\0\xF2\0	\xF2\0\x07\v\x07\v\v\nq\v\x07\n\v\x07	\n\v\x07\v\x07\x07\v\x07\x07\v\n\x07\n\n\x07\n\x07\n\b\x07\f\x07\n\x07\f\x07\x07\nt\x07\n\x07\x07\n\v\b\x07\v\x07\v\x07\x07\v\x07\v\n\x07\b\v\b\b\n\n\v\n\x07\v\x07\n\x07\x07\n\v\x07\b\x07\v\x07\v\n\v\x07\v\x07\n\x07\n\n\n\v@\x07\xF2\0\f0@	 }\x07\v\b\n\b\b\x07t\b|	\xF2\0 \x07\b\b\b \x9D\b\b@\x87\n\b\v\b\x80\xF2\x80 \xF2\0\x80\n\xF2\x80@	@\b\btp\b \v@\xF2\0	\xF2\0\b\xF2\0\b\x07\b \x07  v\b\b	\b|(  \x074\x9F\v	\x9F  \b}\x07v|\v\b\x07\v\x80 \v (	\bt\x07t\x07~\xF2\0\x07\xF2\0\xF2\0\f \x07 \v\n\v\n\v\ft\b\r@}@\xF2\0\x07\xF2\0\xF2\0\xF2\0	\xF2\0\xF2\x80L\v \x07	\b@	\b\f\b\x7F	vv \xF2\0\xF2\x80`\b\b|\x07\xF2\xF2\0\f\xF2\0\x80	@|\b	\b\nv|\v\v@	\b\x07\b\x07\bt \x07\x80|\xF2\0@  \x9E \x07\b\v\b\f \btt\xF2\0\v\xF2\0\xF2\0\f\xF2\0\v\xF2\0  \bv\x07\f\x07v\b\n\b\x9D\b\r\b\v\n\n\x81\x07t	\xF2 \xF2\0\b	\xF2\0`\n	\n\vt\x07\b\f\x07\bt \v@	\xF2\0F@ \bv\x91\x07\v\bt\n\x07\v \x9F  \xF2\0	\x80t\nt\n\v(\n\v\n\n\b\nt\nt>\n\xF2\0t\xF2\0\n\xF2\0-\xF2\0x\xF2\0\f-\xF2\0N\xF2\0x\xF2\0s\xF2\0o\xF2\0w\xF2\0\x96@\xDE@\xE1\bzM\b\bz  -\xF2\03\xF2\0-\xF2\0N\xF2\0\\\xF2\0N\xF2\03\xF2\0Nw\x96Nw3w`-@o@3JN\xF2{-\x96\n-\x96-\x1B\x96-\n\x96\xF2-\xF2\0w \x97-\xD4-@z - z(-\b3\xA7\x80\xD4\x80z\xF2-N\xBE-\x96H- \x88P-N3\xF2P-\xF2\0\b\x96\xF2\0 N\xF2\03\xF2\0\b-\xF2\03@N@\x97 -\x96oJ\f-\b-JJJ\fJJJ\bJJ\xF2\0w\xF2\0\\@-@@z-\xE13 \\\xF2\0o\xF2\0\bx\x80\x88@z@wJ\x07JJJ\rJ\rJ@J \x97-\xA3 - \xD4\xF2\03\b---z\b-(-\f-\f--M-w\b\fMP--\x80N\x96J\xD5\xF2hJ\xF2\0w\xC0o@-:w\xF2Ew\\ -\xD4  \xE1\xF2\03\xF2\0N\xF2\0x-b-\x80\x97\xF2\0\xD4\xF2\0w\xF2\03\xF2733\n\b	ooo\n\r!\v\b!C33Z333\v3(\xF2\0\b@Jo\nJJ -\x07N-w-\x07J\\s\b-\bJ \\ -\fxxxxxx0N3\b\xA3-\f3$N - \xDF\xF2\03\xF2\0z\xF2\0-\x80N\xF2J(J@\\\xF2\0N\x80-\x80\x96\xF2\0-\xF2\0N\xF2\0t\x80\v\f\n\bv| t \b\nt\xF2\0\x80@\x07@\x80\x07\x80\n\xF2\0\x80t\x07\nt\bv\b\b\b(\xF2\0\x07t\xF2\0	\xF2\0@ |  v t@\x07\xF20	\x85\x07\xD1 \nv\xD1\f0t\xF2\0\xF2\0\x80\n\ft\n\x07|\x85v \b\nv8\n\b\xF2\0\n\xF2\0\x07\xF2\0\xF2\0\b\xF2\0\x07\xF2\0\r@\x87 \x85 \x80\xF2\0\x07\xF2\x008\xF2\0\v\xF2\0v\xF2\0\f\xF2\0\x07\xF2\0\xF2\0\v&\n\b35# +\f\n  |@@ i\f\v\vv\v|\v\v\xF2\xA0	` |\x80	\xF2\0\b\xF2\0	@\f\x07\n\b\v0	  	@q\xF2\0\xF2\0}\xF2\0\b	\xF2\0\b\xF2\0	\xF2\0\xF2\0\fp\bv\x80\v\f\x07\b`	@\x07@	\xF2 \b\bT\v\x80\xF2\0\b\xF2\0@	@|\x80	\xF2\0t\xF2\0\bt\bt\b\v\xD3\xD3\v\v\v}\x91\x070\x80	\xF2\0H\xF2\0\x80\b 	\b\b\v\x07@	\xF2\0\xF2\x80\x82\b\bt\b\b\x9F\b\r@\n\xF2\0\x07\xF2\0\xC0@	\xF2\0\x07\xF2\0\x80\n 	\b\b\b\b\v@  \v t \x85 @	\xF2\0\xF2\0 	\xF2\0+\xF2\0\b\xF2\0\xF2(\nt\n\f	\f\x07\n\n\v\f\x9F\b\x07\x80\xF2\0\v\xF2\0  \xA7\n\v\b\x07t p\xF2\x80\xF2\0H\xF2\0\xF2\0\xF2\0 -\\7\x07$\x07	\xA3\b7	\x07\x07\v\f\x07	\x07\n\nM\x07\nt\b\n\x07\b\b\x07i\b\x078\v\b\x07t\n\x07	\x07\v\x07\f\b7\x07\n0\n\bv\x07v\x07\b\x07M\n8\x07\b\x07\v\x07\b\x07	\x07\v\x07v\b3\x07\vv\b\v7\x07\v\f\n&\v\x07M\vv\b	\v\n\\\x077!\b7\x07M\v\v\n\n\\\f6\x07\x07\x87\n\x07(t\v\v\f\v\fNh\n98\x07	i&\n\b&v7 (\f\x07P0$!\f\v p\x07	\xF2\x07\v\"t\n\v\v\n\b M\f*\x07\x07\b\v\f\x07\x07\b\x07\n\vtM\x07'\v\b\f7\x07\x07'\vh\xF2\0\f\xF2\0\b7\xF2\x807@7\xF2 \xF2\0\xF2(7\v \x07\v	(\x07\v\x07\x077\f\x07\v!7\x07\b\x07!7\x07\"\v'\v\v\x07\x07!\x07	\b!7!\b\v\x07TX\v\v!\f\x07\nTv0\v\v3\vM\vT\b\v\xF2\0\x80707?y\xB0@7\xF2\0\xC2?\xC2\xF2\xC8\f\x07\v\x07	\v\n\v\f\n\x07\x07\b\n)7\f7\ryy	\x07\b\x07\x077\b\xF2\xF2\07\xF2\0$\xF2\0\b7\xF2\0\b\xF2@7\xC97\xF2V \n\xB07\xC0@e@7\xF20 7\xF2$	7\v$7!\b7\f\x88@7\xF2\xC0$\xF2\0y\xF2\0+\xF2\0$E($(5$$)U\x1B4A+54$\xA2:#$54F5$5$UD$K:!$!5';!I5=5D+!P]5I $X\x1BF+h #[54!5+]$Y4!#9$$\x1B+^+'T555V##3K!$A$ $G$5$!\b#(-$X\b45BIF9\b$P$,!Z#$\b\x07_LFK')$85($$/;K\bK\x1BI$)K!KK5\xA4$$#?4O\x1B\bK$,\x1B,$;@$\x8Aa$#K##'5PX\b$!\b$!,!HI$\x1B54\n\b$$FK$+#$\b$BE)$5!IEXc@$E8\x1B$)[$$\b)P)$$?'5U\b$T$,$\b$#L\b$!$$;$$$EP\f$$G$#$$44$>?/$#$#5>:)!\bmI$#+$\bK$$@\b$\bB\b!'#5D!=$H\bAB$BP$#$!\b$,h\b$`#$+,$8:;$$8<K\vF)$!$U$\b$\b$'U55*\ba$b#I5$,,$$K$c5K!!F$$ )K$'#$$#5Q=$\b\xA2$K$[$$K=#5 $5!$F[F\b$,GP\b$?*!\b$5U?B$$!$W#$,!\b\f$\b$>$\b$8/\bKX[5$$#$$$\v\b$K\bBA[*\fK#\b55F\x1BX\b?!=5 ;$#\b$[\b$$C$!:'c$3\b$#$'h$[=$8\b$$Z_!!8!'\b$$5$$\x1B'$!`!$5K#$PD$$$$$$$\b$#5\b$#$$$U$\xE2: E$U$$4;A/'!$\f$$[K?!G\xA6!$8K\x07+4QB5\b$A\xAF\x1B\x07!Ah##Chp*O\x07#$B$E*5\b!!=;UG$\b?F\b$4^?c]B$'F4K\b$= !;5$	'#8V\f$KK!+\xA1E\xA1=$B!$5#\b#gf\xA6/+5$KP\n$B\bU#'U$\n(#$A$#\b$A$#$I$C\b88$#OF$\x1B\b5DBA\bFK\b=>5\x1B8#O(\v$VDW\b$\b$=8\b$cA$#*K\b#K\b\b$\b8[$\bK$KI\b$9$\x1B!I$$'$'#5$HK$!T'&S&\f'AV4,!\b($K$'$#$\bF$$U$,I#,$U[Q$$\n$K\bV\b$H)YB$T>!$8=*U$\b$\b!$$=F!!\x9D\x9Dk#W#\xC1jH`G\b:5?>?A#!A8#,\v\n5'\b!>W!\x1B\fg\b$)FU!#\b$\bTAI\b]#V#	55K\b$P$\fKQ$$\b$A\bWDF!,V$5$$\b*U>\n'B5?\f$4K$'! \b$($!^?:!#D+ Q$5\x07$\n\n$\x07\b$K$4$[8$ !!c\x1B,,$\xA4,*D=W)#'):P$h#5$E8$L\b$$#$$(=$I+!+BQU\b#Y$K$\x8B:\v\b5L\b$$$5B#\f$\n\b!5(\b$$>[$$4$!$B!8/5$[I[L'$\fD\xEC$$h,5Q\b\b\x1BH!C+U+EU?$K\b$\b_=9[$+#9$'!8=$U\bG#$5 \v\bPA?'$P\v\b>5$U) [\b$I;!\xA2D$5=5\b[$$5F5]$\b\b\b$!'$!!$K'$5$ 5\b\b$I$K'$*)$Q$5,#$#'\b5#'V$)\b$Q4Q!\xA2E'P+?K\bK5$,5\bO!$\b$ $!C$$!W$5$Q$GhK\b!5A$KGX5$$\b\b$\b$\xA8$\b$5!(=$$$#$=\f\x1BK,K$\b\b$V4$'$$?A',)Q$)5#55$\b$\bK\b\b,$IBK\bK4C4$4\x1BPY$!#\b/$V+\xA1$4\xA1V$!7$!!?$(K)F\bK\f$?;#\b$#:85$K\bh5B$4C5$K555Q>\b$!I>IK$X'U>\xA5c$,)!8=)D!\b$U$#$)\b$Z($^!\b$B]B\n\b[#Hh5#\f$/A\vWD\b#$K4K8K$W#!\bLCK\b$,:$;\b$)!K![#\b$,'?$$5$DU$A$\b'5!C#$G!#KM$) C#$\x1B$!($\v)KF$*=!H(\b$4$\f$CG==Q$;^]$$!'!\b$4\b#O\bW$(#!c5'\xA7?D#D]UK!\b+8!\b]$TFI($$$\bP#P\bWXWO$F=G=$!	\b$$]$+!)\x1B'Q$D$\b'\b\f+DU$'=\bK4V5\b\b\b8<(\bK$\b ?=F!UWU#;XH!WU$\f:#/B>+!!\b*K!W\b\xA6K!'\bKZ\nW$#$=4'I;! \b[A$uc\b$\b!$W$P$\b$K#\b$\xA7W#?#$/#;K'\b$5$\bAF$$+$>$\bK\b$4)\b+^)W!$K$!8\b\b$&#gGAE$\b$#PUI$$c!$>!$\b$E\bI??I'!G$$+\b\xA1\bV;5$U8\v)U\b49DF$$>$c!\b\fK\n!+)5)$!5!HHH=$#\b+AD ^$$$@FK\xA2>584T5$H!#X+7I;\v^UKh$\b$:$,)\f$\b>I>[!!Ic$8$>L(!!\bI$#A[5=$($\b)\bc$5,,\b#D+!WG\bA8\b$\bK]5K#$!\b'V$K\b#\n\n\fK$$$XDUV\b#KI$5$]C5B$I,\xA2U)4$$8\b;$$I$?\b#\b=\b>['!AI'$!)AK\b$$'W5!!C\b\x9A\bF,$,\nAc5CK\x1BY##($5!5#Z$:\bP\f85\b$,\b$\b$U$)#\b>bE$K!W!D$K$($G;#$)KW54WIK>*W'\b$\x1B \b$>P\b$+=KW$\b\x1B4?K\fKK\b?#?;\bY\f$M$#$!K4\b@N4)-)^`UWUC@$8K'!A\xA9$$\b$F!$4+h$`\b$='M$$$B)KK=>$ A!$\b=\b+\b!5!5$(F$##\bP\b#(\b$\b$MHK$#$$C\x1BBYY#I54A$\nI/$'\b$>$>\b$'8\bK\b$4?#$\v\f$\bG@/ATh!$\x1BU$]H$W(/#c:K$()K$\b$4$cK\x1B\bB W$IF4#*$=b)U# B\xA2K*8,G+I#b$5XQ;7K$!!D$>$!\b)$W#K>U$'\bQCKK!\b>P+#IM+M\b\x1BQ$;#$$$\b$KP4\v`8K8IP\bUF>!$K'\nK+$K\f$4#)$#$? KC\b\x1B\bKK!K'Q#`\bK\bK'K 8)$# X!$$O!\vI+/=\bWP$\x1B[5$F$#\b$!KPO!$!$$\b\bA'\bK#\b'!#<$KWD!$\b+#+#$#_5##\bK8\v!H\b5\xA1+5#$\b!$$E$!>#P#K/8\bVXU#ZA#\f\xA4$)\b'#\b8!PF#F\b$>\b??'##K \x1B=+]MKEE$!$+#!K\b$#K4$\b\xA9K\b$88\x07'P=\x1BF=$5\bMK4HD\b ;\bH+X##F!\x1B B#)F$=EU$\bAP!\b\n$\b)#O5H=\b$\b5P\f)[\b\b$)AQ\bdfed$#\bK#	7O$KC//O ');(45$5W$+#QW!W\n(\xA6$'#)#+U$@\bV!\b:5($(#$,!7$!$!`K$?!\b$A$$)4$5$#h5K5$#\b!MM$\b(F!K4!\b#K== $\f4P$5\x1BM\b*M$O#Q8!!+\v!4# :5#U9hK\v!4+M#$!?IPWBEW4PPBK8E8!E?I?$\f\f$)I!\b,?$[B;=#B\b$B\x1B4GK\x1B-=\xAD\r!\bPA#\b*'\b! #[$C\b$P\bP!E\b\b+C<OBv$c\f$5!#KP#P \b=$mK@+BC+'+h5\x07$,F$PP9PFBXYP$Y!$\b+!$5\b+ $?5K=\n8$!!G#\fB+!+B$UB$C+5\x07$5\f\b!+'U\b,PP$\v75!\b$KP$$'$K$UA\b$BBB!#\b!;\b\bK$\x1B$!#\f5\b+9P$$,$!!\x1B=,\xA5I+)K8_$`\bKKP$P8\x07,+ \b$!+5K$5KC$G8KQ\b\b$\xA8K!\x1B#,=8\x1B\x1B$$$G$)$+8KKB$!E$KG#K\bK(\fPV$9\b\b\f\b$#$\b$$B?4X)$\bK5\b$\b$E:\b8\b$K'\b#:4:88:+$K:4\b$$5$F,\v\xD1\x1B$#\f5KKK!pV$*K\b8\b$F\b*\b5O\f\n7\bK++$+K_$$4\bC8\b5I\bA\bC$\b$KKFK#KK$KP\bK\bV5\bKK$)$B5K!#P$I;)4$#!#\b5U\bK\x07$F#$$'$\f$T!5\x9DK!5VK)K5\b=QbV$=$5)X:$#Z#$BAK5$5$\b!=$K$\bB+Q\xC2 \f >!$$#!$?\b#\bv\v+F$\nP!D85G?4K#87\b#\v ^O$!PCH')+5#;K+$P\v\b\vC$A$K\b$K\b\b=\x1B#8+8#\f\bK'K\b4\b\b#$!\bB#K\bB\b$4F$\v\b=$\x1BK\b?\b4!8=#5!$'#FGK5$]\b$Y4\bK'$\x1B$5$\b+=KPV!=Q\b$>C= F\x1B$=K#DQK?$U##+,P''48$K$$5#U4!V'&K)\b\f5\bK#PD'$B$5$X`(K85K=F+KK\b$\fK,K\xA8G!\b!;KA$B$55#K(44vvvvO\b;!'/\b$F8#$B#A\b!KP'!'F\bII\b\bF#+D4=#$BF)$5?#$K$!\b#''+$$c4$V\bK,!\b+\f5$\f+\b#\b'\fK \b=$K$5K$$\b$P\b$IP+8$K#B$$U$B$+5[?\fPU,$$$\bV K=KPV\b+$ $5$KpK\b#$$K#5I8$\b'/''\bP$\b $PPU$!K5!$'\n)=KK$5+C$#\bPKK'KO$c\b$5+WW'Q=;?#!'+B$!KQ\b$?U\nA$p$>$>'K\bKB\bK$$\bK\bK!V;\b\b!=5#;'K$8$$5UXP!\b)+\n$A\b$$,!KP\b#($$F\fKFK\fK\bK\bK8\fK\bK$\b\b#'+\b\b5\b$$\b#,\fKD'\b#\bUP8\xA2+\b\f$\xA4hK!\b$E$\b6\b$A+!4 Fh; KKFW\v!\x91=FK(\b!\b$$,)'!K'\x1BG$O$CP#A4\b$A4$BcK\b#O+=\b\v$A>$>#G##$\b$5$!=*7#K$,\b+B!'$'8V #$#KP=KK$K\b#K=\b\vHK\bK$#,\bKc+$$#$!\b#5$F$Q!\x1B'!$#$]=$E\b\b$8V4$]\b$5$4FP\\5CK$\b\b$CF@'!'#5$**A8?KAA!K\b()!#$$$\bE=\b4\bIKK(F=(+!#K$K>4$'$'K#!$K!IK$GUK#$\b$K\b\bPAE$!K$h\bK\x8B\vK\b\f+K!\n\bG'!\bBF=)'+\n$I#44\b$ULB\b5!\b$C;Q)K$$P$K#+A$$I$!`A8>$#D?K\b8\b$\b:!5+C$$)\b\x1B'5K)8I\x07O\v>88B'B7U$+# Q$5\bO!4$$!C\b\v5+hW'Q5h^^$K:>5\v$K5?\b$V8KK5\xA2!!'$$54W$#$ \xB1!4F4OU$\b$#$\b5!$$\b$#4$,/$,$I$C,F5\b$#8#$+I\b4FKIG#O\b$/5[h;A($B'O5K5$$;CO4\b8$'#A\nI\xE2$#\fAV#\nB\n$c!)$$A\b!\b\b!W\b$XC!P$55$?(,!E\b9M7K:5IKP)##'$#$$$\b!V\b$#+95Kh$$\b5\v+?!O\bK$A\fK!5?\x1B$$#=O\b;;;+/K(4?$#DV5K5\x1B$\b\b\b\b)\b$\b\xA7PLK\bH#U$5$U?\b$5$Y]@!!!=$\xA6#!$D=O';O$Z$$K?\b5c\x1B\b\b+!$$`$;8$#$5$K!V\b5$K*778'#$\x1B5(F5+I>IKA# $I\bK\b$P#\b$PU*\vd$K]$\b$()?8#K\b5#A$\x077$I)!:Q>)4$G5$K)+A$\v\n\xA58::#8'O\b $X$K\b$\x1B\b'!@#:'\b!K++\bF#(#48'$F$\b:C)*O\x07\xA25$4:'8\fF[I>:<KP:PIO$$F8OGOG=F4,OK\bF#4KdAK#\bI!4K )$K$'A\v$+V+!L+$K$4$;\b\b\b$='!A\xA8KG$'4?hKKGU\b) !'$\b!\b5)!4$!;!@\b\f\bX:\bK!)K8$K:F4854!F/}$\b4IUK\x1B;$8;55\b#\b$''!5C$!\x07K=5K\bK!F##?!  $\b\bI8$O#V8$PIU\xA7$L}$: !)(\nPY\x1B>=#	7#!:5$YYGK\v#$:#KD:O$#G$P(EADF$\xA9';+$$>\nK\b7?\b:\b)}IKO!8YA$$$#I5\bK\b=O$!++[+$hW\n*P$$$5K$\b\b:'$G$KO$,#G#!D'!G:!)#'#Y\x1Bu#C$K$!5 ?$5V$KD5O$OP!KW$8G$O$K: 5\xD18$$A$\b$' AI\b*JG6\r5K5*D\b$!K4*\bK>A\b!\b5>P!HP4>!\xA8\bAX\vD\bH$4!\x07G$/\b$!V5I:K!(5'P\b$K54\b\b$\bK!$!\x9DO\x1B!$$KW+#$\b$B#D$W\xA2H$Vc$\xA2#HV'$U$+$K$$$$&(5K$\b'8#\x1B$K$=)*()8$$KA:7$^^$$$\b$$$$\b!5\x1B5:!:=FU!+O\b4\b$5K\b$U#!:+$C\f\b$\b\v*8!>5$P/*CU#)BK#K\b$\bI$!\b5F\x075++45cK8F!U!$\b#$\x1B\b$A@X8(#AK$'K$,4'$P!O$JI5\b=#=$8$\bK$$#$OW+$#$8\b$$\x1B'=P$>\b)O#KJ5<$\b!'K!8!D\x1B\b#4\b+4$\bE$$Tc\b$KD[W#\b8\bKG$)=5K$P#$P;H;\v8hF6F#$O$=,:\n)!$#)#\b$KK##\b$A$\b\bD!4A\v\b$!!#!P$)$K#$I\f$+5$4CC\v5\f$KPK$\bJWD\v4$\b$DU!5U$\b\f$\b+\b ?B$\b\xA8$FK55\v7F$5DG\b5)'$8G8B$C,V\b`K'$'P$4$K+;'P$'5h$5)#/$I	+4?4'$4\b!Q\b$G(#*$$K\x9D)XF$=+\b$\xA4OK,$OFIP#,\xA8\b\b8K:+?$F#)K#!$'$W8$:$#!)?^v$#'+$!):A}\b$8\bOK!\b$D$\b\b@\b'$$\bX$O$\fK$5!,\fK#4*##88!$!#I$:#++#!?3N3$\b#IV$K)O\f!#I\b\x07K\b$G)4K#5U!$$!+KO,;\x077($##II#4\b((5?\b5\n$FT*$$4$$!\xA8$$8D$!$D\nC$4)$K$\x1B4$T\b#5$8$! ((h;!##A+5$\b\b\bK![+K	\f\b)F\b\b!V!$F#,;#=O#$F4\x07$cK#\b\b\b(@5+$'$!$5DPX\b5#OOG$ c$!$4KK##:\b\b#'#F5!>$+)C#\x1BW$\x915D+GCKc4\bK!$)Z7B5++#=Kh$!=+F4$='WP$K8$Kt4$FI#K#$K'$\x07\bC5\f\n\v#I4\b4$\b4!!$K\xA8##5Y\bK/\xA2\vK@K$8$\b)5>\b#\b$O$F5\b4$$?E$I$\bKO4$5\b+$$\b5#$\n 5[\x8D[K++!$#$A(}\vKU\bK>h$@!A$$\f\b4+($],\b$$:!$=K\xE8$[\b:\n$'$\x1BDKP\b5B5C$$K!$5?=\v7\b\b$A!$K#P,>$'$5;8\n\b) K+N\b$$\b;+\n'$?`U^$#A\f$4$$@!&\x9C#>>/$,\b[<K7\bKB$?!\v\fK\bK\n\nG#D$A4F?$?\b$4$4\n$#\v\vKO\x1B!A+$O$I\x07\b$\v!\xECFB4K!V!B=+\n)=P=8F+$+\b\bK#+$OBPB$!'4\b$ !A\f4$'\b$4\b\b$'55\b##$$)$45\fK458 #4V>8\b#P!\x1B;\f$\b#\n'>5\v=>APU?P5#OIQ+)>8$K\f4$WV\n\n\bK\b$)$$'$VK$+\vV4KD =5P$UHQ4$KU$5+!\bK 5AK\xA8\f$C8))\b+(+\b\b5$/K\v:B\b'!$)\b!#)$)!'$DO\f+\b'4 K$#\v5$$$+X$#O\b!F)+K4+E'\f$I#8$K$(5#$+5'54KX\b,5$!!\x1B5D#K5KT$KK#\b\b#$\b!v\x1B$'IK'!!$c\bK+#O\vA\b#\b\b=\bO4!$55$}\b5$\f$\v\f\vA7v!$K$=?K$#XK] $'$XBC\nIB$'\xADI4\nF$$;K$8\b85?)44:#+#!!=X5h=G[YIH$\b'8$'Q@F$X\b<'FO$$BK@!'!?KKU\b'$X\b+AK$#>$ \b$\n$?\b$$+4!)5U()$5X4$K4'$!K$\b$'$,$\x1B\f$K}:Q\f55$K$\n\b5D5)+$\bTQ5$$$IX#+$#\bB\x1B\x1BB5\b!='B\b$ +5))K$=A5D4$#$OO$)#$$+$#\v$)!5K=?\b?\b5<AX;5\b\b\x1BG!$$?K!$\b$\v\v+KO+V$L\x1B44$4WP$5Y\x87 $4\b\bKD<\v#5#K\b$[\n\b\v!$#5>5#$U$K##K+\bF$K$5\b$'+('\b$$\v\bUKD=585$=\v$9Kg\b$4\b$+B@'=\b5'!vI\b=V$Kb$$?4+G84K444!+\b +8B#8\v^4*#+$#\b#5$(#!!$\b$UG45$A5$PAH\f4\b$\b$\b+'#4# >VA\b!;(\b!\v\x1B\xA5\v\b!\vK($5 +=\x07:\b#P\x1B!$4\v4!$\xE7$_U[!)\b$$K\b)$+;?I+#+$vo5#++=55$\xA85=$O+!\b#X'Ivv;$$\v+\b4A\f\b\b$V$!+\x8B+K$\bA$\x9AO$$$!$B\x1B4$?+$Y\bI\b/!5=\b4+$!$9C!'#$5\x1B\b=\v\v$$\b5F+V\v!#$=K' @!#!$#$#V5+!,5D5+\f\b\b\b\b\b'\v&#4P+)G$5B\b#\b	\v?\b'#$\xA5A,5B$$F+>I>F$'\b:$5?\b#\b#$#AX\b+#>c4#\v'#K$4''A$Y#4Y\f\b$#$\x92\v\f45K#$\xA75PI#'!'$VXBAKI\b\n)$$Z\bB=$$$'$>\b5=\b$!?*F#!\b$I\f4/G\x9F\b$;5$5\b#\v+=,#P4I#!=#aODW?!\bK;O$\b5=$\x1B#A;5\x07;=$\n=54KcK#I:$F##$5TK4P\xA25'\x80N-\b-z-\x96-3'-@\xD5@sNN\\w\\\\\\w\\3NN$N\xAA(-\bN\x80z \xD4\xA7w\xA7w\xA7$\xA7w\x930\x96J\xD7\b\xF2\0w@J@-\xF2\0w o	JJ8-\b3-\xF2\0s\xF2\02\xF2\03\xF2\0-\xF2\0x\xF2\0J\xF2\0\x96\xF2\0-\xF2\03\xF2\0-\xF2@x\bM$J\x80x\x80z\xF2\x80N\bJ\xD54J@\xA3 \xD4@J\xD4\b\xA3@-@s@w@-\xF2\03\xF2\0-\xF2\03\xF2\0w\x80N\x80w\xF2\0\x88\xF2\0w\xF2\0\b2\xF2 \b-MG-\b\x97\f3\\\x80J@w\b-\b3\b-\xA7\b--\xD4\x803\xF2\0w\xF2\03\xF2\0w\xF2\0o\xF2\0\xD5\xF2\03\xF2\0\bN\xF2\0\bx@M\rxoxJ N@M-\x07\x88-\b\x88-\xD4\xF2\0N\xF2\0-\xF2\0w\xF2\x80N\xF2\x803\xF2\0-\xF2\0\bN\xF2\0s\x80N@-@z\xF2\b-\x96(-\b\x96(-\x96\xF2\x80-\xF2\0N@3-\bso0- Nx\\\b-3J\xDE\x93--\xF2\0s^\x97J\xA1\x97\xF2\0-\xF2\xF8N\x07N\xF2\03\xF2\0-`N\xEFNo\b-\x80J\xF2\0\\\xF2\0x\xF2\0N\xF2\03\xF2\xC0J@-\xF2\0w@J3No\x80\xE0\xF2\0NR-\x96\x95-\x96\x96-\x80N\xF2\x80x\x80o@\xDE-;3@\xDE \x97 -\x80\xAAP-ooo\bN\xDE\x933\x93N\xF2\0-\xF2\x8CMN\xF2R-z\x88\xF2`\rMp3w\xF2\x8Av\xF2\xCDw\xF2\xBE\rw\xC5\xF2\xDC\\-\xF2\x8D-\xF2\x901\xD48\bJ\xF2\\\f-\bM-\bM\xF24\vN\xF2\xF0\f\\\x1B3\xF2\xABP3zM\\-\bMM- 3\bM\xF2\x8CM\xF2P\x07\xF2\x004M\xF2\0\xF2`\x07M \xF2\x90;MN\xF2\xEEM\xF2\0 $\b\b$?@5 B@$:K\xF2\0\xF2\0U\xF2\0#\xF2\0\x1B\xF2\0\xF2\xF1\0)4)\xF2\0\xF2\0\b\xF2\0$\xF2\0\xF2\xC0+ \xF2 +\xF2\0\xF2\0$\xF2\0\x80K7@\xF2\0$\xF2\xF8\0)+\x07)\xF2\0 \xF2\0#\xF2\0\xDB#\xF2\0#\xDC,\n,\n\xF2\0$ X $  $\x80)\xF2\0\xF2\0\xF2\0\xF2\0\bF\xF2\0#\xF2\0\b'\bQ\bW\b\b\b\b\b\b\b\bW\b$\b\b$\b\b$\b$\b>\b\b\f8\b$\b\b\b\b\b$\bT\b\b\b$\b\b$\b\b\b\b\b$\b\b\b$\b'\b\b!\b\b\bHHH\b\b\b$\b\b$\b\b?\b\fU\b$\b!P!@\x80T\xF2\0'$ AT$8$ \xF2\0I\xF2\0h@=\xA6\b$!\nB$5:?AIDG)$@Q@@@@$@\x1B@@6++,+@$@K@@$\xF2\0\xF2\0 \xF2\0\xF2\0\b$\b\b>\b\b\b\b\b\b\b>\b\b\b\b$\x07\n\b\b\b\b\b?\b!\b$\b\b$\b\bC\b$\b\b\b$\b!\b$\b\b$\b\bCC\b\b$\b\bU\b$\b\b\b\b\b,\b\b\b \b)\b$\b\f \x87 \b$\b\b\b\b\b\b$\b\b$\b\b'\b\b$\b\b\b\b\b\b)\b\bB$\bK\b\b\b$\b\b$\b\b\b\b\b!\b\x07\b\b\b\b;K5$\b\b$\b\b\b\bA\b\bF\b\bU\b$\b?\b\b!\b\b\b\xF2\0@@A@>\x80$@@$@@@$ N\b\b@$5 !@,@@5@/\b\b(Z	@@$@L'!'!'!\f'!'! '@F@\b\x1BX\fX\x1BX\x1B\x1B\x1B@@K@@@#$$W#$$+++\b+@A#A#A\b#$  U 8 !  $ \v\b !@K A C  $\f$\f K ! $  $ ' $ A\x1BA C *  $ #$ 4 $   [\b5\bB$B\b5 ; \n\b  #v    4 $!'!!     !  B  [ )  '$\x83$\x80\x80;\x80C\x80$B$B$@$B$c$5:\f$\f$G$@$@5$5$\x80:\x80\x80F\x80#\x80O\xF2\0$\x80\x80T\x80\x80`K \x80\x80L@\f/\x80:\x80F\x80O\x80 \x80T|\x80\x80\xF2\0)\x80$\xF2\0\xF2\0\xF2\0!\xF2\0\xF2\0\xF2\0)\xF2\0K\xF2\0O\xF2\0E\xF2\0$\xF2\05R\x07&\b&\b&0\x860\x86\x860\x86==\b=a=####\b\b$\b\b/ $\b\b\x1B\b$\bD\b\b\b\b\v\ba\x86\x88\b\b\n\n4\n\xF2\0A\xF2\0$\xF2\0C\xF2\0$\xF2\0`HD0M\v\n\f	\v7&77\b8\\+(\xF2\0+\xF2\0\xF2\0\xF2\0\b\xF2\0\xF2\0$\xF2\0`5@A$ $ 5 $ 5$ 5\f5$5$\b\b5\b$\bK$\b\b:\b\b8\b5\b$\x07+\xF2\0\xF2\0W\xF2\0\b+#\n+\b(K:+I:+:+\b:+8+ 0K:#K:\bKPKK+:\bK\bK\x07 KE++\b: b@K+pK\b\b+K+\f:+78K\bI++\x80K+0K++7+\b!+:+K\b:K\b:+7\b:4K+7!++++\b\bK++ K\b+0K++G++\f+++\b+#+:\b+:\bK+\n K+KK++K++I:\b+:+:\bK\b\b++\n+\b	+_:\bK++K+\f+A++\bK6++\x1B\bI:+:++:&+ K++\b:++\bK+:\bK\r++KU+GEIE++\b+\b+++\bK++E\b\b+\bEK+@KU+\r:K++:\xF2\0\xF2\0\x80\x80F\x80$xE8E8\x80$\x80 $c$$$$ A COQ\b)\bE\b\b?\x80\x80\x80K\x80O\x805\x80WPh\bGhGh\x805\xF2\0$\xF2\0h\xF2\0:\xF2\0'\x805 \b@5+++#+!+\b#+\x07+\x07+U+! b! K+U++W+IK++!++\b+\bK+++++_+\xA4\x07+	\b++++!#+\xA4+W\b+\b++	+++++++!7++++!\b+++B++++++\xF2$:$\x80$\bQ	QQQ%KQ7QK\fQ5QQ# U [   $ \f$B O $ * 5\b+\b+\b0B +\xF2\0F\xF2\0 \x80\x80;~K\x80Q\x80$\x804\x80$U\xA2hU\xA2U\xF2p\b\b-\xF2\xF2$	-\xF2N\xD5\bM\xF2\xB0 \xA3\xC0MN8M\xF2|-\xF2\"\f\b\n	\x07\r\x07\r\x07	\r\b\f3\xF2~3xX\xF2\xC4IM\bM\b\bM\xF26M@N s - 2-- \x97\bJ\b-\bN\bz@- N -\x80N@-\b-\b3 -  \x93\x96\bN\bJo\xB0--3\bz@N\x97\xD4\x97\xD4\x97\xD4\x97\xD4\x97\xD4\x97\xD4\x97\xD4\x97\xD4\x97\xD4\x97\xD4\x97\xD4\x97\xD4\x97\xD4\x97\xD4\xEF\b3\bJ3-@\x93@3 - 3@\xD4 \xA3 -NJ\b- o@x \xDF-\b3 s N\xD4-\x88P-N3^NJ J0-s-@3 \\\bxNw\b-@N -o\bM\b3@N x w@N\x80J\xA0w - zp-\xD4Pw \\ -\f\bMw\\\b - s -@N\v33\bN\b-N-3\b\x93@3N2-J\x95Nw3\\2x\xA7o-o\b-3@z\x97\b-J$- o@N \x8F\x95\b\xD4- w\xDF\bwx\xF2@-\xF2\03\xF2\0\x96\xF2\0N\xF2\0-\xF2\0o\xF2\0x\xF2\0\\\xF2\03\xF2\0- N-\bz\b--xNJ\\@\x96w- s \xA3\r\xD5\xA3\xD50\xD4`\xA3@\xD4\xF2\03\xF2\0-\x97J\xF2\xFE\0\x97 \xA3o\bJH\xA3@w@-\xF2\0\x88\bNoNoMoNoN\\N\\aN@-EN\x97N\x07NM\xA3J\xD4\xA3wNJN\xD4w\x97\\J-N3N\x97NoN\xD4\xD5oJoJ\x97N\b\x97\bJ\xA3\xD4\xD5oLN-N-	N-N-N\xF2\0\xA3\xF2\0w\xF2\02\xF2\0\x07N\xF2\0\bx\x80\xE1\x80s\xF2\0\\\xF2\03\xD4\x97w,\\--NMw\x96\xD43\x80\x88\xF2\0N\xF2\0\xA3\xF2\0\x93\\\x97s3wPw(-<-N\\`N-\bN3HNN N\xF2\03`\xD4-\xDF \b7-@\n \x88\xE1-x-@\x88 NJ\x96\x96s -3\x80s w -@x\x803\x80w`3w-\x80N@- N\x88\b\xEF\b- N\bo\b3\xD4 N x\x80\xE0o-\xD5N--3--\b-\nJ@3\xD4(\xA3\b-\bw&\xA73z2-\x97\bJ\x80N\xF2\03 \xEBJ\b\bo \xAA7\bN \\@N 3-$xz- N--MsJ@- z@-\b\xDE\b\x93\x97@\x96\xC0-\xD4\b-o\xE1\b-o\xAA-\x93\x07-N-N	-3\\ \xD5-\xD5J\b-\b-\bs-M8- \x97o\fz\xDFN zw\b - \xD4\f-3\\\b-\xD5\f-\b3\bw\b-\b\xEF2\x962 -\bwJN\\ @3-\xE1-J - N -,-\bw-@N \xD4 z M\bsw N3\b-83- w -\x97\xD5-- w\b-x--z\r-z\rp-32H-\b-M\x96---\b\x96-J \x93 3\b-sM--sJJ\x97\x96 J@- \\-3\bJoxwoz-oMJo 3\xA0-\b\x96\b-\bx\\3\x97\xA7 - J-@\xAA\bJ- N\xF2\0\\ \xA3- w -N-3- \xAAN\\3N\bJ-\bx\x803 N\x96-\x97\x93x\x93`- s -o\no\xA3-\x97o-\bx -wMw\xEF\x93\b\xD4\bwMowx\bs,-MJ- xo -\b\xD43x\b\xD5\b3\b- s N -\b\xD4\b--\xEB\xE1-J\xF2\x80N\x80\x96\xF2\0z@\xD4@N\xF2@w*N\x93N\x93N\xF2\02\xF2\xA1-2\xF2^-\xF2\0o\xF2\0x\x80Np\x97\xD5\xF2\0NU\x97J\xF20\x97J\x97Jg\x97\xF2\0\xA3\x803\x97(-\xA3@N\xF2\0w\x80x\x803\xF2\0w\xF2\0N\xF2\03\xF2\0N\xF2\0s\xF2\0x@J3MNws J@3@z\xF2\0\b-\x80z-\b- @3@z@-@\xD5@\xD4\x80N\xF2\x80-\x80\xD5@N-J\bN\b-$-@\x93 \xEBJ\b-\xD4\xD4\x80-\xF2\0z\xF2\xFF\0\\N\xF2\0\b-\xC03\xAA3-\b\b-\x80\xA7\x80-\xF2\0\nx\xF2\03\xF2\0-@3-$J\b-\xD4N-\xA7y\b-3s -z\x96-3\xF2\0\xD5\xF2\0\x88\xF2\0w\xF2\03`-w\\N\b3\bN \\Nw0xN3N\b-N\f-N-J-oJo\x803\xF2\0o\x99-\x96\xF2f-R\\q\\!\\\xF2\\\xF2\0\b-\xF2\0\b\\\xF2\0NpJN\x8EJNoN\noNoN\xD4\x97oN\xA7N\x97N\x97N\boNJ\bN\x97NsN\xA3\bNsJNosNoN\xA3N\xA3JN\xA3\x07N\\\xF2UN\xF2\0-\xF2\0\bN\xF2\x07\x07d-\xF2\x8C3\xF2\xD3-\\M\xF2 \v\xF2\0N\xF2\0-\xF2\0\xF2\0\bN\b3o:333\r33\b33M\b\x073333M\b37837Nx\\-\\w\f-\b\xA7\bs-\\s\f-\b\x96\x80-\x80N@\\\x97o\b3\bs\b-\xD5\xD5\xF2\0w\\33\n\no\x07383\x07}\b		I&\n33N-3J\b-\b\xD5JDN@0NsL- \xD4-\xD5\xF2\x80\bN\xF2\0\b3\xF2\0\xF2\03\xF2\0\xF2\0N\xF2\0H\v\x07\b\b 0\v\x80@a\v\f\v!\r\x80pD\f\xF2\xC0\b\b\v@\n\b \b8 ` 0$\xF2NzL-\xF2p\x8F=\n8\x807\xF2!\r!\b\x1B	7,7)7\n\r\x94\x1B\xF2n\b\b\b\nH\x07(\x07\x07\x07H\x07\xF2\07'7\x077	7	\x07\xB3\xB1\x8A3\n7,\n7\b7\f !\v\xF2\xF2\0K{!!\f\v37\xF2\xC3\xF2\f	\xF2H 7\xE17G7\xB2+\b'|''7 7  \xF2\x88\b|7	\b\x07\b 7F\x07\b\bF\x1B&\fy\b7#7\x077\xE9877\xA777\b77\x07\x077'\f	)77\n\f77\xF2\r&2\n\x077\x07	(\x077\b7\n777\f7\vM\b#7'77\x07\f\v'\n\r7\n\n\n \x07!!V\xC6!\xF2\0\xF2\0\xF2 \b7\v;\x07'7\xD6!\b7 77J7'\f7\n7g7\f	\x077t\b7#777\n7!&\n\x0777\xA3\n!\n77)\x1B\n\n\x95\f!\xF2\xC0\b\x077\b\n\b7\f\x07\xB3\xCD77Ky\x1B7J77\r&\xF2\0'\xF2\0 {.\xB3\r3\"7\n 	\b\x07\b\xC97\r\bG\x07\b\n7!'\n\noU$7v-$8!7\n\n\x07\b\n777\x0777\x7F]7\xF2\n	,('41'\x077\v\x8E\x905!7\x077\xF2\b777\b7\f\b7$\x8D7\f7777\vg\v\n!x\b\x94{y\n\b7\b\xF2\07\n-\b77\x07!\f \x07	\b\x1B77\x077 77\xAF\v	77N 7    77&777\v7\r7\f77b7\v7@\r#\f77\b$&\xB377\f&\r!8{!!'\n!\x1B!!	!^!!V\b!7!\n!W!!!\xF2\xFA\0\f77vt\b\n\x9F\xA5F07\\7\x0777\"777'77\v7'7y7\b	777\xB377\x07V\n@ \x077&'\b\x07bt7\x1B	\b\n\xF2 3\f7O7!:7777{\n7\v'$'7\b7'!77I\b\b \x9F\x9F7\f7! 7\x07&74 \b\x07\ne'7\r77\r\f&\x86\b7\rM  \x07 \b\nW;W;W;WW;W;W	 ')7&v*1\x927	$8978# T!\xF2\0 7v'\n	 .v\x07!\n \xF2\0'\xF2<+,# $\x07\xB3\b7!\f;'\b\x07	'\b4  \f N\x1B$y\x077\b\xA2Z \f\x0777&\x1B\x07 m7\x07v\v\x07&\x07$$&&7@77\f \x817&&\f&&&&&&&7&&\xAB&&\n&&&	&\x07&	&\n&\n&\xDB7%.''?F'\b,\x80\xF2\07&	\fv\x07\r7\b7	M-\nMM\xD4MMJM-MNMw\x07M\x07M\fMMM-7$v\v\v\x1B\v 6\x077	\by\b'55&7'0'\\v2 \x07\b	$	\n7,(\x1B\f& '7\n\x07 {	\x07 7 \n9\x1B\v;\rv@$7=':\xF2\0#2\xD5yv\x07 77\n7v\x1B\b!\f '*\x1B*!\x1BA-A!\n\x1B\b$$$74\v&\x07$$4$$D$DD$&$555\xAC7p'77 v77\bW 7 \f \v\ng'!@!\xB7\xF2\08E8E\xF248\xB080\xC07\b\x07+<!x!\n!!!!!\r!!:!	!0!!!!\b!\x1B!#!7\b!^\r\n\nvv7 \v\xF2\v	7A\"$$$I\b$\x07\b$\n$	\x80\x80@'\xF2\xC0+9#\n\x9D'!\xED'\r!e\x8Fe7\"	\x077'7\n7\xE87]777\b	7\v\v  7 \x8878	\b v87 \n( '	!	p&7\xF2\0\x0777	\b77}N\vy\v7 	\x1B	 \b 7\bH'\b7 \x07\xD5  7\xC0\xD3$	 '\v7\n{7\vy\n	,7\v7!!\vM\v!!\x077\x07\bM \r	!\n7\v v77\f77777'7	77\x077\x0777	777	777\xAB\f717\b-	3-wN-\n\b}\x07<\v\x07t\x07\f\x07|\xD4w\b-\fw\\M3\f3-Ms\n-\f\xD43\b--\f-\fM\b\x82}}}} }  \xF2\0&\b$$+$$>$$\b;\n}\b|tN\f\x80$\b$\v\xA1-A\b$+5E &\xB5&\b\xC1\xB3\xC6u%kt\xB3\x8Ev)$\bv'7\b	\rv\x0772\b\nV! \" 67'\b\x90	#<!\n \x0772$\x07M\n7v\b'	77f777774q \x07%!!!!7\x07\x97\x07\b7 $v\x07)\x07g77(7NM\xD5\n7F\x07\b '	777\f7y7 	\x0777\x1B7 )%)3M\x07J\n7!77v7\n\n7\x1B77$M97>7Xy\xE4\x07\v\x07v\xD6\x07 \vv\v\b,\x07!\x07!7  7\b777\b&$\f7\fy\x967\n8	\n\x07B'77'3M\b7( 7\x077W#,\x077M\v\r\b7)y\b	$$\v \x8F 87=8 7v~$$+ 5$\b5\b$\bU$$F\b5$$>\f5\b$55\b5B5\b$+\b$55$!54\b5\b$\x07$\n\v\n\v\v\x80'`\xF2\0C!\x97!!!!!\f$=!\f5\b5$+$\b55,\b\b@\b$D\xF2\0\xF2\0 \n\n\n6\b\v\x07\n\f\x843/\n77\x80 7(\b\xD37\b\x94H\b\b7M\xE37,7\v	v7`\b\b\b7l78;\x807B''((7\x80\xC8!4!\xF2\x077\xF2 @7\x90\n7\xE27\x07 vwv\x07\v\x07$\b\xB67\ft	v$$w#v)\b\x077	v7	\n78&y\xB6\x077\v777M\f\r7\fv#`) \x07\n\b\xF2\xF2\0\f\xF2\0\xA1'^'7$v	\f\n!\f\b 7v\r7\x9B$7 :7777\v\b77\b77i	77\f777\x077	\b-h6;H7\v7 7\x807D v\xF2\xB0y$\xEA($7'		\x07v3M\v\x0777v\nF\x877\x07\r\xF2\xFB777787\x07\b\b7v7#78)7wy\v7w\x077\v7,v3\x97 M#w7\xF2\xF1\n75@78d!-7L7\xF2\x807\xF2c7\b\x94\x927P 7\xF2 x\xF2\xDE\xF2\07\xD6\xBA777\xF2\0\xF2\b7]7\x807\f70@z\xF2\x807_7777\xB2 7@\x807\x83%%!7By\f7\x80\b\b7\xC2\n\n	\n\b&7$8\vM-	\f9\b&\b\f\x07\x857	v\x957	7y\f3\x96-\x073\n77	\x070	7&! @ \xF2`77\r'7H777\x077\r:\x94@\x807\f7\xF2\xF0\0 7$\v77\b&\x84\n7\xF2\xA0\n7\b\b\\7\xF2\x93\x07\x99\x99\r7(\bV7(\xF2\0\v	7v7\n3\f\b\r\n\b\bz\xC957\x077\n7v\v\v\v\b7	M\xB67\n7\xF2\xF0\0\x80i!!!!!\f!\x07 70		\n47\x80777\x85\x07\b\x07\x07\x07\x07F77\b3\f7F787777\"7\x9877%7\n7\xDC7\v\vV+V\f\v\v\vy\xE0M\xA8 \v5A\x07$>5$\b$KB\n$$+$5$55+)>5>!>5W$5I\xF2\0\xF2\0W\b?K##T$#$#+W4@$= &$KZA	KVVZ\xA8VQ\b!\x1B\vYc\x07\v6=b\xF2\0)\xA0\b$$Z)$E $4B!5QQ5\vAA!\nKIIII5$MMIF\bW45WW5)\b$W\x07$0!4>,$5Q\b$$$D!!\x9E!\xF2!f!\b;\r!>\x82!\b;\xA0!\b; !\b;d!`!\b;!\b;!\b;(!\b;X!\b;\b!\b;\b!\b;X!$5)0H54 5W: +8++W+450$+\x1B\x07$5845\x07 W#ZZ8$55$*!85)!85:Y\b\b\b\n*$c))O)+!!5!$\xB35!)W4]`\v\x80$E5!$5FE$\xAB5,$5$5'K!45$45+;565F5\xF2'$#KG;05 $++54!\n\b5!$\f!!h+0@$$4F+\b'!W$5$!5IW0!5'W)5$$\b#5!5F5;5(5!\fII$	55\b'x$\b5$I4W);\b\b$  +5#! 4 55$LF$;$5!++5K$!$5W5!)P$$+$5$\f\b0$5$4$W! F U$$+5+8`!5!@5$'$$P$5!H$AFWW$$WWH)5'5F	%W+85\v5K&55$&\b5&'\r#)$&\n4?5555+5K$KK$HIH)FB4 !	$'$CC\b55\f5$$\b+$.''P''B4!8)84$5#5U5$c$I)\n\rF($:?#8@\b$\bB^ H^H^)447+5$5+	>#5##+$5\bKY$++\xA2\b+5+$Z$$\b$$h)\b\x07!$8!+$#+55$5$5$$$B$+:7$(5$+\xA8$\xA8!$!+$#$($!$5+5#5$5!h$H$85$!+\b$5\b'85U#I\b5\xA9+\b$5#)5U!5+$$55+\x1B+$$!*!#$5F]$(K\b+E5$$4$4$K\n,$$+$W!#)\b#	\b#$+$#W$$#	\v\v+X$\v\f\b\n+8+# \b+\f\b+50\n$$\b$\f8$#$+5F #$5$ 5:4+I$$\v4I\bA!!$H@\b$\x1Bu)2+55+5#8\b+$+57!#$$\f4\b#v$$\xF2\0?#5!\b\b!>)WI>!)5C54)$5I)5W$\b\b!+Q5B$\xC9\x1B!454>I8$+8!P5!#\x1B5++\v++V\v\v\b?$?\b #5$?$$$\v\v$$5\v!2!#!F)h\b\b\x07$!4!!8$\b$B5\xE2\x07$\xE2OO$O!O$$55$8\b5\xF2\v!\xF2\xF4\0!$5\b$$8$5+WW$I5$5+\x07H:55$5:$::\n>I$$\b$++45$\v+F!W5+$$$+85! =(?$?;8+\xF2\07777	 \n!!!#!5!#5##U\f$ $K#5\xF2\05+\x07\bKK?KKT\b5$$$'$d\x07\n\x07\n4/\x075:)))\b$)\x07\xA8AG\x1B\b\b#\bE\b$($A\b\b\x1B#!+5$;c\xF2\0\xF2\0\xF2\0'\xC00 4 ) >\xA04\xF2\0;\v\x80\xF2\0O\xF2\xAA\xE6\x80\x80\xF2\0\xF2\0W\xF2\0\xF2\0`@   \xF2\0$5\x1B5$5	++5!5$\v4$$$PP)v!) $:>+$ $\x1B$\xF2  A\xC0\xF2\0A\xF2\0\xF2\0>74>, ) \x80\n\x1BG\xF2\xF4\0\x1B!\b54$\b\b5B$>IA5\b\b55$\b'+\b5\x1B5\b5$\bB55\b$$!\xF2\0'\x80\xAF@@W\xEC\xF2\xAC\xF2\xF2\xD17G7+W$#$5C+KW$$+X'F )$5$8$U$+$845$$!!$+#!!888+!+#$!5W#$!$58$+$!4$+$5+$5'5$$'\x1B#5FI$5K5!'$*$$W$W$5$$+$5BK\x1BK5P$$W;$$$5\x1BI$h$45+$W5$'+\x1B\v\x1BF+5$'8$'>$\x1B!$W'$F''5$W!$!5!+AI45>$'U5>5$7+;4$8585#$55$G!K$C+##55	$'\f5$+]8\f5\b$>\b$$\b\b$+$55$\b5\b$558!5$5$5$$5$5\x1B$U@545\b$$455V$:$\f5\f5$\b$\f5$\b$55\f$5\b!	\"4\">h45!5\v555	\n5$55A*h>\n\n\x1B55$>,8!$$5$#.!55!5K5.5V4$4\x86$$5\v8$!$ $	5W5,#5\f\b5\b\b\b\b,!>+h5FWI5$5)$>!W\b5\b'\b\b\b)'\b5\x1B5$$5k5'55$4$$5WH545>5#55A\v\b#\b4'$\b\b5$5\xA8+\v $55##$55$4$'A!5'+5\b\b!5$+;!5$5W45W)+K5>\\$\xF2\0\xF2\0`@ \x80@@@@@@@  @\x80 $\f\b( #\v7\b\n	\v 7\x07'\x07\x07\n+'A4 <`\x80h ,\f+\xF2\0  F 	\xA0  (    	$$O$$O$$O$$$$O\x07$O$O$O$OO\b$O\b$$O$O$$O$O$\bO\b$O\fOEO$\xF2\xF2\0 \x84\f@\b \x07\xF2\\)\xF2,\v\xF2jdK<-	%\n:'G\n5$\b- \xF2\0 W?WI W4$!!>$$55$85+!+\n#)')$5\b5$#$5>I\b+'!\f$55\xF2\0\xF2\0#\f\x07K\nK\v \"$4''\v'/$'K$''$+!\"''5W'''\b'$)$W'8$)$5!\f''++)55F+\b'K+'+$H$'+$+'5K$'\b''\b '$''\v''5'$'$+d'''''$'\xF2\0+,$#$A@$K+?5@ 4#4\b$4 \b\b  5\x07$5$5$I\x075$5$4$A$5$5$!\x07$5$5$H8\r/\x1B\b@!$54$+c\b5\b4!\b5)\b K5:(M $B$]\r$\b55\xF2\0\xF2\0\xF2\0\xF2\0\xF2\xA0_\x07$$$\v$\bM\b'5	\b$\b#$\f$!$\v#$5$!$+\b5\bG\x07G6A\b74'!4$('7$\f!7'\x07\x1BZB#$=##5#G\b+5$$r8$\x1B	)$#8PA\f!D8 $0 7##7$\n<!5!5+W$$$\v$$$$\v\x1B\b4\xF2\0\xF2\0',$\v&,$55F,$$+#8Y`$+5\n45$\f\b$$+7>)+$$`4\b$$W#$$85'58$'$$$$5$h55++5+,$!>\x1B$:$5F$4$$I$5$$$#58$#\xF2\0\xF2\0\xF2\0 5\v5		\b\b$+$$B$5$8c$7\vC5$]Kfg5\x7F'\b)$ 5!5\v!0$)$!$'$+5>4$5+4)$$$\b>5W5>K$,45>55w\x88\xAE!P!)!!\xF2a!8!\xF21!&!\xF2\0'85+G5+$4xG\x1B*\x1B#GG$2P\bA\b$5$!D$\b\v\b##$+\v$\b$$;$(\x8AL\bHh * LPP))\fh! h)!$!!$5@u$+I5+!$K5W$#I$*\n W\f \xF2\0$\b G$5\x1B+7+47!4  # $        5A4\x074\x1B$ 5 B+\x8A\n+\n \x8A \xC9$$\n5WF5\"=4=4$4) \"@!\xF2\0\xF2\0\xF2\0;\xF2\0'A$!4$+$548!5$5h'$'+5$55!$$+I+$>)+AK55+$#555#5#$5$+>!;5W!$55>4$+F5$+57\b!+\x1B$I+W5>55$!55W5W$!5$$G5'!GG58!G++W\x1B45\b\bK5UW55$+4'\x07\x07\b#5+\x07\b?\n	45# \n\b\b\n YUUU*U+$5$ $ *$+$: ?457+\v5+\b5\xF2\0j'\xAB'\x07'!h''!\xF2\xF9\0'\xF2l'\xF2\0@I\b!;0!;I(;I!I!I!I!I!@;@I4;I\b!4\x1Bv\\\x1B\v#\x1B#\x1B\b\x1B5\n\x1BW\x1B)#\x07\x1B#g5#\x1B\b$\b$5\x1B$$\bG!8!\x1BI\x07I\f@IW$W=+5$$@I\b,,\b,,,,\b\b\xD7\xC4\v\b\f &!!!!\n!!!!+	!WW!!  U$?$\xB3! 0$K$+$$+ $@Y8'5![($;$?$#5(+$#$\x88\xF2\0)@+\b:+:p+@)@6 5$I+55!F6$\b P)5\b+5$ $5$5 $5(\v\v\nK	$\v5!W4+!\n$44\x07$$\xF2\0'\xF2\xF8\0+:\xF2\x07+\\$c\xF2\xA3$0!\xEC!'!U!*!Y!!S!3;!0!\xF2\0 \xF2\0'\b5#u\b5$$+555\x1B$\b$5$8(8\f>5+5\b+\b5+\v\b85+$++5)\v	5\v+57\v5:\v+K+\x1B5+5+!$5K5$75+5rL(\"\xF2\0!O+$!+$$5+!$ '$$;:$$$W\b55$$$$!!$$K+\b$KG58\x1B\x80!:$W!\f55$$5U$$!\b # \xF2 \b\xD8-$.Y$5$$$K$K$K\bK$&$MU$$$\v\b\n$$$P \xAB\xF2!\xCB\xC4\xC7%ff\xC90\xC7\xC70\xF2Ndd `$D$!'4\x80!5\x1B8$55\x1B$#+5+$B#S#)\xAC#I\x1B>FI,\xA14\x9B,A7>?5B!$';5\b?B$$B+#5!5#$G555I$)+W+\x1B5B+W#5#I+5#$!5$##;!!!45>B!+\x90A8D/!$A5$+$+$A+#A!A#55!$$?!$A#5\nA\f$#!$;\xF2\b!!$B5$$Pt$\x07\nK\f$;$\n;)45,)	IOK?KK	K+\v#D#+D\x80  $++\b$E +5D!WW!D9,,~,\x07,2>4\x07>\f>! !\r>$54$545$8++$8W $$5$5 $ $'\b$5$5$4\xA55G+5WB5$5K+\x86$5!K\x86+!++>$>5#>$5555555555555555555555555555555)5\n55\x07555555\b 5$5(5$\x07$@5@  4<\b\x1B\fZa!Q!!!!+&! 5$$K#\b5\n$5\b!5!U\b?\xF2\0!\x80`\n>!>\xF2\0!!	!\xF2\xD0!\x80 #\x1B$+5#45 #\x1B;(75$5U^\xA0KP\bK\x1B$$$&\v##\b#5+0\xF2\0#'55$$$+5$\f5$:\b5$5W!U5\b5$#$\f5$$$5$$I\b$\b 8\x1B5###W\r\v!\x078)!'!'!'5\b#\b \x80 G5+!55/\x1BA$@\x1B/$\x07:5I\nI?h8#V#$5O#5#=3Y$!*5$5$#\b==5=$555$H\n\v#$+@5$B5?!\vU!$FFF\x1BF\r$?$\x07$5\b$\b+7W+5$$:+$\vF)F$!$$$I$+K5$$K55!+L4+'!\n$ '!\nK5$$$$\v\b$:5	+!!W!!\f$4! \bD\b$\b;\n5#85 +)	+$\b#$?F!K$5$)$$'	,\b$N`)#5\x905!$$$$5$4  )  `K)B/ W\r$$/\n \r\n))5=#\x07\x07V++W!4\n!4\v[)K$\v M\x8B\x80(G +\x1BG\b'\v!!\x07,+55 G\r5, \xF2\0\xF2\05\x07\x07\r\n\v\v\x07\b	\xA0@\xF2\0!!X$ $\b)),!455!$',444$4\x1B\b\v\v$#$\x80(($5$+$$F\x1B++5+8$455#5$5)$>!G$5$45+$W$!$5$$5W5'5$+8#$!(::$o:K:KKK\b\b( 5(5$\xF2\0\xAC!S!('\n'=8KKU\bc:[\f\b5\n(\b$\f! #$\b55 +$h4$\f5!8^$U5@h? \b@c:$$+$$$	\"\b$$!H;W*\v50Y:\v:8\v8$$$$\xF2\0O$\f$\bO\b$$$E$$+$OE$O $!\bOE$OE$E$E\bO\v)4\b!P\nIKW$W$C\x07K5+!@5+#5!+,$AK\bKB$$$C5$$V:45X$$?Q$+/,#5>OX##	+@#$\x07	$+	+5\b\b#c5\b$\b'++$5\bF!\b\n\x1B 5u\n\b4$$X\x1B\bZa\x98\xF2\0 \xF2\0\xF2\0$!!\n!+\xA7!\f!4!(\n! Z\x07Z\b\b4$\xEA	!a!!U!)\r!\xECR!!$1N\b\bP&c*o\b\v\xF2\x91\b$$\x07$$$,!!B$\f\n 5 !$!?\b$+'iZ0'e\xF2\0$54'5$,U$5   6@ $\x1B\xF2\0$B:$cF$c\xF2f$$\xF2\0'$$KI$$$M$M$$?\x07#$$$\b$$M$$$	$\x07$$$\x07$\x07	\b$$\b$\f$I$I8$$$$$$$$$\v$\r$<$$$5$\v )\b87777)78$(+5 A$+$5$54!++4!'!	'!'!0'!\b''!''!&'!'!'!'!'!\x07'!('!	'!'\xF2\08\xF2\0\xF2\0$\b$$4?'!\f!$+	\v  A-\xF2\0\xF2\0\xF2\0\xEB\b[M$'\\????I\b$&`\xF2\0'\xF2 x+:U++d!\x9B!+#,5=7\n ++\n+\bHH\b>\v5\v \b\bB\b\n$5+5$$  $ V   H ?  U$GY5750$	$#$Y$\v5+5$5!+$ \n5C#5\xF2\0\xF2\0!#55#$$#''$B'$+!\x1B 5$'!55&##)')$(\b#\xEC8\x1BW$)4+#U\x1B5IW$\f'F58$5$5\xAF'$'$'!''\xEC'!\x07	\x80544+\n5'##D#D\b$#$$\x07$@$\v+\v	=	$$$\x86$5!:8h!~\x81\x80+$!$\x1B$5$?$5+W!$8#5#55+2 (G\b= $\x07\n  !\"+++$5\xF2\0\x07\vk@  $\v$\x07\n\v\r\v\v\b \v!\b 0\x1B2M\x8C\b\xA8[ \n>$\vB\rY77\xE05#$>5\x1B$ P h  ?C,\bP+$$5+7W>\v$5+';	+5#F+I\x1Ba	A	A=$#	A!A=\f!??\f\f\f\bA\fA!!\f\n\xCA\xF26;!!,!!\x07!\xECn!\x1B $`@\xF2\0$$$$\f$$$I$$O\b$OC$$(Q$\b($\bO\xF2\0'!'!'\n'!'!'!'!'!\b'!\x07'!'!'!'!'!''!'!'!'!\r'!!'\f\x07P!.)\x07%\xE1` @)\bi#5 7 5!!+)\xF2\04\xB9'!F'\x80:5$K5$>\"  )\xF2\0V !!	!4 5+ \b#\v!U)$+4!$!\v55A555+!\b\x07#P#B##U?\n?\v!;5'5$$!$+\b5KP#!555$54(K$\b\b$$Y$$'\b$,$$$PEK\fY\x07!$$!Y*\xC5@)\b$\b$5$  X  $$\x1B'$\v	!4H?K(5+$\b5\b4+ $$\x1B5$+5$AA$+85$5$$\xF2\xFE\0 W>$]+?$   ) @; (!=>\x1B!!8=$4\b5 C	45(G\b>\b +@ $ GG  , A\xF2\0$\f$ :A)$$$\v\b$\b$$\vKW\v!#$+$$$A#\b5D\xF2\0'! H \xA4    c A\xB6\xF2\0A$\b\b\b)!8!\x07\x07\b \xF2\0T\xF2\xF0\0\xA2(\\$5\b$+$!:$5$$!$5  W *   !\xF2\0\xF2\0\x88\xA8;;?$$5B4# ;$U;E+$5+5+ 4!4\x1B++454!$$$\xF2\0(\xF2\0\xF2\xA9\v\xF2'\v\xF29 I $5E$'h]W\x1B$+$)  +  )5$8$5 @   \x1B \xA6\xF2\0\x80\x80)))=(\n\v\n+:\n:,$:!$:\f:\xF2\0@ \b \b4 \b   \xA1$44  5 ,\xF2\0\xF2\0$+5#5!>E8$\b5$54B\b5\b$$5'55'B\xF2\0'\xF2\0\xF2\0$\xF2\0\xF2\0@@` 5\v\b85\n\b55555U5555&'588p\b\x07\bP\b5$5)5\x1BA55555555\x1B!W5W555W$5555 5A5)+555555555&55G555A55555\x0755!5'!N''!_''%'\xF2\0!\xF2\0\xF2\xFD\x86\xF2@?  H@@\x8A\x1B\b2.5\xF2\0\xF2\06\xB8\xF2\0\xF2\0 \xF2\0'\xF2\08+:>:$!!!!$5$  !$>$585$!5$@@\x9D_\xD3.'!\x94'!'!-'$\f'\xF2\0\xF2\0!\xF2\0\x1B\xF2\0\v\v\b\x07\x07\xF2\x80\r\n\n @\xF2\0\xF2\0K\xF2\0$\xF2\0\xBF@\xF2\0Q\xAE\xF2\0\xF2\0@ \n@ @@@ ' @  \b,\f \b\b\v, \b\xF2\0!\xF2\0\xF2\xFD\0\xF2\0'$:8:$#W+,$5555555\b5!5\b$ 8\xF2@\xF2\0!\b!+55$+P55+)54$55\x80!5$5$555U$5/$:$#5   $W:8$\b5$$ U \xF2\0\xF2\0W\xF2\0P'!\xF2\xAF'&!!\b!8\x07&&+ \xD3\xF2\xFF\0\xAFZFZ	\x80\xF2\x80 $$$>$>  $$5$$$B$\x1B5$+8+@@\b5#$>55A$E55$5F$5$\xF2\0@5 +>Y5A!!5 $+$W++P+)$C5!!\xF2@=5\xA8\f !!!!!!\f   $	\v\b \xE3	 \xE3\v \xE3$5$;/'$ ''!!K+#KKK>+ \"5?+I4 \xF2\0$Z  , ^@'H48F$>$5!$>H58\xF2C\b+5 $ B A I !!I4! $7$$@\x80>(+\x1B$+'5F!5! $ $$$h$$5 G I\"!!\b\xE6  $755$!$ \x07F\n ' \xF2\xFF\0!8\b5$5 $@\x80\xF2\0$5'45  5=$+'$5>$5$K$$W+5'?);5+ A\xA5$+! ''\v)	\v!	#D@@    !$\b5$554$$\x1B I\x1B-3 :\xF2\0   4\b$\b,\b\xC9\b4  5 ! %!$5+55$\xF2\0,Q!5>!$ 5\b\b55  X $ \"\b(\vT	0\x07\b\f\n+QK$++!5 $`A,+8K+85++  \xF2\0;\xF2\0\xF2\x80\x80\b	 @@#@$F[5+!,5 4  $55? $\r5 $\b,!48\x1B!\x1B>$[W\x1B\x80@ \b\x07\b\b\x80\xF2\055B$H $  )  ]@\x80@h54$+54\xC9#$5\x1B55\xF2\0\xF2\0@\"$!!+$$5+55+$$ $ !# 6$!5\b$5/>?$ ,W\x1BW$IF$55! ,!I!,\xB7\xF2\0 \x1B5U5 A $ # $  ,\x80@$4G$W 5$!\x1BWW+5BWWW\x1BF!W5$8!B\xF2\x8055\b!5$!$A\b$\b5\bB\b#\b#\b!\b+ c ;@@?(+\b&\b&\b\b!!&\x1B\xF2\0\xF2\0 $$545+ @!$5$ $$C]!; $ \xF2\0\xF2\0)\xF2\0 $$$$  !    5\x82\xE7\xE7M  5!5\b+GG'!GG  55+!55'$\b58$>'        ,\b$5A858$#5$$$+$!$!$+$+  >   \xF2\0 @ +5$5!5+5$455+U\x1B+55 $ 5\xF2\0\b\b\b\b !>5$W$$5$$$!$F!5?W$5+$$8+4$ F!5$555\x1B \xA2 5 \xF2\0!\n\b	\f@$545E5455AA$$$@$5$5>W4!!45$C$4$55@\b5$$5'W=$\b5  )     $ \xF2\0 A \b\r4W\b $55   $\xF2\0 '!\b$Z!5+5$+$$4&$@1 \x1B\x07$$\x1B\x1B\x1BA\x1B5\v&&&&\r! 'W\x07}')\xF2\0 \xA5;!55A&5$+5'$hW\x1B+5555+5$+$ !  !F55\b$)\x1B\v\x07&)! 8)')}\b\r\v\xA9$  ?\b$!$5+$\f\rW4 A $Wh$54#A\x07\r\x07!!!!!\b B@	8\r8+$L$<+5$   \xF2\0\xF2\0!\n	V\v!G\n@W5##$#5+#$54#=5 =F$=$$$+#=5_#\xA8\b#\xF2\0#$BU5$$5+$5;5$$E/$545+W-!$+$:!5$X5$!$54:$5\x1B$+G$+$K$$B$F$@U$h$$5F$+)$/7\x1B	\x07	\bc\x1B\b)!+)$+@$@\x80A\x80$\xF2\0j$+57$$B5$$5$$$55$54:$84$$(! b\b\v$\f'@  $\x80G5!+5#5+5W5#W5+5W+#8!W5W5'5\x07$5\x1B+5 $+   $   $  4\x80\x1B@@ A@$  A $  @\xB0!\xC0! \xF2\0\xF2\0\xF2\0\xF2\0\xF2\0+54$K8!$$5$\f0\xC2\b  \x85)Az)@  $ #\x07	 P $\xF2\0$K5K)$Eh >\x075$F$$5$ 5  ]\xF2\0\xF2\0\f! 8&&!&\v!&&!;W&!!  '  \x1B\xF2\0\xF2\0 > FFFF \x07\x07  $\x075\b50 \bE5 \bE(5\b>\b\b4\n\b5\xF2\xF2\xF4m55\b#\b4$\b\b\b$W+F4$4$5W8+$$/857 45)!$55!	\v!  [@\x1B  VW!)>4$V$4$5 \xF2\0$\xF2\0\b$$$\x07$8$C\v$?\x07#\b	$$$$8 \n$\b8 <\b$$= $  @\x1B \b\b\b\bF\v\v \f#\b@@+5$$\f$5>\xF2\0\x80 c4+54$h$?c5$h$5$5!#5,555545    5 :444444444 5+5W5W$$'+5!+\bH\b$	\n\xF2\0\x80$5\xA25!$'#!$\b\b55\xBD\xF2\0h#3#\x074#\x07(#\r\n!\b\n\n#\b!\b\n	\x07\x07$!$!5\x1B)5W5$     @$\x8DUA\x1BAA K $  A @\xF2\0\xF2\0'@F54+'#5$FW5!$55$55#5!5:\b!!!\x07!!\n!!U$\b$\b\b\b\b4\xF2\0F$@\xB9$\xF2\0\xF2\0@\xC0#\xF2\0'\xF2\0 @ @H@!5\f$$Y$+ W$$\xF2\0\xA0+$>!A5\b5558$\xF2\0$5$B$B $5854>$55 @  \xB0!'@!\xF2\0!'!'!'!'!\b'! '!''!'!'!\b'!'!\x07'!'!'!\n'!'!\b'!\n'!'!'!'!\r'!'!'!'!'!\x07'!'!'!\\\\\\\\\\\\\\\\\\\\\\\\\\\b\\\\\\\\\\!\\! $ ` \xB3\x80\x1B7\v\v\n\v\xF2\0A\xF2\0 \x1B $   '+K4 )+$GW45FIU)!!@$$\xF2\xD8\xF2r#+\x8D#PY\xAA@\b55$5$5@$$#545+$#54$45$$5$5 U >4+#:+$4W\b55 ! $ !\xF2-Z\xCB\x80K !',\bIA5$5$5#$F$84#4;>$W5 I  $ 55++U+ \x07\x07\x07&&	\n&&&!\b\x07!&&&555 ) !5$5  ) 5 \xF2\0\xF2\0\xF2\0\xF2\055!B5B\x1B5B44\b$5$!$$+8++,!+G!\x1B,$!!8+55XEF5$$455$5o5;$8#8 \x1B! $W$?;?!!5!!W+  \"$F$5$K5$4$5$K+$854$5K$5$$4W)\x1B/5#'+5$$5I!$4/$+$5$I5$/$55$!5$)G)\x9A$$$$\x848\b!\b\b\b8U'\xF2\0\xF2\0\xF2\0!\xF2\0'\xF2\0!\xF2\0)  5)'!B+5u   \x1B5W$\x1B8$$$!#$)D=$\x1B,5X$5  P\v\n   \x86!\v@@\xF2\0\xF2\0\xF2\0  $F&\n\b\b+$ @$W5#$5$+$!G$\xF2\0\xF2\0$)$+$$A$!B!!  @$@W$'\f$\b$K5$8\b$5$4\b$5$5\f$!5>55@\b5\b$\x1B$\b5\b$5\b$5$$555555'55555455\x07555\b55555555555)555$5555555'5555555\f5555\x1B5\xF2\0>\b #<#\b5\b\b55\b$5\b\b4%\xDA  !  $$$:$$5)5$++54Q!#I>]+$$5)8W\xF2\0 ,  ' \x80$\n!5\b9hK\b !F7 47 \b\b\xF2\0?!\x07?!\x07?!?!?!? [ cU+5@$@\xF2\0\"\xDD $+85W45$++$G4$+5\x075$5' !Y5$/\b4  @ _ 5#'$+B$:+5+$\x1B#$K h\xF2\0)4	)4)4)+[)\x1Bh)\x07(h(h\xE5(4\xA7'\b4  $5KI$$\x1BK)K$$55W+K54 5 \xC0\x80\b\xF2p\fY$5!;)+ \x1BH$+$!+\f5+4$45a$>5 'W4$'$>!5!8#6W$+5+WW+6+W$K'5$554\b6\xF2\0\xF2\0'  ?$!+4+5v$O\f58I$\b\b55 '$K$K$K $ !\xF2\0$\xF2\0 $ !U5$+54554!$!5+5\xA2G8 5AAAF!F5$5\b+Y\xE45!5I8$ # '  >  `cK$A5+TB5$W$5@ >A ,5$AW$$5WY+B#$A $!$$W+5; W 6 ,\xA8F$$$!$5 )\b5$> 4+$+$\xF2\0  >+$W$$++$'5$)   5\xE7+$5$$$\xF2\085)$55$+$W+4!5 / U  ? W \xF2\0\x1B@!@U\x97\x07\b\n&\xF2Y+75++h+$  \xF2\0'\xF2\0.\xAD\x07yF\x86$F\xAD\x07&\xB1\n&\xAD\xB2&\xAD\b&F\x07h&&	\xC8&\x07\xAD\xD6\xAD\x07\xAD\x07&\x86\"\xB3\b<&\x86u\x07\xADekey6&\x8B\x8E\x94\x8C\x8E\x8B\x94u@\xB4e\xAE\xADO\b1@&\x8A`& 6 \xAD\bey\"\xAD\xAD&\x86u\"\x07F(}\x92\r\xADs\xAD%K&\xB2e\b\xBDe&\xAD&\xAD&\x88&\xADe&\xB3\be \x94N&\xAD\xAD\r\xAD	&R\xAE&\x89\xF2\0&\xB3f&u&\xAD7&\b\xAD&6u\xAD0&\xAD\xB3&\x86u\x07&\x86u\xB3\x86&.0u\x86\xAD&6&\xB1\xF2\x99&k\x89/&\xBD\"&\"&\x86&\xB20\x89\xAEj&\xB1&k\xAD\xAE	&0\x07&\xB1\xF2\n&\xB32&\xAD&u\xAD$&6&\xAD&.6&\xB3\r&\xB3.\xAD&\xAD\xBDB&\"\b\xB7&.&u&\xB3\xAD;&R\xB2&\xC1\f&\xAD&\b\xB5\x86\"\f&\x8Au&j\n&\xBD&\xAD&\xAD\b&u&\xB1\x86&\"&u&\xB1&\xAD&0\ny\xB26S& \x07@\xD6\xBB&\xBB&\xBB&\xBB&\xBB y@\x8Ae&\xBD\xADuS0&\x8A\xB1ku\b&\x86.\"&\xAD\x07&0&\x86&u&j&\x86\"\n&0&\xB3\b\"&\xAD\x86\xAD\xB1&6\xC0<\x86\r&\xAD&u\xB16u&\"6&\x86\xF2	&\xAD&\x07 F(&\x80&0N7$ \x07\bA7$$\ft4\n!4\vA\b)7\b\f\x07\b	t	4tX t\v\x077\v\"T\n\v\f \f\x07N\\I\vtt\n \xB2 6@\xC9\x80\xAD\xF2&6u6\xB3\xAD &\xBDB&6\x86&&\xAD\xF2`&\x89<&j\xF2\xBC&\r777 \xAD R\x80u\x07&j&u\xAD$&y\x80&&&&&&&&&&\xBD\xC0 &\bR\xC9u\b0\b&@\xAD & \xB4\xB1\xB3\"\xF2&\be\b&P\xAD&\xB7 y \xB3\b\xB1\b\xAD\b\xB5\b\x8Au\x86\xB3\n&\b0\xF2\b\x07&\bJ\xAD\x07J\xADJ\xADJ\xADJ\xADJ\xADJ\xADJ\xADJ\xADJ\xADJ&\xBD\xB3\"u&@u & 0&\xADk\x86u&\xAD&6\xAD\xB30\xAD&\xADu&\xB16u&0\x86R\x86\xBF\x86\xADu\xAF\x80& \xC9@y@&\x80\xAD@& 0 R@.\x86\xAD\"&\xAD\xB1\xADR\xAD6\x86&\x86\"&\xB1\x86&\xB0u\xAD\xB3\x866\x86\xAD\xB1\xAD\".\xB3\x86\xC20&u\xB3\xBDu\x8A6u\x86\xBC\xBD\"&u\xB3\x86\xC0\x86\xAD&u\xAD&00&\xB3 &\"\"\b\" \xB20R0&\xBB\xB3&0u \xB3&\x07\xAD(\xAD 0\xB1\xAE&0\xB5,&\x86\xB3\xBD\x86\xB3u\xB16&\xB3&\xADu\xB2\xAD& \xAD\b&\b\xB1\"0\xAD\xB30S\b0\b&u<\xB8\xAD&6 S\b&\b\xBE\bu\b\xAD0&\xB2&\xB2&\xB2&%\xB2 u@\xB3@&\xF2\0'\xB3\xBE\xB21j0\xB1\xBB\xB8\xAD\xCC<0\xB0\".\xAC\xB6\xCB\xC00\xAD\x86\xAD\xAE\xADu\xADu\xADu\xADu\xAD\xBD\xADk\xAD%\xAD\xBF\xAD\xC8\xAD\xC5\xADR\xAD\xB7\xAD0\xAD0\xAD0\xAD\xBC\xAD\xC1\xAD\xBC\xADu\xAD\xBF\xAD\xB4\xADk\xAD\xB5\xAD\xC0\xADk\xB2\xAD&\xAD&u\b\xC8\xB7\xAD\x866\b\" \xB6@&@\xBD\xF2@&P\xADM\xADM\xAD\b\b\xAD\n\n\v7\r7\xAD\xAD\xAD\xAD\xAD\xAD\xAD\xAD\xA7\xAD\xAD\xAD\xAD7(\xAD\xAD\b\b\xAD\b@\xAD	\x07\xAD\xAD\xAD	\xAD\xAD\xAD\b\xAD\xAD\xADMJ7\xAD7\xAD\xAD\xAD3\r	\r\r\b\xAD\xAD\xAD\r\xAD\v\n\xAD%\xAD\xAD\xAD\xAD\xAD\bM\xAD\b\xAD\xAD7\xAD\xAD7\xAD\xAD\xAD\xAD\xAD\xAD\xAD\xAD7\xADv\xAD\xAD7\xAD\xADv\xADP\xAD\xAD\xAD7\x07\xAD\b\xAD\f\xAD\b\b\xAD\xAD\xAD\"\xAD \xAD\xAD\x07\xA7\xAD\n\xAD\xADM\xAD\xAD\f\xAD\xAD\xAD3v\xAD\b\xAD\xAD\b\xAD$\xAD\xAD\xAD\xF2\0'0\xAD\x86\xAD\xAE\xAD%\xAD&\x86\xAD\x86\xAD\xBF\xAD\xC8\xAD\xC5\xADR\xAD\xB7\xAD0\xAD0\xAD0\xAD\xC1\xAD\xBC\xADu\xAD\xBF\xADk\xAD\x86\xAD\x86\xAD&\xAD\x8A\xAD\xC0\xADk\xB9\xAD\b0&\"&\x86\n&&k\xB10&@<\v\v\b<\b\xAE\bu\b&\b\x8A&\x07\xAD}\r\xAD}$\xAD} \xAD}\xF2\xF6\0\xAD7,\xAD@\v3\xAD\v\xAD\xF2\0 \x8A\xF2\0\x86\xF2\0\x8A\xF2\0 6\xF2\0\b\xAD\xF2\0\xC5\xF2\0\"\xF2\0\xAF\xF2\0\xB3\xF2\0\xAF\xF2\0\xE4\xAD\xB8\xB0&\b\xAD\b0\xAD\f&\xAD\xC6\xB3\x86\xB3\xADu &\xF2\xAD}\xAD}\xAD}\xAD}\xAD}\xAD\x9D\n\xAD}0\xAD0}(\xAD@\x07!\xAD\"\n\xAD((\xAD\x9D\xAD\x9D\xAD>\n''''!''>\v'\n'\x07'!'!,''!'!\r''''\v'!'?'?'?'!!	'!'\xF2G'\nB'\n\xA4'?'\x97'&\x1B\x86.\x860\x86\xB7u\xB7\xE5u\"\nu\"@\x8Ak\xB30\x8A\xB3R\"6\"&\xC6\xB3\bR66 \" \xB3 &\xCCR.\xAE\xB2\x86&\xB2\x86\xADR.\xB2&\x86\xAD\xAE\xC4 \xB3\xCC\xC1\x86&\x86\b&\b6\b\xB3\x806\xB4\xB9\xB4@\x86\b&\b%\b\x89&\xB1\xF2\0\xAF\xF2\06\xF2\0\x8Au\x86&\xAD\x07\xAD\x07\b\xAD\x07\f\xAD\x07\xAD\x07\x07\xAD\x07\xAD\x07,\x860\x860@\xC8\xF2\0\b&\xAD\xAD&u\b\xB5\b&\b6\xB2\xB1\b\x86\v&\x86,&\x86\b&6\bu&\xAF\xC4\xB10\xAE\xB2&\xB3&.\"\xB3\"&.\xADu\xB3&6\xB2u%\xAD\xB3&k0\xC2\x86R\xB3\"&\x860&6\x86\xB3\x8660\xB1&u6u\xB3u\xF2\0\x8A\xF2\xF8\x006\b*\xF2\xF8\x006\b* u & u R u &u\xAD u\xF2\06\xF2\0u\xAD\xB1S1\xB306&\xC2\xB3\xBB\xB1&6\xB2\xB1\xB4\x86&\x89.\xB3\xB5kS&\xBC\xBD\xBE\xB21j\xCC\xB6\xB8\xB0\xB9<\xAC\xCB\xB3\xC0@&u&\b\xBE\b\xB4\x86\x8A&\xAD&\xAD&\xAD\xAD&\xAD&\xAD&\xAD&\xAD&&\xAD&\xAD&\xBBk&\xC8\x86\xAD\xF2\0\xAF'7&'>''\x07'\n'7'''\n'7''\n'\r'7''\n'\n\xF2'''7'\n\x07'''7'\n.'7'\n.'7\xF2M'\n\x82'\n'-''\x8C'AI'	'\x07+\x07'x\xAD}L\xAD}\xAD}\xAD}\b\xAD}\x07\xAD}\xAD'\n''	''7d''2'\b'\x07\f'\xF2@&@0@&@\xB1@&@\xB8 &\xAD\xAC\b&\xC8&\b\x86&\x86\n&&\xADC&\f\"	u\f&\f\x86&&&\x86\xAD\xB8\xB7@&\bu\b&\xC7&\x86&\xAD\xF2\0&\xF2\0 \xAF\xF2\0 6\xF2&&\b&&&&&&&I&\f&&\xF2&&&&&%&&&&-&&H&&&\v&\b(&&&\xB1&&&P&&\n&Y&'&&\v&.&&&\f&3&&&`&&\xA2&&\v&&&&Z&&1&&\x94&X&&&	&\xF2&\xCF&\xF2\x1B&:&&c&&&&0&&D&j&\x87&&&&\xA6&#&8&\x07&5&&\xF2&\xF2\0\b\xC9\xF2\0\b6\xF2\0\x8A\xF2\06\xF2\0\x86\xF2\0\xC9\xF2\0\x8A@\xB1\b&\b\xBE\bu\b\xB1 \xC5@\xB0 \xB3 \"@\xB0@u\xB9\xB3\xBC\xB3&\xB1\xB3\xAD&\xB3\xC7\xB30&ku@\xBF\xF2\06\xF2\00\xF2\0\x8A\xF2\0\xE4A&\x86&\x86&\x86&\n\x86&\x86 &@\xB7\x89\xB3R\b\xB3H&@\xE4@\x86@u@. & <@\xBB1\xB1\xADRk\xBBu&\xAD\x86\xC2\xB3&\xC1\xE4\xC1\xB3\xBC@\xBD@\xB0@\xAD@< % &u\b\xAD\b&\x86\xAD\"\xB0 \xE3@\xB3\xEA6?6?6?\xF2\x076\xF2\0\b&\xF2\0\b\x86\xF2\0&\xF2\00\xF2\0\xB2\x80k@\x89&#&\xF2\0\"\xF2\0\b6\xF2\0\b\xC9\xF2\0\xB4\xF2\0u \x86 u & \xB5@&@R\xF2\0S@\xC3\xC7\xE6u\b&\b\xB3\x80\xBC\x80\xC2 a&\xAD&\xB0\b&\xACk\xB30\v\xB1\xB8\xF2\xF4\xB1\xF2\0\xBD S \xB3 \xC1 \x86 \x89 \"@\xAD@& \" & . & 0 R\xF2\06\xF2\0\xAD\xF2\0&\xF2\0\x8A \xCB \x89@\xB6\b\xBE\b\xAD\b&\b\xAC&\b\x86\b\xAD\xAE&\xC1\xBE\xB3\xBD\xAC\xB3a&\xC6\xB3S1k\xF2\0\x86\xF2\0\xB2<& u\xB2\xADuk\xADk\xADF\xAD	\xB1\xB2\xB1P&\b\xAE\b\xB80\xB3&\x86&\xAD\b\xB3\xF2\0\xBD\xF2\0& \x860\x90\x860L\x86\xF2\0\xAF@.@\xC0@&@\xB3\xF2\0\xAF\x80\xCC\x80\xB1 \xB6\b&\x86&0&&&\b& u\xBE&\xBD\b\xC4\b\xAD\b0\b& \xB3u\x80\xBB\x80\xB2\xF2\0\xAF\xF2\0&\xF2\06\xF2\0\x8A\xF2\0\x86\xF2\0\xBD\xF2\00&\xB4\xC6Y\xB4\x80\"\xF2\0\xB4@u@\"\x80\x8A\x80\x86@\x89@\xB4@u@\"\xBA&u\xBC\xBEu\xCD&u\xADu\xF28\b7\x80@73 @7\xF2H\xF2~ \xD5777\xF2\xA0F\x7F\f\v\v\v\v\v\v\v` -\r8\xD2 @\x807\xF2\xF0\0 \xF2\0\v\x807#77\v\n7	7'-\x07\xF2\0\b\b7 7!\x95<\xCE7		7U777\v7\f3\x8C8\xF2{v70@7\xC5'7\xF2-7J\xF2\07*7\xF2\xF0\0{\fFFF7H\xC2\xCD 7@777\xF2Pb\xF26\f73c!M\\-v!,\xF2\nYB\xF2+88	8'8D7M\x82v|\x817v\b/7\nN\x0778J\n7G\b-H\xA07F:N7\n77\r7O77\x1B\bv\r77\xCA7@@70y7\b\xF2\07\n&/&&&&& 7&\xB2&\n&&&	&&	&7&&&&&\f\b&\ny7\xA47(\n\x8B\x94@\x80 7$7\xB0e77s\x807\xA2\v\xF2]\b\xF2\07>7	\x077-77\n7\xF2*\bNb\by\xF2\xE8\b77  7\x9F7777	77\n7\r7	717\v77777\b7777\n77\xF2D\xCA\xCA\xF2\xE87@\xF2mq\xF2$7p\x807\xF2\b\x077I\bB\\7*\b7D7\xF2 \x807\xF20\x93|\b\x93\xF2H777!77\b'7#7)777\n7\r\x9E77r777:\b7\\7\"H7\v,7\xA1\b7\b7|\x99\xF2\x8E7,77\xF2\07\xF275\vv!]\n\xF2\xE1\n\xF2F\xF2\xF27	7\n77#77	7X747\x8B7/7l7\"7\b78\n\r7\r7\r7\n777:7\x07\x07db7@\f7\f77\xF2\xF377\xF2I\xF2\0#8\v8\v\xF2<7\xF2R\n\x07\x8C\x07\x077\xF27\n	!7\x077\xF2\x94M\xF2\xC77Dr77<77Y\b7\xF2\xC867?O777,77Nz77	777\x077\v7;7\f7b777\b777\b\"777:777777&7\xF2\077`777 \x8C77\f727	7\r7A7?7757 777$777\f77\b7\xF27,\x07\x07'z\v \n\"\nA7\x90\v\xB0\vD7#7>\n,7\n7\xC877]\f\n4\xB4\b7G7j\x07t\xD6S7\xE17\xBFz7\xB97(\x07\xE8\xD6\xBF\xD6\xF2azy\xF2}\b7td\x1B\n+7 @797\xF2\xC87\xF2h7[y\xC3\xF2\x8F7%*77\b\xD68x7\xF2\xAC\n\x877\xF2+M\xF2@7x\b\x07\xF2w\f777\x8F37777\n77777\xAB\n\n\v\xF2\xAD7\xF277H77*7717\xF2\x81\v\n\n\v\n\v\x07\nM\f\xF2\xFA4y0\x8007\n7y7\vy\x947My7\f7\xAF\n\x94\xF2I7,,7\xF2\xF2\07777\n7!7\"\xF2\xA1\x807TMN\xDC\b\xDE\xF2@\by\xD0\b\xDE\xF27-7@7\x1Bn\xB3\n7\v\xB3\n\xF0\b\x947\f7\by$ysy7\f\b7\xF2$7\b\v7\xD2\n7#7u2\xF2.	7t\xD6\bH\x8B\x90\x99\x8D47\f777<7\xD6\xF2877@\b77$\f77\xF2c$27\f\x8C7 7$\xF2\076\n7\b7\f\b\vH\r7\fo\x07&\xD6\byL77\b7\xF2$\f(\bP\b7=7\xF2\v(N-777o7757\b7\b\x84\b7\xF2\n`7B7$\xF2 D7\xA776 \x90\x95\"7\b\xF2\0\xF2\0gJ\x077\b\v\b\n#7707\v7-7\x077\xF2C7\b7!7777\xF2\xF5\07r?	7\x94\b7<7\r(7,77 7?7#\x8D\b\b7T7*\n\xF2\xF0\n\vl	<\xF2\0\b@777 \x94\f\b777$\b7\b7\n\" 70\b7\v$\b7\xAD\v\f77\b77G77\f77l77\xF2K\xF2t\bV8\b77\x887^\x07\xA6\n@\b70\b7\b\xD67\xF2%\\7y\f7\"777777\xF2+7e\xF2\xAB\xF2:{\xF2\xA6{\xF2n\x8Bz\n\xF2\x9B7\f7\f7\b\x92\b7\x07\b7	_7 \x7F7777'7\f77\x077H77y\f7\x92777\xF217DC\b7\n\xD6D\b7\xD8\b\xB37\xF2}\x07*\ny\b7\b\b\b\b7(\xABgf\b7\bM\f7\b77\xF2\xB26@B#7 \xD6\b7d7\b7\xF2-\b\xF2\f\b7\b7$80\b7\xAB7\x88\b777\x95\by\b7 7\r\xEA77\n,73\xF2\x8E\n\xBA7\b77e\b\b7\b77\x860\by4S\b\b\b7\b77\xF2&'7<\b\vH7(7\fy7:\xB37\xF277l7\x96\xF2\xF3\07\xF2g7\\\xF2\07*7<77\x07	7\x99\xF2\0\"77\xF2\v7\xF2\x9A7,7>7\xD47*777\n\x07\xA97\b77\x0777777;\b77\b7\b7\b7bj)\b77\xF2\xC4$\xD6\x8F\xD6\x99h\xF2f\x077$7)777 77B7\xF2\x1B77(7D\b7\xA170\v37847(77\b7.\b7\b\xEA\x8B\b7	\b7	\v\xF2\xA0\n\vi\f7S77\n7\f7\x077\"7777/7\n3\xF2\x9D7 78\f777(787\f777 7707\b\b7\x8D\x90\x99777 7\b0\vu\x89\x8B\x8C8\xA77D7\b77\b\x8E\x90\b7@\b77\b7@y\b74\xD6\xF2l7 7\b\b7\n\n7\fe77+\xF2\xCC\xD2777\xF2X\xF2\n\x07\n\x8F!77_7!!7P7X7\b777\xF2\087(\f7\b\v757(77L\b7\b\x8B\xF2\x07\r7)7\v77\x0777]7\xF2 7l\b7\xF2\xF8^\xF2\xDA\xF2\f\v7y7\xF2\x837I\b7\f7\nv7\xF2#7\n7C7K7\v77\xF2-\xF2\07\xF2\xB8\xF2g:\b7\n\b7'7\xF20\xF2\07!7&\v7J7q\x07&[7C\x077C7\v7 7s7\b\b\b\b!'!77\by7*\x807\x90-?7\v~7\x9970@ E\xF2j7\xEE7l\b\x94(7R7$\b7TyY\b7\bN\b\xDF-\xAA-\x93\xEB\xDFwwx3w2w-3M2MM-M\\3M\\M3\\3	M\\x3\\M3\n\\3-\x97oJ\xA3-N\r-N2\b-\b -xw-\bx3 -(N\b\x88w-3-x3NN3\bx\xD5\x97s\xE0\xD6w\nxwN3N\b\\\bx\bN\b\x96\b\xE0\b -\b3\bx3 2\bN33\b- \xAA \xE0@3\nx-2R-\\\r-N\x97N\b-\b\x88\b-N\xD4-\bo\b3\b-\xD4\\-N\b\x96MN\x1BM-\bM-M  M \xAA@\\\x07y-y\xDFx\b\bxJ@-@x@-w\rw3\bwxw3w\b-\bo3\xD5\b\x933o 3J\b\b\xEF\bo N@\x973\x96-3 \xEBw2\b\x88N7\v-\xE0\b-z-@w\xF2\0x3\x96\bM J3\x07N3\x97-3\nNw333e\xD433\f33-3-Nz-Mw3-M\xD53-333-J-3\x88-3-3-3-3-3w3-\x973\x073o\f3N\b\f2 \\\"-\\N-\x96sMoJwe\xD4Nz3-sN\xD63\x97NJ-33-\\3-\xA73-M-M-o-\xD5-3wM3\x07M-\x073\x963M3N3M\x973MM\\3x3-\xD5\xA3\\N\\\bN\\(3\b\b-\b\x80x3 \x97AM33-3\x963-2	MJwN3\xA3N-x3w\b-\bo\b-\xA3\xD4\xA3\x97\xA3\xA3J\b\x88\bz\b3\bM\bM\x07-#M-,M\xD4\b\xD7\b\xDF\bz\xA3\xD4\x07\xA3\xD4\xA3\xD4\xA3\xD4\xA3@N\b3\bxMws-\bN\b\xDF\r3M-3s3w3N3-3o\bM3N3N3N\r3N3\xF2\xF0\0\b\\\b&- M-JNN\x07-N\b--s\x93wx-3-N\x88-\xF2\0\xF2\0N\xF2\03MM\rMsMMN\bM-MNMM3\x07MMM-MMMJ3-MM\nN30N  N w \\ w3-N3\bNM\bN\\\nN-@N`w N\x80- N\bx\bs\b\x96\b- \x93-N-\xF2`3 Nh3\bN\bw\b-\bx\\7yMx3\xD5y\x97jN3N\xD5yNx3@N\xD5\xD4\xD5\xA3\xD5\x97\xD4\xA3\r\x97\xA3\x97\xD4\x97\xA3\xD4\xD5\x97\xD4\xD5\xA3\x97\xD5\xD4\xA3\x97\xD5\x97\xD4\x97J\xD4@3-xww-\fN\bw 3 N \\ x \xA3 N`-xMw7xMNL- 3@\xA7M-M-M\xA3M-\rM-MJM	\vMMzMM\x07Mo\nM\bMM\x1BM-Mx.MMN\x8BM-M\x07MN+M-M  x NPxx23\x97\xD5\x97\xA3\x97\xA3\xD5@x\x80Mx\\- M3\f M\xF2\0\\\xF2 M\\s  M\b3\b\\\\`M\xF2\02wN-Nwx#-Nx3x-Nw\\ww3\\-wx\xF2(- 3@s\v-\x96\xF2\xF4\0-\xF2\0x\xF2\0-\xF2\0oP-M[-N(-N$-\xF2\0\\-\b3(`- \x970-\b\b y 3\x07\x94\x92\x94\x8C\v\x94\xEA\x94 3\b\b73 - \bJ\bw\xF2-MpM\xD4@MM  M`M  M\xF2\03\x80-@\xDF 3w\b-\bw\xF2\0M@ z - 2 z0N\bsM-\bJ\b\xD4\x98-\bx-3-$-\xF2\0\\-3\xC0-\x96\f-x\x93-3;N@\xD5\x80\\(-\bo\b-\b3 -\b3wT-@w\xF2pM\xF2\x80M@3@-@M\x80-=NN - w\xF2@- 2 No\b-\fMx\b@x 3-\bx\b\xEF\xF2`3\bz\b\xA33@-\bx\bw\b3\b\xA03 N 30x\bo\bJ 3@N@xz\b\b\xD4@o\xF2\xB0M\b3w\xF2\xF8M\b@MP-M \xB0-\b\bN0--M-M-\xEC-\x80x\xF2\03\xF2\0x \xA3 \x96x\r-x\bw(-\bz-\fz\x07-\\\xD5- 3 N\xF2\03\xF2\0z\xF2\0s \\03\b\xA3\bs N@-@N\x80xo\bz\bw\x803\b-\b3-\x80J@N\xF2\0M\x80x@N0w\b2\bw\xF2\xF0\0M\b\x97\xACM\f3$ M\xF2\0\b\xF2\03-+--+-\bJ\b-\bw\b-`z w\x80\\\b3MM\b-\bN-\b\xD4\xA3\xD4-z\xD4\xD5\b-@w3\xD4-J\xEF-\b\b\xD4@\\\bx\b-\b\xD4\b\b-\b\xD4\bz\bw \x88 o-\\\r-\\	-M-M-M\x96-Mx-@2\xF2\0x0\\z w\bMw-o-	-\bN-\b-\bw\v-J-\xF2\x803@-N\bw\xE03@\xAA@N3\b-\b3-\b\x97\x96-3-\x96Jo\\\b-w-\b\b2-\xD4	\n\x970o\xD4oN\x93N\xAA3-\xD4@-\xF2\0N\xF2\0-\xF2\x80N\x97J\x97\bJ z\xF2 3\xF2\0\\\x80-@J@N \\\xA2---o-\b\xA7\b-\\\b- o 3sM-\x96x-N-o \x93M\f\f- 2 w@2@-ww\b\x88\b\xD5\b\bx`w3w3\\3\\-@3\xF2\x80-\xF2\xEC-\xF2+	\v\b\x07\n\xF2\xA0M\x8C\x90N\x07\b\xF2i\\N~J\xF2@M\x80\v\x07\xF2b\x07\b\xF2\x9A\\\xF2\b--M-\xF2h\b\xF2P MD-\f-\xF2\x88JpJw\xD4-x<x -\xF2(-\\\xF2@M\xF2\x80@M\xF2?MM\xF2 N-\x07\xF2p3x\xC8M\xF22-\\M\bM\xF2\x90\xF2\"MN\\1Mx\f\xA5MM\fM\bMJ3Mz\xA3\x93Mz-Mos\x96\fMJx\xD5\\M\x97-M\xAAN-\bNMNM-wMsM\xA3MN\xD5M-M\\\xA3\fM\fo$NM\bM\\\b\bM\b\xF2X\x07M-\fLM\bM\bM\b\xF2\xF0\0M-\xF2`\x07M\b3 M\bM3JdM\x8CM3M\f\\M\xA3\bN\xAA\bM\bM z\xF2\0\x07M@\bM\bM\f\bM\b\xD4\\\b MoM\bM\b-\x88M\b-\bM\bM\b-\bM\bM\fM\x97\bM\b3M\fM-wM\b\xF2@M@\xF2\xB0\fM\xC0M\xF2-\f-M\xA3\x1BJJ-w\b-\f-w$-\"J\fwN\xF2\0w\xF2\0N\xF2\03@\xD4@N\x1B-oX-o\v-\xCAJ\xF2\xA8J\xF2\x8C\fJ\xF2\0x\xF2\0-\xF2\03@N@@\x97@-@\x96@w@2 N-3-\b3@w@o 3\fMxMx@o@w0-N 3 - N\b2\b3\bN2\n\xEB\xAB\xEB\x93\xEB	-\x96J3-JBN 3\xD40- \xDF 3@2\x88\x92\x88-x-3N3Nsw@N 3 ox-N-M-3\b\x96-\x97@z\xF2\x803\xF2\0o\xF2\0N\x80\xDE\x80s\xF2\0\\\xF2\0-\xF2\0N0-\\N\bw-\\0-N wx\bN\xF2\b-\xC03@N\xF2\0J@x@\x88@w\xF2@3\xF2\0\\\xF2\03\xF2\0x\xF2\0N\xF2\03\xF2\0\xA3\xF2\0x\xF2\0- v\n~vtt|\x07\x07\nt\x07}\x07\x07vv\n\v\x07\nv\x82\x9E\x82\x9E\v\b@\v\x07\n\v\bv ~2\v\b\x07 \n \x80\x9C\b\vt\n~\f~\fv\v\f\b\v \xD9\b\n\b\v\bh\v\nt\x07	 \x07\x07\x07\b\x9D\x07\nv\b\x07\v\n}\n\n \ft \xD3	v\x07\v \xD1  | t\v\x07}\x07t\x07|\x07t\x07\x07\ntt \v\x07\x81\f\b\f |t~\vt7}7} \x9F\f \f\vv\b\"\x07v\v	\x07\n\fvv\xDC$\n t\n\bvv\bv\rv  \vp\nv\f\bt\v\b\nv\x07\r\v\v\nt\v\x85\b\x07\x07  	  \b\n\v\b\x9F\x07\v\x07\nt\nt\x07p\vt\nv\n\x07\bvX\x07\v< t\x80\xF2\0vv\v\b\x07m!vt\f\x07v\n\x07\x07vvt\bv\xF2\0\v\b\n v\v}\x07\vv	tvvv	v\v\x07v\n\x07	v\b\x07\f\nvvvt\xF2\0\x07v vv~\x07vv	vv\v	\vvt\vqv\v	v\x88	\bv\x07 v \x9Fv\nvv\x07vvvv\n\x9C\nt\n\b\n\n\x07\v\nt\b\n\bv\bvt\v	@ \x9E\x07&$\nqq\f|\x9E\b\v\b\xF2\0	v\x07\n;vvvvvCvvv\xF2\0#		\f		C	\xF2				\b	 	\xF2!!!	!!!\f\r!!\x07!\f!!\v!!!	\xF2\bv\b\fvv\r\nv\fvvv$v@vEvvvv|\vv vt\fvv\rvvv#vv\v\b\v\n[\b\b\x07\v\x07H\xF2\0\f\x07\x07\v\v`\x07\x07\v\v\v\v\v\v\v\v| \v \n\b\x07\x07p\x07\x07\x07v\n\v	\f\x07\b \b\x07\x07\n\n\n\n\n\x07\n\b\n\b\n\n	\n\n\n\n\n\n\n\n\n\n\n\n\n\x07\n\n\n\n\n\n\n\b\b\x84	t\x07t\vtt\bt}\x07\vt\nt\b\f\b\b\n\b\vt\x07\v\n\b\bt\x07v}\b|\xCE\b\v\b(@\v\x07\v\x07\v@\v \v\v\f\b\x85\vt}\nP\vt\x07\x07\bt\b\x070t\bt\ftv \x07t\b }ttt}\b\x07\x07	q \rt\ft \xF2\0!vPv\x85v7vv\x85vv+vv\x07+v\nvvt&v\rv\x85\ft\bt \x85 t \v|0t\b\n\x07t\x85\x07\bt}\v|\v\x07t\nt\x07\x07t\b\x07@\n\x07\x07t~\x07\vt|tt\x07\b\x07v\x07vtv \v$\x85\f\x07 	\x07&\x07\v|\v\x07\v|\r\v\v\x91|v t\xF2\0\x07\v \v \nv}t\x9F  \f\x07|\b\vv\x07\b \x07 \nt\x9D@\x07 t`@\r\v\b\v\b\n\r\f\v t\b\r\x07\v|t\x07\x07~\x07\bt\b\n t\x07\x07tt\xDC|\x07\xD8\b}0 }|\b\b\vtt|\b	v\x07m\x07\v\x07\x07\v\f}t\b\xAD\b \b\b\x07v	\b\b\x07 \x07 \v~v\x07 }\vt\vt\x07\vt\x81\vtv\x07\x07t\b\v8@\b\x82t \r \x07p\x07\n\x82   \v\x07\x07v\x07 \v \n \x07 \n  }\n\b\x85\x07\x80\x83\v\v\v\v\v\v\f\v\v\v\v\v\n| \x83 t \x07\bv\b| \vt\b\n\x84\v \v\x07\b\x07\b\x07\v\v\n\v\f0\v\x07\btt@\xC0\vv	v  \x07\n\x7F\n\x7F\n\x7F\b\n\v\n 	\v\b} } \vt\v\b\n i\v \x9Ft \x85\xCAv\x07tt}\v0 \x070\b \x07F\v\v\b\b 	<	\x07@ t\x07\v\b|\b\x9F\x07\b\v|7\b\bt \n  t	\b vt\v\bv\v\nv\vtt|\x07\x07v\n\b\bt\v\x07\v\v\n\x07\v\f@vvt\b|\v\b\bt \b \vt@\b\x07\x07\b\x07\b\n\x87B\v&\v\v\v\n\f\v\v@ \b\x07\v	\b\n\v/\v\x81\b t\b\v\x07|\v\b\n\n@ v\x07t\b\b\x07\bv\x07\v\b|\b\r \x85@\n \n	\v	0\n\b\b\b\v\f\v\x81\x07 \b\b\ft\v\b\b\nt \b t \n \x07\x07\xF2 \v\f\v0\x07 \n\bt| }\b\b \v\b\v\n\v\b|\b|\b\r \xF2P\v\v\b\f\v\b	\b\bm\b \vv\b\b@\x87\b\b|\n\x07\v \x07\b\b \x9E t\xD1\b\bt\v\v\b\v\v\n\v\f\v\n\v\f\v\v|v r\x07\v\x07\r\v&\v@\x07\b\b\v0\x07\vv\b\v\n\bl v\x07\n\x07t\x07\x07\f	 v t\b\b\b	\v\b\x07m\x07\x07v\b\bv \xD3  \x07tt|\x07\b\v\b\v	\bt\b\bt\v| \x07\f\x07$\b}@  \vt\b\bv\x07\f\b	\b\r t  t\b\r\x07 \vmt\x85\x07\n\vtt|\v \n \x07|\b\x071\v\n\b\v\b\n @\n t ~\bv\x07\xF2d \v\x90\b\v\xF2\xF0\bt\b\x07\b\b\b \v\x07\b\btP \xAD\x07 \v\v\b\f q\v\bp\b \vt}\f\v\r  v  i\x07ttt\xDA\b\v	0|tv\v\x07tt\x07|v }\x07@\v \v\f\bv\b\x9F\b	\b|@\nv\v \bv\bt\v\v\n\vt8\b\v, q  q\n\v	\v\x07<\x07\v	\v@\n \v@`\b\b\bt|\b\x07\x07\x07t\x07t\x82i\r\x07\x85v \x07\bt\n\x80\v  \b\x9F\b\b\b	\v\v\b\r\b@\x07 q \x9F\xF2\0\f\bt\b\v	\x07\b\x07\b\x91|\b@ \n\f\v	\f\bt\b|\b\b\x84v\x07v\x07D\v@\x07 \n\v\n\n\b\b\nv\v\n\vv\r\v	\v\x07\nvv\f\f\f\v\v\v\x07\v\x07\x07\v\x07v\n\f	\x07\v\b\x07\v\v \n\x07\x07|0	 \n \bp t 0 p\b\x82\b\x07vt\x07t\b\x07\bv\x07P \x07@  t\xC0    \x07@\v\f\x07 \f  \v\xA0\x07  }\b\x07\b @\x070}  \x07\b \b\b \x07\b}@@\x80\x07 l\bp\v|v\f t\xE0\ft\n\b\b t \b  t\bt\x07\f\b\b\v t\v\v\n\n \x070 }t@t	\f\x07@ \n\x07\f(\b  t  t  \x07 \r\x07\r\v\n \b t v0t	\n$\bt\x82\b\f q  @\b6t\n	t m 0tt t\f\n\b\vt\x07\b\x9C(\v t\f\f`t@ v\x07t \f }\xA0t\n\x07\x07D\v\xF2\0\n@ \x07 0\nt\n\bt\n  \x90t	  \nt\x80t@@\x070mv \f\bv\n\n\x07t\x07v\v\x07/\n\x07\b\n\nt\n  \n@\x07\x85|\r|\x85\v|@ \bt\nv\f\v\r	\r\v\n0\bv\v\x07 t \x07\v\v \n@} 	 @\b\x07\vv \x07   \x07 =\b|\bt  \bt\b	\x07\b\b\x91\b\n\b\v \f~}}}}\xA0\n}\b\x9E\x07 \x85 \v\n\v\n\n\b\n\v\x07\n	\v	\f\v\n\n\f\n\v\n\x07\n\v\n\f\v	\n\v\n\n\v\n\v\n\v\n\f\v\n\x07	\v\b\v@\b\b\x07\n\x07\v \n\x07	\x07 \f\b\v\b |\v\b\b\b t   \f\b\b v t \v\x82\b \x9F v7\b\x07\b( t \b\x9E0 \b\b\v\b\bt\x07t\x07\b~	\x87\b\r\b \n @`\n\b\bt\x07 \f t|\x07P \x87\f\x07v\b\v\f\bv	\x07\bv\x07\v\x07\f\v|}\v\v|\v\b\v\x9D\vvv  \x80\x87v \x87@\x07\b\b0\x80 \n  \v\b\n\x07P@\x07\v\v\v\v\x07 \x07P\b \r\v\r\v\r\v\r\v\r\x80\f \x9F  \x07 \b\btv	\v\x07\b	\bt0 t\bt\b@v \v \b\b\x9F \v|\b|\v  \n\b\v\nw\v t\b  t  \v t7\n7\b7\n7\b7 \x80\xF2\0\b@ \v	\x07\n\b\vv\b\b  \x07\xF2\0\b\x07t\fv\b\x07\x91\b\b|\x80\x07\xF2\xF2\0\f\xF2\r\xF2\0\n\b\v\b\xF2\xC8	\n\xF2\xFD\0\b\x07\b\f	\n\x07!\xF2\f\x07\n\fm\r\xF2Y\x07\b\xF2\x89\n\x07\x07\xF2\b\b.\x1B\v\x07\nt%\f\x07\x8DA\b&\b\n\b	\b\f\v\nV\b	\b}\xF2\xF4\0\b\x07\r|	v$3\x07\xA7t0}\fv\n\x85\b\x07\b\vt77\x07\b\v&\v\x07\x07	&\n\x07\n\x07@\n1\b\v\b\b7(\b\b\n\b\b\n\xC3}\x07\b\x07\v\x07\x07\n$\n\n<t \x07\v\v\n\vv\b\v\x07\b\x07\x07\xEE\x07G\x07\x07\"\b\v1\x07\x072(v\x07)	+\v	tt\v\n\f	,\b\n\f4\n\b}\nE\x1B\x07(	\v\ft\x9F\x07\x07\b|\b\f$G	\f\n\x07	\xEE\x07\b\v\x07v\f\f\x07\b7\v7\b)\x07t\f\b\v\v	\n\b\b\x07\n\n\x07\b\v\b\vF\x07\x07t\r\x9F\v\xD1\xD2<I$\x07\f\x07\b\v\n	G)\x9F\x07\xA7GG\v	\x9F\f\n\b\nt\bt\x07\v\x8B\xDC\xD2\xDCG\xA7\v\n	\x1B\b\v\b\x07\n\v\b\x07v\x07\v\x07}\f\v\f\r\nv\x9F\f\x07t\n\x07\v\x07\n\x07J\x07\b\rG\x07\b	\b\x07\b\v\x07v\vt\n\x8BG\xA7\x07\b\b\x07:\v\r\b\n\b\v	\x07\v\xA7	tt\b\x07\v\r\x07\n$vt	\n	7\x07\x1B\x07\x8B\b\v\x07\v\b\x07#\n\v\r\n\v\x07\b	\x8B\x07\x9E\x9F\b	\x8B	\r\vi\x07t\b\x07\b\vv\v\xF2\b\x07$\f\x07\x8B\f\b\n\f\x07\n \x07\b\b\r\v\f\v\v	'\x07\x07\n\n\v\nt\n\v\b\n\x07\rv\v*\xF2\0\x80\v\n\v\n`\vt\x07\xC2fv\b\x80\x07\f\x07\v\n\n\f\xF2\b\xF2\0\f\f	\x07  |\x07|\n\x07\f|\b\v\n\x07p\x80\f \v	\x07\v\x070t\f\x07\v\b\n\v \vt\b\v|\n\xDB\x85\f\b\b\f\x07 \b\x07tt\v\xC8\v\x07\v@v\x80\f\v\bt\b\b\b\b\x9Ev@\v}}\v\b\r\f\r\f\v|H\v	 \n \x91i 	\x91\b\v\bt0}\x07t\v\x9C\x07\v\v} \b\v |\n|	\v\b	\x07\v\b\b~t\b\xCE\b@\v	 |v\fv\n\b\x07\n\x82D\v@\v\n\vv\bt\b\f\bt \v\v	%\v\nP\vJ\v8\v\x80@\vv\b\b\v\n\v\x80\x80 \x07 \v\v\n\x85\v|\v\b\v\v\n\v\x9D\v\x07\v \x07\v  \x07\n\vt  \x07|\b\b|\x07\x07t\n\x07 v@\x07\v\b\b\b 	@\x07`\v\v \f \b\b\n\v\b\x9F\b \v  \x07 }\b\bv \x07@\n \b \x07\f\nv\n\v\v \xF2  v@i@@\x07\b\bq0 \n`\v\r\f\v\x07| \xA0vi\v}\b| v|t\n\x91\b\xF2@v\v\x9F \x07A\v\x07\v	\r \xD0\b\b\v\bv\b\x07}\bv\b tvtv\b\v\b\xD1 }\x07\x07\b\b\b\f\xD1 \b\v\x070\b\n\v\n 	v \x80\x07m }\n\n3\f\v	\xC2\v\xC2\xD5\n\n\x07\xF2\xFD\0\b\x07\b\x9C\x9E @\v\n\v\n@@\v@ \x07  \f\xF2\0\b\x80\x80\xF2\0 	\x07\x91}\x07\x91\x07\vD\x07\xC0vp\x07   \b\v\n\n\x07\xC8\f\b\x07H\b|\v  \x07 \n |\bm\x1B\b\x80@@@t\n @v t\x07\x07\v@i@\x07@@\b\xF2@\n@@v \f\n\r\v\ftt\x07|\ftt\x07\x82t\b\n\v\x85!\f\ft\x07\b\vA8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\v\n\n\n\n\n\n\n\x07\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\b\n\x80\b\b  \f@\x07\xC0 \n\x07\b\ntt@\b\x07\v\b\x07t\n\x07t\x07\v 	 t\n\b\v\bv(}  \n0\x07@\x07\xF2F\n\xF2\x99\n\n }  t  @	\b\v	\bt\b}	\b\v0 \v   @\x07 } @	 	@t@\x80 \v7\n77\n7    \x07 	\v\x07 \x80\f  	8}\xC0(\x07\bt\b\x07D} \f  \v\bt\x07\n\b\xF2\xC0\x07\x07\xF2@\b\n\b\n \bt(\v  		}\x07\xEE @i   \n\x07`v \r \x80   \v\b\b@\x07 \f \xF2@\x9E\x07\f\v\x80Tt|\f \xC0	\x80\n\xF2\n  v  	  \v\x977\ft\x07t\x07|\b t	 \x07\bti\xC2\b\xF2\xC0@\xF2\b\b\b\b\b  \x07\xF2\xF0\0\n\n\n\xA4\b\vt\v\bt \v\b\b\vvt\x07\x07	\f   \f\v\bt\n\x07\v\np}\ntv\x07t  \v\xF2\0@v\f\x07\n\n\n\n@ \f \x07\xF2\0\xF2\04H \n t\b	t\v \b\x07\f\r\v @\x80v  @\x80\v	\n\b\b\b|\v\x9F\n@\n\x80\v\x07\v\x07\v\x07}\v\x80 	\x80v\b v   \x9D  	\x07tt\x07v\b\x07\b \xE0@\bt 	\x80vt\bt\b\x9F\x9D\nv \v\b\n\b @@\x07t\v 	}\bv \n\x07\x07	\xA0\x07\vv\v\r\b\b\x07v\x07\b\b\btv}@\v\xF2\0\xF2\x92\xF2n		 	\b\b\b\v@v \xC0\v`\xD3\v\b\x07@\xF2\0\v\x80\f\r @\x07@@\v  |\f\b\b\b\x07\b\b|\x07\b\b\bv\v i\bt\x07t \r\v\b\x07\bi \b|\v\n\f\x07|	\b|\b\f	|t\vt\b \bt\b\v \x07\b\n\bt\bv\xD0v\b\bt\x07|\v\b\v\v|\x07\bt\b\b\x07@\x81\b00   &\v\v\n\b	\f\v\f\n\v\n\n\f\n\v\f@\x07\va\v\xCA	\v@\x07  @\b\v\n\b\x07t|\x88\v@ \v\v\nv\n\x88\b\v\b tv\v\n\v\n\v\v\xF2\x80\x07\xF2\0\v\xF2\0\x07 \f|t\x07`t\n\b@\x07\xC0 \n\v\n\x07\n\x82|\xF2\0\f@  \v\v7\x07\x07\v7\b\v\xF2\0\f	\f\btv\x07\xD4\vv\n\b @\r\n\vr\n\x80\vt  \v0	\x07t \x80 \f\n\"v\fvv \n`\b\x07} \x07 	  	@\x07\xA0  \xD0\bn\x9Dt\x07t\x07q\x91@\bvv\v\n } 	\b\v\v\x80\x07\b 	@` \f\bt\x07\x9Ftv\x07\n\rt\v\b\nt\f4	\xF2\0\v\xF2\0 \fz\v\v\v\v\v0\v\v\b\r(t| 	 \b}\x07	\v\x07@\v\xF2\x81			\b	0	\xF2\0	@\"	 	\xE7	\b	(	\x94	\b\xC8	@\xF2\x98\b	\xF2		\b0	i							\x07	'\xF2	b	\v		\xF2\v	F\n\xF2i7<{7\x80\xB1&u\b\b	77\b7@7L\b7\xCC7\rA\b7 7,\b7\x8B>7{{:7\xA5&7(7O\b\xD67\b(\xEA(X\x8E\b77\f&7\xA8\b\xE9\b\b7H\by7\b7@\x8C#7\b7*7\b\x8D\b70\b7\xCA7e\xF2\0K7g7	7 7%7\x8C77777\n7\xF25\x07\xAB{y\x827\xF2=737\xF2*\n\xF2\07\xF2\x8C71\b77mM\xF2\xC2\b7 7\x07\xF2\x88A7M\xBE7\xF2\xD08\xF2\xAF-\x07\f\xF2^7.7HM,7G@\n\b\vT\x07\v/7\xF2\nvl\xF2\r778\b7\xF2\xE77\xAE7'7\v7\xF2\xB0\xF2<>yB71J7\xF217	\v7!\f'7\x1B77!\x077\v!,7\n\v\b7S\x073M'i\xF2\07\xF2\x817'3	&\\%7\v7\xF297\x8A7	M\xF217777777777\f\b777\v7	777777777777\v7\x077777777\n7777767\x83>\xF2\xC2N\xF2\0\xF2(\xA17^7\xF27\xF2\xD0\b7\xF2\xFE\07\f7f7727\xF2k\b\xEA\xF2\xC0\xF2\07\xF2\x8A\x95\xF2\xD7yM?7\xF2`Mrs\nM7^\xF2\xC6\xF2)\xA07\xF2\xB8!\xF2\xAA7\xF2\xFC\0q@} \x8C!7\f7777777\x07767\v7\b717\n7\xF2G,\n7\xB6\n{\x07\xF2a7y\xB1Y1\x905M\x1B7O\xF27\xED\xE07|\xF2N\xB2@\x90*R\b\v0MQ\x1B7F7\x077Z\bf7\b7y\x85\n,o4G44\xDE7\xC0E\b}\b\b\bx\x80$\xF2K\n7\xF2\xB5777787\bp7\x0777\xF2!\xF2\xD4\xF2\xE8G\bN\xF2i\n7R7+7t7\xF2\xF2\07\xF2\xD57\xF2\xB37\xF2@ - @N3w\\xM\bJ\bo \\\xF2	\f7\n77	7\n'77777_7\xF2y\b\xDEp\b\x94\xF2\xDEx\xF2*	777\b7\n7\v7\b\f77777777777\v77\b7\n77\xF27\xF2\v7\v\v\v\x07'	\f\n\b\x9F\n\v\n@7\xF2\xD0\f&=7f7@@\x95\x80\x807O7\b\xF2%7\x077777c777#7%77\xF2\xF2\07\r)\xF2\x96\n\v\v\v\xF2\xA1\xD4\xF2\xA9M\xF2E3\xF2\xDA\x85\b\xF2\xF8s\xB977\x8D\x07\n\n\n\n\xD3\n\n\n!\xAE\n\xB4\n\xF2\xD8\xF2\xDC\b\x07\v\x07\xF2\xA0\v\v\n\xE07	7777777777777777777\n7777\n77\f7777\n7777777	7p7I77+7\xF2\x855\xF2\x9A,&\xD0N,by\x8D\xF2\xF6 # \b\b}\bQ\b }|\xF2k\x90p$7 M\n.7\xB67\xF2\x9A\xF2\x9F7L\b7\xC7757~7\xA07\xF2$7\xF2D[\x99\f\v;\v\xB377\r7\xF2\xFBxDKp)\xF2\0\xF2\xF2\xF2-\"77'7\r77\b77A7737\xF2\x81@=\xF2\07 72\xF2\x9D \v\x87\v\x87\v\b\v\xF2\x94\xF2\07\v'\xF2\v\vx7` 7\v$\v\v\b\b\v\x07\v\x81777\x077777\n77	7777777777777\v77\b7\x0777\n7777777777777777777777\x927l7\x1B7%7\x07777\n777\n77'77\x077\xF2777\xF2\xF5\07\f7\x1B7777777 7	7\r77\x077\xD6797\x07787+7\xD4\xD5\xD4\xD5\xD4\xD4\xA3\nJ\xD4\x97\xA3J\xA3J\xA3	\xD4\xF2\xC0\x94\xEA\x94\xEA\x94\x8C\xEA\x8E\x8B\x92\x94o\x92\x94\x8C\x07\x94  \x87\xF2\xE6\xA5\f\x8C\x90\x8D\xF0\x8D\xF0\x99\x8C\x8D\x99\x8D\x8C\x8D\xF2\x94+7\xF2[\x07 \v\v\r\xF2\bq\xEFM\xF2\x89\x07777\n77	777s.7\v77	717$7\x077! 737 7\b\bw\xF2\xF9\027777777777(7V7757\b7z-7\xF2\xA9\xF2\b\xD4Rz\xF2\\\x94\xE6\x8F\xF2~\n\b	\f	M\f27\x07\b\f7\b77\v!\v\xF2\0U7\xAA7]6\bY\v\b!\x07\x99C\v\fS9\x99G\vM\n\x99\xF2\0\x07\xA0 \x07\xF2@\xF2\xE0\b\xF2\07\xF2\xB8\b7\x9E7\xF2)\b|777\xF2r7~\x07\xF2o7\xF2,\n\n\xF2	;\b7\b7e7477\b77\xF2@\xF2\07\xF2\0\xF2\07N\xDE3xx3\f\xDE 3LM3xj7N3x7xsxMi\xDENxM\xA3ttxM\xD2AM\f8ixcx7TTiy\x8DN\xAE\bx\xD2N\n\xD5x\xAA\xA3\xC5yxx	\bN\b-\bx\bM\b\\\b3x\xF2y7777\xD57\xF227J7\x997\xD6\xE0\f\x987\xF2\xF2g\by Ev\fPB\b\x07@ E x / 3\xF2 M\xF2\xFC\0\xC2\xC2\xC2*\x95o\xC2\xC2[M\xF2\xE27\x8BT7\"7\xF2F7\x07\b&&&\x07!	x\f\n'\n-7	\x07\x1B!\n)'\v\x07\ft\v	!t\v,\xF2(7\xD77\xF2	\xAE\n\n\n\n\xF2-77H7\x8B\xF2\xFF\07\xC079778\x80\x8D7\xE87\x8Ed7j38 E[\n\n t@} E\x07s@$`\x07\b}\xF2@\xF2\07^77\x8977777	787\b77777\x1By77\xF2;7;77777\b7777\"yy\b7\x8F77\x8E7 737]7\x1B777;77'7\xF2O\ni\n\n\xF2:\bN\xF2D7h\bN\x94zh 7\x07797p77\xF2\xE1\xC2\xC2\xC2\xC2\xC2\xF2\0\xF2\07\xF2\x80 \x87\xF2xM\x927	7777N77!\n$!\n 7l@7\xF2$7 \b7\x807\r77\x07\b\x90a7\x92\n7\xC0\n\n!8\n\xF2 7777\b7\b777777O7\xE87\f7\xC0\v 707\xF2\xD0\x95H\b\\\xF2\x90\v\n\xBD!7\b\xF2O\x07777J\xF2K77\x0777\b7\f7777\xF2- o\xF2\xE6\xF2	7\xF2\b\x99\x99A\x99\x07\x99\x99\xB0@7\xF2  7\x9D\b\b\xAA7\xF2%y+77\n7T77\xB87\xF2\0\xF2\07\xF2\xB007\xF2\xA0 7`\xF2\07\xF2\xF0\07\xF2\0\b!\x07'\f\b&!\x078\v\b\xA57.\n7t\x07\n\n\b!7\nn\x07\xF2\x90& &\xBF&\xF2\077\xF2\b@7 \xD6`\n\n\x07\nP\xA09y\b\b\x807\x8Fi\xF2\x9E\v	7\xF2f\v\xF2D	\x907w7 \xE7\f7\xAAM&M\xF2jz7\xF2\xC1\x07\n\v\xF2 7\xF2X7\xF2&\x8D\x90\x8D\b\x8B\xD07\xF2\xC2\xF2\"@	\xF2D\v47\b7\x88-\x907@ 7\xF2\xFA\0777	N77\\&7 7$-77  o\xF2@\v\xF2\x9Cx\xF2\bN(\b\x94\xF2I77)\x077\xF2@\n77\xF2\xED@y@7@&\xF2\xFF\0\xF20\n\"\"\xF2\xA0 @7\b7,\b7P\xF2=\x07<\b\xD6\b\b\xF2\x88\xF2\07\xF2M\xD4(w\xF2Ny\xAB\xF2e\b\\\xF2\xF2\xC0@7\xF2\0\xF2\07\xF2G\xF2\x9A\b7\x077\xB777\xF27\xF2\xCAe7\xF2\xD7l\x8D\xE9\x90\x8D\xF2T7L\v\b\n\n\n\v\f\v\v\v \v8\n\n\x90\x807\xF2@7\xF2\xAA7P 7\xF2\x80\x877x7\xF2\x80\x80\r%7\x07\x077\xF2\xDB\xF2\xE5\xF2\x92\\\xF2 \xF2\07\n6\b\n\xF2\x96(@\xF2@@\xF2\x80\x807\xF2\0\x8A7u7\xF2\0n7}77j\xC2E\xC2Q\xC2\xF2\f8\xF2\xF0\x807\xF2\xDA7\n7\xF2\x90\n\v\n\n\v\v7s\n\b\v\v8	\v	!3$M!\b&t\n\n&\n7\n\v8MMM\x1B7\vM,\xF2r\xF2\x07\xEC\xF2v\xF2\x92\x07\xF2\07\b\x07\bF\xB2,@@7\xF2\x82777\n7\x8D7\n7777\v77777\x077777	77\f777	77777777777777777777\xF2!\b\v7\n\b@7\xF2\xE0 F0y\xF2\xC0@\xF2@@\xF2\077\n77\x077\xF2`\xF2\x807@\r\xF21\x897v7\xF2py\x80 7 @@@7\xF2\xD2\xF2\xAFy7\b\v\bB\xF2+\x99\x997SS+77\x07777\x0777\b77777\x077\r77777\x0777\xF2A F\xA6\vc@7\xF2\0@@@7\x807\xF2 7\xF2\xF4\v 7#\b\b7TM\x88\b\b\f\x07!07\xF2\xA0-\xA3@\b\x8E\b\x90\xF2\0\xAF77\xB87\xF2\xC0%777\xF2\f	\\7\xC9 7\xF2\xA0@e@y 7\xF2F\xF2\xD9\f	7 v3ty!v\n\b'\v\n!\n\v\n\n7!\v'&M\n!!'8\xAE& 3!t\v	8\f!\n \r@7d\xF277\xF2 \xF2\07\x87\xC2\xC0\x9757\x837\b7<7\xF2dC\xF2{\xC2)\xC2\x1B\xC2\x1B\xC2\xF2\x99\x99\x99\x996\f\xF2Q?7\x8F\n\xD6\x8F,\xD6\xD6@@77\n7\r\xB2h= ,c 7c7\\77@8  7\xF2\0\x80\xF2\0\xF2\07\xF2\xF2\xB1777\xF2\xC07p@7\x80@7j\xF2\x903\b-\"M\xD4M-MNM-\xD5M-M\x973M\\M\\-@M 3\xF2 M\xF2 7\xD0\xF2\xFF\0\xF2\07\b$8\be\b\x94\xF2\xA1y.\b\x94x\x99\x90\x8D\x8B\x99\x90H\b\x86z\xF2\xEBN\xF2\xF4y\xF2Ey\xF2V\n \x8F\xF2\r{\xF2\xCAy\xF2\xC4@7\xF2\x807\x9E\xC2\xC2\xF2\xDA\x9B\xAE\x9F?{\xCA\xF2G77\xCD@\xF2\xF0\0y\xF2a	\n\x8B87\xB877\b\b77@7<7\b7\b7\f7\b\xE9\f7\b7h\b7t\b\b7\\70\b77d7\f7$7\f\b7\b7H\b7+\xC8\f\b777\x8C\b77,\b7\x8C\b\b7e777L7\b7877\b\b7p\b7(\f77f\x8Cf@\f77\x80\x8B,\b77\f\xA4\b70\b87(7707\b\xD6H777\f7\f\b7t7\"7D\b77,7\f777HM7\b\xAB\b78\b772\nd\b7 f7\x07M7X7*\b7\x84y\f7\b7\ny8t777\f\x8C\by77p\f\b77(\xD60\x8F\b7\"7y\r\b\x8Dx\b7L7)x77@\b{\b\x8E\x80\b77)&4\f7z07<7 7 7\b\b\x95\f7,\v\n\b\x8C\f7\vP7\b\v47d77(\b77h\b77(7`\xD6\\7\b\b7\b\b7\b\xF0t7\b7{7L\xABf\xAB47\b778\b7\f\f7\v$7$77|\b1&\b7,7 7%\b70\b7f\xAB7\b\x90\f7#o8y\x847\x90@7\f\xD5\x97\xB0@7\xF2@@7@@ 77\xF2\x9C@7M77\xF2\xAAf7\v7\f7' 7\xF2\b\b\n\xF270 7\xAA\v\b\b 7\"717\xF2H@7\xF2@@7\xF2\xC2	\f4\x80y\xE3P7@7\xF2>\xD07\b7u7\xD0\f77\xA1\x807\xF2\06:5uY6W\xA5\x86*Y@8;xw-3N}\x1B+\x07F48*:W(u(&8:\x86&Jozxw\x07Jz\xA4~M\x1B),:+W#@7-3\x96\\7\f\v\x07\n\r$u7	7\b\r\x91\nt\b\n\b\n\b	M\x86;&:W\xF2\x9A e\xF2\xA6\xCA\xF2\xA9 e\xF2\xE2\b\xCA\xF2\xF2g\b\b\x8F\xF2\x88 e\xF2\xF0\b!\xF2\xA0 \x8F@ \x8F\xF2\xD1\x07\xF2Q0\x07\xF2	\xF2\07\xF2Z\n\v\xF2\xA0}xM\xBAig\x95\xF2\xA5\xF2\xA7\b}\xF2\x86\xF2\xF4\0\xF2\vQ]\xF2\xF7\bN\xF2HN\xF2x\b(\xF2lY\xC2\bQ\xD8w47=+\xF2\xF8\v\xF2.}\x80#|\xF2 y\xF2\x84w\xF2Me\xF2;M\x1B}\xC0q,\vc+\xF2Je\xF2b\x95\xF2\xBEy\xF2\xAF\v\xF2\07\xF2\x99\x99q\x990\"=&,W\x99\xF2T\xF2\0-/\x7F&7777\xC27\x8CWW\r\xC0@7\xF2@@7`\xF2B\xF2\xF7\0\x8077777t7\b77\x07777777777	7777777\xF24\x8F\x8F\xD6M\xD6rMx\f	v\v\v\b\n!\v\b7!\n	\x07!! !',8$!''&!&\xC38!\x1B\n\b\n\v	\v	\x987;7)7\xF2`7\x90j77\x077A7@7\xF2\x80 7` @ 7@@\xF2` 7\x80\x80\\\xF2\x81\x077777h77777777	77777\x07777\x077\x077777\x07777777h7777777\b\r7777777777\xF2 7 7\xF2I7	\v7@\xF2\07@7!777#\b\x07\x07\n\b\xC0\x80\xF2\fT7|97\x077\n7\n7S7.7\x07\x077OaO$\n\b\v\x80\x8B\x8D\x8C\x8D\x8C\xE9\x8D\x8B\x8D\x8C\xF0\x8D\xF0\x8D\x99\x8C\x90\xF0\x8C\x8D\x8C\xE9\x8B\x8D\x90f7777\xF2\xB07\xF2|7\xF2b 7\xF2\0@7\xF2\xB9$\xF2F\x07\x807\xF2J''\xF27/7N,v  73\xDE3\xD4\bN3-'N\b\b&\by\bRx3x3xN3x\xD4\b&\xCB\xD4\b\xDE\x95N3x	683uN3N8\b3\bq\x97x\n\xC5yy\xD4\xF2\07\x80@707@\x807yyyy\xF2\xF2\0R7	7a \x88Y7\v\n=7\xF2\0\n 7\xF2\xA177\x1B774-\xF2@7\xF2\0@7  7\xF2\0 7\xF2\x80 7<\xF2<@7\xF2@\x807\xF2I7\xF26F\f \f\x077&7D7t7\xF2a\x97\xA3\xD5\xA3\xD5\xA3\xA3\xF2\xD9\n\xA777\f777\b\b77777\b\x07777777777\b777777n&7\xF2M7\xF2\xF2\0!\xF2L 7\xF2@@7  \xF2\0*7M7\xF2\0F7)P7 @77\b7\b7\xF2\xF2\xD8 7@@7\b\v`\x807Q7\xB4y\x807\xF2\x90}` 7@ 7\xF20@7\xF2\xA3&u&&&7\xF2\xA4V@7\x8070 7@ 77\xF2Dqq\xF2@777\x0777777777777777777\b7\x07777\b7\x077 77\n7\r7777\b77777\xF2\x807&7\x84	!\x07!!\x8D\xF2\077\b 7\xF2\b7\xF2\x07\f\x07$\x077'o\xF2\xAA\xC2\xC2\xC3\xC2\x99\xC2\xC2m\x07\n \b2@77\n 7` 7\xF2\xA0\v@7\xF2\0777777@7\x1B\fb@7\xF20L\xF2\x89t\v\n!\n!\f\f\b! 77\\7\xA3\x80777 7\f8&S&\xA077777\xC00777\b77\v77J7p74;G'`\x1B)>I, +$A!#5:\x8A&H\b7\x077\xC0@7\xF2\x8077\r7\n\v7\b7\b77\v	7nM\xF2` &@ \x9C\v\n	C 77` 7\xF2`@7\xA0@7\xF2*7\x94@7\x9E7`707\x93\xF2\xFC@7@Q7\xAD7\x80@7\vG\xF2\x07\n\xF2\x07,e\x8E\xEA\x07e\x8B\xAC\xF2 7\"(((\xDE\xC2\xD6@7\xF2X 	!\xE7\xF1!\xF0 \xF2\xA0\x07@7 \b\b!!!!7#7\x83\b\v'7Z\xF2  	@\x80\v@P0 \b\b|  	@@}@\xF2\0\v@|\b\b	   \bv\b	 \b\b\b\bv\vB\v@ !\vP\vK}\v}\vK\v(}\v(}K(\v(\b\vK\v(\v(\v\v\xF2\0\v \x82v\b\b \x07\x9F\xF2\0\n1\n	\n\xF2\xB1\xF2\00 \x91\xF2P@\n\n\n\v\x07\v\x07\f\b\x07	\n\b@@	\x80\f!\v<\v!\v\xC0\x07@\xF2\0\b\xF2\0\xF2\0 \n tr  `\b\n\n\n\x07\n\x1B\n\n\n	\n\n\n	\n\b0\n\n\n\n\b\n\n\n\n\n\n\x07\n\n\n\v\v\n\n\n\n\n\n\n\n\n\n\n\n\n	\xF2\0\x80v\b\b\v\b v\b\b\b\b \xF2\0\xF2\0\xF2\0v }v\v  \x07\n\b\b   \b\v\n\v\f\v\n	\v\n\b\n\x07\x07\v\v\n\v\nj\x07\x07t 	\xF2\0\f\xF2\0\x07\bv\n\f\v@@t \n\v\n\v\n\n \f 	@\xF2@\xF2\0\xF2\0\xF2\0\f\x80v`P@@ 	\v\xF2  \x07\v\x07\v\x9D\v\x9D\v\x9D\v\v\x9D\b\v   	@\xF2\xE0	 \xF2\xC4	\xE0	 \xF2 	<\xF2\n	 	\xF2\xC0	\b	\b\b	0 	0	  	 \xF2\xA0\v	 \xE0	a\xAA\b\b\b\b\xF29tt\xF2\xC1	\x07\v\b\xF2\v\x07\b	\x076\xF2	\xF2!		\xF2\xF2\x85\xF2\xFA\0 \v\vv\fP\vt\x07\v\f\n\vt\v\b\v	\f\xF2d\v\xF2\0	\v&\v\v\v\n\v\v!\v\v\n\v\v\f\v&\xA0\v@v@  @\xF2\0\b\xF2Bs\xF2\0@\f 	 \x80\f@\n@\x80\xF2\0\xF2\0\b\xF2\0\xF2\x80\f@@\xF2`	\xF2\x90	\xF2@\f@\v\x80\f\x80\x07@tP	\bt\b\f  	 \xF2\x80\x07@\xC02\x07\xB9\x07\x07\b\x07\x07\n\n\n\b\v\x07\x07\v\xF2`	 \x80	 \xF2\0	 \xF2`	 \xF2@	\xF2\0\v\xF2\xC1\xF2*\b\xA0\xF2\0\f\x80\x80\v@v\xC0\x80pt\xF2\xC0\xF2\x80\xF2B\xF2\x07\xF2\xC3\x07\x81\xF2A\xF2\0\f\xF2\0\b\xF2\0\xF2P		\xE0	 \xF2`	 \xF2\xA4		\f@	\xF2`\r	\xF2\xF0	 \x80	\xF2\0\b\xF2\0\b\f\xF2\0\xF2\xA0\f	\xF2P	\xF2\xF2*\bc\x07\xF2\xF2\x80\n\n\x07\n\xF2c\xF2P		 		\xF2@	\xF2	@ 	P0		 	 	 	0\xF2p)	 \xF2\x80	 \xF2p	 	\xF2\0	\xF2\0	\xF2	@ $  \xB4   :& @5  \bK\b\b\b $ @  F  #] !   5 $  >(       @\b4\b=4C4\x1B4=@$ 4 $ A@$A#hP>+'$:F\xC0 ?   $T\f $  5@   $\b\b$$\b Z       5\xF2\0	\r#I\b)  $ F O  $  $  # F I 6 $   X $@B W@   @$ E # $\b=\b $ 5 ;   $  K ' )!!! $  $ @ \xEC'\xEC!\xEC @ W      \b $    B ,@$@\x07	\b    $ \x07  4     $$$>$$A$   \x86 5````^`\f\v`!! $@     $ I\b  ) , F  4@8 ! \r\f\x80F 5 A\b $  @ 	 ??$?   :    ! P@@#  @8 _$$PP W @$@V #   G  !  \x80@! $  $   E  F K $ * $  $    /@ *  + $   4  %\f P $!'!  A !        $F*  ' \n!! 4 [     5$5@) P $ @$@      $ 5 ]   /  h 4    @@ $ W $@  $ 4B\b\b   @$ F \b  @$    I Q !?!??!?!?!?!?!   $\b\x07W $ 0$)\v!?!?\x07!?	!  \x86 $@@ 4 # 4 G '  '   @)      I@ \xC0 )  $$  ?GW\rW\vGL '   +\f\n\f$ \x1B   \xA9 5 $8 \b8  A444\b44\x07X H  :\b,, #\bA\bU `$ F  #   C  5 $  I 8!(8\b\n\v $@  $6	#;$\b  \xBE   @\xF2\0  U  F@   '@ 2 ! \x80   #:  $ H #@  5 ,    '  $       ' #@ 8 5@U\xA2U   $#\b\x07	@  F  94\n4 > \x1B   F  @   T\x07\x07  W CW 4  !  / $4,4 !\n\x07',!K\x07,@*$5$ 4  !  $ @$ B  F 8@$  \xE2 Y   $  9      ( @ 5 ` K 5  6	5!8  A\b$P+\b\x80   \b\b   5  $ '@`\b\b\b\b@  @   !   W\"\"j\b '  K555\f5` 5      5+     .       @   A  5 '$\b5:5  5   @ ; ! 4 $  )  $\b@$ ; 5    > +@F W $\b ' $ @     \v\f\f 4  \"&&& ) B $  $5$  ]     @ # 8 P c@#\x80`    u ! $  F     #@W  P F\v! \x1B)U#844IU?cW$    (\n>  $ W 6  @ $ 4  777	 \bi\x80!    )  $ E @@O$$ ?\f F ! @$    $ # \f)A)A1) $ 5  #(\b$ $ #@ X 55 @   $ @55 @!\x1B ]  !   5 $     $ - \x80 ##$\f$$8@UK\"  5  ' ! $ 4 8 F B It   8 , \x1B * $ W@F@%$\b! F $ ?`$ X @ $ K `%       $  I !!\v 4  6    N\x07 $ \x07Mv  % #    `  =    V    #\x80\xF2\0-  $\x80\xF2\0\xF2\0\xF2\0!'A4)\n\r\x07\x80#i7\xF2\x96\xF2\xFD\0#6&\x07\xA4\xF2\0F\xF2\0\xF2\0@@>\x80\xF2\08\xF2\0\xF2\0@'@+ # T@\x80\x80\xF2\0@\xC0'\xF2\08\x92!x\v!;\x81! $@\x1B\x80M\xB2\x80#\x80B\xF2\0\xF2\0#\xF2\00O $X\xF2\0@\xF2\0&\x07	\f\x80)4+@\b$): !@\xF2\0\xF2\0$ @\xBC\x07\x07\nt\x86}\xAC0\x86u\b,\xA8,,\b,\b@  \x80\f\x07	\x07	\xF2@@\xF2\x80\xF2\0\xF2\0\xF2\0\xF2\0#$c\xE9$\xF2\xF0\0 5\x80   U\xF2\08\x07\x07\x07\n\n\x80\xF2\0!\x80@@'\x80  @\xF2\0\xA4(.\x80\x074\x07\x07)\f\x80$\x80\x80\x80s,c, \xF2 \xB0$$$\b$$\x07	\b$\xE0$\xF2\0\xF2\0\x80A@\f\r\n\xF2\0\xF2\08\xF2\0U\xF2\0 `\x80\x80\x80\xF2\0\x1B\xF2\0\xF2\0\xF2\0\x83!{!\xF2\0\f\v\f\x80\xF2\0'!\xF2\xF8\0'*!M\xB4!M!\x80\x80F\xF2\0\x80\x8A\x80!\xF2\0\xF2\0\xF2\0$!\v\x07\v\v\x9A'\v\b\x07\b<\xF2[#\x80\x80\x80\xF2\0',\r\x07\x07	\v)\x07\x07\n\n\xF2\xF2\0$\bA\b0$ \x80>,@$\x804\xF2\0\x808\x80W\xF2\0@ =\b!\b,\b\bU!7IU\xF2\0\x80\x80\xF2\0 ] @\x80\xF2\0P\xAF\xF2\0\xF2\0\xF2\0'\x9A!e!\x80$\x80(\xD6\xF2\0\x80\x1B\x80\xF2\0#\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0\xF2\0$:\b$\b\b\b$\b;\b?$$\b$\b$\bW\b$\b\b\b$\bF\b\b$\b5$\b\b$\b\xF2\0E\xF2\0G\xF2\08\x80\x80\xF2\0\xF2\0\xF2\0\xF2\0 \xF2\0#\x7F!'{!fgf\xD7gfgfgfgfg\xD7gdgf\xD7 4@)\x80\x1B\x80\x80\x80\x80\x80\x07.\xE9 $$$@!@>$%>\xF2\0 \xF2\0\xF2\0$\xF2\0\xF2\0\x80$=.\xF2\0'\xF2\0\x80 @ \xB5J\vcN'!\b!\b,=ZY\rY\x80$\xC0 h /\r\x80?\xF2\0\xF2\0\r0\x93)\n!	\v!+\v\b\x80\xF2\0	\x07\n\b\x9C\xF2\0(\xF2\0#\xF2\0\xF2\0\xA2)+!2\xF2\xF2\0\xF2\0v!M!M!M4!M!M+!\xF2\0\x80,A\xF2\0\xF2\0@@\xE4\x80\xF2\0\xF2\08\xF2\0 p$\x80$\xF2\0\xC325)'55555!55\b555555555555\b5555\v5555!5555)&55\xF2\0 \xF2\0!\xF2\0\xF2\0  @\x80\xF2\0#\xF2\0\xC0@\x80\x80\xF2\0 $ @$\xC9!'6!\x80$\x80\x80A\xF2\0@@\x80\xF2\0\xF2\0$	\x07\v\f		\f\b 	\x07\xF2\x80$ !M!M!M!!!M\xF2(!\x80 \x8D@[\x804z\x80\xF2\0@@\x80\xF2\0\xF2\xEF!>!\b>\f!>	!\\!>!7!>D!>!?;>I !?!\b?\x80!>?\nI!I ;!>!>!>\\! ;I!>I!>I!?Ix\b>E!?!?!> !@;\x80I !;?! I !\xF2\xB1\xF2N$\b\b$!\b$\b55\b\b\b5\b\b\x1B\b!\b\b\bA$5$\b\b\b$\b5\b$$$\b\bK($$\b]$$5$5\bB5K@$ >`5@$@\xC05\xF2\0!\b\x07	\b		\x07Z\x07*!@\n\b	E\xF2\0\xF2\0\xF2\0 $  #@  $   $  $     5\x07\f\n4'4!4	4 9  !?!?\fI?\b! ' $ C 6  ! @\x07 ( $ ! @ h \xA2 \b\xA5G\n\x07'\b  5 Z  )   !@ $   $'C$ X ,\v,  !  \xB3@ F  ^  8 U\xA5\xA5\b!  $   $  ' $$    *    '$#$$5$#$C$ \xC9\xC9  $ \x1B 'GG	G $    ! ' $ B  $ ! $  ##  $W&,   W   '  #    # \n\x1B\n  @$  4 ]  '\b\b  @%  @ $  ;   $  $  #@ $   $ ; \xA2D\xA2 4 G     $  ! \xAF\b\xBA&  $88    @A   6  $ \xA1\b    !\x80# Q 6 \xC8@+ $ 5  5   #(!!  $    5 $B$\v+$  $   B!\x07'!'!' )  + C W $ !    6  \b#7\n# I$$$$$$$$$\f ! $ 5     5 A \b W '	  #          	@)  D !  @   I   ! +  F	2  H $@ ,$$$B$$$\f\x1B F!   4 $ Z  V  $\b,\n ? $@ $  \n ' 4 5\x07,,\xC1,\fG8\x07GH\bG @  @$  $\vU+\x07$^\v @$      $  Q  &   W \n\b\x97  + ' !  5 !! $ \n   @>\x1B P@ K @K V   $ +   $(\xC9    $  )\b9$$5   O !\r\n\b   \xC9\n 5 ?  ! >  $$  $   V A F ) 6   @ $Q\xC2\xAF*J;G6\x1B\x97)V^T)XU\x86\v+M\v  $$$$!$  $ @ $  ?\r $ F c\bc ! '\n    !;\f;   5 # * 5 '    $\v=u  !H_\x8B?H`H \b5\x07?   * !!f\xD7fgfgfg\x07fgf\xD7gfgfgg     h !  @$\v\v; I  V    @$@  ;@4 @@>'?',1 $S&\b\xAE&@\b \b ,\b\f@#@@@K@@@4,\b0U[@/!@@)@I@\f\f\v=@@U  @!\b\b@ C 5	+++\v@!@\x80` T \x07;8;@@@@@8\x07  \xEC@P!!j!@   \x8E\b @@  ` D@@G@K 	@\b $ 	@D:::v:::::S(\xC6C@@$@@F # @B\b @!'*!@@@6\x80 V @   4 @'@!@A#A8G  @@@'$CF K@@@H  0  \x80@?/<$@@V@@@$@  @  4@@)  $\xF2\0\xF2\0@@  @@4\b$5:$\b#\b$\fI>2I@@@ (&8\x07!\n@5@@$@ @@@.@W F @@ \n\v@@5@@4@@#5H4$#M\x07K@$$B$]B#\b$\x07B$$B\b$FB$B$@@+  K@ $ @@@$@\x80@  F\n\b\b\x80\xBB@  @$#\x1B#@!<@\x1B\b@@U@@@4\x80@\x80$! !!!$@!@$@#@$@'@  @E\bC\f U\b!\b+\xF2\0 b \x80,, P\xC0$!F(@#@@\x1B 4!+\x80@W@'@@A\b@@$5$5$5$\b50$@@$@I>+I>\fI@;W\n;W;W;W;W\n;\bU;W;@@)  @ # !!\x80 u '777\v777\v\b\xF30\0&&&\xF2z\b&\xF2\xE8&\\\b&\xB8\b&8O	\x077\f7&77\b\x07\b\xAB\n\n7a\v77Na7\v77\b77@7\x88\b7` 7  `@7p7\xB07\xB4e7\x07\xF2\xC0\f\n\b\n\n\"\xF2\07\x8070\xF2 7\xF2\0\x807`7\b7V 7P7\xF27$7t 7I7z-G\xD37\b77\x827y\v7\xA07e77p7\xC0 7\xF2`@\xF2\xF2d\x07\x8E@7\xB07\xF2'7\xF28  \v770 7\xF2>7\xF2\xA1 7\x8007J 7\xF2\xB07\x8D<7\x07\xF2=7\xF2\xC1\xF2\xA07P07\xF2\xC07@\x80787\n]\xA3 7\xF2\xC5\x07\xF2:7777\x0777777777t7h77777777777777777# 7B777\f P7\xF2\x807 \b7  7$N3\x97\f8x\xD4tN8y\xD4N\xD4\bxy\buo\xD4N8\xD4\xA3\x97	x	N\b-xxN 3\xD4jNNox	Nx\x95NxP70@\x8C,-\b\b\xF2  7\xF2@ 77\xF2\xC1 7\xB0\xF2\x80 7\x80 7lC7`\xF2$7w7S77\xBF7\xF2777	7\x07777777777\b777777777\n7\x0777\n777	77	7\x927777\n77\r77777777777\xF2\xE07@7\x90@ 7 7P7\xF2\x81 7@\r.0.\x807H\xB77\xA27\xED\xC07$\v\v\xF2`\x8E\x94\x92\x94\x92\x8E\x94\x92` 7\xF2\0\x807@ 7\xF2\xD77\xC97\xF2|@@ 707 \v\x90\b$\b7\xDB7777\xB2\x807777777777\r77	7\n777=7\xF27\xF2*77@7H7$7\xF2\xB07A`7J7 7` 7p7\xF2 \x95\b\" 7 7\xF2@7\xA6\xC8u\xAA\xF2\x94\x8F7\xAB47h\xA17v\xF2\xF9 7\xF27	\x8A7\x07\vv77	7\x93\x90@\x80\xC07Cv\x077\v\f7( 3\x80!\xF2S77(7\xC0!]!\xF2\x97\xC2\xB57\x907\xF2\xD0 7\xF2+\n\xD3 7` 77\xF2\xF1\077\xC877\xE37`707\xF2\xF0`7\xF2\x887\xA3\b\b7\xA0777770yyyy\xF2S7\b7\b77\x88777\b7737\v\v7777\x1B7\b@777\xF2\0 707  70\x9C\x80\b\xA3\xA3\x96\b\xA3\xA07)7\n\n\n\x07\n\n\np7\xF2@7777\v7\x07\n77777\x9A\xF2\xF8\0\x07\xF2\xEC\xF2\07\xF2@ 7w\x1B--M\\\xF2\xF2\x807\x80 7\xF2\n\x9D7\xF2\x90\xF2\07`7\x90\x807`\x07\xD0 7\xA0@\xF2@@7\xA27\x07@\xD9 7\xE0@7\xF2\xC7\x07`7\xF2&7\xF2X 7\x8Au\f\xE9\xB6\xD47\xF2\xF0\07QM\xD77ffl \x97\xF2@\xF2\07\xF2  7B 7@7\xF2\xA0&\x97\x97\xF2\xE4\b70\b 7\v\x07a07n7a7 3+$7 G@7	\v\xF2\x82?\\@-(\xF2QbD7!7\xA177\xF2\07\xD67\xF2 \vv\b\vR\xD5\v\n\x9E7NMMMM4 7\xA0 70\b\n	\b7 \xF2\x80`7\xF2\xF20\x07\xCF \xA8F$\b#$   $5[\b $ V$ !4I$  !.P +4KB C\xA8 $A$@$: \b545\b55F$ )) $ !$$u%\vuQ $;$$$H\bR\xC1\x89R $B$!$ XU!G!IU$#G $ L\x07$  $#54+\x07+++ \x1B $_ : \x07 $!)$ 5O6uE) c8\v\n	$\x86!!\f!D>c	>$!\f!8$H0$* $c$\n$^$[AU >'$[K5$0D	DQ!K$'\b$5 $! $ U \bF\b :\b\bU\b\b\b\bG$GG $5 !)^\b\b7\b!\b,>\b\b$\fV! $!>$!$>!!?!]$$@0$&\xEC*\b\x07H @'54$,A,  ! #\xF2\0\xF2\0\xF2\06\xF2\0\xF2\0K\b\b\b( \b\b\b\b\b\b!W\xF2`\x80Q'\r\xB7\r$5!$'#$888888`$ )!\b #U$5\n$  $5$A K E$A5!$$  !; $#!!' >$!h $ $!  $\n,\n?[\r$'$H\b\b$$!! W$  !A	\b$5!$D+$ \b\b!\b#$!$ $ R\x89R\xC1RR$ A ! 4[ /$!B!\b$5I$\xB6$$\b$K '5 !E#$ '$ $4$ 4 )$\n\xF2q	\xF2\x94\xF2\0\xF2\0\xDB$C$C\xF2\v$\xF2\0\x9E4\xAC\b\b\b.$ )'5' /)\xBC\v\xB6\xBC\xB5\v$  $!$\x07$\b\b $ !$5\r$+ )$ $'#0uI 5$$$,$  $A\b$!\x07$'$A! \bU\bX\xF2\0\xF2\0\xF2\0\xF2\0 \xF2\0\xF2\0#\xF2\08\xF2\0\x80\n\v\xF2x\xF2\0\xF2\xC0)(7\n474\xF2\06\f\f\x07\x07!\x80'\xF2\0\xF2\0!*A)\b$K $  H$4 $4A>=F5)#U\n\x07 -4,-!$\b\b?0 K5E!5I$I\b		`` \f55\v	\bC	$\b+  $$'$ @$\b!\b$\bP\b )!$ $!$$ V!$\xF2\0'\xF2\0\xA0\xF2_\x80+\x80\xF2\0\xF2\0%\v\xC2\x80?\xF2\0K	\f`\x07\xBC\xF2\0\v\r\xA0\xF2\0(\xF2\0\xF2\0 $ \xB1 \bHQ;\b\b$H'?'?'?'$  #U  F $$\xB7$K$kBK$K\b$===V\b\b$ \xA9(K(K(\bKA 0$)$F\vG0Y\fY$K#4 !$ 4 $ \x9A0$\f\x868! $g\fG \xF2\0\xF2\0\xF2\x80@@\x80z		\b2(\f\r\xF2\0\xF2\xF4\xF2\v\xF2\0 7\v77\v778$>0$\x1B#$ BAA$5X $!,$\b\b[\nt$)$0$ !$! $>   >[\x86 $5$\xF2\0\xF2\0\xF2\xE2!!\f!!\xF2!\xF2\0\xF2\0K\xF2\0\xF2\xC0!\xF2?\f\xF28\x07\v\n\xF2\xC0\xF2\0\f\x80t\x80\xF2\0\f\xF2\x80	@\xF2@	\xF2\0\b\xF2\0\b	\xF2o*\xF2\x90tt\v\bv\bv\nt|t\b\x07tvi\bitv\b\rt\b\xD3v\x9F}\xA4\x80v\x80	\xF2\0\v\xF2\0\xF2\0\xF2\0\b\xF2\0 \xF2\0	\xF2\0\f\xF2\0\b\xF2\0\f\x80@ \bv\b\n\b\x07\xF2\0\n\xF2\0\f\xF2\0\v\xF2\0\xF2\0\b\xF2\0	\xF2\0\f\xF2\0\n\xF2\0\v\xF2\0\xF2\0\xF2\0\b	\xF2\0\b\xF2\0\x07\xF2\0\xF2\0\v\xF2\0\xF2\0\v\xF2\0@\xF2\0\x07\xF2\0\xF2\0\f\xF2\0\x80\v\x80\xF2\x80\n\x80\xF2\0\v\xF2\0\f\xF2\0\x80t\x80\xF2\0\f\xF2\0v@\f\x07\f\x07\v\x80\x80\f\x80\x07\xF2\x80\b\x80\xF2\0\b\xF2\0 \xF2\0 \xF2\x008\xF2\0\xF2\0	\xF2\0\xF2\0\b	\xF2\0@\xF2\0 	\xF2\x80 \nP\xC0@\xF2\0\xF2\0	\xF2\0\b\xF2\0\xF2\0\f	\xF2\0\f\xF2\0\xF2\0	\xF2p|\b\x80\xF2\0\xF2\0\xA0\x9E\b\n\b\x07\x80 t\f\xF2\0\x07\v\f\x07$\x07\v\b|\bv\x9C\v\v\f|l\v\v\xF2\0\xF2\x000\xF2\0\xF2\0\x07\xF2\0\f\xF2\0	@@\x80@\n@\v\v\v\v\v\v*\v\v\xF2\0\xF2\0\xF2\0\xF2\0\v\xF2\0\xF2\0\xF2\0\v\x80|v\b\b|\bt\b\b@i\xF2\0\xF2\0\xF2\0\xF2\0\n\xF2\xC0\f@\xF2\0\xF2\0h`\f\b|\b\x07\n\r\b\v@}@  \x07v\v\v@\xF2\0\xF2\0\v@\n\x07\x07\xF2\x80@ 	\b}H@t \b	@@	  \xF2\xA0\x07Z\x07\x07\xF2\0\xF2\0	\xF2\0\f\xF2\0\xF2\0\f\xF2\0\b\xF2\xD0\x07\xF2 (\xF2\0 \xF2\0P\xF2\0\x1B	\xF2\0\xF2\0t\xF2\0\x80\x80\xF2\0\xF2\0\xF2\0\b\xF2\0v\xF2\0\f\xF2\0\xF2\0\xF2\x80\n@i@t\xF2\0\v\xF2\x008\xF2P\bt\b\xF2\xA0@	\xC0\xF2\0\b	\xF2\0\n\xF2\x80\f\x80	\xF2\0\xF2\0\xF2\0\v\xF2\0\xF2\0\f\xF2\0@ \nt\b\b\x81@ \b\b\n\f\b|\f\x9Dv\x07\v@\f\x80	  \f\f|\b\b|\x07\bt\v\n\v	\n\b@\x80\b\x80	\x800\x9E\x07|\x07}\v#\xF2\0\x07\xF2\0 	\xF2\x006\xF2\x80\v\x80\x80\v\xF2\x80\b\n\x07t\x07 \v\xF2\xC0	\xF2\0\xF2\0\b\f\xF2\0\xF2\0tt\b\fv\b\x07 v \x80	\xF2\0\xF2\0\b	\xF2\0\x07\xF2\0\xF2\0	\xF2\0\x07\xF2\0\v\xF2\0\xF2\0\f\xF2\0\xF2\0\xF2\0\b\xF2\0\xF2\0\xF2\0	\x80 \x07\b\b\r \b\v\n \xF2\0\x07\xF2\0\f@ 0\vO\xF2\0	\xF2\x80@\v 	\bt\v\x07\v\n\xF3\0\0 ", "binary");
    module2.exports = data;
  }
});

// node_modules/ip3country/src/ip3country.js
var require_ip3country = __commonJS({
  "node_modules/ip3country/src/ip3country.js"(exports, module2) {
    var ip3country = {
      countryCodes: [],
      ipRanges: [],
      countryTable: [],
      init: function() {
        if (this._initCalled) {
          return;
        }
        this._initCalled = true;
        const ip_supalite = require_ip_supalite();
        let index = 0;
        while (index < ip_supalite.length) {
          const c1 = ip_supalite[index++];
          const c2 = ip_supalite[index++];
          this.countryTable.push(
            "" + String.fromCharCode(c1) + String.fromCharCode(c2)
          );
          if (String.fromCharCode(c1) === "*") {
            break;
          }
        }
        let lastEndRange = 0;
        while (index < ip_supalite.length) {
          let count = 0;
          const n1 = ip_supalite[index++];
          if (n1 < 240) {
            count = n1;
          } else if (n1 == 242) {
            const n2 = ip_supalite[index++];
            const n3 = ip_supalite[index++];
            count = n2 | n3 << 8;
          } else if (n1 == 243) {
            const n2 = ip_supalite[index++];
            const n3 = ip_supalite[index++];
            const n4 = ip_supalite[index++];
            count = n2 | n3 << 8 | n4 << 16;
          }
          lastEndRange += count * 256;
          const cc = ip_supalite[index++];
          this.ipRanges.push(lastEndRange);
          this.countryCodes.push(this.countryTable[cc]);
        }
        delete require.cache[require.resolve("./ip_supalite")];
      },
      lookupStr: function(ipaddrstr) {
        const components = ipaddrstr.split(".");
        if (components.length !== 4) {
          return null;
        }
        const ipNumber = parseInt(components[0]) * Math.pow(256, 3) + (parseInt(components[1]) << 16) + (parseInt(components[2]) << 8) + parseInt(components[3]);
        return this.lookupNumeric(ipNumber);
      },
      lookupNumeric: function(ipNumber) {
        if (!this.countryCodes) {
          throw new Error("ip3country::lookupNumeric> Please call init first");
        }
        const index = this.binarySearch(ipNumber);
        const cc = this.countryCodes[index];
        return cc === "--" ? null : cc;
      },
      binarySearch: function(value) {
        let min = 0;
        let max = this.ipRanges.length - 1;
        while (min < max) {
          const mid = min + max >>> 1;
          if (this.ipRanges[mid] <= value) {
            min = mid + 1;
          } else {
            max = mid;
          }
        }
        return min;
      }
    };
    module2.exports = ip3country;
  }
});

// node_modules/statsig-node/dist/Evaluator.js
var require_Evaluator = __commonJS({
  "node_modules/statsig-node/dist/Evaluator.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    exports.__esModule = true;
    var node_forge_1 = __importDefault(require_lib2());
    var ConfigEvaluation_1 = __importDefault(require_ConfigEvaluation());
    var EvaluationDetails_1 = require_EvaluationDetails();
    var SpecStore_1 = __importDefault(require_SpecStore());
    var core_1 = require_core();
    var parseUserAgent_1 = __importDefault(require_parseUserAgent());
    var ip3country = require_ip3country();
    var CONDITION_SEGMENT_COUNT = 10 * 1e3;
    var USER_BUCKET_COUNT = 1e3;
    var Evaluator = (
      /** @class */
      function() {
        function Evaluator2(fetcher, options, init_diagnostics) {
          if (init_diagnostics === void 0) {
            init_diagnostics = null;
          }
          this.initialized = false;
          this.store = new SpecStore_1["default"](fetcher, options, init_diagnostics);
          this.gateOverrides = {};
          this.configOverrides = {};
          this.layerOverrides = {};
        }
        Evaluator2.prototype.init = function() {
          return __awaiter(this, void 0, void 0, function() {
            var err_1;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.store.init()];
                case 1:
                  _a.sent();
                  _a.label = 2;
                case 2:
                  _a.trys.push([2, 4, , 5]);
                  return [4, ip3country.init()];
                case 3:
                  _a.sent();
                  return [3, 5];
                case 4:
                  err_1 = _a.sent();
                  return [3, 5];
                case 5:
                  this.initialized = true;
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Evaluator2.prototype.overrideGate = function(gateName, value, userID) {
          var _a;
          if (userID === void 0) {
            userID = null;
          }
          var overrides = (_a = this.gateOverrides[gateName]) !== null && _a !== void 0 ? _a : {};
          overrides[userID == null ? "" : userID] = value;
          this.gateOverrides[gateName] = overrides;
        };
        Evaluator2.prototype.overrideConfig = function(configName, value, userID) {
          var _a;
          if (userID === void 0) {
            userID = "";
          }
          var overrides = (_a = this.configOverrides[configName]) !== null && _a !== void 0 ? _a : {};
          overrides[userID == null ? "" : userID] = value;
          this.configOverrides[configName] = overrides;
        };
        Evaluator2.prototype.overrideLayer = function(layerName, value, userID) {
          var _a;
          if (userID === void 0) {
            userID = "";
          }
          var overrides = (_a = this.layerOverrides[layerName]) !== null && _a !== void 0 ? _a : {};
          overrides[userID == null ? "" : userID] = value;
          this.layerOverrides[layerName] = overrides;
        };
        Evaluator2.prototype.checkGate = function(user, gateName) {
          var override = this.lookupGateOverride(user, gateName);
          if (override) {
            return override.withEvaluationDetails(EvaluationDetails_1.EvaluationDetails.make(this.store.getLastUpdateTime(), this.store.getInitialUpdateTime(), "LocalOverride"));
          }
          if (this.store.getInitReason() === "Uninitialized") {
            return new ConfigEvaluation_1["default"](false).withEvaluationDetails(EvaluationDetails_1.EvaluationDetails.uninitialized());
          }
          return this._evalConfig(user, this.store.getGate(gateName));
        };
        Evaluator2.prototype.getConfig = function(user, configName) {
          var override = this.lookupConfigOverride(user, configName);
          if (override) {
            return override.withEvaluationDetails(EvaluationDetails_1.EvaluationDetails.make(this.store.getLastUpdateTime(), this.store.getInitialUpdateTime(), "LocalOverride"));
          }
          if (this.store.getInitReason() === "Uninitialized") {
            return new ConfigEvaluation_1["default"](false).withEvaluationDetails(EvaluationDetails_1.EvaluationDetails.uninitialized());
          }
          return this._evalConfig(user, this.store.getConfig(configName));
        };
        Evaluator2.prototype.getLayer = function(user, layerName) {
          var override = this.lookupLayerOverride(user, layerName);
          if (override) {
            return override.withEvaluationDetails(EvaluationDetails_1.EvaluationDetails.make(this.store.getLastUpdateTime(), this.store.getInitialUpdateTime(), "LocalOverride"));
          }
          if (this.store.getInitReason() === "Uninitialized") {
            return new ConfigEvaluation_1["default"](false).withEvaluationDetails(EvaluationDetails_1.EvaluationDetails.uninitialized());
          }
          return this._evalConfig(user, this.store.getLayer(layerName));
        };
        Evaluator2.prototype.getClientInitializeResponse = function(user) {
          var _this = this;
          if (!this.store.isServingChecks()) {
            return null;
          }
          var gates = Object.entries(this.store.getAllGates()).map(function(_a) {
            var gate = _a[0], spec = _a[1];
            if ((spec === null || spec === void 0 ? void 0 : spec.entity) === "segment" || (spec === null || spec === void 0 ? void 0 : spec.entity) === "holdout") {
              return null;
            }
            var res = _this._eval(user, spec);
            return {
              name: getHashedName(gate),
              value: res.fetch_from_server ? false : res.value,
              rule_id: res.rule_id,
              secondary_exposures: _this._cleanExposures(res.secondary_exposures)
            };
          }).filter(function(item) {
            return item !== null;
          });
          var configs = Object.entries(this.store.getAllConfigs()).map(function(_a) {
            var _b;
            var config = _a[0], spec = _a[1];
            var res = _this._eval(user, spec);
            var format = _this._specToInitializeResponse(spec, res);
            if (spec.entity !== "dynamic_config" && spec.entity !== "autotune") {
              format.is_user_in_experiment = _this._isUserAllocatedToExperiment(user, spec);
              format.is_experiment_active = _this._isExperimentActive(spec);
              if (spec.hasSharedParams) {
                format.is_in_layer = true;
                format.explicit_parameters = (_b = spec.explicitParameters) !== null && _b !== void 0 ? _b : [];
                var layerValue = {};
                var layerName = _this.store.getExperimentLayer(spec.name);
                if (layerName != null) {
                  var layer = _this.store.getLayer(layerName);
                  if (layer != null) {
                    layerValue = layer.defaultValue;
                  }
                }
                format.value = __assign(__assign({}, layerValue), format.value);
              }
            }
            return format;
          });
          var layers = Object.entries(this.store.getAllLayers()).map(function(_a) {
            var _b, _c, _d;
            var layer = _a[0], spec = _a[1];
            var res = _this._eval(user, spec);
            var format = _this._specToInitializeResponse(spec, res);
            format.explicit_parameters = (_b = spec.explicitParameters) !== null && _b !== void 0 ? _b : [];
            if (res.config_delegate != null && res.config_delegate !== "") {
              var delegateSpec = _this.store.getConfig(res.config_delegate);
              format.allocated_experiment_name = getHashedName(res.config_delegate);
              format.is_experiment_active = _this._isExperimentActive(delegateSpec);
              format.is_user_in_experiment = _this._isUserAllocatedToExperiment(user, delegateSpec);
              format.explicit_parameters = (_c = delegateSpec === null || delegateSpec === void 0 ? void 0 : delegateSpec.explicitParameters) !== null && _c !== void 0 ? _c : [];
            }
            format.undelegated_secondary_exposures = _this._cleanExposures((_d = res.undelegated_secondary_exposures) !== null && _d !== void 0 ? _d : []);
            return format;
          });
          var evaluatedKeys = {};
          if (user.userID) {
            evaluatedKeys["userID"] = user.userID;
          }
          if (user.customIDs && Object.keys(user.customIDs).length > 0) {
            evaluatedKeys["customIDs"] = user.customIDs;
          }
          return {
            feature_gates: Object.assign.apply(Object, __spreadArray([{}], gates.map(function(item) {
              var _a;
              return _a = {}, _a[item.name] = item, _a;
            }), false)),
            dynamic_configs: Object.assign.apply(Object, __spreadArray([{}], configs.map(function(item) {
              var _a;
              return _a = {}, _a[item.name] = item, _a;
            }), false)),
            layer_configs: Object.assign.apply(Object, __spreadArray([{}], layers.map(function(item) {
              var _a;
              return _a = {}, _a[item.name] = item, _a;
            }), false)),
            sdkParams: {},
            has_updates: true,
            generator: "statsig-node-sdk",
            time: 0,
            evaluated_keys: evaluatedKeys
          };
        };
        Evaluator2.prototype.resetSyncTimerIfExited = function() {
          return this.store.resetSyncTimerIfExited();
        };
        Evaluator2.prototype.getExperimentList = function() {
          var configs = this.store.getAllConfigs();
          var list = [];
          for (var configName in configs) {
            var config = configs[configName];
            if (config.entity === "experiment") {
              list.push(configName);
            }
          }
          return list;
        };
        Evaluator2.prototype.getFeatureGateList = function() {
          var gates = this.store.getAllGates();
          var list = [];
          for (var gateName in gates) {
            var gate = gates[gateName];
            if (gate.entity === "feature_gate") {
              list.push(gateName);
            }
          }
          return list;
        };
        Evaluator2.prototype.lookupGateOverride = function(user, gateName) {
          var overrides = this.gateOverrides[gateName];
          if (overrides == null) {
            return null;
          }
          if (user.userID != null) {
            var userOverride = overrides[user.userID];
            if (userOverride != null) {
              return new ConfigEvaluation_1["default"](userOverride, "override");
            }
          }
          var allOverride = overrides[""];
          if (allOverride != null) {
            return new ConfigEvaluation_1["default"](allOverride, "override");
          }
          return null;
        };
        Evaluator2.prototype.lookupConfigOverride = function(user, configName) {
          var overrides = this.configOverrides[configName];
          return this.lookupConfigBasedOverride(user, overrides);
        };
        Evaluator2.prototype.lookupLayerOverride = function(user, layerName) {
          var overrides = this.layerOverrides[layerName];
          return this.lookupConfigBasedOverride(user, overrides);
        };
        Evaluator2.prototype.lookupConfigBasedOverride = function(user, overrides) {
          if (overrides == null) {
            return null;
          }
          if (user.userID != null) {
            var userOverride = overrides[user.userID];
            if (userOverride != null) {
              return new ConfigEvaluation_1["default"](true, "override", "local_override", [], userOverride);
            }
          }
          var allOverride = overrides[""];
          if (allOverride != null) {
            return new ConfigEvaluation_1["default"](true, "override", "local_override", [], allOverride);
          }
          return null;
        };
        Evaluator2.prototype._specToInitializeResponse = function(spec, res) {
          var output = {
            name: getHashedName(spec.name),
            value: res.fetch_from_server ? {} : res.json_value,
            group: res.rule_id,
            rule_id: res.rule_id,
            is_device_based: spec.idType != null && spec.idType.toLowerCase() === "stableid",
            secondary_exposures: this._cleanExposures(res.secondary_exposures)
          };
          if (res.explicit_parameters) {
            output.explicit_parameters = res.explicit_parameters;
          }
          return output;
        };
        Evaluator2.prototype._cleanExposures = function(exposures) {
          var seen = {};
          return exposures.map(function(exposure) {
            var key = "".concat(exposure.gate, "|").concat(exposure.gateValue, "|").concat(exposure.ruleID);
            if (seen[key]) {
              return null;
            }
            seen[key] = true;
            return exposure;
          }).filter(core_1.notEmpty);
        };
        Evaluator2.prototype.shutdown = function() {
          this.store.shutdown();
        };
        Evaluator2.prototype._evalConfig = function(user, config) {
          if (!config) {
            return new ConfigEvaluation_1["default"](false, "", "code_default").withEvaluationDetails(EvaluationDetails_1.EvaluationDetails.make(this.store.getLastUpdateTime(), this.store.getInitialUpdateTime(), "Unrecognized"));
          }
          var evaulation = this._eval(user, config);
          return evaulation.withEvaluationDetails(EvaluationDetails_1.EvaluationDetails.make(this.store.getLastUpdateTime(), this.store.getInitialUpdateTime(), this.store.getInitReason()));
        };
        Evaluator2.prototype._eval = function(user, config) {
          if (!config.enabled) {
            return new ConfigEvaluation_1["default"](false, "disabled", "disabled", [], config.defaultValue);
          }
          var secondary_exposures = [];
          for (var i = 0; i < config.rules.length; i++) {
            var rule = config.rules[i];
            var ruleResult = this._evalRule(user, rule);
            if (ruleResult.fetch_from_server) {
              return ConfigEvaluation_1["default"].fetchFromServer();
            }
            secondary_exposures = secondary_exposures.concat(ruleResult.secondary_exposures);
            if (ruleResult.value === true) {
              var delegatedResult = this._evalDelegate(user, rule, secondary_exposures);
              if (delegatedResult) {
                return delegatedResult;
              }
              var pass = this._evalPassPercent(user, rule, config);
              var evaluation = new ConfigEvaluation_1["default"](pass, ruleResult.rule_id, ruleResult.group_name, secondary_exposures, pass ? ruleResult.json_value : config.defaultValue, config.explicitParameters, ruleResult.config_delegate);
              evaluation.setIsExperimentGroup(ruleResult.is_experiment_group);
              return evaluation;
            }
          }
          return new ConfigEvaluation_1["default"](false, "default", "default", secondary_exposures, config.defaultValue, config.explicitParameters);
        };
        Evaluator2.prototype._evalDelegate = function(user, rule, exposures) {
          if (rule.configDelegate == null) {
            return null;
          }
          var config = this.store.getConfig(rule.configDelegate);
          if (!config) {
            return null;
          }
          var delegatedResult = this._eval(user, config);
          delegatedResult.config_delegate = rule.configDelegate;
          delegatedResult.undelegated_secondary_exposures = exposures;
          delegatedResult.explicit_parameters = config.explicitParameters;
          delegatedResult.secondary_exposures = exposures.concat(delegatedResult.secondary_exposures);
          return delegatedResult;
        };
        Evaluator2.prototype._evalPassPercent = function(user, rule, config) {
          var _a, _b;
          var hash = computeUserHash(config.salt + "." + ((_a = rule.salt) !== null && _a !== void 0 ? _a : rule.id) + "." + ((_b = this._getUnitID(user, rule.idType)) !== null && _b !== void 0 ? _b : ""));
          return Number(hash % BigInt(CONDITION_SEGMENT_COUNT)) < rule.passPercentage * 100;
        };
        Evaluator2.prototype._getUnitID = function(user, idType) {
          var _a;
          if (typeof idType === "string" && idType.toLowerCase() !== "userid") {
            var unitID = (_a = user === null || user === void 0 ? void 0 : user.customIDs) === null || _a === void 0 ? void 0 : _a[idType];
            if (unitID !== void 0) {
              return unitID;
            }
            return getParameterCaseInsensitive(user === null || user === void 0 ? void 0 : user.customIDs, idType);
          }
          return user === null || user === void 0 ? void 0 : user.userID;
        };
        Evaluator2.prototype._evalRule = function(user, rule) {
          var _a;
          var secondaryExposures = [];
          var pass = true;
          for (var _i = 0, _b = rule.conditions; _i < _b.length; _i++) {
            var condition = _b[_i];
            var result = this._evalCondition(user, condition);
            if (result.fetchFromServer) {
              return ConfigEvaluation_1["default"].fetchFromServer();
            }
            if (!result.passes) {
              pass = false;
            }
            if (result.exposures) {
              secondaryExposures = secondaryExposures.concat(result.exposures);
            }
          }
          var evaluation = new ConfigEvaluation_1["default"](pass, rule.id, rule.groupName, secondaryExposures, rule.returnValue);
          evaluation.setIsExperimentGroup((_a = rule.isExperimentGroup) !== null && _a !== void 0 ? _a : false);
          return evaluation;
        };
        Evaluator2.prototype._evalCondition = function(user, condition) {
          var _a, _b, _c, _d, _e, _f, _g, _h;
          var value = null;
          var field = condition.field;
          var target = condition.targetValue;
          var idType = condition.idType;
          switch (condition.type.toLowerCase()) {
            case "public":
              return { passes: true };
            case "fail_gate":
            case "pass_gate":
              var gateResult = this.checkGate(user, target);
              if (gateResult === null || gateResult === void 0 ? void 0 : gateResult.fetch_from_server) {
                return { passes: false, fetchFromServer: true };
              }
              value = gateResult === null || gateResult === void 0 ? void 0 : gateResult.value;
              var allExposures = (_a = gateResult === null || gateResult === void 0 ? void 0 : gateResult.secondary_exposures) !== null && _a !== void 0 ? _a : [];
              allExposures.push({
                gate: String(target),
                gateValue: String(value),
                ruleID: (_b = gateResult === null || gateResult === void 0 ? void 0 : gateResult.rule_id) !== null && _b !== void 0 ? _b : ""
              });
              return {
                passes: condition.type.toLowerCase() === "fail_gate" ? !value : !!value,
                exposures: allExposures
              };
            case "ip_based":
              value = (_c = getFromUser(user, field)) !== null && _c !== void 0 ? _c : this.getFromIP(user, field);
              break;
            case "ua_based":
              value = (_d = getFromUser(user, field)) !== null && _d !== void 0 ? _d : getFromUserAgent(user, field);
              break;
            case "user_field":
              value = getFromUser(user, field);
              break;
            case "environment_field":
              value = getFromEnvironment(user, field);
              break;
            case "current_time":
              value = Date.now();
              break;
            case "user_bucket":
              var salt = (_e = condition.additionalValues) === null || _e === void 0 ? void 0 : _e.salt;
              var userHash = computeUserHash((_f = salt + "." + this._getUnitID(user, idType)) !== null && _f !== void 0 ? _f : "");
              value = Number(userHash % BigInt(USER_BUCKET_COUNT));
              break;
            case "unit_id":
              value = this._getUnitID(user, idType);
              break;
            default:
              return { passes: false, fetchFromServer: true };
          }
          var op = (_g = condition.operator) === null || _g === void 0 ? void 0 : _g.toLowerCase();
          var evalResult = false;
          switch (op) {
            case "gt":
              evalResult = numberCompare(function(a, b) {
                return a > b;
              })(value, target);
              break;
            case "gte":
              evalResult = numberCompare(function(a, b) {
                return a >= b;
              })(value, target);
              break;
            case "lt":
              evalResult = numberCompare(function(a, b) {
                return a < b;
              })(value, target);
              break;
            case "lte":
              evalResult = numberCompare(function(a, b) {
                return a <= b;
              })(value, target);
              break;
            case "version_gt":
              evalResult = versionCompareHelper(function(result) {
                return result > 0;
              })(value, target);
              break;
            case "version_gte":
              evalResult = versionCompareHelper(function(result) {
                return result >= 0;
              })(value, target);
              break;
            case "version_lt":
              evalResult = versionCompareHelper(function(result) {
                return result < 0;
              })(value, target);
              break;
            case "version_lte":
              evalResult = versionCompareHelper(function(result) {
                return result <= 0;
              })(value, target);
              break;
            case "version_eq":
              evalResult = versionCompareHelper(function(result) {
                return result === 0;
              })(value, target);
              break;
            case "version_neq":
              evalResult = versionCompareHelper(function(result) {
                return result !== 0;
              })(value, target);
              break;
            case "any":
              evalResult = arrayAny(value, target, stringCompare(true, function(a, b) {
                return a === b;
              }));
              break;
            case "none":
              evalResult = !arrayAny(value, target, stringCompare(true, function(a, b) {
                return a === b;
              }));
              break;
            case "any_case_sensitive":
              evalResult = arrayAny(value, target, stringCompare(false, function(a, b) {
                return a === b;
              }));
              break;
            case "none_case_sensitive":
              evalResult = !arrayAny(value, target, stringCompare(false, function(a, b) {
                return a === b;
              }));
              break;
            case "str_starts_with_any":
              evalResult = arrayAny(value, target, stringCompare(true, function(a, b) {
                return a.startsWith(b);
              }));
              break;
            case "str_ends_with_any":
              evalResult = arrayAny(value, target, stringCompare(true, function(a, b) {
                return a.endsWith(b);
              }));
              break;
            case "str_contains_any":
              evalResult = arrayAny(value, target, stringCompare(true, function(a, b) {
                return a.includes(b);
              }));
              break;
            case "str_contains_none":
              evalResult = !arrayAny(value, target, stringCompare(true, function(a, b) {
                return a.includes(b);
              }));
              break;
            case "str_matches":
              try {
                if (String(value).length < 1e3) {
                  evalResult = new RegExp(target).test(String(value));
                } else {
                  evalResult = false;
                }
              } catch (e) {
                evalResult = false;
              }
              break;
            case "eq":
              evalResult = value == target;
              break;
            case "neq":
              evalResult = value != target;
              break;
            case "before":
              evalResult = dateCompare(function(a, b) {
                return a < b;
              })(value, target);
              break;
            case "after":
              evalResult = dateCompare(function(a, b) {
                return a > b;
              })(value, target);
              break;
            case "on":
              evalResult = dateCompare(function(a, b) {
                a === null || a === void 0 ? void 0 : a.setHours(0, 0, 0, 0);
                b === null || b === void 0 ? void 0 : b.setHours(0, 0, 0, 0);
                return (a === null || a === void 0 ? void 0 : a.getTime()) === (b === null || b === void 0 ? void 0 : b.getTime());
              })(value, target);
              break;
            case "in_segment_list":
            case "not_in_segment_list": {
              var list = (_h = this.store.getIDList(target)) === null || _h === void 0 ? void 0 : _h.ids;
              value = hashUnitIDForIDList(value);
              var inList = typeof list === "object" && list[value] === true;
              evalResult = op === "in_segment_list" ? inList : !inList;
              break;
            }
            default:
              return { passes: false, fetchFromServer: true };
          }
          return { passes: evalResult };
        };
        Evaluator2.prototype._isExperimentActive = function(experimentConfig) {
          if (experimentConfig == null) {
            return false;
          }
          return experimentConfig.isActive === true;
        };
        Evaluator2.prototype._isUserAllocatedToExperiment = function(user, experimentConfig) {
          if (experimentConfig == null) {
            return false;
          }
          var evalResult = this._eval(user, experimentConfig);
          return evalResult.is_experiment_group;
        };
        Evaluator2.prototype.getFromIP = function(user, field) {
          var ip = getFromUser(user, "ip");
          if (ip == null || field !== "country") {
            return null;
          }
          return this.ip2country(ip);
        };
        Evaluator2.prototype.ip2country = function(ip) {
          if (!this.initialized) {
            return null;
          }
          try {
            if (typeof ip === "string") {
              return ip3country.lookupStr(ip);
            } else if (typeof ip === "number") {
              return ip3country.lookupNumeric(ip);
            }
          } catch (e) {
          }
          return null;
        };
        return Evaluator2;
      }()
    );
    exports["default"] = Evaluator;
    function computeUserHash(userHash) {
      var md = node_forge_1["default"].md.sha256.create();
      md.update(userHash);
      return BigInt("0x".concat(md.digest().toHex().substring(0, 16)));
    }
    function getHashedName(name) {
      var md = node_forge_1["default"].md.sha256.create();
      md.update(name);
      return node_forge_1["default"].util.encode64(md.digest().getBytes());
    }
    function hashUnitIDForIDList(unitID) {
      if (typeof unitID !== "string" || unitID == null) {
        return "";
      }
      return getHashedName(unitID).substr(0, 8);
    }
    function getFromUser(user, field) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;
      if (typeof user !== "object") {
        return null;
      }
      var indexableUser = user;
      return (_h = (_f = (_d = (_b = (_a = indexableUser[field]) !== null && _a !== void 0 ? _a : indexableUser[field.toLowerCase()]) !== null && _b !== void 0 ? _b : (_c = user === null || user === void 0 ? void 0 : user.custom) === null || _c === void 0 ? void 0 : _c[field]) !== null && _d !== void 0 ? _d : (_e = user === null || user === void 0 ? void 0 : user.custom) === null || _e === void 0 ? void 0 : _e[field.toLowerCase()]) !== null && _f !== void 0 ? _f : (_g = user === null || user === void 0 ? void 0 : user.privateAttributes) === null || _g === void 0 ? void 0 : _g[field]) !== null && _h !== void 0 ? _h : (_j = user === null || user === void 0 ? void 0 : user.privateAttributes) === null || _j === void 0 ? void 0 : _j[field.toLowerCase()];
    }
    function getFromUserAgent(user, field) {
      var _a, _b, _c, _d;
      var ua = getFromUser(user, "userAgent");
      if (ua == null) {
        return null;
      }
      if (typeof ua !== "string" || ua.length > 1e3) {
        return null;
      }
      var res = (0, parseUserAgent_1["default"])(ua);
      switch (field.toLowerCase()) {
        case "os_name":
        case "osname":
          return (_a = res.os.name) !== null && _a !== void 0 ? _a : null;
        case "os_version":
        case "osversion":
          return (_b = res.os.version) !== null && _b !== void 0 ? _b : null;
        case "browser_name":
        case "browsername":
          return (_c = res.browser.name) !== null && _c !== void 0 ? _c : null;
        case "browser_version":
        case "browserversion":
          return (_d = res.browser.version) !== null && _d !== void 0 ? _d : null;
        default:
          return null;
      }
    }
    function getFromEnvironment(user, field) {
      return getParameterCaseInsensitive(user === null || user === void 0 ? void 0 : user.statsigEnvironment, field);
    }
    function getParameterCaseInsensitive(object, key) {
      if (object == null) {
        return void 0;
      }
      var asLowercase = key.toLowerCase();
      var keyMatch = Object.keys(object).find(function(k) {
        return k.toLowerCase() === asLowercase;
      });
      if (keyMatch === void 0) {
        return void 0;
      }
      return object[keyMatch];
    }
    function numberCompare(fn) {
      return function(a, b) {
        if (a == null || b == null) {
          return false;
        }
        var numA = Number(a);
        var numB = Number(b);
        if (isNaN(numA) || isNaN(numB)) {
          return false;
        }
        return fn(numA, numB);
      };
    }
    function versionCompareHelper(fn) {
      return function(a, b) {
        var comparison = versionCompare(a, b);
        if (comparison == null) {
          return false;
        }
        return fn(comparison);
      };
    }
    function versionCompare(first, second) {
      if (typeof first !== "string" || typeof second !== "string") {
        return null;
      }
      var version1 = removeVersionExtension(first);
      var version2 = removeVersionExtension(second);
      if (version1.length === 0 || version2.length === 0) {
        return null;
      }
      var parts1 = version1.split(".");
      var parts2 = version2.split(".");
      for (var i = 0; i < Math.max(parts1.length, parts2.length); i++) {
        if (parts1[i] === void 0) {
          parts1[i] = "0";
        }
        if (parts2[i] === void 0) {
          parts2[i] = "0";
        }
        var n1 = Number(parts1[i]);
        var n2 = Number(parts2[i]);
        if (typeof n1 !== "number" || typeof n2 !== "number" || isNaN(n1) || isNaN(n2)) {
          return null;
        }
        if (n1 < n2) {
          return -1;
        } else if (n1 > n2) {
          return 1;
        }
      }
      return 0;
    }
    function removeVersionExtension(version2) {
      var hyphenIndex = version2.indexOf("-");
      if (hyphenIndex >= 0) {
        return version2.substr(0, hyphenIndex);
      }
      return version2;
    }
    function stringCompare(ignoreCase, fn) {
      return function(a, b) {
        if (a == null || b == null) {
          return false;
        }
        return ignoreCase ? fn(String(a).toLowerCase(), String(b).toLowerCase()) : fn(String(a), String(b));
      };
    }
    function dateCompare(fn) {
      return function(a, b) {
        if (a == null || b == null) {
          return false;
        }
        try {
          var dateA = new Date(a);
          if (isNaN(dateA.getTime())) {
            dateA = new Date(Number(a));
          }
          var dateB = new Date(b);
          if (isNaN(dateB.getTime())) {
            dateB = new Date(Number(b));
          }
          return !isNaN(dateA.getTime()) && !isNaN(dateB.getTime()) && fn(dateA, dateB);
        } catch (e) {
          return false;
        }
      };
    }
    function arrayAny(value, array, fn) {
      if (!Array.isArray(array)) {
        return false;
      }
      for (var i = 0; i < array.length; i++) {
        if (fn(value, array[i])) {
          return true;
        }
      }
      return false;
    }
  }
});

// node_modules/statsig-node/dist/LogEvent.js
var require_LogEvent = __commonJS({
  "node_modules/statsig-node/dist/LogEvent.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var core_1 = require_core();
    var LogEvent = (
      /** @class */
      function() {
        function LogEvent2(eventName) {
          this.user = null;
          this.value = null;
          this.metadata = null;
          this.secondaryExposures = [];
          if (eventName == null || typeof eventName !== "string") {
            console.error("statsigSDK> EventName needs to be a string.");
            eventName = "invalid_event";
          }
          this.time = Date.now();
          this.eventName = eventName;
        }
        LogEvent2.prototype.setUser = function(user) {
          if (user != null && typeof user !== "object") {
            console.warn("statsigSDK> User is not set because it needs to be an object.");
            return;
          }
          this.user = (0, core_1.clone)(user);
          if (this.user != null) {
            this.user.privateAttributes = null;
          }
        };
        LogEvent2.prototype.setValue = function(value) {
          if (value == null) {
            return;
          }
          if (typeof value === "object") {
            this.value = JSON.stringify(value);
          } else if (typeof value === "number") {
            this.value = value;
          } else {
            this.value = value.toString();
          }
        };
        LogEvent2.prototype.setMetadata = function(metadata) {
          if (metadata == null) {
            return;
          }
          if (metadata != null && typeof metadata !== "object") {
            console.warn("statsigSDK> Metadata is not set because it needs to be an object.");
            return;
          }
          this.metadata = (0, core_1.clone)(metadata);
        };
        LogEvent2.prototype.setTime = function(time) {
          if (time != null && typeof time !== "number") {
            console.warn("statsigSDK>Timestamp is not set because it needs to be a number.");
            return;
          }
          this.time = time;
        };
        LogEvent2.prototype.setSecondaryExposures = function(exposures) {
          this.secondaryExposures = Array.isArray(exposures) ? exposures : [];
        };
        LogEvent2.prototype.validate = function() {
          return typeof this.eventName === "string" && this.eventName.length > 0;
        };
        LogEvent2.prototype.toObject = function() {
          return {
            eventName: this.eventName,
            metadata: this.metadata,
            time: this.time,
            user: this.user,
            value: this.value,
            secondaryExposures: this.secondaryExposures
          };
        };
        return LogEvent2;
      }()
    );
    exports["default"] = LogEvent;
  }
});

// node_modules/statsig-node/dist/LogEventProcessor.js
var require_LogEventProcessor = __commonJS({
  "node_modules/statsig-node/dist/LogEventProcessor.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    exports.__esModule = true;
    var _a = require_core();
    var getStatsigMetadata = _a.getStatsigMetadata;
    var poll = _a.poll;
    var Errors_1 = require_Errors();
    var LogEvent_1 = __importDefault(require_LogEvent());
    var CONFIG_EXPOSURE_EVENT = "config_exposure";
    var LAYER_EXPOSURE_EVENT = "layer_exposure";
    var GATE_EXPOSURE_EVENT = "gate_exposure";
    var DIAGNOSTIC_EVENT = "diagnostics";
    var INTERNAL_EVENT_PREFIX = "statsig::";
    var DEFAULT_VALUE_WARNING = "default_value_type_mismatch";
    var deduperInterval = 60 * 1e3;
    var ignoredMetadataKeys = /* @__PURE__ */ new Set([
      "serverTime",
      "configSyncTime",
      "initTime",
      "reason"
    ]);
    var LogEventProcessor = (
      /** @class */
      function() {
        function LogEventProcessor2(fetcher, options) {
          this.options = options;
          this.fetcher = fetcher;
          this.queue = [];
          this.deduper = /* @__PURE__ */ new Set();
          this.loggedErrors = /* @__PURE__ */ new Set();
          var processor = this;
          this.flushTimer = poll(function() {
            processor.flush();
          }, options.loggingIntervalMs);
          this.deduperTimer = poll(function() {
            processor.deduper.clear();
          }, deduperInterval);
        }
        LogEventProcessor2.prototype.log = function(event, errorKey) {
          if (errorKey === void 0) {
            errorKey = null;
          }
          if (this.options.localMode) {
            return;
          }
          if (!(event instanceof LogEvent_1["default"])) {
            return;
          }
          if (!event.validate()) {
            return;
          }
          if (errorKey != null) {
            if (this.loggedErrors.has(errorKey)) {
              return;
            }
            this.loggedErrors.add(errorKey);
          }
          this.queue.push(event);
          if (this.queue.length >= this.options.loggingMaxBufferSize) {
            this.flush();
          }
        };
        LogEventProcessor2.prototype.flush = function(fireAndForget) {
          if (fireAndForget === void 0) {
            fireAndForget = false;
          }
          return __awaiter(this, void 0, void 0, function() {
            var oldQueue, body;
            var _this = this;
            return __generator(this, function(_a2) {
              if (this.queue.length === 0) {
                return [2, Promise.resolve()];
              }
              oldQueue = this.queue;
              this.queue = [];
              body = {
                statsigMetadata: getStatsigMetadata(),
                events: oldQueue
              };
              return [2, this.fetcher.post(this.options.api + "/log_event", body, fireAndForget ? 0 : 5, 1e4).then(function() {
                return Promise.resolve();
              })["catch"](function(e) {
                if (!fireAndForget && !(e instanceof Errors_1.StatsigLocalModeNetworkError)) {
                  _this.logStatsigInternal(null, "log_event_failed", {
                    error: (e === null || e === void 0 ? void 0 : e.message) || "log_event_failed"
                  });
                }
                return Promise.resolve();
              })];
            });
          });
        };
        LogEventProcessor2.prototype.shutdown = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              if (this.flushTimer != null) {
                clearTimeout(this.flushTimer);
                this.flushTimer = null;
              }
              if (this.deduperTimer != null) {
                clearTimeout(this.deduperTimer);
                this.deduperTimer = null;
              }
              return [2, this.flush(true)];
            });
          });
        };
        LogEventProcessor2.prototype.logStatsigInternal = function(user, eventName, metadata, secondaryExposures, value) {
          if (secondaryExposures === void 0) {
            secondaryExposures = null;
          }
          if (value === void 0) {
            value = null;
          }
          if (!this.isUniqueExposure(user, eventName, metadata)) {
            return;
          }
          var event = new LogEvent_1["default"](INTERNAL_EVENT_PREFIX + eventName);
          if (user != null) {
            event.setUser(user);
          }
          if (metadata != null) {
            event.setMetadata(metadata);
          }
          if (secondaryExposures != null) {
            event.setSecondaryExposures(secondaryExposures);
          }
          if (value != null) {
            event.setValue(value);
          }
          if ((metadata === null || metadata === void 0 ? void 0 : metadata.error) != null) {
            this.log(event, eventName + metadata.error);
          } else {
            this.log(event);
          }
        };
        LogEventProcessor2.prototype.logGateExposure = function(user, gateName, evaluation, isManualExposure) {
          var metadata = {
            gate: gateName,
            gateValue: String(evaluation.value),
            ruleID: evaluation.rule_id
          };
          this.maybeAddManualExposureFlagToMetadata(metadata, isManualExposure);
          this.safeAddEvaulationDetailsToEvent(metadata, evaluation.evaluation_details);
          this.logStatsigInternal(user, GATE_EXPOSURE_EVENT, metadata, evaluation.secondary_exposures);
        };
        LogEventProcessor2.prototype.logConfigExposure = function(user, configName, evaluation, isManualExposure) {
          var metadata = {
            config: configName,
            ruleID: evaluation.rule_id
          };
          this.maybeAddManualExposureFlagToMetadata(metadata, isManualExposure);
          this.safeAddEvaulationDetailsToEvent(metadata, evaluation.evaluation_details);
          this.logStatsigInternal(user, CONFIG_EXPOSURE_EVENT, metadata, evaluation.secondary_exposures);
        };
        LogEventProcessor2.prototype.logLayerExposure = function(user, layerName, parameterName, evaluation, isManualExposure) {
          var _a2, _b, _c;
          var allocatedExperiment = "";
          var exposures = evaluation.undelegated_secondary_exposures;
          var isExplicit = (_b = (_a2 = evaluation.explicit_parameters) === null || _a2 === void 0 ? void 0 : _a2.includes(parameterName)) !== null && _b !== void 0 ? _b : false;
          if (isExplicit) {
            allocatedExperiment = (_c = evaluation.config_delegate) !== null && _c !== void 0 ? _c : "";
            exposures = evaluation.secondary_exposures;
          }
          var metadata = {
            config: layerName,
            ruleID: evaluation.rule_id,
            allocatedExperiment,
            parameterName,
            isExplicitParameter: String(isExplicit)
          };
          this.maybeAddManualExposureFlagToMetadata(metadata, isManualExposure);
          this.safeAddEvaulationDetailsToEvent(metadata, evaluation.evaluation_details);
          this.logStatsigInternal(user, LAYER_EXPOSURE_EVENT, metadata, exposures);
        };
        LogEventProcessor2.prototype.logConfigDefaultValueFallback = function(user, message, metadata) {
          this.logStatsigInternal(user, DEFAULT_VALUE_WARNING, metadata, null, message);
        };
        LogEventProcessor2.prototype.maybeAddManualExposureFlagToMetadata = function(metadata, isManualExposure) {
          if (!isManualExposure) {
            return;
          }
          metadata["isManualExposure"] = "true";
        };
        LogEventProcessor2.prototype.safeAddEvaulationDetailsToEvent = function(metadata, evaluationDetails) {
          if (!evaluationDetails) {
            return;
          }
          metadata["reason"] = evaluationDetails.reason;
          metadata["configSyncTime"] = evaluationDetails.configSyncTime;
          metadata["initTime"] = evaluationDetails.initTime;
          metadata["serverTime"] = evaluationDetails.serverTime;
        };
        LogEventProcessor2.prototype.isUniqueExposure = function(user, eventName, metadata) {
          if (user == null) {
            return true;
          }
          var customIdKey = "";
          if (user.customIDs && typeof user.customIDs === "object") {
            customIdKey = Object.values(user.customIDs).join();
          }
          var metadataKey = "";
          if (metadata && typeof metadata === "object") {
            metadataKey = Object.entries(metadata).filter(function(_a2) {
              var key2 = _a2[0], _value = _a2[1];
              return !ignoredMetadataKeys.has(key2);
            }).map(function(_a2) {
              var _key = _a2[0], value = _a2[1];
              return value;
            }).join();
          }
          var keyList = [user.userID, customIdKey, eventName, metadataKey];
          var key = keyList.join();
          if (this.deduper.has(key)) {
            return false;
          }
          this.deduper.add(key);
          if (this.deduper.size > 1e5) {
            this.deduper.clear();
          }
          return true;
        };
        LogEventProcessor2.prototype.logDiagnosticsEvent = function(diagnostics, user) {
          if (user === void 0) {
            user = null;
          }
          this.logStatsigInternal(user, DIAGNOSTIC_EVENT, diagnostics.serialize());
        };
        return LogEventProcessor2;
      }()
    );
    exports["default"] = LogEventProcessor;
  }
});

// node_modules/statsig-node/dist/StatsigOptions.js
var require_StatsigOptions = __commonJS({
  "node_modules/statsig-node/dist/StatsigOptions.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.OptionsWithDefaults = void 0;
    var DEFAULT_API = "https://statsigapi.net/v1";
    var DEFAULT_RULESETS_SYNC_INTERVAL = 10 * 1e3;
    var MIN_RULESETS_SYNC_INTERVAL = 5 * 1e3;
    var DEFAULT_ID_LISTS_SYNC_INTERVAL = 60 * 1e3;
    var MIN_ID_LISTS_SYNC_INTERVAL = 30 * 1e3;
    var DEFAULT_LOGGING_INTERVAL = 60 * 1e3;
    var DEFAULT_MAX_LOGGING_BUFFER_SIZE = 1e3;
    var DEFAULT_LOG_DIAGNOSTICS = false;
    function OptionsWithDefaults(opts) {
      var _a, _b;
      return {
        api: (_a = getString(opts, "api", DEFAULT_API)) !== null && _a !== void 0 ? _a : DEFAULT_API,
        bootstrapValues: getString(opts, "bootstrapValues", null),
        environment: opts.environment ? getObject(opts, "environment", {}) : null,
        rulesUpdatedCallback: opts.rulesUpdatedCallback ? getFunction(opts, "rulesUpdatedCallback") : null,
        localMode: getBoolean(opts, "localMode", false),
        initTimeoutMs: getNumber(opts, "initTimeoutMs", 0),
        dataAdapter: (_b = opts.dataAdapter) !== null && _b !== void 0 ? _b : null,
        rulesetsSyncIntervalMs: Math.max(getNumber(opts, "rulesetsSyncIntervalMs", DEFAULT_RULESETS_SYNC_INTERVAL), MIN_RULESETS_SYNC_INTERVAL),
        idListsSyncIntervalMs: Math.max(getNumber(opts, "idListsSyncIntervalMs", DEFAULT_ID_LISTS_SYNC_INTERVAL), MIN_ID_LISTS_SYNC_INTERVAL),
        loggingIntervalMs: getNumber(opts, "loggingIntervalMs", DEFAULT_LOGGING_INTERVAL),
        loggingMaxBufferSize: Math.min(getNumber(opts, "loggingMaxBufferSize", DEFAULT_MAX_LOGGING_BUFFER_SIZE), DEFAULT_MAX_LOGGING_BUFFER_SIZE),
        diableDiagnostics: getBoolean(opts, "diableDiagnostics", DEFAULT_LOG_DIAGNOSTICS)
      };
    }
    exports.OptionsWithDefaults = OptionsWithDefaults;
    function getBoolean(inputOptions, index, defaultValue) {
      var b = inputOptions[index];
      if (b == null || typeof b !== "boolean") {
        return defaultValue;
      }
      return b;
    }
    function getString(inputOptions, index, defaultValue) {
      var str = inputOptions[index];
      if (str == null || typeof str !== "string") {
        return defaultValue;
      }
      return str;
    }
    function getObject(inputOptions, index, defaultValue) {
      var obj = inputOptions[index];
      if (obj == null || typeof obj !== "object") {
        return defaultValue;
      }
      return obj;
    }
    function getFunction(inputOptions, index) {
      var func = inputOptions[index];
      if (func == null || typeof func !== "function") {
        return null;
      }
      return func;
    }
    function getNumber(inputOptions, index, defaultValue) {
      var obj = inputOptions[index];
      if (obj == null || typeof obj !== "number") {
        return defaultValue;
      }
      return obj;
    }
  }
});

// node_modules/statsig-node/dist/utils/Dispatcher.js
var require_Dispatcher = __commonJS({
  "node_modules/statsig-node/dist/utils/Dispatcher.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var Dispatcher = (
      /** @class */
      function() {
        function Dispatcher2(drainIntervalms) {
          if (drainIntervalms === void 0) {
            drainIntervalms = 200;
          }
          this.queue = [];
          this.drainInterval = drainIntervalms;
          this.drainTimer = this._scheduleDrain();
        }
        Dispatcher2.prototype.enqueue = function(promise, timeoutms) {
          var entry = {
            expiry: Date.now() + timeoutms,
            promise,
            taskCompleted: false,
            resolver: null,
            rejector: null
          };
          var dispatcherPromise = new Promise(function(res, rej) {
            entry.resolver = res;
            entry.rejector = rej;
          });
          this.queue.push(entry);
          var markCompleted = function(e) {
            e.taskCompleted = true;
          }.bind(this);
          promise.then(function(result) {
            markCompleted(entry);
            if (entry.resolver != null) {
              entry.resolver(result);
            }
            return result;
          }, function(err) {
            markCompleted(entry);
            if (entry.rejector != null) {
              entry.rejector();
            }
            return err;
          });
          return dispatcherPromise;
        };
        Dispatcher2.prototype._scheduleDrain = function() {
          var drain = setTimeout(this._drainQueue.bind(this), this.drainInterval);
          if (drain.unref) {
            drain.unref();
          }
          return drain;
        };
        Dispatcher2.prototype._drainQueue = function() {
          var _this = this;
          var oldQueue = this.queue;
          this.queue = [];
          var now = Date.now();
          oldQueue.forEach(function(entry) {
            if (!entry.taskCompleted) {
              if (entry.expiry > now) {
                _this.queue.push(entry);
              } else {
                if (entry.rejector != null) {
                  entry.rejector("time_out");
                }
              }
            }
          }, this);
          this.drainTimer = this._scheduleDrain();
        };
        Dispatcher2.prototype.shutdown = function() {
          if (this.drainTimer != null) {
            clearTimeout(this.drainTimer);
          }
        };
        return Dispatcher2;
      }()
    );
    exports["default"] = Dispatcher;
  }
});

// node_modules/statsig-node/dist/utils/StatsigFetcher.js
var require_StatsigFetcher = __commonJS({
  "node_modules/statsig-node/dist/utils/StatsigFetcher.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    exports.__esModule = true;
    var Errors_1 = require_Errors();
    var core_1 = require_core();
    var Dispatcher_1 = __importDefault(require_Dispatcher());
    var safeFetch_1 = __importDefault(require_safeFetch());
    var uuidv4 = (init_esm_node(), __toCommonJS(esm_node_exports)).v4;
    var retryStatusCodes = [408, 500, 502, 503, 504, 522, 524, 599];
    var StatsigFetcher = (
      /** @class */
      function() {
        function StatsigFetcher2(secretKey, options) {
          this.sessionID = uuidv4();
          this.leakyBucket = {};
          this.pendingTimers = [];
          this.dispatcher = new Dispatcher_1["default"](200);
          this.localMode = options.localMode;
          this.sdkKey = secretKey;
        }
        StatsigFetcher2.prototype.dispatch = function(url, body, timeout) {
          return this.dispatcher.enqueue(this.post(url, body), timeout);
        };
        StatsigFetcher2.prototype.post = function(url, body, retries, backoff) {
          var _this = this;
          if (retries === void 0) {
            retries = 0;
          }
          if (backoff === void 0) {
            backoff = 1e3;
          }
          if (this.localMode) {
            return Promise.reject(new Errors_1.StatsigLocalModeNetworkError());
          }
          var counter = this.leakyBucket[url];
          if (counter != null && counter >= 1e3) {
            return Promise.reject(new Errors_1.StatsigTooManyRequestsError("Request failed because you are making the same request too frequently."));
          }
          if (counter == null) {
            this.leakyBucket[url] = 1;
          } else {
            this.leakyBucket[url] = counter + 1;
          }
          var params = {
            method: "POST",
            body: JSON.stringify(body),
            headers: {
              "Content-type": "application/json; charset=UTF-8",
              "STATSIG-API-KEY": this.sdkKey,
              "STATSIG-CLIENT-TIME": Date.now(),
              "STATSIG-SERVER-SESSION-ID": this.sessionID,
              "STATSIG-SDK-TYPE": (0, core_1.getSDKType)(),
              "STATSIG-SDK-VERSION": (0, core_1.getSDKVersion)()
            }
          };
          return (0, safeFetch_1["default"])(url, params).then(function(res) {
            if ((!res.ok || retryStatusCodes.includes(res.status)) && retries > 0) {
              return _this._retry(url, body, retries, backoff);
            } else if (!res.ok) {
              return Promise.reject(new Error("Request to " + url + " failed with status " + res.status));
            }
            return Promise.resolve(res);
          })["catch"](function(e) {
            if (retries > 0) {
              return _this._retry(url, body, retries, backoff);
            }
            return Promise.reject(e);
          })["finally"](function() {
            _this.leakyBucket[url] = Math.max(_this.leakyBucket[url] - 1, 0);
          });
        };
        StatsigFetcher2.prototype.shutdown = function() {
          if (this.pendingTimers != null) {
            this.pendingTimers.forEach(function(timer) {
              if (timer != null) {
                clearTimeout(timer);
              }
            });
          }
          if (this.dispatcher != null) {
            this.dispatcher.shutdown();
          }
        };
        StatsigFetcher2.prototype._retry = function(url, body, retries, backoff) {
          var _this = this;
          return new Promise(function(resolve, reject) {
            _this.pendingTimers.push(setTimeout(function() {
              _this.leakyBucket[url] = Math.max(_this.leakyBucket[url] - 1, 0);
              _this.post(url, body, retries - 1, backoff * 10).then(resolve)["catch"](reject);
            }, backoff).unref());
          });
        };
        return StatsigFetcher2;
      }()
    );
    exports["default"] = StatsigFetcher;
  }
});

// node_modules/statsig-node/dist/Diagnostics.js
var require_Diagnostics = __commonJS({
  "node_modules/statsig-node/dist/Diagnostics.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var Diagnostics = (
      /** @class */
      function() {
        function Diagnostics2(context, markers) {
          if (markers === void 0) {
            markers = [];
          }
          this.context = context;
          this.markers = markers;
        }
        Diagnostics2.prototype.mark = function(key, action, step, value) {
          var marker = {
            key,
            action,
            step: step !== null && step !== void 0 ? step : null,
            value: value !== null && value !== void 0 ? value : null,
            timestamp: Date.now()
          };
          this.markers.push(marker);
        };
        Diagnostics2.prototype.serialize = function() {
          return {
            context: this.context,
            markers: this.markers
          };
        };
        return Diagnostics2;
      }()
    );
    exports["default"] = Diagnostics;
  }
});

// node_modules/statsig-node/dist/StatsigServer.js
var require_StatsigServer = __commonJS({
  "node_modules/statsig-node/dist/StatsigServer.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    exports.__esModule = true;
    var DynamicConfig_1 = __importDefault(require_DynamicConfig());
    var ErrorBoundary_1 = __importDefault(require_ErrorBoundary());
    var Errors_1 = require_Errors();
    var Evaluator_1 = __importDefault(require_Evaluator());
    var Layer_1 = __importDefault(require_Layer());
    var LogEvent_1 = __importDefault(require_LogEvent());
    var LogEventProcessor_1 = __importDefault(require_LogEventProcessor());
    var StatsigOptions_1 = require_StatsigOptions();
    var core_1 = require_core();
    var StatsigFetcher_1 = __importDefault(require_StatsigFetcher());
    var Diagnostics_1 = __importDefault(require_Diagnostics());
    var MAX_VALUE_SIZE = 64;
    var MAX_OBJ_SIZE = 2048;
    var MAX_USER_SIZE = 2048;
    var hasLoggedNoUserIdWarning = false;
    var ExposureLogging;
    (function(ExposureLogging2) {
      ExposureLogging2["Disabled"] = "exposures_disabled";
      ExposureLogging2["Enabled"] = "exposures_enabled";
    })(ExposureLogging || (ExposureLogging = {}));
    var ExposureCause;
    (function(ExposureCause2) {
      ExposureCause2["Automatic"] = "automatic_exposure";
      ExposureCause2["Manual"] = "manual_exposure";
    })(ExposureCause || (ExposureCause = {}));
    var StatsigServer = (
      /** @class */
      function() {
        function StatsigServer2(secretKey, options) {
          if (options === void 0) {
            options = {};
          }
          this._pendingInitPromise = null;
          this._ready = false;
          this._secretKey = secretKey;
          this._options = (0, StatsigOptions_1.OptionsWithDefaults)(options);
          this._pendingInitPromise = null;
          this._ready = false;
          this._fetcher = new StatsigFetcher_1["default"](this._secretKey, this._options);
          this._init_diagnostics = new Diagnostics_1["default"]("initialize");
          this._evaluator = new Evaluator_1["default"](this._fetcher, this._options, this._init_diagnostics);
          this._logger = new LogEventProcessor_1["default"](this._fetcher, this._options);
          this._errorBoundary = new ErrorBoundary_1["default"](secretKey);
        }
        StatsigServer2.prototype.initializeAsync = function() {
          var _this = this;
          return this._errorBoundary.capture(function() {
            _this._init_diagnostics.mark("overall", "start");
            if (_this._pendingInitPromise != null) {
              return _this._pendingInitPromise;
            }
            if (_this._ready === true) {
              return Promise.resolve();
            }
            if (typeof _this._secretKey !== "string" || _this._secretKey.length === 0 || !_this._secretKey.startsWith("secret-")) {
              return Promise.reject(new Errors_1.StatsigInvalidArgumentError("Invalid key provided.  You must use a Server Secret Key from the Statsig console with the node-js-server-sdk"));
            }
            var initPromise = _this._evaluator.init()["finally"](function() {
              _this._ready = true;
              _this._pendingInitPromise = null;
              _this._init_diagnostics.mark("overall", "end");
              _this.logDiagnostics(_this._init_diagnostics);
            });
            if (_this._options.initTimeoutMs != null && _this._options.initTimeoutMs > 0) {
              _this._pendingInitPromise = Promise.race([
                initPromise,
                new Promise(function(resolve) {
                  setTimeout(function() {
                    _this._ready = true;
                    _this._pendingInitPromise = null;
                    resolve();
                  }, _this._options.initTimeoutMs);
                })
              ]);
            } else {
              _this._pendingInitPromise = initPromise;
            }
            return _this._pendingInitPromise;
          }, function() {
            _this._ready = true;
            _this._pendingInitPromise = null;
            return Promise.resolve();
          });
        };
        StatsigServer2.prototype.logDiagnostics = function(diagnostics) {
          if (this._options.diableDiagnostics) {
            return;
          }
          this._logger.logDiagnosticsEvent(diagnostics);
        };
        StatsigServer2.prototype.checkGate = function(user, gateName) {
          var _this = this;
          return this._errorBoundary.capture(function() {
            return __awaiter(_this, void 0, void 0, function() {
              var gate;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.checkGateImpl(user, gateName, ExposureLogging.Enabled)];
                  case 1:
                    gate = _a.sent();
                    return [2, (gate === null || gate === void 0 ? void 0 : gate.value) === true];
                }
              });
            });
          }, function() {
            return Promise.resolve(false);
          });
        };
        StatsigServer2.prototype.checkGateWithExposureLoggingDisabled = function(user, gateName) {
          var _this = this;
          return this._errorBoundary.capture(function() {
            return __awaiter(_this, void 0, void 0, function() {
              var gate;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.checkGateImpl(user, gateName, ExposureLogging.Disabled)];
                  case 1:
                    gate = _a.sent();
                    return [2, (gate === null || gate === void 0 ? void 0 : gate.value) === true];
                }
              });
            });
          }, function() {
            return Promise.resolve(false);
          });
        };
        StatsigServer2.prototype.logGateExposure = function(user, gateName) {
          var evaluation = this._evaluator.checkGate(user, gateName);
          this.logGateExposureImpl(user, gateName, evaluation, ExposureCause.Manual);
        };
        StatsigServer2.prototype.getConfig = function(user, configName) {
          var _this = this;
          return this._errorBoundary.capture(function() {
            return _this.getConfigImpl(user, configName, ExposureLogging.Enabled);
          }, function() {
            return Promise.resolve(new DynamicConfig_1["default"](configName));
          });
        };
        StatsigServer2.prototype.getConfigWithExposureLoggingDisabled = function(user, configName) {
          var _this = this;
          return this._errorBoundary.capture(function() {
            return _this.getConfigImpl(user, configName, ExposureLogging.Disabled);
          }, function() {
            return Promise.resolve(new DynamicConfig_1["default"](configName));
          });
        };
        StatsigServer2.prototype.logConfigExposure = function(user, configName) {
          var evaluation = this._evaluator.getConfig(user, configName);
          this.logConfigExposureImpl(user, configName, evaluation, ExposureCause.Manual);
        };
        StatsigServer2.prototype.getExperiment = function(user, experimentName) {
          var _this = this;
          return this._errorBoundary.capture(function() {
            return _this.getConfigImpl(user, experimentName, ExposureLogging.Enabled);
          }, function() {
            return Promise.resolve(new DynamicConfig_1["default"](experimentName));
          });
        };
        StatsigServer2.prototype.getExperimentWithExposureLoggingDisabled = function(user, experimentName) {
          var _this = this;
          return this._errorBoundary.capture(function() {
            return _this.getConfigImpl(user, experimentName, ExposureLogging.Disabled);
          }, function() {
            return Promise.resolve(new DynamicConfig_1["default"](experimentName));
          });
        };
        StatsigServer2.prototype.logExperimentExposure = function(user, experimentName) {
          var evaluation = this._evaluator.getConfig(user, experimentName);
          this.logConfigExposureImpl(user, experimentName, evaluation, ExposureCause.Manual);
        };
        StatsigServer2.prototype.getLayer = function(user, layerName) {
          var _this = this;
          return this._errorBoundary.capture(function() {
            return _this.getLayerImpl(user, layerName, ExposureLogging.Enabled);
          }, function() {
            return Promise.resolve(new Layer_1["default"](layerName));
          });
        };
        StatsigServer2.prototype.getLayerWithExposureLoggingDisabled = function(user, layerName) {
          var _this = this;
          return this._errorBoundary.capture(function() {
            return _this.getLayerImpl(user, layerName, ExposureLogging.Disabled);
          }, function() {
            return Promise.resolve(new Layer_1["default"](layerName));
          });
        };
        StatsigServer2.prototype.logLayerParameterExposure = function(user, layerName, parameterName) {
          var evaluation = this._evaluator.getLayer(user, layerName);
          this.logLayerParameterExposureImpl(user, layerName, parameterName, evaluation, ExposureCause.Manual);
        };
        StatsigServer2.prototype.logEvent = function(user, eventName, value, metadata) {
          var _this = this;
          if (value === void 0) {
            value = null;
          }
          if (metadata === void 0) {
            metadata = null;
          }
          return this._errorBoundary.swallow(function() {
            _this.logEventObject({
              eventName,
              user,
              value,
              metadata
            });
          });
        };
        StatsigServer2.prototype.logEventObject = function(eventObject) {
          var _this = this;
          return this._errorBoundary.swallow(function() {
            var _a, _b, _c, _d;
            var eventName = eventObject.eventName;
            var user = (_a = eventObject.user) !== null && _a !== void 0 ? _a : null;
            var value = (_b = eventObject.value) !== null && _b !== void 0 ? _b : null;
            var metadata = (_c = eventObject.metadata) !== null && _c !== void 0 ? _c : null;
            var time = (_d = eventObject.time) !== null && _d !== void 0 ? _d : null;
            if (!(_this._ready === true && _this._logger != null)) {
              throw new Errors_1.StatsigUninitializedError();
            }
            if (typeof eventName !== "string" || eventName.length === 0) {
              console.error("statsigSDK::logEvent> Must provide a valid string for the eventName.");
              return;
            }
            if (!(0, core_1.isUserIdentifiable)(user) && !hasLoggedNoUserIdWarning) {
              hasLoggedNoUserIdWarning = true;
              console.warn("statsigSDK::logEvent> No valid userID was provided. Event will be logged but not associated with an identifiable user. This message is only logged once.");
            }
            user = normalizeUser(user, _this._options);
            if (shouldTrimParam(eventName, MAX_VALUE_SIZE)) {
              console.warn("statsigSDK::logEvent> eventName is too long, trimming to " + MAX_VALUE_SIZE + ".");
              eventName = eventName.substring(0, MAX_VALUE_SIZE);
            }
            if (typeof value === "string" && shouldTrimParam(value, MAX_VALUE_SIZE)) {
              console.warn("statsigSDK::logEvent> value is too long, trimming to " + MAX_VALUE_SIZE + ".");
              value = value.substring(0, MAX_VALUE_SIZE);
            }
            if (shouldTrimParam(metadata, MAX_OBJ_SIZE)) {
              console.warn("statsigSDK::logEvent> metadata is too big. Dropping the metadata.");
              metadata = { statsig_error: "Metadata length too large" };
            }
            var event = new LogEvent_1["default"](eventName);
            event.setUser(user);
            event.setValue(value);
            event.setMetadata(metadata);
            if (typeof time === "number") {
              event.setTime(time);
            }
            _this._logger.log(event);
          });
        };
        StatsigServer2.prototype.shutdown = function() {
          var _this = this;
          if (this._logger == null) {
            return;
          }
          this._errorBoundary.swallow(function() {
            _this._ready = false;
            _this._logger.shutdown();
            _this._fetcher.shutdown();
            _this._evaluator.shutdown();
          });
        };
        StatsigServer2.prototype.flush = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
              return [2, this._errorBoundary.capture(function() {
                if (_this._logger == null) {
                  return Promise.resolve();
                }
                return _this._logger.flush();
              }, function() {
                return Promise.resolve();
              })];
            });
          });
        };
        StatsigServer2.prototype.getClientInitializeResponse = function(user) {
          var _this = this;
          return this._errorBoundary.capture(function() {
            if (_this._ready !== true) {
              throw new Errors_1.StatsigUninitializedError();
            }
            var normalizedUser = user;
            if (user.statsigEnvironment == null) {
              normalizedUser = normalizeUser(user, _this._options);
            }
            return _this._evaluator.getClientInitializeResponse(normalizedUser);
          }, function() {
            return null;
          });
        };
        StatsigServer2.prototype.overrideGate = function(gateName, value, userID) {
          var _this = this;
          if (userID === void 0) {
            userID = "";
          }
          this._errorBoundary.swallow(function() {
            if (typeof value !== "boolean") {
              console.warn("statsigSDK> Attempted to override a gate with a non boolean value");
              return;
            }
            _this._evaluator.overrideGate(gateName, value, userID);
          });
        };
        StatsigServer2.prototype.overrideConfig = function(configName, value, userID) {
          var _this = this;
          if (userID === void 0) {
            userID = "";
          }
          this._errorBoundary.swallow(function() {
            if (typeof value !== "object") {
              console.warn("statsigSDK> Attempted to override a config with a non object value");
              return;
            }
            _this._evaluator.overrideConfig(configName, value, userID);
          });
        };
        StatsigServer2.prototype.overrideLayer = function(layerName, value, userID) {
          var _this = this;
          if (userID === void 0) {
            userID = "";
          }
          this._errorBoundary.swallow(function() {
            if (typeof value !== "object") {
              console.warn("statsigSDK> Attempted to override a layer with a non object value");
              return;
            }
            _this._evaluator.overrideLayer(layerName, value, userID);
          });
        };
        StatsigServer2.prototype.getFeatureGateList = function() {
          return this._evaluator.getFeatureGateList();
        };
        StatsigServer2.prototype.getExperimentList = function() {
          return this._evaluator.getExperimentList();
        };
        StatsigServer2.prototype.logGateExposureImpl = function(user, gateName, evaluation, exposureCause) {
          this._logger.logGateExposure(user, gateName, evaluation, exposureCause === ExposureCause.Manual);
        };
        StatsigServer2.prototype.checkGateImpl = function(inputUser, gateName, exposureLogging) {
          return __awaiter(this, void 0, void 0, function() {
            var _a, rejection, user, evaluation, res;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  _a = this._validateInputs(inputUser, gateName), rejection = _a.rejection, user = _a.normalizedUser;
                  if (rejection) {
                    return [2, rejection];
                  }
                  evaluation = this._evaluator.checkGate(user, gateName);
                  if (!evaluation.fetch_from_server)
                    return [3, 3];
                  return [4, this._fetcher.dispatch(this._options.api + "/check_gate", Object.assign({
                    user,
                    gateName,
                    statsigMetadata: (0, core_1.getStatsigMetadata)({
                      exposureLoggingDisabled: exposureLogging === ExposureLogging.Disabled
                    })
                  }), 5e3)];
                case 1:
                  res = _b.sent();
                  return [4, res.json()];
                case 2:
                  return [2, _b.sent()];
                case 3:
                  if (exposureLogging !== ExposureLogging.Disabled) {
                    this.logGateExposureImpl(user, gateName, evaluation, ExposureCause.Automatic);
                  }
                  return [2, Promise.resolve({ value: evaluation.value })];
              }
            });
          });
        };
        StatsigServer2.prototype.logConfigExposureImpl = function(user, configName, evaluation, exposureCause) {
          this._logger.logConfigExposure(user, configName, evaluation, exposureCause === ExposureCause.Manual);
        };
        StatsigServer2.prototype.getConfigImpl = function(inputUser, configName, exposureLogging) {
          var _a = this._validateInputs(inputUser, configName), rejection = _a.rejection, user = _a.normalizedUser;
          if (rejection) {
            return rejection;
          }
          var evaluation = this._evaluator.getConfig(user, configName);
          if (evaluation.fetch_from_server) {
            return this._fetchConfig(user, configName, exposureLogging);
          }
          var config = new DynamicConfig_1["default"](configName, evaluation.json_value, evaluation.rule_id, evaluation.group_name, evaluation.secondary_exposures, evaluation.rule_id !== "" ? this._makeOnDefaultValueFallbackFunction(user) : null);
          if (exposureLogging !== ExposureLogging.Disabled) {
            this.logConfigExposureImpl(user, configName, evaluation, ExposureCause.Automatic);
          }
          return Promise.resolve(config);
        };
        StatsigServer2.prototype.getLayerImpl = function(inputUser, layerName, exposureLogging) {
          return __awaiter(this, void 0, void 0, function() {
            var _a, rejection, user, ret, logFunc, layer, config, _b;
            var _this = this;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  _a = this._validateInputs(inputUser, layerName), rejection = _a.rejection, user = _a.normalizedUser;
                  if (rejection) {
                    return [2, rejection];
                  }
                  ret = this._evaluator.getLayer(user, layerName);
                  if (!ret.fetch_from_server) {
                    logFunc = function(layer2, parameterName) {
                      _this.logLayerParameterExposureImpl(user, layerName, parameterName, ret, ExposureCause.Automatic);
                    };
                    layer = new Layer_1["default"](layerName, ret === null || ret === void 0 ? void 0 : ret.json_value, ret === null || ret === void 0 ? void 0 : ret.rule_id, exposureLogging === ExposureLogging.Disabled ? null : logFunc);
                    return [2, Promise.resolve(layer)];
                  }
                  if (!ret.config_delegate)
                    return [3, 6];
                  _c.label = 1;
                case 1:
                  _c.trys.push([1, 4, , 6]);
                  return [4, this._fetchConfig(user, ret.config_delegate, exposureLogging)];
                case 2:
                  config = _c.sent();
                  return [4, Promise.resolve(new Layer_1["default"](layerName, config === null || config === void 0 ? void 0 : config.value, config === null || config === void 0 ? void 0 : config.getRuleID()))];
                case 3:
                  return [2, _c.sent()];
                case 4:
                  _b = _c.sent();
                  return [4, Promise.resolve(new Layer_1["default"](layerName))];
                case 5:
                  return [2, _c.sent()];
                case 6:
                  return [2, Promise.resolve(new Layer_1["default"](layerName))];
              }
            });
          });
        };
        StatsigServer2.prototype.logLayerParameterExposureImpl = function(user, layerName, parameterName, evaluation, exposureCause) {
          if (this._logger == null) {
            return;
          }
          this._logger.logLayerExposure(user, layerName, parameterName, evaluation, exposureCause === ExposureCause.Manual);
        };
        StatsigServer2.prototype._validateInputs = function(user, configName) {
          var result = { rejection: null, normalizedUser: { userID: "" } };
          if (this._ready !== true) {
            result.rejection = Promise.reject(new Errors_1.StatsigUninitializedError());
          } else if (typeof configName !== "string" || configName.length === 0) {
            result.rejection = Promise.reject(new Errors_1.StatsigInvalidArgumentError("Lookup key must be a non-empty string"));
          } else if (!(0, core_1.isUserIdentifiable)(user)) {
            result.rejection = Promise.reject(new Errors_1.StatsigInvalidArgumentError("Must pass a valid user with a userID or customID for the server SDK to work. See https://docs.statsig.com/messages/serverRequiredUserID/ for more details."));
          } else {
            result.normalizedUser = normalizeUser(user, this._options);
          }
          var resetError = this._evaluator.resetSyncTimerIfExited();
          if (resetError != null) {
            this._errorBoundary.logError(resetError, "reset_sync_time");
          }
          return result;
        };
        StatsigServer2.prototype._fetchConfig = function(user, name, exposureLogging) {
          var _this = this;
          return this._fetcher.dispatch(this._options.api + "/get_config", {
            user,
            configName: name,
            statsigMetadata: (0, core_1.getStatsigMetadata)({
              exposureLoggingDisabled: exposureLogging === ExposureLogging.Disabled
            })
          }, 5e3).then(function(res) {
            return res.json();
          }).then(function(resJSON) {
            return Promise.resolve(new DynamicConfig_1["default"](name, resJSON.value, resJSON.rule_id, resJSON.groupName, [], _this._makeOnDefaultValueFallbackFunction(user)));
          })["catch"](function() {
            return Promise.resolve(new DynamicConfig_1["default"](name));
          });
        };
        StatsigServer2.prototype._makeOnDefaultValueFallbackFunction = function(user) {
          var _this = this;
          if (!this._ready) {
            return null;
          }
          return function(config, parameter, defaultValueType, valueType) {
            _this._logger.logConfigDefaultValueFallback(user, "Parameter ".concat(parameter, " is a value of type ").concat(valueType, ".\n      Returning requested defaultValue type ").concat(defaultValueType), {
              name: config.name,
              ruleID: config.getRuleID(),
              parameter,
              defaultValueType,
              valueType
            });
          };
        };
        return StatsigServer2;
      }()
    );
    exports["default"] = StatsigServer;
    function shouldTrimParam(param, size) {
      if (param == null)
        return false;
      if (typeof param === "string")
        return param.length > size;
      if (typeof param === "object") {
        return JSON.stringify(param).length > size;
      }
      if (typeof param === "number")
        return param.toString().length > size;
      return false;
    }
    function normalizeUser(user, options) {
      user = trimUserObjIfNeeded(user);
      user = JSON.parse(JSON.stringify(user));
      if ((options === null || options === void 0 ? void 0 : options.environment) != null) {
        user["statsigEnvironment"] = options === null || options === void 0 ? void 0 : options.environment;
      }
      return user;
    }
    function trimUserObjIfNeeded(user) {
      var _a;
      if (user == null)
        return { customIDs: {} };
      if (user.userID != null && shouldTrimParam(user.userID, MAX_VALUE_SIZE)) {
        console.warn("statsigSDK> User ID is too large, trimming to " + MAX_VALUE_SIZE);
        user.userID = user.userID.toString().substring(0, MAX_VALUE_SIZE);
      }
      if (shouldTrimParam(user, MAX_USER_SIZE)) {
        user.custom = { statsig_error: "User object length too large" };
        if (shouldTrimParam(user, MAX_USER_SIZE)) {
          console.warn("statsigSDK> User object is too large, only keeping the user ID.");
          user = { userID: user.userID, customIDs: (_a = user.customIDs) !== null && _a !== void 0 ? _a : {} };
        } else {
          console.warn("statsigSDK> User object is too large, dropping the custom property.");
        }
      }
      return user;
    }
  }
});

// node_modules/statsig-node/dist/index.js
var require_dist = __commonJS({
  "node_modules/statsig-node/dist/index.js"(exports, module2) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    exports.__esModule = true;
    exports.Statsig = exports.Layer = exports.DynamicConfig = void 0;
    var DynamicConfig_1 = __importDefault(require_DynamicConfig());
    exports.DynamicConfig = DynamicConfig_1["default"];
    var Errors_1 = require_Errors();
    var Layer_1 = __importDefault(require_Layer());
    exports.Layer = Layer_1["default"];
    var StatsigInstanceUtils_1 = __importDefault(require_StatsigInstanceUtils());
    var StatsigServer_1 = __importDefault(require_StatsigServer());
    exports.Statsig = {
      // These need to be exported, and we currently export a top level Statsig object
      // So in order to not make a breaking change, they must be exported as members of
      // that top level object
      DynamicConfig: DynamicConfig_1["default"],
      Layer: Layer_1["default"],
      /**
       * Initializes the statsig server SDK.
       * This must be called before checking gates/configs or logging events.
       *
       * @param {string} secretKey - The secret key for this project from the statsig console. Secret keys should be kept secure on the server side, and not used for client-side integrations
       * @param {?StatsigOptions} [options={}] - manual sdk configuration for advanced setup
       * @returns {Promise<void>} - a promise which rejects only if you fail to provide a proper SDK Key
       * @throws Error if a Server Secret Key is not provided
       */
      initialize: function(secretKey, options) {
        var _a;
        if (options === void 0) {
          options = {};
        }
        var inst = (_a = StatsigInstanceUtils_1["default"].getInstance()) !== null && _a !== void 0 ? _a : new StatsigServer_1["default"](secretKey, options);
        if (StatsigInstanceUtils_1["default"].getInstance() == null) {
          StatsigInstanceUtils_1["default"].setInstance(inst);
        }
        return inst.initializeAsync();
      },
      /**
       * Gets the boolean result of a gate, evaluated against the given user.
       * An exposure event will automatically be logged for the gate.
       *
       * @param {StatsigUser} user - the user to check this gate value for
       * @param {string} gateName - the name of the gate to check
       * @returns {Promise<boolean>} - The value of the gate for the user.  Gates are off (return false) by default
       * @throws Error if initialize() was not called first
       * @throws Error if the gateName is not provided or not a non-empty string
       */
      checkGate: function(user, gateName) {
        return this._enforceServer().checkGate(user, gateName);
      },
      /**
       * Gets the boolean result of a gate, evaluated against the given user.
       * No exposure event will be logged.
       *
       * @param {StatsigUser} user - the user to check this gate value for
       * @param {string} gateName - the name of the gate to check
       * @returns {Promise<boolean>} - The value of the gate for the user.  Gates are off (return false) by default
       * @throws Error if initialize() was not called first
       * @throws Error if the gateName is not provided or not a non-empty string
       */
      checkGateWithExposureLoggingDisabled: function(user, gateName) {
        return this._enforceServer().checkGateWithExposureLoggingDisabled(user, gateName);
      },
      /**
       * Logs an exposure event for the gate
       *
       * @param {StatsigUser} user - the user to log the exposure against
       * @param {string} gateName - the name of the gate to expose
       */
      manuallyLogGateExposure: function(user, gateName) {
        return this._enforceServer().logGateExposure(user, gateName);
      },
      /**
       * Get the values of a dynamic config, evaluated against the given user.
       * An exposure event will automatically be logged for the dynamic config.
       *
       * @param {StatsigUser} user - the user to evaluate for the dyamic config
       * @param {string} configName - the name of the dynamic config to get
       * @returns {Promise<DynamicConfig>} - the config for the user
       * @throws Error if initialize() was not called first
       * @throws Error if the configName is not provided or not a non-empty string
       */
      getConfig: function(user, configName) {
        return this._enforceServer().getConfig(user, configName);
      },
      /**
       * Get the values of a dynamic config, evaluated against the given user.
       * No exposure event will be logged.
       *
       * @param {StatsigUser} user - the user to evaluate for the dyamic config
       * @param {string} configName - the name of the dynamic config to get
       * @returns {Promise<DynamicConfig>} - the config for the user
       * @throws Error if initialize() was not called first
       * @throws Error if the configName is not provided or not a non-empty string
       */
      getConfigWithExposureLoggingDisabled: function(user, configName) {
        return this._enforceServer().getConfigWithExposureLoggingDisabled(user, configName);
      },
      /**
       * Logs an exposure event for the dynamic config
       *
       * @param {StatsigUser} user - the user to log the exposure against
       * @param {string} configName - the name of the dynamic config to expose
       */
      manuallyLogConfigExposure: function(user, configName) {
        return this._enforceServer().logConfigExposure(user, configName);
      },
      /**
       * Get the values of an experiment, evaluated against the given user.
       * An exposure event will automatically be logged for the experiment.
       *
       * @param {StatsigUser} user - the user to evaluate for the experiment
       * @param {string} experimentName - the name of the experiment to get
       * @returns {Promise<DynamicConfig>} - the experiment for the user, represented by a Dynamic Config object
       * @throws Error if initialize() was not called first
       * @throws Error if the experimentName is not provided or not a non-empty string
       */
      getExperiment: function(user, experimentName) {
        return this._enforceServer().getExperiment(user, experimentName);
      },
      /**
       * Get the values of an experiment, evaluated against the given user.
       * No exposure event will be logged.
       *
       * @param {StatsigUser} user - the user to evaluate for the experiment
       * @param {string} experimentName - the name of the experiment to get
       * @returns {Promise<DynamicConfig>} - the experiment for the user, represented by a Dynamic Config object
       * @throws Error if initialize() was not called first
       * @throws Error if the experimentName is not provided or not a non-empty string
       */
      getExperimentWithExposureLoggingDisabled: function(user, experimentName) {
        return this._enforceServer().getExperimentWithExposureLoggingDisabled(user, experimentName);
      },
      /**
       * Logs an exposure event for the experiment
       *
       * @param {StatsigUser} user - the user to log the exposure against
       * @param {string} experimentName - the name of the experiment to expose
       */
      manuallyLogExperimentExposure: function(user, experimentName) {
        return this._enforceServer().logExperimentExposure(user, experimentName);
      },
      /**
       * Get the values of a layer, evaluated against the given user.
       * Exposure events will be fired when get or getValue is called on the resulting Layer class.
       *
       * @param {StatsigUser} user - the user to evaluate for the layer
       * @param {string} layerName - the name of the layer to get
       * @returns {Promise<Layer>} - the layer for the user, represented by a Layer
       * @throws Error if initialize() was not called first
       * @throws Error if the layerName is not provided or not a non-empty string
       */
      getLayer: function(user, layerName) {
        return this._enforceServer().getLayer(user, layerName);
      },
      /**
       * Get the values of a layer, evaluated against the given user.
       * No exposure events will be logged from the resulting Layer class.
       *
       * @param {StatsigUser} user - the user to evaluate for the layer
       * @param {string} layerName - the name of the layer to get
       * @returns {Promise<Layer>} - the layer for the user, represented by a Layer
       * @throws Error if initialize() was not called first
       * @throws Error if the layerName is not provided or not a non-empty string
       */
      getLayerWithExposureLoggingDisabled: function(user, layerName) {
        return this._enforceServer().getLayerWithExposureLoggingDisabled(user, layerName);
      },
      /**
       * Logs an exposure event for the parameter in the given layer
       *
       * @param {StatsigUser} user - the user to log the exposure against
       * @param {string} layerName - the name of the layer
       * @param {string} parameterName - the name of the parameter in the layer
       */
      manuallyLogLayerParameterExposure: function(user, layerName, parameterName) {
        this._enforceServer().logLayerParameterExposure(user, layerName, parameterName);
      },
      /**
       * Log an event for data analysis and alerting or to measure the impact of an experiment
       *
       * @param {StatsigUser} user - the user associated with this event
       * @param {string} eventName - the name of the event (name = Purchase)
       * @param {string | number | null} value - the value associated with the event (value = 10)
       * @param {Record<string, string> | null} metadata - other attributes associated with this event (metadata = {item_name: 'banana', currency: 'USD'})
       * @throws Error if initialize() was not called first
       */
      logEvent: function(user, eventName, value, metadata) {
        if (value === void 0) {
          value = null;
        }
        if (metadata === void 0) {
          metadata = null;
        }
        this._enforceServer().logEvent(user, eventName, value, metadata);
      },
      /**
       * Log an event for data analysis and alerting or to measure the impact of an experiment
       *
       * @param {LogEventObject} eventObject - an object containing the event data
       */
      logEventObject: function(eventObject) {
        this._enforceServer().logEventObject(eventObject);
      },
      /**
       * Informs the statsig SDK that the client is closing or shutting down
       * so the SDK can clean up internal state
       */
      shutdown: function() {
        this._enforceServer().shutdown();
      },
      /**
       * Returns the initialize values for the given user
       * Can be used to bootstrap a client SDK with up to date values
       * @param user the user to evaluate configurations for
       */
      getClientInitializeResponse: function(user) {
        return this._enforceServer().getClientInitializeResponse(user);
      },
      /**
       * Overrides the given gate with the provided value
       * If no userID is provided, it will override for all users
       * If a userID is provided, it will override the gate with the given value for that user only
       */
      overrideGate: function(gateName, value, userID) {
        if (userID === void 0) {
          userID = "";
        }
        this._enforceServer().overrideGate(gateName, value, userID);
      },
      /**
       * Overrides the given config or experiment with the provided value
       * If no userID is provided, it will override for all users
       * If a userID is provided, it will override the config/experiment with the given value for that user only
       */
      overrideConfig: function(configName, value, userID) {
        if (userID === void 0) {
          userID = "";
        }
        this._enforceServer().overrideConfig(configName, value, userID);
      },
      /**
       * Overrides the given layer with the provided value
       * If no userID is provided, it will override for all users
       * If a userID is provided, it will override the layer with the given value for that user only
       */
      overrideLayer: function(layerName, value, userID) {
        if (userID === void 0) {
          userID = "";
        }
        this._enforceServer().overrideLayer(layerName, value, userID);
      },
      /**
       * Flushes all the events that are currently in the queue to Statsig.
       */
      flush: function() {
        var inst = StatsigInstanceUtils_1["default"].getInstance();
        if (inst == null) {
          return Promise.resolve();
        }
        return inst.flush();
      },
      /**
       * Gets all Experiment names
       *
       * @returns {string[]}
       */
      getExperimentList: function() {
        return this._enforceServer().getExperimentList();
      },
      /**
       * Gets all Feature Gate names
       *
       * @returns {string[]}
       */
      getFeatureGateList: function() {
        return this._enforceServer().getFeatureGateList();
      },
      _enforceServer: function() {
        var instance = StatsigInstanceUtils_1["default"].getInstance();
        if (instance == null) {
          throw new Errors_1.StatsigUninitializedError();
        }
        return instance;
      }
    };
    exports["default"] = exports.Statsig;
    module2.exports = __assign({ "default": exports.Statsig }, exports.Statsig);
  }
});

// index.js
var import_statsig_node = __toESM(require_dist());
async function run() {
  await import_statsig_node.default.initialize(
    "secret-J87RrLgvoZBeH1FOL3G5mjT4zWf7y349Zh8KdMggojv"
  );
  const user = {
    userID: "test123"
  };
  const gateValue = await import_statsig_node.default.checkGate(user, "always_pass");
  console.log(gateValue);
}
run();
